import{VectorOps}from"../math";import{FeatureType}from"./feature";export class PointProjection{constructor(t,e){this.point=t,this.isInside=e}static fromRaw(t){if(!t)return null;const e=new PointProjection(VectorOps.fromRaw(t.point()),t.isInside());return t.free(),e}}export class PointColliderProjection{constructor(t,e,r,o,i){this.featureType=FeatureType.Unknown,this.featureId=void 0,this.collider=t,this.point=e,this.isInside=r,void 0!==i&&(this.featureId=i),void 0!==o&&(this.featureType=o)}static fromRaw(t,e){if(!e)return null;const r=new PointColliderProjection(t.get(e.colliderHandle()),VectorOps.fromRaw(e.point()),e.isInside(),e.featureType(),e.featureId());return e.free(),r}}