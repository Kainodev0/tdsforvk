import{RotationOps,VectorOps}from"../math";import{CoefficientCombineRule}from"../dynamics";import{ActiveHooks,ActiveEvents}from"../pipeline";import{Shape,Cuboid,Ball,Capsule,TriMesh,Polyline,Heightfield,Segment,Triangle,RoundTriangle,RoundCuboid,Cylinder,RoundCylinder,Cone,RoundCone,ConvexPolyhedron,RoundConvexPolyhedron}from"./shape";import{RayIntersection}from"./ray";import{PointProjection}from"./point";import{ColliderShapeCastHit,ShapeCastHit}from"./toi";import{ShapeContact}from"./contact";export var ActiveCollisionTypes;!function(e){e[e.DYNAMIC_DYNAMIC=1]="DYNAMIC_DYNAMIC",e[e.DYNAMIC_KINEMATIC=12]="DYNAMIC_KINEMATIC",e[e.DYNAMIC_FIXED=2]="DYNAMIC_FIXED",e[e.KINEMATIC_KINEMATIC=52224]="KINEMATIC_KINEMATIC",e[e.KINEMATIC_FIXED=8704]="KINEMATIC_FIXED",e[e.FIXED_FIXED=32]="FIXED_FIXED",e[e.DEFAULT=15]="DEFAULT",e[e.ALL=60943]="ALL"}(ActiveCollisionTypes||(ActiveCollisionTypes={}));export class Collider{constructor(e,t,i,s){this.colliderSet=e,this.handle=t,this._parent=i,this._shape=s}finalizeDeserialization(e){null!=this.handle&&(this._parent=e.get(this.colliderSet.raw.coParent(this.handle)))}ensureShapeIsCached(){this._shape||(this._shape=Shape.fromRaw(this.colliderSet.raw,this.handle))}get shape(){return this.ensureShapeIsCached(),this._shape}isValid(){return this.colliderSet.raw.contains(this.handle)}translation(){return VectorOps.fromRaw(this.colliderSet.raw.coTranslation(this.handle))}rotation(){return RotationOps.fromRaw(this.colliderSet.raw.coRotation(this.handle))}isSensor(){return this.colliderSet.raw.coIsSensor(this.handle)}setSensor(e){this.colliderSet.raw.coSetSensor(this.handle,e)}setShape(e){let t=e.intoRaw();this.colliderSet.raw.coSetShape(this.handle,t),t.free(),this._shape=e}setEnabled(e){this.colliderSet.raw.coSetEnabled(this.handle,e)}isEnabled(){return this.colliderSet.raw.coIsEnabled(this.handle)}setRestitution(e){this.colliderSet.raw.coSetRestitution(this.handle,e)}setFriction(e){this.colliderSet.raw.coSetFriction(this.handle,e)}frictionCombineRule(){return this.colliderSet.raw.coFrictionCombineRule(this.handle)}setFrictionCombineRule(e){this.colliderSet.raw.coSetFrictionCombineRule(this.handle,e)}restitutionCombineRule(){return this.colliderSet.raw.coRestitutionCombineRule(this.handle)}setRestitutionCombineRule(e){this.colliderSet.raw.coSetRestitutionCombineRule(this.handle,e)}setCollisionGroups(e){this.colliderSet.raw.coSetCollisionGroups(this.handle,e)}setSolverGroups(e){this.colliderSet.raw.coSetSolverGroups(this.handle,e)}contactSkin(){return this.colliderSet.raw.coContactSkin(this.handle)}setContactSkin(e){return this.colliderSet.raw.coSetContactSkin(this.handle,e)}activeHooks(){return this.colliderSet.raw.coActiveHooks(this.handle)}setActiveHooks(e){this.colliderSet.raw.coSetActiveHooks(this.handle,e)}activeEvents(){return this.colliderSet.raw.coActiveEvents(this.handle)}setActiveEvents(e){this.colliderSet.raw.coSetActiveEvents(this.handle,e)}activeCollisionTypes(){return this.colliderSet.raw.coActiveCollisionTypes(this.handle)}setContactForceEventThreshold(e){return this.colliderSet.raw.coSetContactForceEventThreshold(this.handle,e)}contactForceEventThreshold(){return this.colliderSet.raw.coContactForceEventThreshold(this.handle)}setActiveCollisionTypes(e){this.colliderSet.raw.coSetActiveCollisionTypes(this.handle,e)}setDensity(e){this.colliderSet.raw.coSetDensity(this.handle,e)}setMass(e){this.colliderSet.raw.coSetMass(this.handle,e)}setMassProperties(e,t,i,s){let o=VectorOps.intoRaw(t),r=VectorOps.intoRaw(i),n=RotationOps.intoRaw(s);this.colliderSet.raw.coSetMassProperties(this.handle,e,o,r,n),o.free(),r.free(),n.free()}setTranslation(e){this.colliderSet.raw.coSetTranslation(this.handle,e.x,e.y,e.z)}setTranslationWrtParent(e){this.colliderSet.raw.coSetTranslationWrtParent(this.handle,e.x,e.y,e.z)}setRotation(e){this.colliderSet.raw.coSetRotation(this.handle,e.x,e.y,e.z,e.w)}setRotationWrtParent(e){this.colliderSet.raw.coSetRotationWrtParent(this.handle,e.x,e.y,e.z,e.w)}shapeType(){return this.colliderSet.raw.coShapeType(this.handle)}halfExtents(){return VectorOps.fromRaw(this.colliderSet.raw.coHalfExtents(this.handle))}setHalfExtents(e){const t=VectorOps.intoRaw(e);this.colliderSet.raw.coSetHalfExtents(this.handle,t)}radius(){return this.colliderSet.raw.coRadius(this.handle)}setRadius(e){this.colliderSet.raw.coSetRadius(this.handle,e)}roundRadius(){return this.colliderSet.raw.coRoundRadius(this.handle)}setRoundRadius(e){this.colliderSet.raw.coSetRoundRadius(this.handle,e)}halfHeight(){return this.colliderSet.raw.coHalfHeight(this.handle)}setHalfHeight(e){this.colliderSet.raw.coSetHalfHeight(this.handle,e)}vertices(){return this.colliderSet.raw.coVertices(this.handle)}indices(){return this.colliderSet.raw.coIndices(this.handle)}heightfieldHeights(){return this.colliderSet.raw.coHeightfieldHeights(this.handle)}heightfieldScale(){let e=this.colliderSet.raw.coHeightfieldScale(this.handle);return VectorOps.fromRaw(e)}heightfieldNRows(){return this.colliderSet.raw.coHeightfieldNRows(this.handle)}heightfieldNCols(){return this.colliderSet.raw.coHeightfieldNCols(this.handle)}parent(){return this._parent}friction(){return this.colliderSet.raw.coFriction(this.handle)}restitution(){return this.colliderSet.raw.coRestitution(this.handle)}density(){return this.colliderSet.raw.coDensity(this.handle)}mass(){return this.colliderSet.raw.coMass(this.handle)}volume(){return this.colliderSet.raw.coVolume(this.handle)}collisionGroups(){return this.colliderSet.raw.coCollisionGroups(this.handle)}solverGroups(){return this.colliderSet.raw.coSolverGroups(this.handle)}containsPoint(e){let t=VectorOps.intoRaw(e),i=this.colliderSet.raw.coContainsPoint(this.handle,t);return t.free(),i}projectPoint(e,t){let i=VectorOps.intoRaw(e),s=PointProjection.fromRaw(this.colliderSet.raw.coProjectPoint(this.handle,i,t));return i.free(),s}intersectsRay(e,t){let i=VectorOps.intoRaw(e.origin),s=VectorOps.intoRaw(e.dir),o=this.colliderSet.raw.coIntersectsRay(this.handle,i,s,t);return i.free(),s.free(),o}castShape(e,t,i,s,o,r,n,l){let a=VectorOps.intoRaw(e),h=VectorOps.intoRaw(i),c=RotationOps.intoRaw(s),d=VectorOps.intoRaw(o),u=t.intoRaw(),p=ShapeCastHit.fromRaw(this.colliderSet,this.colliderSet.raw.coCastShape(this.handle,a,u,h,c,d,r,n,l));return a.free(),h.free(),c.free(),d.free(),u.free(),p}castCollider(e,t,i,s,o,r){let n=VectorOps.intoRaw(e),l=VectorOps.intoRaw(i),a=ColliderShapeCastHit.fromRaw(this.colliderSet,this.colliderSet.raw.coCastCollider(this.handle,n,t.handle,l,s,o,r));return n.free(),l.free(),a}intersectsShape(e,t,i){let s=VectorOps.intoRaw(t),o=RotationOps.intoRaw(i),r=e.intoRaw(),n=this.colliderSet.raw.coIntersectsShape(this.handle,r,s,o);return s.free(),o.free(),r.free(),n}contactShape(e,t,i,s){let o=VectorOps.intoRaw(t),r=RotationOps.intoRaw(i),n=e.intoRaw(),l=ShapeContact.fromRaw(this.colliderSet.raw.coContactShape(this.handle,n,o,r,s));return o.free(),r.free(),n.free(),l}contactCollider(e,t){return ShapeContact.fromRaw(this.colliderSet.raw.coContactCollider(this.handle,e.handle,t))}castRay(e,t,i){let s=VectorOps.intoRaw(e.origin),o=VectorOps.intoRaw(e.dir),r=this.colliderSet.raw.coCastRay(this.handle,s,o,t,i);return s.free(),o.free(),r}castRayAndGetNormal(e,t,i){let s=VectorOps.intoRaw(e.origin),o=VectorOps.intoRaw(e.dir),r=RayIntersection.fromRaw(this.colliderSet.raw.coCastRayAndGetNormal(this.handle,s,o,t,i));return s.free(),o.free(),r}}export var MassPropsMode;!function(e){e[e.Density=0]="Density",e[e.Mass=1]="Mass",e[e.MassProps=2]="MassProps"}(MassPropsMode||(MassPropsMode={}));export class ColliderDesc{constructor(e){this.enabled=!0,this.shape=e,this.massPropsMode=MassPropsMode.Density,this.density=1,this.friction=.5,this.restitution=0,this.rotation=RotationOps.identity(),this.translation=VectorOps.zeros(),this.isSensor=!1,this.collisionGroups=4294967295,this.solverGroups=4294967295,this.frictionCombineRule=CoefficientCombineRule.Average,this.restitutionCombineRule=CoefficientCombineRule.Average,this.activeCollisionTypes=ActiveCollisionTypes.DEFAULT,this.activeEvents=ActiveEvents.NONE,this.activeHooks=ActiveHooks.NONE,this.mass=0,this.centerOfMass=VectorOps.zeros(),this.contactForceEventThreshold=0,this.contactSkin=0,this.principalAngularInertia=VectorOps.zeros(),this.angularInertiaLocalFrame=RotationOps.identity()}static ball(e){const t=new Ball(e);return new ColliderDesc(t)}static capsule(e,t){const i=new Capsule(e,t);return new ColliderDesc(i)}static segment(e,t){const i=new Segment(e,t);return new ColliderDesc(i)}static triangle(e,t,i){const s=new Triangle(e,t,i);return new ColliderDesc(s)}static roundTriangle(e,t,i,s){const o=new RoundTriangle(e,t,i,s);return new ColliderDesc(o)}static polyline(e,t){const i=new Polyline(e,t);return new ColliderDesc(i)}static trimesh(e,t,i){const s=new TriMesh(e,t,i);return new ColliderDesc(s)}static cuboid(e,t,i){const s=new Cuboid(e,t,i);return new ColliderDesc(s)}static roundCuboid(e,t,i,s){const o=new RoundCuboid(e,t,i,s);return new ColliderDesc(o)}static heightfield(e,t,i,s,o){const r=new Heightfield(e,t,i,s,o);return new ColliderDesc(r)}static cylinder(e,t){const i=new Cylinder(e,t);return new ColliderDesc(i)}static roundCylinder(e,t,i){const s=new RoundCylinder(e,t,i);return new ColliderDesc(s)}static cone(e,t){const i=new Cone(e,t);return new ColliderDesc(i)}static roundCone(e,t,i){const s=new RoundCone(e,t,i);return new ColliderDesc(s)}static convexHull(e){const t=new ConvexPolyhedron(e,null);return new ColliderDesc(t)}static convexMesh(e,t){const i=new ConvexPolyhedron(e,t);return new ColliderDesc(i)}static roundConvexHull(e,t){const i=new RoundConvexPolyhedron(e,null,t);return new ColliderDesc(i)}static roundConvexMesh(e,t,i){const s=new RoundConvexPolyhedron(e,t,i);return new ColliderDesc(s)}setTranslation(e,t,i){if("number"!=typeof e||"number"!=typeof t||"number"!=typeof i)throw TypeError("The translation components must be numbers.");return this.translation={x:e,y:t,z:i},this}setRotation(e){return RotationOps.copy(this.rotation,e),this}setSensor(e){return this.isSensor=e,this}setEnabled(e){return this.enabled=e,this}setContactSkin(e){return this.contactSkin=e,this}setDensity(e){return this.massPropsMode=MassPropsMode.Density,this.density=e,this}setMass(e){return this.massPropsMode=MassPropsMode.Mass,this.mass=e,this}setMassProperties(e,t,i,s){return this.massPropsMode=MassPropsMode.MassProps,this.mass=e,VectorOps.copy(this.centerOfMass,t),VectorOps.copy(this.principalAngularInertia,i),RotationOps.copy(this.angularInertiaLocalFrame,s),this}setRestitution(e){return this.restitution=e,this}setFriction(e){return this.friction=e,this}setFrictionCombineRule(e){return this.frictionCombineRule=e,this}setRestitutionCombineRule(e){return this.restitutionCombineRule=e,this}setCollisionGroups(e){return this.collisionGroups=e,this}setSolverGroups(e){return this.solverGroups=e,this}setActiveHooks(e){return this.activeHooks=e,this}setActiveEvents(e){return this.activeEvents=e,this}setActiveCollisionTypes(e){return this.activeCollisionTypes=e,this}setContactForceEventThreshold(e){return this.contactForceEventThreshold=e,this}}