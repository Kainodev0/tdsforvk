import{RawNarrowPhase}from"../raw";import{VectorOps}from"../math";export class NarrowPhase{free(){this.raw&&this.raw.free(),this.raw=void 0}constructor(t){this.raw=t||new RawNarrowPhase,this.tempManifold=new TempContactManifold(null)}contactPairsWith(t,r){this.raw.contact_pairs_with(t,r)}intersectionPairsWith(t,r){this.raw.intersection_pairs_with(t,r)}contactPair(t,r,a){const o=this.raw.contact_pair(t,r);if(o){const r=o.collider1()!=t;let n;for(n=0;n<o.numContactManifolds();++n)this.tempManifold.raw=o.contactManifold(n),this.tempManifold.raw&&a(this.tempManifold,r),this.tempManifold.free();o.free()}}intersectionPair(t,r){return this.raw.intersection_pair(t,r)}}export class TempContactManifold{free(){this.raw&&this.raw.free(),this.raw=void 0}constructor(t){this.raw=t}normal(){return VectorOps.fromRaw(this.raw.normal())}localNormal1(){return VectorOps.fromRaw(this.raw.local_n1())}localNormal2(){return VectorOps.fromRaw(this.raw.local_n2())}subshape1(){return this.raw.subshape1()}subshape2(){return this.raw.subshape2()}numContacts(){return this.raw.num_contacts()}localContactPoint1(t){return VectorOps.fromRaw(this.raw.contact_local_p1(t))}localContactPoint2(t){return VectorOps.fromRaw(this.raw.contact_local_p2(t))}contactDist(t){return this.raw.contact_dist(t)}contactFid1(t){return this.raw.contact_fid1(t)}contactFid2(t){return this.raw.contact_fid2(t)}contactImpulse(t){return this.raw.contact_impulse(t)}contactTangentImpulseX(t){return this.raw.contact_tangent_impulse_x(t)}contactTangentImpulseY(t){return this.raw.contact_tangent_impulse_y(t)}numSolverContacts(){return this.raw.num_solver_contacts()}solverContactPoint(t){return VectorOps.fromRaw(this.raw.solver_contact_point(t))}solverContactDist(t){return this.raw.solver_contact_dist(t)}solverContactFriction(t){return this.raw.solver_contact_friction(t)}solverContactRestitution(t){return this.raw.solver_contact_restitution(t)}solverContactTangentVelocity(t){return VectorOps.fromRaw(this.raw.solver_contact_tangent_velocity(t))}}