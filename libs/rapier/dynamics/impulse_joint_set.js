import{RawImpulseJointSet}from"../raw";import{Coarena}from"../coarena";import{ImpulseJoint}from"./impulse_joint";export class ImpulseJointSet{free(){this.raw&&this.raw.free(),this.raw=void 0,this.map&&this.map.clear(),this.map=void 0}constructor(t){this.raw=t||new RawImpulseJointSet,this.map=new Coarena,t&&t.forEachJointHandle((e=>{this.map.set(e,ImpulseJoint.newTyped(t,null,e))}))}finalizeDeserialization(t){this.map.forEach((e=>e.finalizeDeserialization(t)))}createJoint(t,e,i,a,r){const o=e.intoRaw(),n=this.raw.createJoint(o,i,a,r);o.free();let s=ImpulseJoint.newTyped(this.raw,t,n);return this.map.set(n,s),s}remove(t,e){this.raw.remove(t,e),this.unmap(t)}forEachJointHandleAttachedToRigidBody(t,e){this.raw.forEachJointAttachedToRigidBody(t,e)}unmap(t){this.map.delete(t)}len(){return this.map.len()}contains(t){return null!=this.get(t)}get(t){return this.map.get(t)}forEach(t){this.map.forEach(t)}getAll(){return this.map.getAll()}}