import{RawQueryPipeline}from"../raw";import{PointColliderProjection,RayColliderIntersection,RayColliderHit,ColliderShapeCastHit}from"../geometry";import{RotationOps,VectorOps}from"../math";export var QueryFilterFlags;!function(e){e[e.EXCLUDE_FIXED=1]="EXCLUDE_FIXED",e[e.EXCLUDE_KINEMATIC=2]="EXCLUDE_KINEMATIC",e[e.EXCLUDE_DYNAMIC=4]="EXCLUDE_DYNAMIC",e[e.EXCLUDE_SENSORS=8]="EXCLUDE_SENSORS",e[e.EXCLUDE_SOLIDS=16]="EXCLUDE_SOLIDS",e[e.ONLY_DYNAMIC=3]="ONLY_DYNAMIC",e[e.ONLY_KINEMATIC=5]="ONLY_KINEMATIC",e[e.ONLY_FIXED=6]="ONLY_FIXED"}(QueryFilterFlags||(QueryFilterFlags={}));export class QueryPipeline{free(){this.raw&&this.raw.free(),this.raw=void 0}constructor(e){this.raw=e||new RawQueryPipeline}update(e){this.raw.update(e.raw)}castRay(e,t,r,i,a,o,n,s,w,c){let l=VectorOps.intoRaw(r.origin),R=VectorOps.intoRaw(r.dir),p=RayColliderHit.fromRaw(t,this.raw.castRay(e.raw,t.raw,l,R,i,a,o,n,s,w,c));return l.free(),R.free(),p}castRayAndGetNormal(e,t,r,i,a,o,n,s,w,c){let l=VectorOps.intoRaw(r.origin),R=VectorOps.intoRaw(r.dir),p=RayColliderIntersection.fromRaw(t,this.raw.castRayAndGetNormal(e.raw,t.raw,l,R,i,a,o,n,s,w,c));return l.free(),R.free(),p}intersectionsWithRay(e,t,r,i,a,o,n,s,w,c,l){let R=VectorOps.intoRaw(r.origin),p=VectorOps.intoRaw(r.dir);this.raw.intersectionsWithRay(e.raw,t.raw,R,p,i,a,(e=>o(RayColliderIntersection.fromRaw(t,e))),n,s,w,c,l),R.free(),p.free()}intersectionWithShape(e,t,r,i,a,o,n,s,w,c){let l=VectorOps.intoRaw(r),R=RotationOps.intoRaw(i),p=a.intoRaw(),h=this.raw.intersectionWithShape(e.raw,t.raw,l,R,p,o,n,s,w,c);return l.free(),R.free(),p.free(),h}projectPoint(e,t,r,i,a,o,n,s,w){let c=VectorOps.intoRaw(r),l=PointColliderProjection.fromRaw(t,this.raw.projectPoint(e.raw,t.raw,c,i,a,o,n,s,w));return c.free(),l}projectPointAndGetFeature(e,t,r,i,a,o,n,s){let w=VectorOps.intoRaw(r),c=PointColliderProjection.fromRaw(t,this.raw.projectPointAndGetFeature(e.raw,t.raw,w,i,a,o,n,s));return w.free(),c}intersectionsWithPoint(e,t,r,i,a,o,n,s,w){let c=VectorOps.intoRaw(r);this.raw.intersectionsWithPoint(e.raw,t.raw,c,i,a,o,n,s,w),c.free()}castShape(e,t,r,i,a,o,n,s,w,c,l,R,p,h){let f=VectorOps.intoRaw(r),C=RotationOps.intoRaw(i),E=VectorOps.intoRaw(a),O=o.intoRaw(),I=ColliderShapeCastHit.fromRaw(t,this.raw.castShape(e.raw,t.raw,f,C,E,O,n,s,w,c,l,R,p,h));return f.free(),C.free(),E.free(),O.free(),I}intersectionsWithShape(e,t,r,i,a,o,n,s,w,c,l){let R=VectorOps.intoRaw(r),p=RotationOps.intoRaw(i),h=a.intoRaw();this.raw.intersectionsWithShape(e.raw,t.raw,R,p,h,o,n,s,w,c,l),R.free(),p.free(),h.free()}collidersWithAabbIntersectingAabb(e,t,r){let i=VectorOps.intoRaw(e),a=VectorOps.intoRaw(t);this.raw.collidersWithAabbIntersectingAabb(i,a,r),i.free(),a.free()}}