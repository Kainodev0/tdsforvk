import{RawVector,RawRotation}from"./raw";export class Vector3{constructor(t,e,r){this.x=t,this.y=e,this.z=r}}export class VectorOps{static new(t,e,r){return new Vector3(t,e,r)}static intoRaw(t){return new RawVector(t.x,t.y,t.z)}static zeros(){return VectorOps.new(0,0,0)}static fromRaw(t){if(!t)return null;let e=VectorOps.new(t.x,t.y,t.z);return t.free(),e}static copy(t,e){t.x=e.x,t.y=e.y,t.z=e.z}}export class Quaternion{constructor(t,e,r,s){this.x=t,this.y=e,this.z=r,this.w=s}}export class RotationOps{static identity(){return new Quaternion(0,0,0,1)}static fromRaw(t){if(!t)return null;let e=new Quaternion(t.x,t.y,t.z,t.w);return t.free(),e}static intoRaw(t){return new RawRotation(t.x,t.y,t.z,t.w)}static copy(t,e){t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w}}export class SdpMatrix3{get m11(){return this.elements[0]}get m12(){return this.elements[1]}get m21(){return this.m12}get m13(){return this.elements[2]}get m31(){return this.m13}get m22(){return this.elements[3]}get m23(){return this.elements[4]}get m32(){return this.m23}get m33(){return this.elements[5]}constructor(t){this.elements=t}}export class SdpMatrix3Ops{static fromRaw(t){const e=new SdpMatrix3(t.elements());return t.free(),e}}