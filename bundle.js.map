{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://tds-escape/webpack/runtime/async module","webpack://tds-escape/./client/src/core/gameCore.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/pipeline/query_pipeline.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/dynamics/coefficient_combine_rule.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/pipeline/debug_render_pipeline.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/rapier_wasm3d_bg.js","webpack://tds-escape/./client/src/entities/player.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/geometry/broad_phase.js","webpack://tds-escape/./client/src/core/game.js","webpack://tds-escape/./client/src/core/gameEvents.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/exports.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/control/character_controller.js","webpack://tds-escape/./client/src/core/network.js","webpack://tds-escape/./client/src/physics/physics-manager.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/control/ray_cast_vehicle_controller.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/geometry/contact.js","webpack://tds-escape/./client/src/physics/vision-system.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/geometry/feature.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/dynamics/rigid_body.js","webpack://tds-escape/./client/src/core/gameState.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/dynamics/multibody_joint_set.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/rapier.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/geometry/collider.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/dynamics/impulse_joint_set.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/geometry/toi.js","webpack://tds-escape/./client/src/core/gameWorld.js","webpack://tds-escape/./client/src/core/input.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/geometry/shape.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/pipeline/physics_pipeline.js","webpack://tds-escape/./client/src/ui/hud.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/rapier_wasm3d.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/dynamics/integration_parameters.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/pipeline/event_queue.js","webpack://tds-escape/./client/src/physics/rapier-integration.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/dynamics/island_manager.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/geometry/collider_set.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/pipeline/physics_hooks.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/geometry/ray.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/dynamics/ccd_solver.js","webpack://tds-escape/./client/src/core/renderer.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/geometry/point.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/pipeline/world.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/dynamics/rigid_body_set.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/pipeline/serialization_pipeline.js","webpack://tds-escape/./client/src/core/gameUI.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/math.js","webpack://tds-escape/./client/src/ui/inventory.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/control/pid_controller.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/dynamics/impulse_joint.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/coarena.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/geometry/narrow_phase.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/dynamics/multibody_joint.js","webpack://tds-escape/webpack/bootstrap","webpack://tds-escape/webpack/runtime/define property getters","webpack://tds-escape/webpack/runtime/harmony module decorator","webpack://tds-escape/webpack/runtime/hasOwnProperty shorthand","webpack://tds-escape/webpack/runtime/make namespace object","webpack://tds-escape/webpack/runtime/wasm loading","webpack://tds-escape/webpack/runtime/publicPath","webpack://tds-escape/webpack/startup"],"sourcesContent":["var webpackQueues = typeof Symbol === \"function\" ? Symbol(\"webpack queues\") : \"__webpack_queues__\";\nvar webpackExports = typeof Symbol === \"function\" ? Symbol(\"webpack exports\") : \"__webpack_exports__\";\nvar webpackError = typeof Symbol === \"function\" ? Symbol(\"webpack error\") : \"__webpack_error__\";\nvar resolveQueue = (queue) => {\n\tif(queue && queue.d < 1) {\n\t\tqueue.d = 1;\n\t\tqueue.forEach((fn) => (fn.r--));\n\t\tqueue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));\n\t}\n}\nvar wrapDeps = (deps) => (deps.map((dep) => {\n\tif(dep !== null && typeof dep === \"object\") {\n\t\tif(dep[webpackQueues]) return dep;\n\t\tif(dep.then) {\n\t\t\tvar queue = [];\n\t\t\tqueue.d = 0;\n\t\t\tdep.then((r) => {\n\t\t\t\tobj[webpackExports] = r;\n\t\t\t\tresolveQueue(queue);\n\t\t\t}, (e) => {\n\t\t\t\tobj[webpackError] = e;\n\t\t\t\tresolveQueue(queue);\n\t\t\t});\n\t\t\tvar obj = {};\n\t\t\tobj[webpackQueues] = (fn) => (fn(queue));\n\t\t\treturn obj;\n\t\t}\n\t}\n\tvar ret = {};\n\tret[webpackQueues] = x => {};\n\tret[webpackExports] = dep;\n\treturn ret;\n}));\n__webpack_require__.a = (module, body, hasAwait) => {\n\tvar queue;\n\thasAwait && ((queue = []).d = -1);\n\tvar depQueues = new Set();\n\tvar exports = module.exports;\n\tvar currentDeps;\n\tvar outerResolve;\n\tvar reject;\n\tvar promise = new Promise((resolve, rej) => {\n\t\treject = rej;\n\t\touterResolve = resolve;\n\t});\n\tpromise[webpackExports] = exports;\n\tpromise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise[\"catch\"](x => {}));\n\tmodule.exports = promise;\n\tbody((deps) => {\n\t\tcurrentDeps = wrapDeps(deps);\n\t\tvar fn;\n\t\tvar getResult = () => (currentDeps.map((d) => {\n\t\t\tif(d[webpackError]) throw d[webpackError];\n\t\t\treturn d[webpackExports];\n\t\t}))\n\t\tvar promise = new Promise((resolve) => {\n\t\t\tfn = () => (resolve(getResult));\n\t\t\tfn.r = 0;\n\t\t\tvar fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));\n\t\t\tcurrentDeps.map((dep) => (dep[webpackQueues](fnQueue)));\n\t\t});\n\t\treturn fn.r ? promise : getResult();\n\t}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));\n\tqueue && queue.d < 0 && (queue.d = 0);\n};","// client/src/core/GameCore.js\n\nimport { GameUI } from './gameUI.js';\nimport { GameWorld } from './gameWorld.js';\nimport { GameState } from './gameState.js';\nimport { GameEvents } from './gameEvents.js';\nimport { Renderer } from './renderer.js';\nimport { InputHandler } from './input.js';\nimport { NetworkManager } from './network.js';\nimport { PhysicsManager } from '../physics/physics-manager.js';\n\n// Функция для логирования\nexport function log(message) {\n    if (typeof window !== 'undefined' && window.debugLog) {\n        window.debugLog('Game', message);\n    } else {\n        console.log(`[Game] ${message}`);\n    }\n}\n\n/**\n * Основной класс игры, управляющий всеми компонентами\n */\nexport class GameCore {\n    constructor() {\n        log('Инициализация игры...');\n        \n        // Привязка контекста this к методам\n        this.update = this.update.bind(this);\n        this.fixedUpdate = this.fixedUpdate.bind(this);\n        \n        // Инициализация основных модулей\n        this.events = new GameEvents(this);\n        this.state = new GameState(this);\n        this.ui = new GameUI(this);\n        this.world = new GameWorld(this);\n        \n        // Игровой таймер и физика\n        this.gameTime = 0;\n        this.physicsUpdateRate = 1/60; // 60 обновлений физики в секунду\n        this.physicsAccumulator = 0;\n        this.lastFrameTime = 0;\n        \n        // Запуск процесса инициализации\n        this.init();\n    }\n    \n    /**\n     * Асинхронная инициализация всех компонентов игры\n     */\n    async init() {\n        try {\n            this.ui.updateLoadingStatus('Инициализация компонентов...');\n            \n            // Инициализация базовых компонентов\n            await this.initBaseComponents();\n            log('Основные компоненты инициализированы');\n            \n            // Загрузка ресурсов и настройка\n            await this.loadResources();\n            log('Ресурсы загружены');\n            \n            // Показываем главное меню\n            this.ui.showMainMenu();\n        } catch (error) {\n            log(`Ошибка инициализации: ${error.message}`);\n            this.ui.showErrorScreen(`Произошла ошибка при инициализации: ${error.message}`);\n        }\n    }\n    \n    /**\n     * Инициализация базовых компонентов игры\n     */\n    async initBaseComponents() {\n        try {\n            this.ui.updateLoadingStatus('Инициализация рендерера...');\n            // Инициализация рендерера\n            this.renderer = new Renderer(this.ui.gameCanvas);\n            \n            this.ui.updateLoadingStatus('Инициализация обработчика ввода...');\n            // Инициализация обработчика ввода\n            this.input = new InputHandler();\n            \n            this.ui.updateLoadingStatus('Инициализация сетевого менеджера...');\n            // Инициализация сетевого менеджера\n            this.network = new NetworkManager();\n            \n            this.ui.updateLoadingStatus('Инициализация физического движка...');\n            // Инициализация физического движка\n            this.physics = new PhysicsManager();\n            \n            this.ui.updateLoadingStatus('Инициализация UI компонентов...');\n            // Инициализация UI компонентов\n            await this.ui.initComponents();\n            \n            // Настройка обработчиков событий\n            this.events.setupEventListeners();\n            \n            return true;\n        } catch (error) {\n            log(`Ошибка инициализации компонентов: ${error.message}`);\n            throw error;\n        }\n    }\n    \n    /**\n     * Загрузка игровых ресурсов\n     */\n    async loadResources() {\n        this.ui.updateLoadingStatus('Инициализация физического движка...');\n        \n        try {\n            // Инициализируем физику\n            const physicsInitialized = await this.physics.init();\n            if (!physicsInitialized) {\n                throw new Error('Не удалось инициализировать физику');\n            }\n            \n            this.ui.updateLoadingStatus('Физический движок инициализирован');\n            \n            // Здесь будет загрузка дополнительных ресурсов\n            this.ui.updateLoadingStatus('Загрузка игровых ресурсов...');\n            \n            // Имитация загрузки (в реальной игре здесь будет загрузка assets)\n            await new Promise((resolve) => {\n                setTimeout(() => {\n                    this.state.isLoading = false;\n                    resolve();\n                }, 1000);\n            });\n            \n            this.ui.updateLoadingStatus('Все ресурсы загружены успешно');\n            return true;\n        } catch (error) {\n            log(`Ошибка загрузки ресурсов: ${error.message}`);\n            throw error;\n        }\n    }\n    \n    /**\n     * Начало игры\n     */\n    async startGame() {\n        try {\n            log('Запуск игры...');\n            \n            this.ui.hideMainMenu();\n            this.ui.showGameScreen();\n            \n            this.state.isRunning = true;\n            this.state.currentScene = 'game';\n            \n            // Инициализация сцены\n            if (this.renderer) {\n                this.renderer.setupScene();\n                log('Сцена настроена');\n            }\n            \n            // Создание игрового мира\n            await this.world.initialize();\n            \n            // Подключение к серверу (в прототипе локально)\n            this.network.connect().then(() => {\n                log('Подключено к серверу (прототип)');\n            }).catch(error => {\n                log(`Ошибка подключения: ${error.message}`);\n            });\n            \n            // Запуск игрового цикла\n            this.lastFrameTime = performance.now();\n            requestAnimationFrame(this.update);\n            \n            log('Игра запущена');\n        } catch (error) {\n            log(`Ошибка при запуске игры: ${error.message}`);\n            this.ui.showErrorScreen(`Ошибка при запуске игры: ${error.message}`);\n        }\n    }\n    \n    /**\n     * Обновление с фиксированным шагом для физики\n     * @param {number} deltaTime - фиксированный шаг времени \n     */\n    fixedUpdate(deltaTime) {\n        try {\n            // Обновляем физику на стороне сервера (в прототипе не используется)\n            if (this.network && this.network.isConnected) {\n                // Отправка состояния на сервер\n            }\n            \n            // Обновляем игровой мир с фиксированным шагом\n            this.world.fixedUpdate(deltaTime);\n        } catch (error) {\n            log(`Ошибка в fixedUpdate: ${error.message}`);\n        }\n    }\n    \n    /**\n     * Обновление состояния игры\n     * @param {number} timestamp - текущий таймстамп\n     */\n    update(timestamp) {\n        if (!this.state.isRunning) return;\n        \n        try {\n            // Расчет дельты времени для стабильной анимации\n            const currentTime = performance.now();\n            const deltaTime = (currentTime - this.lastFrameTime) / 1000;\n            this.lastFrameTime = currentTime;\n            \n            // Ограничиваем deltaTime для предотвращения больших скачков\n            const clampedDeltaTime = Math.min(deltaTime, 0.1);\n            \n            // Увеличиваем игровое время\n            this.gameTime += clampedDeltaTime;\n            \n            // Обновление физики с фиксированным шагом\n            this.physicsAccumulator += clampedDeltaTime;\n            while (this.physicsAccumulator >= this.physicsUpdateRate) {\n                // Обновляем физический мир\n                if (this.physics && this.physics.isReady()) {\n                    this.physics.update(this.physicsUpdateRate);\n                }\n                \n                this.fixedUpdate(this.physicsUpdateRate);\n                this.physicsAccumulator -= this.physicsUpdateRate;\n            }\n            \n            // Обновление игрового мира\n            this.world.update(clampedDeltaTime);\n            \n            // Рендеринг сцены\n            if (this.renderer) {\n                this.renderer.render(this.world.player);\n            }\n            \n            // Обновление UI\n            this.ui.update();\n            \n            // Продолжение игрового цикла\n            requestAnimationFrame(this.update);\n        } catch (error) {\n            log(`Ошибка в игровом цикле: ${error.message}`);\n            \n            // Пытаемся продолжить игровой цикл, несмотря на ошибку\n            requestAnimationFrame(this.update);\n        }\n    }\n}\n\n// Инициализация игры при загрузке страницы\ndocument.addEventListener('DOMContentLoaded', () => {\n    try {\n        log('DOMContentLoaded: инициализация игры');\n        // Создаем игровой объект\n        window.game = new GameCore();\n    } catch (error) {\n        console.error('Критическая ошибка при инициализации игры:', error);\n        \n        // Показываем сообщение об ошибке\n        const errorMessage = document.createElement('div');\n        errorMessage.style.cssText = `\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            padding: 20px;\n            background-color: #f44336;\n            color: white;\n            text-align: center;\n            font-size: 18px;\n            z-index: 9999;\n        `;\n        errorMessage.textContent = `Критическая ошибка: ${error.message}`;\n        document.body.appendChild(errorMessage);\n    }\n});","import { RawQueryPipeline } from \"../raw\";\nimport { PointColliderProjection, RayColliderIntersection, RayColliderHit, ColliderShapeCastHit, } from \"../geometry\";\nimport { RotationOps, VectorOps } from \"../math\";\n// NOTE: must match the bits in the QueryFilterFlags on the Rust side.\n/**\n * Flags for excluding whole sets of colliders from a scene query.\n */\nexport var QueryFilterFlags;\n(function (QueryFilterFlags) {\n    /**\n     * Exclude from the query any collider attached to a fixed rigid-body and colliders with no rigid-body attached.\n     */\n    QueryFilterFlags[QueryFilterFlags[\"EXCLUDE_FIXED\"] = 1] = \"EXCLUDE_FIXED\";\n    /**\n     * Exclude from the query any collider attached to a dynamic rigid-body.\n     */\n    QueryFilterFlags[QueryFilterFlags[\"EXCLUDE_KINEMATIC\"] = 2] = \"EXCLUDE_KINEMATIC\";\n    /**\n     * Exclude from the query any collider attached to a kinematic rigid-body.\n     */\n    QueryFilterFlags[QueryFilterFlags[\"EXCLUDE_DYNAMIC\"] = 4] = \"EXCLUDE_DYNAMIC\";\n    /**\n     * Exclude from the query any collider that is a sensor.\n     */\n    QueryFilterFlags[QueryFilterFlags[\"EXCLUDE_SENSORS\"] = 8] = \"EXCLUDE_SENSORS\";\n    /**\n     * Exclude from the query any collider that is not a sensor.\n     */\n    QueryFilterFlags[QueryFilterFlags[\"EXCLUDE_SOLIDS\"] = 16] = \"EXCLUDE_SOLIDS\";\n    /**\n     * Excludes all colliders not attached to a dynamic rigid-body.\n     */\n    QueryFilterFlags[QueryFilterFlags[\"ONLY_DYNAMIC\"] = 3] = \"ONLY_DYNAMIC\";\n    /**\n     * Excludes all colliders not attached to a kinematic rigid-body.\n     */\n    QueryFilterFlags[QueryFilterFlags[\"ONLY_KINEMATIC\"] = 5] = \"ONLY_KINEMATIC\";\n    /**\n     * Exclude all colliders attached to a non-fixed rigid-body\n     * (this will not exclude colliders not attached to any rigid-body).\n     */\n    QueryFilterFlags[QueryFilterFlags[\"ONLY_FIXED\"] = 6] = \"ONLY_FIXED\";\n})(QueryFilterFlags || (QueryFilterFlags = {}));\n/**\n * A pipeline for performing queries on all the colliders of a scene.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `queryPipeline.free()`\n * once you are done using it (and all the rigid-bodies it created).\n */\nexport class QueryPipeline {\n    /**\n     * Release the WASM memory occupied by this query pipeline.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n    constructor(raw) {\n        this.raw = raw || new RawQueryPipeline();\n    }\n    /**\n     * Updates the acceleration structure of the query pipeline.\n     * @param colliders - The set of colliders taking part in this pipeline.\n     */\n    update(colliders) {\n        this.raw.update(colliders.raw);\n    }\n    /**\n     * Find the closest intersection between a ray and a set of collider.\n     *\n     * @param colliders - The set of colliders taking part in this pipeline.\n     * @param ray - The ray to cast.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the length of the ray to `ray.dir.norm() * maxToi`.\n     * @param solid - If `false` then the ray will attempt to hit the boundary of a shape, even if its\n     *   origin already lies inside of a shape. In other terms, `true` implies that all shapes are plain,\n     *   whereas `false` implies that all shapes are hollow for this ray-cast.\n     * @param groups - Used to filter the colliders that can or cannot be hit by the ray.\n     * @param filter - The callback to filter out which collider will be hit.\n     */\n    castRay(bodies, colliders, ray, maxToi, solid, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        let rawOrig = VectorOps.intoRaw(ray.origin);\n        let rawDir = VectorOps.intoRaw(ray.dir);\n        let result = RayColliderHit.fromRaw(colliders, this.raw.castRay(bodies.raw, colliders.raw, rawOrig, rawDir, maxToi, solid, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate));\n        rawOrig.free();\n        rawDir.free();\n        return result;\n    }\n    /**\n     * Find the closest intersection between a ray and a set of collider.\n     *\n     * This also computes the normal at the hit point.\n     * @param colliders - The set of colliders taking part in this pipeline.\n     * @param ray - The ray to cast.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the length of the ray to `ray.dir.norm() * maxToi`.\n     * @param solid - If `false` then the ray will attempt to hit the boundary of a shape, even if its\n     *   origin already lies inside of a shape. In other terms, `true` implies that all shapes are plain,\n     *   whereas `false` implies that all shapes are hollow for this ray-cast.\n     * @param groups - Used to filter the colliders that can or cannot be hit by the ray.\n     */\n    castRayAndGetNormal(bodies, colliders, ray, maxToi, solid, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        let rawOrig = VectorOps.intoRaw(ray.origin);\n        let rawDir = VectorOps.intoRaw(ray.dir);\n        let result = RayColliderIntersection.fromRaw(colliders, this.raw.castRayAndGetNormal(bodies.raw, colliders.raw, rawOrig, rawDir, maxToi, solid, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate));\n        rawOrig.free();\n        rawDir.free();\n        return result;\n    }\n    /**\n     * Cast a ray and collects all the intersections between a ray and the scene.\n     *\n     * @param colliders - The set of colliders taking part in this pipeline.\n     * @param ray - The ray to cast.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the length of the ray to `ray.dir.norm() * maxToi`.\n     * @param solid - If `false` then the ray will attempt to hit the boundary of a shape, even if its\n     *   origin already lies inside of a shape. In other terms, `true` implies that all shapes are plain,\n     *   whereas `false` implies that all shapes are hollow for this ray-cast.\n     * @param groups - Used to filter the colliders that can or cannot be hit by the ray.\n     * @param callback - The callback called once per hit (in no particular order) between a ray and a collider.\n     *   If this callback returns `false`, then the cast will stop and no further hits will be detected/reported.\n     */\n    intersectionsWithRay(bodies, colliders, ray, maxToi, solid, callback, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        let rawOrig = VectorOps.intoRaw(ray.origin);\n        let rawDir = VectorOps.intoRaw(ray.dir);\n        let rawCallback = (rawInter) => {\n            return callback(RayColliderIntersection.fromRaw(colliders, rawInter));\n        };\n        this.raw.intersectionsWithRay(bodies.raw, colliders.raw, rawOrig, rawDir, maxToi, solid, rawCallback, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate);\n        rawOrig.free();\n        rawDir.free();\n    }\n    /**\n     * Gets the handle of up to one collider intersecting the given shape.\n     *\n     * @param colliders - The set of colliders taking part in this pipeline.\n     * @param shapePos - The position of the shape used for the intersection test.\n     * @param shapeRot - The orientation of the shape used for the intersection test.\n     * @param shape - The shape used for the intersection test.\n     * @param groups - The bit groups and filter associated to the ray, in order to only\n     *   hit the colliders with collision groups compatible with the ray's group.\n     */\n    intersectionWithShape(bodies, colliders, shapePos, shapeRot, shape, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        let rawPos = VectorOps.intoRaw(shapePos);\n        let rawRot = RotationOps.intoRaw(shapeRot);\n        let rawShape = shape.intoRaw();\n        let result = this.raw.intersectionWithShape(bodies.raw, colliders.raw, rawPos, rawRot, rawShape, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate);\n        rawPos.free();\n        rawRot.free();\n        rawShape.free();\n        return result;\n    }\n    /**\n     * Find the projection of a point on the closest collider.\n     *\n     * @param colliders - The set of colliders taking part in this pipeline.\n     * @param point - The point to project.\n     * @param solid - If this is set to `true` then the collider shapes are considered to\n     *   be plain (if the point is located inside of a plain shape, its projection is the point\n     *   itself). If it is set to `false` the collider shapes are considered to be hollow\n     *   (if the point is located inside of an hollow shape, it is projected on the shape's\n     *   boundary).\n     * @param groups - The bit groups and filter associated to the point to project, in order to only\n     *   project on colliders with collision groups compatible with the ray's group.\n     */\n    projectPoint(bodies, colliders, point, solid, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        let rawPoint = VectorOps.intoRaw(point);\n        let result = PointColliderProjection.fromRaw(colliders, this.raw.projectPoint(bodies.raw, colliders.raw, rawPoint, solid, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate));\n        rawPoint.free();\n        return result;\n    }\n    /**\n     * Find the projection of a point on the closest collider.\n     *\n     * @param colliders - The set of colliders taking part in this pipeline.\n     * @param point - The point to project.\n     * @param groups - The bit groups and filter associated to the point to project, in order to only\n     *   project on colliders with collision groups compatible with the ray's group.\n     */\n    projectPointAndGetFeature(bodies, colliders, point, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        let rawPoint = VectorOps.intoRaw(point);\n        let result = PointColliderProjection.fromRaw(colliders, this.raw.projectPointAndGetFeature(bodies.raw, colliders.raw, rawPoint, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate));\n        rawPoint.free();\n        return result;\n    }\n    /**\n     * Find all the colliders containing the given point.\n     *\n     * @param colliders - The set of colliders taking part in this pipeline.\n     * @param point - The point used for the containment test.\n     * @param groups - The bit groups and filter associated to the point to test, in order to only\n     *   test on colliders with collision groups compatible with the ray's group.\n     * @param callback - A function called with the handles of each collider with a shape\n     *   containing the `point`.\n     */\n    intersectionsWithPoint(bodies, colliders, point, callback, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        let rawPoint = VectorOps.intoRaw(point);\n        this.raw.intersectionsWithPoint(bodies.raw, colliders.raw, rawPoint, callback, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate);\n        rawPoint.free();\n    }\n    /**\n     * Casts a shape at a constant linear velocity and retrieve the first collider it hits.\n     * This is similar to ray-casting except that we are casting a whole shape instead of\n     * just a point (the ray origin).\n     *\n     * @param colliders - The set of colliders taking part in this pipeline.\n     * @param shapePos - The initial position of the shape to cast.\n     * @param shapeRot - The initial rotation of the shape to cast.\n     * @param shapeVel - The constant velocity of the shape to cast (i.e. the cast direction).\n     * @param shape - The shape to cast.\n     * @param targetDistance − If the shape moves closer to this distance from a collider, a hit\n     *                       will be returned.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the distance traveled by the shape to `shapeVel.norm() * maxToi`.\n     * @param stopAtPenetration - If set to `false`, the linear shape-cast won’t immediately stop if\n     *   the shape is penetrating another shape at its starting point **and** its trajectory is such\n     *   that it’s on a path to exit that penetration state.\n     * @param groups - The bit groups and filter associated to the shape to cast, in order to only\n     *   test on colliders with collision groups compatible with this group.\n     */\n    castShape(bodies, colliders, shapePos, shapeRot, shapeVel, shape, targetDistance, maxToi, stopAtPenetration, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        let rawPos = VectorOps.intoRaw(shapePos);\n        let rawRot = RotationOps.intoRaw(shapeRot);\n        let rawVel = VectorOps.intoRaw(shapeVel);\n        let rawShape = shape.intoRaw();\n        let result = ColliderShapeCastHit.fromRaw(colliders, this.raw.castShape(bodies.raw, colliders.raw, rawPos, rawRot, rawVel, rawShape, targetDistance, maxToi, stopAtPenetration, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate));\n        rawPos.free();\n        rawRot.free();\n        rawVel.free();\n        rawShape.free();\n        return result;\n    }\n    /**\n     * Retrieve all the colliders intersecting the given shape.\n     *\n     * @param colliders - The set of colliders taking part in this pipeline.\n     * @param shapePos - The position of the shape to test.\n     * @param shapeRot - The orientation of the shape to test.\n     * @param shape - The shape to test.\n     * @param groups - The bit groups and filter associated to the shape to test, in order to only\n     *   test on colliders with collision groups compatible with this group.\n     * @param callback - A function called with the handles of each collider intersecting the `shape`.\n     */\n    intersectionsWithShape(bodies, colliders, shapePos, shapeRot, shape, callback, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        let rawPos = VectorOps.intoRaw(shapePos);\n        let rawRot = RotationOps.intoRaw(shapeRot);\n        let rawShape = shape.intoRaw();\n        this.raw.intersectionsWithShape(bodies.raw, colliders.raw, rawPos, rawRot, rawShape, callback, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate);\n        rawPos.free();\n        rawRot.free();\n        rawShape.free();\n    }\n    /**\n     * Finds the handles of all the colliders with an AABB intersecting the given AABB.\n     *\n     * @param aabbCenter - The center of the AABB to test.\n     * @param aabbHalfExtents - The half-extents of the AABB to test.\n     * @param callback - The callback that will be called with the handles of all the colliders\n     *                   currently intersecting the given AABB.\n     */\n    collidersWithAabbIntersectingAabb(aabbCenter, aabbHalfExtents, callback) {\n        let rawCenter = VectorOps.intoRaw(aabbCenter);\n        let rawHalfExtents = VectorOps.intoRaw(aabbHalfExtents);\n        this.raw.collidersWithAabbIntersectingAabb(rawCenter, rawHalfExtents, callback);\n        rawCenter.free();\n        rawHalfExtents.free();\n    }\n}\n//# sourceMappingURL=query_pipeline.js.map","/**\n * A rule applied to combine coefficients.\n *\n * Use this when configuring the `ColliderDesc` to specify\n * how friction and restitution coefficient should be combined\n * in a contact.\n */\nexport var CoefficientCombineRule;\n(function (CoefficientCombineRule) {\n    CoefficientCombineRule[CoefficientCombineRule[\"Average\"] = 0] = \"Average\";\n    CoefficientCombineRule[CoefficientCombineRule[\"Min\"] = 1] = \"Min\";\n    CoefficientCombineRule[CoefficientCombineRule[\"Multiply\"] = 2] = \"Multiply\";\n    CoefficientCombineRule[CoefficientCombineRule[\"Max\"] = 3] = \"Max\";\n})(CoefficientCombineRule || (CoefficientCombineRule = {}));\n//# sourceMappingURL=coefficient_combine_rule.js.map","import { RawDebugRenderPipeline } from \"../raw\";\n/**\n * The vertex and color buffers for debug-redering the physics scene.\n */\nexport class DebugRenderBuffers {\n    constructor(vertices, colors) {\n        this.vertices = vertices;\n        this.colors = colors;\n    }\n}\n/**\n * A pipeline for rendering the physics scene.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `debugRenderPipeline.free()`\n * once you are done using it (and all the rigid-bodies it created).\n */\nexport class DebugRenderPipeline {\n    /**\n     * Release the WASM memory occupied by this serialization pipeline.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n        this.vertices = undefined;\n        this.colors = undefined;\n    }\n    constructor(raw) {\n        this.raw = raw || new RawDebugRenderPipeline();\n    }\n    render(bodies, colliders, impulse_joints, multibody_joints, narrow_phase) {\n        this.raw.render(bodies.raw, colliders.raw, impulse_joints.raw, multibody_joints.raw, narrow_phase.raw);\n        this.vertices = this.raw.vertices();\n        this.colors = this.raw.colors();\n    }\n}\n//# sourceMappingURL=debug_render_pipeline.js.map","let wasm;\nexport function __wbg_set_wasm(val) {\n    wasm = val;\n}\n\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_export_0(addHeapObject(e));\n    }\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedDataViewMemory0 = null;\n\nfunction getDataViewMemory0() {\n    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm.memory.buffer)) {\n        cachedDataViewMemory0 = new DataView(wasm.memory.buffer);\n    }\n    return cachedDataViewMemory0;\n}\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n/**\n * @returns {string}\n */\nexport function version() {\n    let deferred1_0;\n    let deferred1_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.version(retptr);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        deferred1_0 = r0;\n        deferred1_1 = r1;\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_export_1(deferred1_0, deferred1_1, 1);\n    }\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n}\n\nlet stack_pointer = 128;\n\nfunction addBorrowedObject(obj) {\n    if (stack_pointer == 1) throw new Error('out of js stack');\n    heap[--stack_pointer] = obj;\n    return stack_pointer;\n}\n\nlet cachedFloat32ArrayMemory0 = null;\n\nfunction getFloat32ArrayMemory0() {\n    if (cachedFloat32ArrayMemory0 === null || cachedFloat32ArrayMemory0.byteLength === 0) {\n        cachedFloat32ArrayMemory0 = new Float32Array(wasm.memory.buffer);\n    }\n    return cachedFloat32ArrayMemory0;\n}\n\nfunction getArrayF32FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getFloat32ArrayMemory0().subarray(ptr / 4, ptr / 4 + len);\n}\n\nlet cachedUint32ArrayMemory0 = null;\n\nfunction getUint32ArrayMemory0() {\n    if (cachedUint32ArrayMemory0 === null || cachedUint32ArrayMemory0.byteLength === 0) {\n        cachedUint32ArrayMemory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachedUint32ArrayMemory0;\n}\n\nfunction getArrayU32FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint32ArrayMemory0().subarray(ptr / 4, ptr / 4 + len);\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArrayF32ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 4, 4) >>> 0;\n    getFloat32ArrayMemory0().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction passArray32ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 4, 4) >>> 0;\n    getUint32ArrayMemory0().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n * @enum {0 | 1 | 2 | 3}\n */\nexport const RawFeatureType = Object.freeze({\n    Vertex: 0, \"0\": \"Vertex\",\n    Edge: 1, \"1\": \"Edge\",\n    Face: 2, \"2\": \"Face\",\n    Unknown: 3, \"3\": \"Unknown\",\n});\n/**\n * @enum {0 | 1 | 2 | 3 | 4 | 5}\n */\nexport const RawJointAxis = Object.freeze({\n    LinX: 0, \"0\": \"LinX\",\n    LinY: 1, \"1\": \"LinY\",\n    LinZ: 2, \"2\": \"LinZ\",\n    AngX: 3, \"3\": \"AngX\",\n    AngY: 4, \"4\": \"AngY\",\n    AngZ: 5, \"5\": \"AngZ\",\n});\n/**\n * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6}\n */\nexport const RawJointType = Object.freeze({\n    Revolute: 0, \"0\": \"Revolute\",\n    Fixed: 1, \"1\": \"Fixed\",\n    Prismatic: 2, \"2\": \"Prismatic\",\n    Rope: 3, \"3\": \"Rope\",\n    Spring: 4, \"4\": \"Spring\",\n    Spherical: 5, \"5\": \"Spherical\",\n    Generic: 6, \"6\": \"Generic\",\n});\n/**\n * @enum {0 | 1}\n */\nexport const RawMotorModel = Object.freeze({\n    AccelerationBased: 0, \"0\": \"AccelerationBased\",\n    ForceBased: 1, \"1\": \"ForceBased\",\n});\n/**\n * @enum {0 | 1 | 2 | 3}\n */\nexport const RawRigidBodyType = Object.freeze({\n    Dynamic: 0, \"0\": \"Dynamic\",\n    Fixed: 1, \"1\": \"Fixed\",\n    KinematicPositionBased: 2, \"2\": \"KinematicPositionBased\",\n    KinematicVelocityBased: 3, \"3\": \"KinematicVelocityBased\",\n});\n/**\n * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17}\n */\nexport const RawShapeType = Object.freeze({\n    Ball: 0, \"0\": \"Ball\",\n    Cuboid: 1, \"1\": \"Cuboid\",\n    Capsule: 2, \"2\": \"Capsule\",\n    Segment: 3, \"3\": \"Segment\",\n    Polyline: 4, \"4\": \"Polyline\",\n    Triangle: 5, \"5\": \"Triangle\",\n    TriMesh: 6, \"6\": \"TriMesh\",\n    HeightField: 7, \"7\": \"HeightField\",\n    Compound: 8, \"8\": \"Compound\",\n    ConvexPolyhedron: 9, \"9\": \"ConvexPolyhedron\",\n    Cylinder: 10, \"10\": \"Cylinder\",\n    Cone: 11, \"11\": \"Cone\",\n    RoundCuboid: 12, \"12\": \"RoundCuboid\",\n    RoundTriangle: 13, \"13\": \"RoundTriangle\",\n    RoundCylinder: 14, \"14\": \"RoundCylinder\",\n    RoundCone: 15, \"15\": \"RoundCone\",\n    RoundConvexPolyhedron: 16, \"16\": \"RoundConvexPolyhedron\",\n    HalfSpace: 17, \"17\": \"HalfSpace\",\n});\n\nconst RawBroadPhaseFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawbroadphase_free(ptr >>> 0, 1));\n\nexport class RawBroadPhase {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawBroadPhase.prototype);\n        obj.__wbg_ptr = ptr;\n        RawBroadPhaseFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawBroadPhaseFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawbroadphase_free(ptr, 0);\n    }\n    constructor() {\n        const ret = wasm.rawbroadphase_new();\n        this.__wbg_ptr = ret >>> 0;\n        RawBroadPhaseFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst RawCCDSolverFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawccdsolver_free(ptr >>> 0, 1));\n\nexport class RawCCDSolver {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawCCDSolverFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawccdsolver_free(ptr, 0);\n    }\n    constructor() {\n        const ret = wasm.rawccdsolver_new();\n        this.__wbg_ptr = ret >>> 0;\n        RawCCDSolverFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst RawCharacterCollisionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawcharactercollision_free(ptr >>> 0, 1));\n\nexport class RawCharacterCollision {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawCharacterCollisionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawcharactercollision_free(ptr, 0);\n    }\n    constructor() {\n        const ret = wasm.rawcharactercollision_new();\n        this.__wbg_ptr = ret >>> 0;\n        RawCharacterCollisionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @returns {number}\n     */\n    handle() {\n        const ret = wasm.rawcharactercollision_handle(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {RawVector}\n     */\n    translationDeltaApplied() {\n        const ret = wasm.rawcharactercollision_translationDeltaApplied(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    translationDeltaRemaining() {\n        const ret = wasm.rawcharactercollision_translationDeltaRemaining(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    toi() {\n        const ret = wasm.rawcharactercollision_toi(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {RawVector}\n     */\n    worldWitness1() {\n        const ret = wasm.rawcharactercollision_worldWitness1(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    worldWitness2() {\n        const ret = wasm.rawcharactercollision_worldWitness2(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    worldNormal1() {\n        const ret = wasm.rawcharactercollision_worldNormal1(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    worldNormal2() {\n        const ret = wasm.rawcharactercollision_worldNormal2(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n}\n\nconst RawColliderSetFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawcolliderset_free(ptr >>> 0, 1));\n\nexport class RawColliderSet {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawColliderSet.prototype);\n        obj.__wbg_ptr = ptr;\n        RawColliderSetFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawColliderSetFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawcolliderset_free(ptr, 0);\n    }\n    /**\n     * The world-space translation of this collider.\n     * @param {number} handle\n     * @returns {RawVector}\n     */\n    coTranslation(handle) {\n        const ret = wasm.rawcolliderset_coTranslation(this.__wbg_ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * The world-space orientation of this collider.\n     * @param {number} handle\n     * @returns {RawRotation}\n     */\n    coRotation(handle) {\n        const ret = wasm.rawcolliderset_coRotation(this.__wbg_ptr, handle);\n        return RawRotation.__wrap(ret);\n    }\n    /**\n     * Sets the translation of this collider.\n     *\n     * # Parameters\n     * - `x`: the world-space position of the collider along the `x` axis.\n     * - `y`: the world-space position of the collider along the `y` axis.\n     * - `z`: the world-space position of the collider along the `z` axis.\n     * - `wakeUp`: forces the collider to wake-up so it is properly affected by forces if it\n     * wasn't moving before modifying its position.\n     * @param {number} handle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     */\n    coSetTranslation(handle, x, y, z) {\n        wasm.rawcolliderset_coSetTranslation(this.__wbg_ptr, handle, x, y, z);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     */\n    coSetTranslationWrtParent(handle, x, y, z) {\n        wasm.rawcolliderset_coSetTranslationWrtParent(this.__wbg_ptr, handle, x, y, z);\n    }\n    /**\n     * Sets the rotation quaternion of this collider.\n     *\n     * This does nothing if a zero quaternion is provided.\n     *\n     * # Parameters\n     * - `x`: the first vector component of the quaternion.\n     * - `y`: the second vector component of the quaternion.\n     * - `z`: the third vector component of the quaternion.\n     * - `w`: the scalar component of the quaternion.\n     * - `wakeUp`: forces the collider to wake-up so it is properly affected by forces if it\n     * wasn't moving before modifying its position.\n     * @param {number} handle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @param {number} w\n     */\n    coSetRotation(handle, x, y, z, w) {\n        wasm.rawcolliderset_coSetRotation(this.__wbg_ptr, handle, x, y, z, w);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @param {number} w\n     */\n    coSetRotationWrtParent(handle, x, y, z, w) {\n        wasm.rawcolliderset_coSetRotationWrtParent(this.__wbg_ptr, handle, x, y, z, w);\n    }\n    /**\n     * Is this collider a sensor?\n     * @param {number} handle\n     * @returns {boolean}\n     */\n    coIsSensor(handle) {\n        const ret = wasm.rawcolliderset_coIsSensor(this.__wbg_ptr, handle);\n        return ret !== 0;\n    }\n    /**\n     * The type of the shape of this collider.\n     * @param {number} handle\n     * @returns {RawShapeType}\n     */\n    coShapeType(handle) {\n        const ret = wasm.rawcolliderset_coShapeType(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * @param {number} handle\n     * @returns {RawVector | undefined}\n     */\n    coHalfspaceNormal(handle) {\n        const ret = wasm.rawcolliderset_coHalfspaceNormal(this.__wbg_ptr, handle);\n        return ret === 0 ? undefined : RawVector.__wrap(ret);\n    }\n    /**\n     * The half-extents of this collider if it is has a cuboid shape.\n     * @param {number} handle\n     * @returns {RawVector | undefined}\n     */\n    coHalfExtents(handle) {\n        const ret = wasm.rawcolliderset_coHalfExtents(this.__wbg_ptr, handle);\n        return ret === 0 ? undefined : RawVector.__wrap(ret);\n    }\n    /**\n     * Set the half-extents of this collider if it has a cuboid shape.\n     * @param {number} handle\n     * @param {RawVector} newHalfExtents\n     */\n    coSetHalfExtents(handle, newHalfExtents) {\n        _assertClass(newHalfExtents, RawVector);\n        wasm.rawcolliderset_coSetHalfExtents(this.__wbg_ptr, handle, newHalfExtents.__wbg_ptr);\n    }\n    /**\n     * The radius of this collider if it is a ball, capsule, cylinder, or cone shape.\n     * @param {number} handle\n     * @returns {number | undefined}\n     */\n    coRadius(handle) {\n        const ret = wasm.rawcolliderset_coRadius(this.__wbg_ptr, handle);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * Set the radius of this collider if it is a ball, capsule, cylinder, or cone shape.\n     * @param {number} handle\n     * @param {number} newRadius\n     */\n    coSetRadius(handle, newRadius) {\n        wasm.rawcolliderset_coSetRadius(this.__wbg_ptr, handle, newRadius);\n    }\n    /**\n     * The half height of this collider if it is a capsule, cylinder, or cone shape.\n     * @param {number} handle\n     * @returns {number | undefined}\n     */\n    coHalfHeight(handle) {\n        const ret = wasm.rawcolliderset_coHalfHeight(this.__wbg_ptr, handle);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * Set the half height of this collider if it is a capsule, cylinder, or cone shape.\n     * @param {number} handle\n     * @param {number} newHalfheight\n     */\n    coSetHalfHeight(handle, newHalfheight) {\n        wasm.rawcolliderset_coSetHalfHeight(this.__wbg_ptr, handle, newHalfheight);\n    }\n    /**\n     * The radius of the round edges of this collider.\n     * @param {number} handle\n     * @returns {number | undefined}\n     */\n    coRoundRadius(handle) {\n        const ret = wasm.rawcolliderset_coRoundRadius(this.__wbg_ptr, handle);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * Set the radius of the round edges of this collider.\n     * @param {number} handle\n     * @param {number} newBorderRadius\n     */\n    coSetRoundRadius(handle, newBorderRadius) {\n        wasm.rawcolliderset_coSetRoundRadius(this.__wbg_ptr, handle, newBorderRadius);\n    }\n    /**\n     * The vertices of this triangle mesh, polyline, convex polyhedron, segment, triangle or convex polyhedron, if it is one.\n     * @param {number} handle\n     * @returns {Float32Array | undefined}\n     */\n    coVertices(handle) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rawcolliderset_coVertices(retptr, this.__wbg_ptr, handle);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayF32FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_1(r0, r1 * 4, 4);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * The indices of this triangle mesh, polyline, or convex polyhedron, if it is one.\n     * @param {number} handle\n     * @returns {Uint32Array | undefined}\n     */\n    coIndices(handle) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rawcolliderset_coIndices(retptr, this.__wbg_ptr, handle);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayU32FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_1(r0, r1 * 4, 4);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} handle\n     * @returns {number | undefined}\n     */\n    coTriMeshFlags(handle) {\n        const ret = wasm.rawcolliderset_coTriMeshFlags(this.__wbg_ptr, handle);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} handle\n     * @returns {number | undefined}\n     */\n    coHeightFieldFlags(handle) {\n        const ret = wasm.rawcolliderset_coHeightFieldFlags(this.__wbg_ptr, handle);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * The height of this heightfield if it is one.\n     * @param {number} handle\n     * @returns {Float32Array | undefined}\n     */\n    coHeightfieldHeights(handle) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rawcolliderset_coHeightfieldHeights(retptr, this.__wbg_ptr, handle);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayF32FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_1(r0, r1 * 4, 4);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * The scaling factor applied of this heightfield if it is one.\n     * @param {number} handle\n     * @returns {RawVector | undefined}\n     */\n    coHeightfieldScale(handle) {\n        const ret = wasm.rawcolliderset_coHeightfieldScale(this.__wbg_ptr, handle);\n        return ret === 0 ? undefined : RawVector.__wrap(ret);\n    }\n    /**\n     * The number of rows on this heightfield's height matrix, if it is one.\n     * @param {number} handle\n     * @returns {number | undefined}\n     */\n    coHeightfieldNRows(handle) {\n        const ret = wasm.rawcolliderset_coHeightfieldNRows(this.__wbg_ptr, handle);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * The number of columns on this heightfield's height matrix, if it is one.\n     * @param {number} handle\n     * @returns {number | undefined}\n     */\n    coHeightfieldNCols(handle) {\n        const ret = wasm.rawcolliderset_coHeightfieldNCols(this.__wbg_ptr, handle);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * The unique integer identifier of the collider this collider is attached to.\n     * @param {number} handle\n     * @returns {number | undefined}\n     */\n    coParent(handle) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rawcolliderset_coParent(retptr, this.__wbg_ptr, handle);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r2 = getDataViewMemory0().getFloat64(retptr + 8 * 1, true);\n            return r0 === 0 ? undefined : r2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} handle\n     * @param {boolean} enabled\n     */\n    coSetEnabled(handle, enabled) {\n        wasm.rawcolliderset_coSetEnabled(this.__wbg_ptr, handle, enabled);\n    }\n    /**\n     * @param {number} handle\n     * @returns {boolean}\n     */\n    coIsEnabled(handle) {\n        const ret = wasm.rawcolliderset_coIsEnabled(this.__wbg_ptr, handle);\n        return ret !== 0;\n    }\n    /**\n     * @param {number} handle\n     * @param {number} contact_skin\n     */\n    coSetContactSkin(handle, contact_skin) {\n        wasm.rawcolliderset_coSetContactSkin(this.__wbg_ptr, handle, contact_skin);\n    }\n    /**\n     * @param {number} handle\n     * @returns {number}\n     */\n    coContactSkin(handle) {\n        const ret = wasm.rawcolliderset_coContactSkin(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * The friction coefficient of this collider.\n     * @param {number} handle\n     * @returns {number}\n     */\n    coFriction(handle) {\n        const ret = wasm.rawcolliderset_coFriction(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * The restitution coefficient of this collider.\n     * @param {number} handle\n     * @returns {number}\n     */\n    coRestitution(handle) {\n        const ret = wasm.rawcolliderset_coRestitution(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * The density of this collider.\n     * @param {number} handle\n     * @returns {number}\n     */\n    coDensity(handle) {\n        const ret = wasm.rawcolliderset_coDensity(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * The mass of this collider.\n     * @param {number} handle\n     * @returns {number}\n     */\n    coMass(handle) {\n        const ret = wasm.rawcolliderset_coMass(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * The volume of this collider.\n     * @param {number} handle\n     * @returns {number}\n     */\n    coVolume(handle) {\n        const ret = wasm.rawcolliderset_coVolume(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * The collision groups of this collider.\n     * @param {number} handle\n     * @returns {number}\n     */\n    coCollisionGroups(handle) {\n        const ret = wasm.rawcolliderset_coCollisionGroups(this.__wbg_ptr, handle);\n        return ret >>> 0;\n    }\n    /**\n     * The solver groups of this collider.\n     * @param {number} handle\n     * @returns {number}\n     */\n    coSolverGroups(handle) {\n        const ret = wasm.rawcolliderset_coSolverGroups(this.__wbg_ptr, handle);\n        return ret >>> 0;\n    }\n    /**\n     * The physics hooks enabled for this collider.\n     * @param {number} handle\n     * @returns {number}\n     */\n    coActiveHooks(handle) {\n        const ret = wasm.rawcolliderset_coActiveHooks(this.__wbg_ptr, handle);\n        return ret >>> 0;\n    }\n    /**\n     * The collision types enabled for this collider.\n     * @param {number} handle\n     * @returns {number}\n     */\n    coActiveCollisionTypes(handle) {\n        const ret = wasm.rawcolliderset_coActiveCollisionTypes(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * The events enabled for this collider.\n     * @param {number} handle\n     * @returns {number}\n     */\n    coActiveEvents(handle) {\n        const ret = wasm.rawcolliderset_coActiveEvents(this.__wbg_ptr, handle);\n        return ret >>> 0;\n    }\n    /**\n     * The total force magnitude beyond which a contact force event can be emitted.\n     * @param {number} handle\n     * @returns {number}\n     */\n    coContactForceEventThreshold(handle) {\n        const ret = wasm.rawcolliderset_coContactForceEventThreshold(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * @param {number} handle\n     * @param {RawVector} point\n     * @returns {boolean}\n     */\n    coContainsPoint(handle, point) {\n        _assertClass(point, RawVector);\n        const ret = wasm.rawcolliderset_coContainsPoint(this.__wbg_ptr, handle, point.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * @param {number} handle\n     * @param {RawVector} colliderVel\n     * @param {RawShape} shape2\n     * @param {RawVector} shape2Pos\n     * @param {RawRotation} shape2Rot\n     * @param {RawVector} shape2Vel\n     * @param {number} target_distance\n     * @param {number} maxToi\n     * @param {boolean} stop_at_penetration\n     * @returns {RawShapeCastHit | undefined}\n     */\n    coCastShape(handle, colliderVel, shape2, shape2Pos, shape2Rot, shape2Vel, target_distance, maxToi, stop_at_penetration) {\n        _assertClass(colliderVel, RawVector);\n        _assertClass(shape2, RawShape);\n        _assertClass(shape2Pos, RawVector);\n        _assertClass(shape2Rot, RawRotation);\n        _assertClass(shape2Vel, RawVector);\n        const ret = wasm.rawcolliderset_coCastShape(this.__wbg_ptr, handle, colliderVel.__wbg_ptr, shape2.__wbg_ptr, shape2Pos.__wbg_ptr, shape2Rot.__wbg_ptr, shape2Vel.__wbg_ptr, target_distance, maxToi, stop_at_penetration);\n        return ret === 0 ? undefined : RawShapeCastHit.__wrap(ret);\n    }\n    /**\n     * @param {number} handle\n     * @param {RawVector} collider1Vel\n     * @param {number} collider2handle\n     * @param {RawVector} collider2Vel\n     * @param {number} target_distance\n     * @param {number} max_toi\n     * @param {boolean} stop_at_penetration\n     * @returns {RawColliderShapeCastHit | undefined}\n     */\n    coCastCollider(handle, collider1Vel, collider2handle, collider2Vel, target_distance, max_toi, stop_at_penetration) {\n        _assertClass(collider1Vel, RawVector);\n        _assertClass(collider2Vel, RawVector);\n        const ret = wasm.rawcolliderset_coCastCollider(this.__wbg_ptr, handle, collider1Vel.__wbg_ptr, collider2handle, collider2Vel.__wbg_ptr, target_distance, max_toi, stop_at_penetration);\n        return ret === 0 ? undefined : RawColliderShapeCastHit.__wrap(ret);\n    }\n    /**\n     * @param {number} handle\n     * @param {RawShape} shape2\n     * @param {RawVector} shapePos2\n     * @param {RawRotation} shapeRot2\n     * @returns {boolean}\n     */\n    coIntersectsShape(handle, shape2, shapePos2, shapeRot2) {\n        _assertClass(shape2, RawShape);\n        _assertClass(shapePos2, RawVector);\n        _assertClass(shapeRot2, RawRotation);\n        const ret = wasm.rawcolliderset_coIntersectsShape(this.__wbg_ptr, handle, shape2.__wbg_ptr, shapePos2.__wbg_ptr, shapeRot2.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * @param {number} handle\n     * @param {RawShape} shape2\n     * @param {RawVector} shapePos2\n     * @param {RawRotation} shapeRot2\n     * @param {number} prediction\n     * @returns {RawShapeContact | undefined}\n     */\n    coContactShape(handle, shape2, shapePos2, shapeRot2, prediction) {\n        _assertClass(shape2, RawShape);\n        _assertClass(shapePos2, RawVector);\n        _assertClass(shapeRot2, RawRotation);\n        const ret = wasm.rawcolliderset_coContactShape(this.__wbg_ptr, handle, shape2.__wbg_ptr, shapePos2.__wbg_ptr, shapeRot2.__wbg_ptr, prediction);\n        return ret === 0 ? undefined : RawShapeContact.__wrap(ret);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} collider2handle\n     * @param {number} prediction\n     * @returns {RawShapeContact | undefined}\n     */\n    coContactCollider(handle, collider2handle, prediction) {\n        const ret = wasm.rawcolliderset_coContactCollider(this.__wbg_ptr, handle, collider2handle, prediction);\n        return ret === 0 ? undefined : RawShapeContact.__wrap(ret);\n    }\n    /**\n     * @param {number} handle\n     * @param {RawVector} point\n     * @param {boolean} solid\n     * @returns {RawPointProjection}\n     */\n    coProjectPoint(handle, point, solid) {\n        _assertClass(point, RawVector);\n        const ret = wasm.rawcolliderset_coProjectPoint(this.__wbg_ptr, handle, point.__wbg_ptr, solid);\n        return RawPointProjection.__wrap(ret);\n    }\n    /**\n     * @param {number} handle\n     * @param {RawVector} rayOrig\n     * @param {RawVector} rayDir\n     * @param {number} maxToi\n     * @returns {boolean}\n     */\n    coIntersectsRay(handle, rayOrig, rayDir, maxToi) {\n        _assertClass(rayOrig, RawVector);\n        _assertClass(rayDir, RawVector);\n        const ret = wasm.rawcolliderset_coIntersectsRay(this.__wbg_ptr, handle, rayOrig.__wbg_ptr, rayDir.__wbg_ptr, maxToi);\n        return ret !== 0;\n    }\n    /**\n     * @param {number} handle\n     * @param {RawVector} rayOrig\n     * @param {RawVector} rayDir\n     * @param {number} maxToi\n     * @param {boolean} solid\n     * @returns {number}\n     */\n    coCastRay(handle, rayOrig, rayDir, maxToi, solid) {\n        _assertClass(rayOrig, RawVector);\n        _assertClass(rayDir, RawVector);\n        const ret = wasm.rawcolliderset_coCastRay(this.__wbg_ptr, handle, rayOrig.__wbg_ptr, rayDir.__wbg_ptr, maxToi, solid);\n        return ret;\n    }\n    /**\n     * @param {number} handle\n     * @param {RawVector} rayOrig\n     * @param {RawVector} rayDir\n     * @param {number} maxToi\n     * @param {boolean} solid\n     * @returns {RawRayIntersection | undefined}\n     */\n    coCastRayAndGetNormal(handle, rayOrig, rayDir, maxToi, solid) {\n        _assertClass(rayOrig, RawVector);\n        _assertClass(rayDir, RawVector);\n        const ret = wasm.rawcolliderset_coCastRayAndGetNormal(this.__wbg_ptr, handle, rayOrig.__wbg_ptr, rayDir.__wbg_ptr, maxToi, solid);\n        return ret === 0 ? undefined : RawRayIntersection.__wrap(ret);\n    }\n    /**\n     * @param {number} handle\n     * @param {boolean} is_sensor\n     */\n    coSetSensor(handle, is_sensor) {\n        wasm.rawcolliderset_coSetSensor(this.__wbg_ptr, handle, is_sensor);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} restitution\n     */\n    coSetRestitution(handle, restitution) {\n        wasm.rawcolliderset_coSetRestitution(this.__wbg_ptr, handle, restitution);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} friction\n     */\n    coSetFriction(handle, friction) {\n        wasm.rawcolliderset_coSetFriction(this.__wbg_ptr, handle, friction);\n    }\n    /**\n     * @param {number} handle\n     * @returns {number}\n     */\n    coFrictionCombineRule(handle) {\n        const ret = wasm.rawcolliderset_coFrictionCombineRule(this.__wbg_ptr, handle);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} handle\n     * @param {number} rule\n     */\n    coSetFrictionCombineRule(handle, rule) {\n        wasm.rawcolliderset_coSetFrictionCombineRule(this.__wbg_ptr, handle, rule);\n    }\n    /**\n     * @param {number} handle\n     * @returns {number}\n     */\n    coRestitutionCombineRule(handle) {\n        const ret = wasm.rawcolliderset_coRestitutionCombineRule(this.__wbg_ptr, handle);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} handle\n     * @param {number} rule\n     */\n    coSetRestitutionCombineRule(handle, rule) {\n        wasm.rawcolliderset_coSetRestitutionCombineRule(this.__wbg_ptr, handle, rule);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} groups\n     */\n    coSetCollisionGroups(handle, groups) {\n        wasm.rawcolliderset_coSetCollisionGroups(this.__wbg_ptr, handle, groups);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} groups\n     */\n    coSetSolverGroups(handle, groups) {\n        wasm.rawcolliderset_coSetSolverGroups(this.__wbg_ptr, handle, groups);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} hooks\n     */\n    coSetActiveHooks(handle, hooks) {\n        wasm.rawcolliderset_coSetActiveHooks(this.__wbg_ptr, handle, hooks);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} events\n     */\n    coSetActiveEvents(handle, events) {\n        wasm.rawcolliderset_coSetActiveEvents(this.__wbg_ptr, handle, events);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} types\n     */\n    coSetActiveCollisionTypes(handle, types) {\n        wasm.rawcolliderset_coSetActiveCollisionTypes(this.__wbg_ptr, handle, types);\n    }\n    /**\n     * @param {number} handle\n     * @param {RawShape} shape\n     */\n    coSetShape(handle, shape) {\n        _assertClass(shape, RawShape);\n        wasm.rawcolliderset_coSetShape(this.__wbg_ptr, handle, shape.__wbg_ptr);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} threshold\n     */\n    coSetContactForceEventThreshold(handle, threshold) {\n        wasm.rawcolliderset_coSetContactForceEventThreshold(this.__wbg_ptr, handle, threshold);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} density\n     */\n    coSetDensity(handle, density) {\n        wasm.rawcolliderset_coSetDensity(this.__wbg_ptr, handle, density);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} mass\n     */\n    coSetMass(handle, mass) {\n        wasm.rawcolliderset_coSetMass(this.__wbg_ptr, handle, mass);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} mass\n     * @param {RawVector} centerOfMass\n     * @param {RawVector} principalAngularInertia\n     * @param {RawRotation} angularInertiaFrame\n     */\n    coSetMassProperties(handle, mass, centerOfMass, principalAngularInertia, angularInertiaFrame) {\n        _assertClass(centerOfMass, RawVector);\n        _assertClass(principalAngularInertia, RawVector);\n        _assertClass(angularInertiaFrame, RawRotation);\n        wasm.rawcolliderset_coSetMassProperties(this.__wbg_ptr, handle, mass, centerOfMass.__wbg_ptr, principalAngularInertia.__wbg_ptr, angularInertiaFrame.__wbg_ptr);\n    }\n    constructor() {\n        const ret = wasm.rawcolliderset_new();\n        this.__wbg_ptr = ret >>> 0;\n        RawColliderSetFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.rawcolliderset_len(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} handle\n     * @returns {boolean}\n     */\n    contains(handle) {\n        const ret = wasm.rawcolliderset_contains(this.__wbg_ptr, handle);\n        return ret !== 0;\n    }\n    /**\n     * @param {boolean} enabled\n     * @param {RawShape} shape\n     * @param {RawVector} translation\n     * @param {RawRotation} rotation\n     * @param {number} massPropsMode\n     * @param {number} mass\n     * @param {RawVector} centerOfMass\n     * @param {RawVector} principalAngularInertia\n     * @param {RawRotation} angularInertiaFrame\n     * @param {number} density\n     * @param {number} friction\n     * @param {number} restitution\n     * @param {number} frictionCombineRule\n     * @param {number} restitutionCombineRule\n     * @param {boolean} isSensor\n     * @param {number} collisionGroups\n     * @param {number} solverGroups\n     * @param {number} activeCollisionTypes\n     * @param {number} activeHooks\n     * @param {number} activeEvents\n     * @param {number} contactForceEventThreshold\n     * @param {number} contactSkin\n     * @param {boolean} hasParent\n     * @param {number} parent\n     * @param {RawRigidBodySet} bodies\n     * @returns {number | undefined}\n     */\n    createCollider(enabled, shape, translation, rotation, massPropsMode, mass, centerOfMass, principalAngularInertia, angularInertiaFrame, density, friction, restitution, frictionCombineRule, restitutionCombineRule, isSensor, collisionGroups, solverGroups, activeCollisionTypes, activeHooks, activeEvents, contactForceEventThreshold, contactSkin, hasParent, parent, bodies) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(shape, RawShape);\n            _assertClass(translation, RawVector);\n            _assertClass(rotation, RawRotation);\n            _assertClass(centerOfMass, RawVector);\n            _assertClass(principalAngularInertia, RawVector);\n            _assertClass(angularInertiaFrame, RawRotation);\n            _assertClass(bodies, RawRigidBodySet);\n            wasm.rawcolliderset_createCollider(retptr, this.__wbg_ptr, enabled, shape.__wbg_ptr, translation.__wbg_ptr, rotation.__wbg_ptr, massPropsMode, mass, centerOfMass.__wbg_ptr, principalAngularInertia.__wbg_ptr, angularInertiaFrame.__wbg_ptr, density, friction, restitution, frictionCombineRule, restitutionCombineRule, isSensor, collisionGroups, solverGroups, activeCollisionTypes, activeHooks, activeEvents, contactForceEventThreshold, contactSkin, hasParent, parent, bodies.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r2 = getDataViewMemory0().getFloat64(retptr + 8 * 1, true);\n            return r0 === 0 ? undefined : r2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * Removes a collider from this set and wake-up the rigid-body it is attached to.\n     * @param {number} handle\n     * @param {RawIslandManager} islands\n     * @param {RawRigidBodySet} bodies\n     * @param {boolean} wakeUp\n     */\n    remove(handle, islands, bodies, wakeUp) {\n        _assertClass(islands, RawIslandManager);\n        _assertClass(bodies, RawRigidBodySet);\n        wasm.rawcolliderset_remove(this.__wbg_ptr, handle, islands.__wbg_ptr, bodies.__wbg_ptr, wakeUp);\n    }\n    /**\n     * Checks if a collider with the given integer handle exists.\n     * @param {number} handle\n     * @returns {boolean}\n     */\n    isHandleValid(handle) {\n        const ret = wasm.rawcolliderset_contains(this.__wbg_ptr, handle);\n        return ret !== 0;\n    }\n    /**\n     * Applies the given JavaScript function to the integer handle of each collider managed by this collider set.\n     *\n     * # Parameters\n     * - `f(handle)`: the function to apply to the integer handle of each collider managed by this collider set. Called as `f(handle)`.\n     * @param {Function} f\n     */\n    forEachColliderHandle(f) {\n        try {\n            wasm.rawcolliderset_forEachColliderHandle(this.__wbg_ptr, addBorrowedObject(f));\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n}\n\nconst RawColliderShapeCastHitFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawcollidershapecasthit_free(ptr >>> 0, 1));\n\nexport class RawColliderShapeCastHit {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawColliderShapeCastHit.prototype);\n        obj.__wbg_ptr = ptr;\n        RawColliderShapeCastHitFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawColliderShapeCastHitFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawcollidershapecasthit_free(ptr, 0);\n    }\n    /**\n     * @returns {number}\n     */\n    colliderHandle() {\n        const ret = wasm.rawcharactercollision_handle(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {number}\n     */\n    time_of_impact() {\n        const ret = wasm.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {RawVector}\n     */\n    witness1() {\n        const ret = wasm.rawcollidershapecasthit_witness1(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    witness2() {\n        const ret = wasm.rawcollidershapecasthit_witness2(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    normal1() {\n        const ret = wasm.rawcharactercollision_translationDeltaApplied(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    normal2() {\n        const ret = wasm.rawcharactercollision_translationDeltaRemaining(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n}\n\nconst RawContactForceEventFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawcontactforceevent_free(ptr >>> 0, 1));\n\nexport class RawContactForceEvent {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawContactForceEvent.prototype);\n        obj.__wbg_ptr = ptr;\n        RawContactForceEventFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawContactForceEventFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawcontactforceevent_free(ptr, 0);\n    }\n    /**\n     * The first collider involved in the contact.\n     * @returns {number}\n     */\n    collider1() {\n        const ret = wasm.rawcharactercollision_handle(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The second collider involved in the contact.\n     * @returns {number}\n     */\n    collider2() {\n        const ret = wasm.rawcontactforceevent_collider2(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The sum of all the forces between the two colliders.\n     * @returns {RawVector}\n     */\n    total_force() {\n        const ret = wasm.rawcontactforceevent_total_force(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * The sum of the magnitudes of each force between the two colliders.\n     *\n     * Note that this is **not** the same as the magnitude of `self.total_force`.\n     * Here we are summing the magnitude of all the forces, instead of taking\n     * the magnitude of their sum.\n     * @returns {number}\n     */\n    total_force_magnitude() {\n        const ret = wasm.rawcontactforceevent_total_force_magnitude(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The world-space (unit) direction of the force with strongest magnitude.\n     * @returns {RawVector}\n     */\n    max_force_direction() {\n        const ret = wasm.rawcontactforceevent_max_force_direction(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * The magnitude of the largest force at a contact point of this contact pair.\n     * @returns {number}\n     */\n    max_force_magnitude() {\n        const ret = wasm.rawcontactforceevent_max_force_magnitude(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst RawContactManifoldFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawcontactmanifold_free(ptr >>> 0, 1));\n\nexport class RawContactManifold {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawContactManifold.prototype);\n        obj.__wbg_ptr = ptr;\n        RawContactManifoldFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawContactManifoldFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawcontactmanifold_free(ptr, 0);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    normal() {\n        const ret = wasm.rawcontactmanifold_normal(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    local_n1() {\n        const ret = wasm.rawcontactmanifold_local_n1(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    local_n2() {\n        const ret = wasm.rawcontactmanifold_local_n2(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    subshape1() {\n        const ret = wasm.rawcontactmanifold_subshape1(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {number}\n     */\n    subshape2() {\n        const ret = wasm.rawcontactmanifold_subshape2(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {number}\n     */\n    num_contacts() {\n        const ret = wasm.rawcontactmanifold_num_contacts(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} i\n     * @returns {RawVector | undefined}\n     */\n    contact_local_p1(i) {\n        const ret = wasm.rawcontactmanifold_contact_local_p1(this.__wbg_ptr, i);\n        return ret === 0 ? undefined : RawVector.__wrap(ret);\n    }\n    /**\n     * @param {number} i\n     * @returns {RawVector | undefined}\n     */\n    contact_local_p2(i) {\n        const ret = wasm.rawcontactmanifold_contact_local_p2(this.__wbg_ptr, i);\n        return ret === 0 ? undefined : RawVector.__wrap(ret);\n    }\n    /**\n     * @param {number} i\n     * @returns {number}\n     */\n    contact_dist(i) {\n        const ret = wasm.rawcontactmanifold_contact_dist(this.__wbg_ptr, i);\n        return ret;\n    }\n    /**\n     * @param {number} i\n     * @returns {number}\n     */\n    contact_fid1(i) {\n        const ret = wasm.rawcontactmanifold_contact_fid1(this.__wbg_ptr, i);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} i\n     * @returns {number}\n     */\n    contact_fid2(i) {\n        const ret = wasm.rawcontactmanifold_contact_fid2(this.__wbg_ptr, i);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} i\n     * @returns {number}\n     */\n    contact_impulse(i) {\n        const ret = wasm.rawcontactmanifold_contact_impulse(this.__wbg_ptr, i);\n        return ret;\n    }\n    /**\n     * @param {number} i\n     * @returns {number}\n     */\n    contact_tangent_impulse_x(i) {\n        const ret = wasm.rawcontactmanifold_contact_tangent_impulse_x(this.__wbg_ptr, i);\n        return ret;\n    }\n    /**\n     * @param {number} i\n     * @returns {number}\n     */\n    contact_tangent_impulse_y(i) {\n        const ret = wasm.rawcontactmanifold_contact_tangent_impulse_y(this.__wbg_ptr, i);\n        return ret;\n    }\n    /**\n     * @returns {number}\n     */\n    num_solver_contacts() {\n        const ret = wasm.rawcontactmanifold_num_solver_contacts(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} i\n     * @returns {RawVector | undefined}\n     */\n    solver_contact_point(i) {\n        const ret = wasm.rawcontactmanifold_solver_contact_point(this.__wbg_ptr, i);\n        return ret === 0 ? undefined : RawVector.__wrap(ret);\n    }\n    /**\n     * @param {number} i\n     * @returns {number}\n     */\n    solver_contact_dist(i) {\n        const ret = wasm.rawcontactmanifold_solver_contact_dist(this.__wbg_ptr, i);\n        return ret;\n    }\n    /**\n     * @param {number} i\n     * @returns {number}\n     */\n    solver_contact_friction(i) {\n        const ret = wasm.rawcontactmanifold_solver_contact_friction(this.__wbg_ptr, i);\n        return ret;\n    }\n    /**\n     * @param {number} i\n     * @returns {number}\n     */\n    solver_contact_restitution(i) {\n        const ret = wasm.rawcontactmanifold_solver_contact_restitution(this.__wbg_ptr, i);\n        return ret;\n    }\n    /**\n     * @param {number} i\n     * @returns {RawVector}\n     */\n    solver_contact_tangent_velocity(i) {\n        const ret = wasm.rawcontactmanifold_solver_contact_tangent_velocity(this.__wbg_ptr, i);\n        return RawVector.__wrap(ret);\n    }\n}\n\nconst RawContactPairFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawcontactpair_free(ptr >>> 0, 1));\n\nexport class RawContactPair {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawContactPair.prototype);\n        obj.__wbg_ptr = ptr;\n        RawContactPairFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawContactPairFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawcontactpair_free(ptr, 0);\n    }\n    /**\n     * @returns {number}\n     */\n    collider1() {\n        const ret = wasm.rawcontactpair_collider1(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {number}\n     */\n    collider2() {\n        const ret = wasm.rawcontactpair_collider2(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {number}\n     */\n    numContactManifolds() {\n        const ret = wasm.rawcontactpair_numContactManifolds(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} i\n     * @returns {RawContactManifold | undefined}\n     */\n    contactManifold(i) {\n        const ret = wasm.rawcontactpair_contactManifold(this.__wbg_ptr, i);\n        return ret === 0 ? undefined : RawContactManifold.__wrap(ret);\n    }\n}\n\nconst RawDebugRenderPipelineFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawdebugrenderpipeline_free(ptr >>> 0, 1));\n\nexport class RawDebugRenderPipeline {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawDebugRenderPipelineFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawdebugrenderpipeline_free(ptr, 0);\n    }\n    constructor() {\n        const ret = wasm.rawdebugrenderpipeline_new();\n        this.__wbg_ptr = ret >>> 0;\n        RawDebugRenderPipelineFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @returns {Float32Array}\n     */\n    vertices() {\n        const ret = wasm.rawdebugrenderpipeline_vertices(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @returns {Float32Array}\n     */\n    colors() {\n        const ret = wasm.rawdebugrenderpipeline_colors(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {RawRigidBodySet} bodies\n     * @param {RawColliderSet} colliders\n     * @param {RawImpulseJointSet} impulse_joints\n     * @param {RawMultibodyJointSet} multibody_joints\n     * @param {RawNarrowPhase} narrow_phase\n     */\n    render(bodies, colliders, impulse_joints, multibody_joints, narrow_phase) {\n        _assertClass(bodies, RawRigidBodySet);\n        _assertClass(colliders, RawColliderSet);\n        _assertClass(impulse_joints, RawImpulseJointSet);\n        _assertClass(multibody_joints, RawMultibodyJointSet);\n        _assertClass(narrow_phase, RawNarrowPhase);\n        wasm.rawdebugrenderpipeline_render(this.__wbg_ptr, bodies.__wbg_ptr, colliders.__wbg_ptr, impulse_joints.__wbg_ptr, multibody_joints.__wbg_ptr, narrow_phase.__wbg_ptr);\n    }\n}\n\nconst RawDeserializedWorldFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawdeserializedworld_free(ptr >>> 0, 1));\n\nexport class RawDeserializedWorld {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawDeserializedWorld.prototype);\n        obj.__wbg_ptr = ptr;\n        RawDeserializedWorldFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawDeserializedWorldFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawdeserializedworld_free(ptr, 0);\n    }\n    /**\n     * @returns {RawVector | undefined}\n     */\n    takeGravity() {\n        const ret = wasm.rawdeserializedworld_takeGravity(this.__wbg_ptr);\n        return ret === 0 ? undefined : RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {RawIntegrationParameters | undefined}\n     */\n    takeIntegrationParameters() {\n        const ret = wasm.rawdeserializedworld_takeIntegrationParameters(this.__wbg_ptr);\n        return ret === 0 ? undefined : RawIntegrationParameters.__wrap(ret);\n    }\n    /**\n     * @returns {RawIslandManager | undefined}\n     */\n    takeIslandManager() {\n        const ret = wasm.rawdeserializedworld_takeIslandManager(this.__wbg_ptr);\n        return ret === 0 ? undefined : RawIslandManager.__wrap(ret);\n    }\n    /**\n     * @returns {RawBroadPhase | undefined}\n     */\n    takeBroadPhase() {\n        const ret = wasm.rawdeserializedworld_takeBroadPhase(this.__wbg_ptr);\n        return ret === 0 ? undefined : RawBroadPhase.__wrap(ret);\n    }\n    /**\n     * @returns {RawNarrowPhase | undefined}\n     */\n    takeNarrowPhase() {\n        const ret = wasm.rawdeserializedworld_takeNarrowPhase(this.__wbg_ptr);\n        return ret === 0 ? undefined : RawNarrowPhase.__wrap(ret);\n    }\n    /**\n     * @returns {RawRigidBodySet | undefined}\n     */\n    takeBodies() {\n        const ret = wasm.rawdeserializedworld_takeBodies(this.__wbg_ptr);\n        return ret === 0 ? undefined : RawRigidBodySet.__wrap(ret);\n    }\n    /**\n     * @returns {RawColliderSet | undefined}\n     */\n    takeColliders() {\n        const ret = wasm.rawdeserializedworld_takeColliders(this.__wbg_ptr);\n        return ret === 0 ? undefined : RawColliderSet.__wrap(ret);\n    }\n    /**\n     * @returns {RawImpulseJointSet | undefined}\n     */\n    takeImpulseJoints() {\n        const ret = wasm.rawdeserializedworld_takeImpulseJoints(this.__wbg_ptr);\n        return ret === 0 ? undefined : RawImpulseJointSet.__wrap(ret);\n    }\n    /**\n     * @returns {RawMultibodyJointSet | undefined}\n     */\n    takeMultibodyJoints() {\n        const ret = wasm.rawdeserializedworld_takeMultibodyJoints(this.__wbg_ptr);\n        return ret === 0 ? undefined : RawMultibodyJointSet.__wrap(ret);\n    }\n}\n\nconst RawDynamicRayCastVehicleControllerFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawdynamicraycastvehiclecontroller_free(ptr >>> 0, 1));\n\nexport class RawDynamicRayCastVehicleController {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawDynamicRayCastVehicleControllerFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawdynamicraycastvehiclecontroller_free(ptr, 0);\n    }\n    /**\n     * @param {number} chassis\n     */\n    constructor(chassis) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_new(chassis);\n        this.__wbg_ptr = ret >>> 0;\n        RawDynamicRayCastVehicleControllerFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @returns {number}\n     */\n    current_vehicle_speed() {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_current_vehicle_speed(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {number}\n     */\n    chassis() {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_chassis(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {number}\n     */\n    index_up_axis() {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_index_up_axis(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} axis\n     */\n    set_index_up_axis(axis) {\n        wasm.rawdynamicraycastvehiclecontroller_set_index_up_axis(this.__wbg_ptr, axis);\n    }\n    /**\n     * @returns {number}\n     */\n    index_forward_axis() {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_index_forward_axis(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} axis\n     */\n    set_index_forward_axis(axis) {\n        wasm.rawdynamicraycastvehiclecontroller_set_index_forward_axis(this.__wbg_ptr, axis);\n    }\n    /**\n     * @param {RawVector} chassis_connection_cs\n     * @param {RawVector} direction_cs\n     * @param {RawVector} axle_cs\n     * @param {number} suspension_rest_length\n     * @param {number} radius\n     */\n    add_wheel(chassis_connection_cs, direction_cs, axle_cs, suspension_rest_length, radius) {\n        _assertClass(chassis_connection_cs, RawVector);\n        _assertClass(direction_cs, RawVector);\n        _assertClass(axle_cs, RawVector);\n        wasm.rawdynamicraycastvehiclecontroller_add_wheel(this.__wbg_ptr, chassis_connection_cs.__wbg_ptr, direction_cs.__wbg_ptr, axle_cs.__wbg_ptr, suspension_rest_length, radius);\n    }\n    /**\n     * @returns {number}\n     */\n    num_wheels() {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_num_wheels(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} dt\n     * @param {RawRigidBodySet} bodies\n     * @param {RawColliderSet} colliders\n     * @param {RawQueryPipeline} queries\n     * @param {number} filter_flags\n     * @param {number | null | undefined} filter_groups\n     * @param {Function} filter_predicate\n     */\n    update_vehicle(dt, bodies, colliders, queries, filter_flags, filter_groups, filter_predicate) {\n        try {\n            _assertClass(bodies, RawRigidBodySet);\n            _assertClass(colliders, RawColliderSet);\n            _assertClass(queries, RawQueryPipeline);\n            wasm.rawdynamicraycastvehiclecontroller_update_vehicle(this.__wbg_ptr, dt, bodies.__wbg_ptr, colliders.__wbg_ptr, queries.__wbg_ptr, filter_flags, isLikeNone(filter_groups) ? 0x100000001 : (filter_groups) >>> 0, addBorrowedObject(filter_predicate));\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n     * @param {number} i\n     * @returns {RawVector | undefined}\n     */\n    wheel_chassis_connection_point_cs(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_chassis_connection_point_cs(this.__wbg_ptr, i);\n        return ret === 0 ? undefined : RawVector.__wrap(ret);\n    }\n    /**\n     * @param {number} i\n     * @param {RawVector} value\n     */\n    set_wheel_chassis_connection_point_cs(i, value) {\n        _assertClass(value, RawVector);\n        wasm.rawdynamicraycastvehiclecontroller_set_wheel_chassis_connection_point_cs(this.__wbg_ptr, i, value.__wbg_ptr);\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_suspension_rest_length(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_suspension_rest_length(this.__wbg_ptr, i);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} i\n     * @param {number} value\n     */\n    set_wheel_suspension_rest_length(i, value) {\n        wasm.rawdynamicraycastvehiclecontroller_set_wheel_suspension_rest_length(this.__wbg_ptr, i, value);\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_max_suspension_travel(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_max_suspension_travel(this.__wbg_ptr, i);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} i\n     * @param {number} value\n     */\n    set_wheel_max_suspension_travel(i, value) {\n        wasm.rawdynamicraycastvehiclecontroller_set_wheel_max_suspension_travel(this.__wbg_ptr, i, value);\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_radius(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_radius(this.__wbg_ptr, i);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} i\n     * @param {number} value\n     */\n    set_wheel_radius(i, value) {\n        wasm.rawdynamicraycastvehiclecontroller_set_wheel_radius(this.__wbg_ptr, i, value);\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_suspension_stiffness(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_suspension_stiffness(this.__wbg_ptr, i);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} i\n     * @param {number} value\n     */\n    set_wheel_suspension_stiffness(i, value) {\n        wasm.rawdynamicraycastvehiclecontroller_set_wheel_suspension_stiffness(this.__wbg_ptr, i, value);\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_suspension_compression(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_suspension_compression(this.__wbg_ptr, i);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} i\n     * @param {number} value\n     */\n    set_wheel_suspension_compression(i, value) {\n        wasm.rawdynamicraycastvehiclecontroller_set_wheel_suspension_compression(this.__wbg_ptr, i, value);\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_suspension_relaxation(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_suspension_relaxation(this.__wbg_ptr, i);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} i\n     * @param {number} value\n     */\n    set_wheel_suspension_relaxation(i, value) {\n        wasm.rawdynamicraycastvehiclecontroller_set_wheel_suspension_relaxation(this.__wbg_ptr, i, value);\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_max_suspension_force(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_max_suspension_force(this.__wbg_ptr, i);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} i\n     * @param {number} value\n     */\n    set_wheel_max_suspension_force(i, value) {\n        wasm.rawdynamicraycastvehiclecontroller_set_wheel_max_suspension_force(this.__wbg_ptr, i, value);\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_brake(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_brake(this.__wbg_ptr, i);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} i\n     * @param {number} value\n     */\n    set_wheel_brake(i, value) {\n        wasm.rawdynamicraycastvehiclecontroller_set_wheel_brake(this.__wbg_ptr, i, value);\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_steering(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_steering(this.__wbg_ptr, i);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} i\n     * @param {number} value\n     */\n    set_wheel_steering(i, value) {\n        wasm.rawdynamicraycastvehiclecontroller_set_wheel_steering(this.__wbg_ptr, i, value);\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_engine_force(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_engine_force(this.__wbg_ptr, i);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} i\n     * @param {number} value\n     */\n    set_wheel_engine_force(i, value) {\n        wasm.rawdynamicraycastvehiclecontroller_set_wheel_engine_force(this.__wbg_ptr, i, value);\n    }\n    /**\n     * @param {number} i\n     * @returns {RawVector | undefined}\n     */\n    wheel_direction_cs(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_direction_cs(this.__wbg_ptr, i);\n        return ret === 0 ? undefined : RawVector.__wrap(ret);\n    }\n    /**\n     * @param {number} i\n     * @param {RawVector} value\n     */\n    set_wheel_direction_cs(i, value) {\n        _assertClass(value, RawVector);\n        wasm.rawdynamicraycastvehiclecontroller_set_wheel_direction_cs(this.__wbg_ptr, i, value.__wbg_ptr);\n    }\n    /**\n     * @param {number} i\n     * @returns {RawVector | undefined}\n     */\n    wheel_axle_cs(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_axle_cs(this.__wbg_ptr, i);\n        return ret === 0 ? undefined : RawVector.__wrap(ret);\n    }\n    /**\n     * @param {number} i\n     * @param {RawVector} value\n     */\n    set_wheel_axle_cs(i, value) {\n        _assertClass(value, RawVector);\n        wasm.rawdynamicraycastvehiclecontroller_set_wheel_axle_cs(this.__wbg_ptr, i, value.__wbg_ptr);\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_friction_slip(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_friction_slip(this.__wbg_ptr, i);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} i\n     * @param {number} value\n     */\n    set_wheel_friction_slip(i, value) {\n        wasm.rawdynamicraycastvehiclecontroller_set_wheel_friction_slip(this.__wbg_ptr, i, value);\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_side_friction_stiffness(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_side_friction_stiffness(this.__wbg_ptr, i);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} i\n     * @param {number} stiffness\n     */\n    set_wheel_side_friction_stiffness(i, stiffness) {\n        wasm.rawdynamicraycastvehiclecontroller_set_wheel_side_friction_stiffness(this.__wbg_ptr, i, stiffness);\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_rotation(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_rotation(this.__wbg_ptr, i);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_forward_impulse(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_forward_impulse(this.__wbg_ptr, i);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_side_impulse(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_side_impulse(this.__wbg_ptr, i);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_suspension_force(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_suspension_force(this.__wbg_ptr, i);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} i\n     * @returns {RawVector | undefined}\n     */\n    wheel_contact_normal_ws(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_contact_normal_ws(this.__wbg_ptr, i);\n        return ret === 0 ? undefined : RawVector.__wrap(ret);\n    }\n    /**\n     * @param {number} i\n     * @returns {RawVector | undefined}\n     */\n    wheel_contact_point_ws(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_contact_point_ws(this.__wbg_ptr, i);\n        return ret === 0 ? undefined : RawVector.__wrap(ret);\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_suspension_length(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_suspension_length(this.__wbg_ptr, i);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} i\n     * @returns {RawVector | undefined}\n     */\n    wheel_hard_point_ws(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_hard_point_ws(this.__wbg_ptr, i);\n        return ret === 0 ? undefined : RawVector.__wrap(ret);\n    }\n    /**\n     * @param {number} i\n     * @returns {boolean}\n     */\n    wheel_is_in_contact(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_is_in_contact(this.__wbg_ptr, i);\n        return ret !== 0;\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_ground_object(i) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rawdynamicraycastvehiclecontroller_wheel_ground_object(retptr, this.__wbg_ptr, i);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r2 = getDataViewMemory0().getFloat64(retptr + 8 * 1, true);\n            return r0 === 0 ? undefined : r2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst RawEventQueueFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_raweventqueue_free(ptr >>> 0, 1));\n/**\n * A structure responsible for collecting events generated\n * by the physics engine.\n */\nexport class RawEventQueue {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawEventQueueFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_raweventqueue_free(ptr, 0);\n    }\n    /**\n     * Creates a new event collector.\n     *\n     * # Parameters\n     * - `autoDrain`: setting this to `true` is strongly recommended. If true, the collector will\n     * be automatically drained before each `world.step(collector)`. If false, the collector will\n     * keep all events in memory unless it is manually drained/cleared; this may lead to unbounded use of\n     * RAM if no drain is performed.\n     * @param {boolean} autoDrain\n     */\n    constructor(autoDrain) {\n        const ret = wasm.raweventqueue_new(autoDrain);\n        this.__wbg_ptr = ret >>> 0;\n        RawEventQueueFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Applies the given javascript closure on each collision event of this collector, then clear\n     * the internal collision event buffer.\n     *\n     * # Parameters\n     * - `f(handle1, handle2, started)`:  JavaScript closure applied to each collision event. The\n     * closure should take three arguments: two integers representing the handles of the colliders\n     * involved in the collision, and a boolean indicating if the collision started (true) or stopped\n     * (false).\n     * @param {Function} f\n     */\n    drainCollisionEvents(f) {\n        try {\n            wasm.raweventqueue_drainCollisionEvents(this.__wbg_ptr, addBorrowedObject(f));\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n     * @param {Function} f\n     */\n    drainContactForceEvents(f) {\n        try {\n            wasm.raweventqueue_drainContactForceEvents(this.__wbg_ptr, addBorrowedObject(f));\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n     * Removes all events contained by this collector.\n     */\n    clear() {\n        wasm.raweventqueue_clear(this.__wbg_ptr);\n    }\n}\n\nconst RawGenericJointFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawgenericjoint_free(ptr >>> 0, 1));\n\nexport class RawGenericJoint {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawGenericJoint.prototype);\n        obj.__wbg_ptr = ptr;\n        RawGenericJointFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawGenericJointFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawgenericjoint_free(ptr, 0);\n    }\n    /**\n     * Creates a new joint descriptor that builds generic joints.\n     *\n     * Generic joints allow arbitrary axes of freedom to be selected\n     * for the joint from the available 6 degrees of freedom.\n     * @param {RawVector} anchor1\n     * @param {RawVector} anchor2\n     * @param {RawVector} axis\n     * @param {number} lockedAxes\n     * @returns {RawGenericJoint | undefined}\n     */\n    static generic(anchor1, anchor2, axis, lockedAxes) {\n        _assertClass(anchor1, RawVector);\n        _assertClass(anchor2, RawVector);\n        _assertClass(axis, RawVector);\n        const ret = wasm.rawgenericjoint_generic(anchor1.__wbg_ptr, anchor2.__wbg_ptr, axis.__wbg_ptr, lockedAxes);\n        return ret === 0 ? undefined : RawGenericJoint.__wrap(ret);\n    }\n    /**\n     * @param {number} rest_length\n     * @param {number} stiffness\n     * @param {number} damping\n     * @param {RawVector} anchor1\n     * @param {RawVector} anchor2\n     * @returns {RawGenericJoint}\n     */\n    static spring(rest_length, stiffness, damping, anchor1, anchor2) {\n        _assertClass(anchor1, RawVector);\n        _assertClass(anchor2, RawVector);\n        const ret = wasm.rawgenericjoint_spring(rest_length, stiffness, damping, anchor1.__wbg_ptr, anchor2.__wbg_ptr);\n        return RawGenericJoint.__wrap(ret);\n    }\n    /**\n     * @param {number} length\n     * @param {RawVector} anchor1\n     * @param {RawVector} anchor2\n     * @returns {RawGenericJoint}\n     */\n    static rope(length, anchor1, anchor2) {\n        _assertClass(anchor1, RawVector);\n        _assertClass(anchor2, RawVector);\n        const ret = wasm.rawgenericjoint_rope(length, anchor1.__wbg_ptr, anchor2.__wbg_ptr);\n        return RawGenericJoint.__wrap(ret);\n    }\n    /**\n     * Create a new joint descriptor that builds spherical joints.\n     *\n     * A spherical joints allows three relative rotational degrees of freedom\n     * by preventing any relative translation between the anchors of the\n     * two attached rigid-bodies.\n     * @param {RawVector} anchor1\n     * @param {RawVector} anchor2\n     * @returns {RawGenericJoint}\n     */\n    static spherical(anchor1, anchor2) {\n        _assertClass(anchor1, RawVector);\n        _assertClass(anchor2, RawVector);\n        const ret = wasm.rawgenericjoint_spherical(anchor1.__wbg_ptr, anchor2.__wbg_ptr);\n        return RawGenericJoint.__wrap(ret);\n    }\n    /**\n     * Creates a new joint descriptor that builds a Prismatic joint.\n     *\n     * A prismatic joint removes all the degrees of freedom between the\n     * affected bodies, except for the translation along one axis.\n     *\n     * Returns `None` if any of the provided axes cannot be normalized.\n     * @param {RawVector} anchor1\n     * @param {RawVector} anchor2\n     * @param {RawVector} axis\n     * @param {boolean} limitsEnabled\n     * @param {number} limitsMin\n     * @param {number} limitsMax\n     * @returns {RawGenericJoint | undefined}\n     */\n    static prismatic(anchor1, anchor2, axis, limitsEnabled, limitsMin, limitsMax) {\n        _assertClass(anchor1, RawVector);\n        _assertClass(anchor2, RawVector);\n        _assertClass(axis, RawVector);\n        const ret = wasm.rawgenericjoint_prismatic(anchor1.__wbg_ptr, anchor2.__wbg_ptr, axis.__wbg_ptr, limitsEnabled, limitsMin, limitsMax);\n        return ret === 0 ? undefined : RawGenericJoint.__wrap(ret);\n    }\n    /**\n     * Creates a new joint descriptor that builds a Fixed joint.\n     *\n     * A fixed joint removes all the degrees of freedom between the affected bodies.\n     * @param {RawVector} anchor1\n     * @param {RawRotation} axes1\n     * @param {RawVector} anchor2\n     * @param {RawRotation} axes2\n     * @returns {RawGenericJoint}\n     */\n    static fixed(anchor1, axes1, anchor2, axes2) {\n        _assertClass(anchor1, RawVector);\n        _assertClass(axes1, RawRotation);\n        _assertClass(anchor2, RawVector);\n        _assertClass(axes2, RawRotation);\n        const ret = wasm.rawgenericjoint_fixed(anchor1.__wbg_ptr, axes1.__wbg_ptr, anchor2.__wbg_ptr, axes2.__wbg_ptr);\n        return RawGenericJoint.__wrap(ret);\n    }\n    /**\n     * Create a new joint descriptor that builds Revolute joints.\n     *\n     * A revolute joint removes all degrees of freedom between the affected\n     * bodies except for the rotation along one axis.\n     * @param {RawVector} anchor1\n     * @param {RawVector} anchor2\n     * @param {RawVector} axis\n     * @returns {RawGenericJoint | undefined}\n     */\n    static revolute(anchor1, anchor2, axis) {\n        _assertClass(anchor1, RawVector);\n        _assertClass(anchor2, RawVector);\n        _assertClass(axis, RawVector);\n        const ret = wasm.rawgenericjoint_revolute(anchor1.__wbg_ptr, anchor2.__wbg_ptr, axis.__wbg_ptr);\n        return ret === 0 ? undefined : RawGenericJoint.__wrap(ret);\n    }\n}\n\nconst RawImpulseJointSetFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawimpulsejointset_free(ptr >>> 0, 1));\n\nexport class RawImpulseJointSet {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawImpulseJointSet.prototype);\n        obj.__wbg_ptr = ptr;\n        RawImpulseJointSetFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawImpulseJointSetFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawimpulsejointset_free(ptr, 0);\n    }\n    /**\n     * The type of this joint.\n     * @param {number} handle\n     * @returns {RawJointType}\n     */\n    jointType(handle) {\n        const ret = wasm.rawimpulsejointset_jointType(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * The unique integer identifier of the first rigid-body this joint it attached to.\n     * @param {number} handle\n     * @returns {number}\n     */\n    jointBodyHandle1(handle) {\n        const ret = wasm.rawimpulsejointset_jointBodyHandle1(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * The unique integer identifier of the second rigid-body this joint is attached to.\n     * @param {number} handle\n     * @returns {number}\n     */\n    jointBodyHandle2(handle) {\n        const ret = wasm.rawimpulsejointset_jointBodyHandle2(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * The angular part of the joint’s local frame relative to the first rigid-body it is attached to.\n     * @param {number} handle\n     * @returns {RawRotation}\n     */\n    jointFrameX1(handle) {\n        const ret = wasm.rawimpulsejointset_jointFrameX1(this.__wbg_ptr, handle);\n        return RawRotation.__wrap(ret);\n    }\n    /**\n     * The angular part of the joint’s local frame relative to the second rigid-body it is attached to.\n     * @param {number} handle\n     * @returns {RawRotation}\n     */\n    jointFrameX2(handle) {\n        const ret = wasm.rawimpulsejointset_jointFrameX2(this.__wbg_ptr, handle);\n        return RawRotation.__wrap(ret);\n    }\n    /**\n     * The position of the first anchor of this joint.\n     *\n     * The first anchor gives the position of the points application point on the\n     * local frame of the first rigid-body it is attached to.\n     * @param {number} handle\n     * @returns {RawVector}\n     */\n    jointAnchor1(handle) {\n        const ret = wasm.rawimpulsejointset_jointAnchor1(this.__wbg_ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * The position of the second anchor of this joint.\n     *\n     * The second anchor gives the position of the points application point on the\n     * local frame of the second rigid-body it is attached to.\n     * @param {number} handle\n     * @returns {RawVector}\n     */\n    jointAnchor2(handle) {\n        const ret = wasm.rawimpulsejointset_jointAnchor2(this.__wbg_ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * Sets the position of the first local anchor\n     * @param {number} handle\n     * @param {RawVector} newPos\n     */\n    jointSetAnchor1(handle, newPos) {\n        _assertClass(newPos, RawVector);\n        wasm.rawimpulsejointset_jointSetAnchor1(this.__wbg_ptr, handle, newPos.__wbg_ptr);\n    }\n    /**\n     * Sets the position of the second local anchor\n     * @param {number} handle\n     * @param {RawVector} newPos\n     */\n    jointSetAnchor2(handle, newPos) {\n        _assertClass(newPos, RawVector);\n        wasm.rawimpulsejointset_jointSetAnchor2(this.__wbg_ptr, handle, newPos.__wbg_ptr);\n    }\n    /**\n     * Are contacts between the rigid-bodies attached by this joint enabled?\n     * @param {number} handle\n     * @returns {boolean}\n     */\n    jointContactsEnabled(handle) {\n        const ret = wasm.rawimpulsejointset_jointContactsEnabled(this.__wbg_ptr, handle);\n        return ret !== 0;\n    }\n    /**\n     * Sets whether contacts are enabled between the rigid-bodies attached by this joint.\n     * @param {number} handle\n     * @param {boolean} enabled\n     */\n    jointSetContactsEnabled(handle, enabled) {\n        wasm.rawimpulsejointset_jointSetContactsEnabled(this.__wbg_ptr, handle, enabled);\n    }\n    /**\n     * Are the limits for this joint enabled?\n     * @param {number} handle\n     * @param {RawJointAxis} axis\n     * @returns {boolean}\n     */\n    jointLimitsEnabled(handle, axis) {\n        const ret = wasm.rawimpulsejointset_jointLimitsEnabled(this.__wbg_ptr, handle, axis);\n        return ret !== 0;\n    }\n    /**\n     * Return the lower limit along the given joint axis.\n     * @param {number} handle\n     * @param {RawJointAxis} axis\n     * @returns {number}\n     */\n    jointLimitsMin(handle, axis) {\n        const ret = wasm.rawimpulsejointset_jointLimitsMin(this.__wbg_ptr, handle, axis);\n        return ret;\n    }\n    /**\n     * If this is a prismatic joint, returns its upper limit.\n     * @param {number} handle\n     * @param {RawJointAxis} axis\n     * @returns {number}\n     */\n    jointLimitsMax(handle, axis) {\n        const ret = wasm.rawimpulsejointset_jointLimitsMax(this.__wbg_ptr, handle, axis);\n        return ret;\n    }\n    /**\n     * Enables and sets the joint limits\n     * @param {number} handle\n     * @param {RawJointAxis} axis\n     * @param {number} min\n     * @param {number} max\n     */\n    jointSetLimits(handle, axis, min, max) {\n        wasm.rawimpulsejointset_jointSetLimits(this.__wbg_ptr, handle, axis, min, max);\n    }\n    /**\n     * @param {number} handle\n     * @param {RawJointAxis} axis\n     * @param {RawMotorModel} model\n     */\n    jointConfigureMotorModel(handle, axis, model) {\n        wasm.rawimpulsejointset_jointConfigureMotorModel(this.__wbg_ptr, handle, axis, model);\n    }\n    /**\n     * @param {number} handle\n     * @param {RawJointAxis} axis\n     * @param {number} targetVel\n     * @param {number} factor\n     */\n    jointConfigureMotorVelocity(handle, axis, targetVel, factor) {\n        wasm.rawimpulsejointset_jointConfigureMotorVelocity(this.__wbg_ptr, handle, axis, targetVel, factor);\n    }\n    /**\n     * @param {number} handle\n     * @param {RawJointAxis} axis\n     * @param {number} targetPos\n     * @param {number} stiffness\n     * @param {number} damping\n     */\n    jointConfigureMotorPosition(handle, axis, targetPos, stiffness, damping) {\n        wasm.rawimpulsejointset_jointConfigureMotorPosition(this.__wbg_ptr, handle, axis, targetPos, stiffness, damping);\n    }\n    /**\n     * @param {number} handle\n     * @param {RawJointAxis} axis\n     * @param {number} targetPos\n     * @param {number} targetVel\n     * @param {number} stiffness\n     * @param {number} damping\n     */\n    jointConfigureMotor(handle, axis, targetPos, targetVel, stiffness, damping) {\n        wasm.rawimpulsejointset_jointConfigureMotor(this.__wbg_ptr, handle, axis, targetPos, targetVel, stiffness, damping);\n    }\n    constructor() {\n        const ret = wasm.rawimpulsejointset_new();\n        this.__wbg_ptr = ret >>> 0;\n        RawImpulseJointSetFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @param {RawGenericJoint} params\n     * @param {number} parent1\n     * @param {number} parent2\n     * @param {boolean} wake_up\n     * @returns {number}\n     */\n    createJoint(params, parent1, parent2, wake_up) {\n        _assertClass(params, RawGenericJoint);\n        const ret = wasm.rawimpulsejointset_createJoint(this.__wbg_ptr, params.__wbg_ptr, parent1, parent2, wake_up);\n        return ret;\n    }\n    /**\n     * @param {number} handle\n     * @param {boolean} wakeUp\n     */\n    remove(handle, wakeUp) {\n        wasm.rawimpulsejointset_remove(this.__wbg_ptr, handle, wakeUp);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.rawimpulsejointset_len(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} handle\n     * @returns {boolean}\n     */\n    contains(handle) {\n        const ret = wasm.rawimpulsejointset_contains(this.__wbg_ptr, handle);\n        return ret !== 0;\n    }\n    /**\n     * Applies the given JavaScript function to the integer handle of each joint managed by this physics world.\n     *\n     * # Parameters\n     * - `f(handle)`: the function to apply to the integer handle of each joint managed by this set. Called as `f(collider)`.\n     * @param {Function} f\n     */\n    forEachJointHandle(f) {\n        try {\n            wasm.rawimpulsejointset_forEachJointHandle(this.__wbg_ptr, addBorrowedObject(f));\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n     * Applies the given JavaScript function to the integer handle of each joint attached to the given rigid-body.\n     *\n     * # Parameters\n     * - `f(handle)`: the function to apply to the integer handle of each joint attached to the rigid-body. Called as `f(collider)`.\n     * @param {number} body\n     * @param {Function} f\n     */\n    forEachJointAttachedToRigidBody(body, f) {\n        try {\n            wasm.rawimpulsejointset_forEachJointAttachedToRigidBody(this.__wbg_ptr, body, addBorrowedObject(f));\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n}\n\nconst RawIntegrationParametersFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawintegrationparameters_free(ptr >>> 0, 1));\n\nexport class RawIntegrationParameters {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawIntegrationParameters.prototype);\n        obj.__wbg_ptr = ptr;\n        RawIntegrationParametersFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawIntegrationParametersFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawintegrationparameters_free(ptr, 0);\n    }\n    constructor() {\n        const ret = wasm.rawintegrationparameters_new();\n        this.__wbg_ptr = ret >>> 0;\n        RawIntegrationParametersFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @returns {number}\n     */\n    get dt() {\n        const ret = wasm.rawintegrationparameters_dt(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {number}\n     */\n    get contact_erp() {\n        const ret = wasm.rawintegrationparameters_contact_erp(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {number}\n     */\n    get normalizedAllowedLinearError() {\n        const ret = wasm.rawintegrationparameters_normalizedAllowedLinearError(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {number}\n     */\n    get normalizedPredictionDistance() {\n        const ret = wasm.rawcontactforceevent_max_force_magnitude(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {number}\n     */\n    get numSolverIterations() {\n        const ret = wasm.rawintegrationparameters_numSolverIterations(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {number}\n     */\n    get numAdditionalFrictionIterations() {\n        const ret = wasm.rawintegrationparameters_numAdditionalFrictionIterations(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {number}\n     */\n    get numInternalPgsIterations() {\n        const ret = wasm.rawintegrationparameters_numInternalPgsIterations(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {number}\n     */\n    get minIslandSize() {\n        const ret = wasm.rawimpulsejointset_len(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {number}\n     */\n    get maxCcdSubsteps() {\n        const ret = wasm.rawintegrationparameters_maxCcdSubsteps(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {number}\n     */\n    get lengthUnit() {\n        const ret = wasm.rawintegrationparameters_lengthUnit(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @param {number} value\n     */\n    set dt(value) {\n        wasm.rawintegrationparameters_set_dt(this.__wbg_ptr, value);\n    }\n    /**\n     * @param {number} value\n     */\n    set contact_natural_frequency(value) {\n        wasm.rawintegrationparameters_set_contact_natural_frequency(this.__wbg_ptr, value);\n    }\n    /**\n     * @param {number} value\n     */\n    set normalizedAllowedLinearError(value) {\n        wasm.rawintegrationparameters_set_normalizedAllowedLinearError(this.__wbg_ptr, value);\n    }\n    /**\n     * @param {number} value\n     */\n    set normalizedPredictionDistance(value) {\n        wasm.rawintegrationparameters_set_normalizedPredictionDistance(this.__wbg_ptr, value);\n    }\n    /**\n     * @param {number} value\n     */\n    set numSolverIterations(value) {\n        wasm.rawintegrationparameters_set_numSolverIterations(this.__wbg_ptr, value);\n    }\n    /**\n     * @param {number} value\n     */\n    set numAdditionalFrictionIterations(value) {\n        wasm.rawintegrationparameters_set_numAdditionalFrictionIterations(this.__wbg_ptr, value);\n    }\n    /**\n     * @param {number} value\n     */\n    set numInternalPgsIterations(value) {\n        wasm.rawintegrationparameters_set_numInternalPgsIterations(this.__wbg_ptr, value);\n    }\n    /**\n     * @param {number} value\n     */\n    set minIslandSize(value) {\n        wasm.rawintegrationparameters_set_minIslandSize(this.__wbg_ptr, value);\n    }\n    /**\n     * @param {number} value\n     */\n    set maxCcdSubsteps(value) {\n        wasm.rawintegrationparameters_set_maxCcdSubsteps(this.__wbg_ptr, value);\n    }\n    /**\n     * @param {number} value\n     */\n    set lengthUnit(value) {\n        wasm.rawintegrationparameters_set_lengthUnit(this.__wbg_ptr, value);\n    }\n    switchToStandardPgsSolver() {\n        wasm.rawintegrationparameters_switchToStandardPgsSolver(this.__wbg_ptr);\n    }\n    switchToSmallStepsPgsSolver() {\n        wasm.rawintegrationparameters_switchToSmallStepsPgsSolver(this.__wbg_ptr);\n    }\n    switchToSmallStepsPgsSolverWithoutWarmstart() {\n        wasm.rawintegrationparameters_switchToSmallStepsPgsSolverWithoutWarmstart(this.__wbg_ptr);\n    }\n}\n\nconst RawIslandManagerFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawislandmanager_free(ptr >>> 0, 1));\n\nexport class RawIslandManager {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawIslandManager.prototype);\n        obj.__wbg_ptr = ptr;\n        RawIslandManagerFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawIslandManagerFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawislandmanager_free(ptr, 0);\n    }\n    constructor() {\n        const ret = wasm.rawislandmanager_new();\n        this.__wbg_ptr = ret >>> 0;\n        RawIslandManagerFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Applies the given JavaScript function to the integer handle of each active rigid-body\n     * managed by this island manager.\n     *\n     * After a short time of inactivity, a rigid-body is automatically deactivated (\"asleep\") by\n     * the physics engine in order to save computational power. A sleeping rigid-body never moves\n     * unless it is moved manually by the user.\n     *\n     * # Parameters\n     * - `f(handle)`: the function to apply to the integer handle of each active rigid-body managed by this\n     *   set. Called as `f(collider)`.\n     * @param {Function} f\n     */\n    forEachActiveRigidBodyHandle(f) {\n        try {\n            wasm.rawislandmanager_forEachActiveRigidBodyHandle(this.__wbg_ptr, addBorrowedObject(f));\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n}\n\nconst RawKinematicCharacterControllerFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawkinematiccharactercontroller_free(ptr >>> 0, 1));\n\nexport class RawKinematicCharacterController {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawKinematicCharacterControllerFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawkinematiccharactercontroller_free(ptr, 0);\n    }\n    /**\n     * @param {number} offset\n     */\n    constructor(offset) {\n        const ret = wasm.rawkinematiccharactercontroller_new(offset);\n        this.__wbg_ptr = ret >>> 0;\n        RawKinematicCharacterControllerFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @returns {RawVector}\n     */\n    up() {\n        const ret = wasm.rawcharactercollision_translationDeltaApplied(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @param {RawVector} vector\n     */\n    setUp(vector) {\n        _assertClass(vector, RawVector);\n        wasm.rawkinematiccharactercontroller_setUp(this.__wbg_ptr, vector.__wbg_ptr);\n    }\n    /**\n     * @returns {number}\n     */\n    normalNudgeFactor() {\n        const ret = wasm.rawkinematiccharactercontroller_normalNudgeFactor(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @param {number} value\n     */\n    setNormalNudgeFactor(value) {\n        wasm.rawkinematiccharactercontroller_setNormalNudgeFactor(this.__wbg_ptr, value);\n    }\n    /**\n     * @returns {number}\n     */\n    offset() {\n        const ret = wasm.rawintegrationparameters_dt(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @param {number} value\n     */\n    setOffset(value) {\n        wasm.rawkinematiccharactercontroller_setOffset(this.__wbg_ptr, value);\n    }\n    /**\n     * @returns {boolean}\n     */\n    slideEnabled() {\n        const ret = wasm.rawkinematiccharactercontroller_slideEnabled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * @param {boolean} enabled\n     */\n    setSlideEnabled(enabled) {\n        wasm.rawkinematiccharactercontroller_setSlideEnabled(this.__wbg_ptr, enabled);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    autostepMaxHeight() {\n        const ret = wasm.rawkinematiccharactercontroller_autostepMaxHeight(this.__wbg_ptr);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    autostepMinWidth() {\n        const ret = wasm.rawkinematiccharactercontroller_autostepMinWidth(this.__wbg_ptr);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @returns {boolean | undefined}\n     */\n    autostepIncludesDynamicBodies() {\n        const ret = wasm.rawkinematiccharactercontroller_autostepIncludesDynamicBodies(this.__wbg_ptr);\n        return ret === 0xFFFFFF ? undefined : ret !== 0;\n    }\n    /**\n     * @returns {boolean}\n     */\n    autostepEnabled() {\n        const ret = wasm.rawkinematiccharactercontroller_autostepEnabled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * @param {number} maxHeight\n     * @param {number} minWidth\n     * @param {boolean} includeDynamicBodies\n     */\n    enableAutostep(maxHeight, minWidth, includeDynamicBodies) {\n        wasm.rawkinematiccharactercontroller_enableAutostep(this.__wbg_ptr, maxHeight, minWidth, includeDynamicBodies);\n    }\n    disableAutostep() {\n        wasm.rawkinematiccharactercontroller_disableAutostep(this.__wbg_ptr);\n    }\n    /**\n     * @returns {number}\n     */\n    maxSlopeClimbAngle() {\n        const ret = wasm.rawkinematiccharactercontroller_maxSlopeClimbAngle(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @param {number} angle\n     */\n    setMaxSlopeClimbAngle(angle) {\n        wasm.rawkinematiccharactercontroller_setMaxSlopeClimbAngle(this.__wbg_ptr, angle);\n    }\n    /**\n     * @returns {number}\n     */\n    minSlopeSlideAngle() {\n        const ret = wasm.rawkinematiccharactercontroller_minSlopeSlideAngle(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @param {number} angle\n     */\n    setMinSlopeSlideAngle(angle) {\n        wasm.rawkinematiccharactercontroller_setMinSlopeSlideAngle(this.__wbg_ptr, angle);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    snapToGroundDistance() {\n        const ret = wasm.rawkinematiccharactercontroller_snapToGroundDistance(this.__wbg_ptr);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} distance\n     */\n    enableSnapToGround(distance) {\n        wasm.rawkinematiccharactercontroller_enableSnapToGround(this.__wbg_ptr, distance);\n    }\n    disableSnapToGround() {\n        wasm.rawkinematiccharactercontroller_disableSnapToGround(this.__wbg_ptr);\n    }\n    /**\n     * @returns {boolean}\n     */\n    snapToGroundEnabled() {\n        const ret = wasm.rawkinematiccharactercontroller_snapToGroundEnabled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * @param {number} dt\n     * @param {RawRigidBodySet} bodies\n     * @param {RawColliderSet} colliders\n     * @param {RawQueryPipeline} queries\n     * @param {number} collider_handle\n     * @param {RawVector} desired_translation_delta\n     * @param {boolean} apply_impulses_to_dynamic_bodies\n     * @param {number | null | undefined} character_mass\n     * @param {number} filter_flags\n     * @param {number | null | undefined} filter_groups\n     * @param {Function} filter_predicate\n     */\n    computeColliderMovement(dt, bodies, colliders, queries, collider_handle, desired_translation_delta, apply_impulses_to_dynamic_bodies, character_mass, filter_flags, filter_groups, filter_predicate) {\n        try {\n            _assertClass(bodies, RawRigidBodySet);\n            _assertClass(colliders, RawColliderSet);\n            _assertClass(queries, RawQueryPipeline);\n            _assertClass(desired_translation_delta, RawVector);\n            wasm.rawkinematiccharactercontroller_computeColliderMovement(this.__wbg_ptr, dt, bodies.__wbg_ptr, colliders.__wbg_ptr, queries.__wbg_ptr, collider_handle, desired_translation_delta.__wbg_ptr, apply_impulses_to_dynamic_bodies, isLikeNone(character_mass) ? 0x100000001 : Math.fround(character_mass), filter_flags, isLikeNone(filter_groups) ? 0x100000001 : (filter_groups) >>> 0, addBorrowedObject(filter_predicate));\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n     * @returns {RawVector}\n     */\n    computedMovement() {\n        const ret = wasm.rawkinematiccharactercontroller_computedMovement(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {boolean}\n     */\n    computedGrounded() {\n        const ret = wasm.rawkinematiccharactercontroller_computedGrounded(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * @returns {number}\n     */\n    numComputedCollisions() {\n        const ret = wasm.rawkinematiccharactercontroller_numComputedCollisions(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} i\n     * @param {RawCharacterCollision} collision\n     * @returns {boolean}\n     */\n    computedCollision(i, collision) {\n        _assertClass(collision, RawCharacterCollision);\n        const ret = wasm.rawkinematiccharactercontroller_computedCollision(this.__wbg_ptr, i, collision.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst RawMultibodyJointSetFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawmultibodyjointset_free(ptr >>> 0, 1));\n\nexport class RawMultibodyJointSet {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawMultibodyJointSet.prototype);\n        obj.__wbg_ptr = ptr;\n        RawMultibodyJointSetFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawMultibodyJointSetFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawmultibodyjointset_free(ptr, 0);\n    }\n    /**\n     * The type of this joint.\n     * @param {number} handle\n     * @returns {RawJointType}\n     */\n    jointType(handle) {\n        const ret = wasm.rawmultibodyjointset_jointType(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * The angular part of the joint’s local frame relative to the first rigid-body it is attached to.\n     * @param {number} handle\n     * @returns {RawRotation}\n     */\n    jointFrameX1(handle) {\n        const ret = wasm.rawmultibodyjointset_jointFrameX1(this.__wbg_ptr, handle);\n        return RawRotation.__wrap(ret);\n    }\n    /**\n     * The angular part of the joint’s local frame relative to the second rigid-body it is attached to.\n     * @param {number} handle\n     * @returns {RawRotation}\n     */\n    jointFrameX2(handle) {\n        const ret = wasm.rawmultibodyjointset_jointFrameX2(this.__wbg_ptr, handle);\n        return RawRotation.__wrap(ret);\n    }\n    /**\n     * The position of the first anchor of this joint.\n     *\n     * The first anchor gives the position of the points application point on the\n     * local frame of the first rigid-body it is attached to.\n     * @param {number} handle\n     * @returns {RawVector}\n     */\n    jointAnchor1(handle) {\n        const ret = wasm.rawmultibodyjointset_jointAnchor1(this.__wbg_ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * The position of the second anchor of this joint.\n     *\n     * The second anchor gives the position of the points application point on the\n     * local frame of the second rigid-body it is attached to.\n     * @param {number} handle\n     * @returns {RawVector}\n     */\n    jointAnchor2(handle) {\n        const ret = wasm.rawmultibodyjointset_jointAnchor2(this.__wbg_ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * Are contacts between the rigid-bodies attached by this joint enabled?\n     * @param {number} handle\n     * @returns {boolean}\n     */\n    jointContactsEnabled(handle) {\n        const ret = wasm.rawmultibodyjointset_jointContactsEnabled(this.__wbg_ptr, handle);\n        return ret !== 0;\n    }\n    /**\n     * Sets whether contacts are enabled between the rigid-bodies attached by this joint.\n     * @param {number} handle\n     * @param {boolean} enabled\n     */\n    jointSetContactsEnabled(handle, enabled) {\n        wasm.rawmultibodyjointset_jointSetContactsEnabled(this.__wbg_ptr, handle, enabled);\n    }\n    /**\n     * Are the limits for this joint enabled?\n     * @param {number} handle\n     * @param {RawJointAxis} axis\n     * @returns {boolean}\n     */\n    jointLimitsEnabled(handle, axis) {\n        const ret = wasm.rawmultibodyjointset_jointLimitsEnabled(this.__wbg_ptr, handle, axis);\n        return ret !== 0;\n    }\n    /**\n     * Return the lower limit along the given joint axis.\n     * @param {number} handle\n     * @param {RawJointAxis} axis\n     * @returns {number}\n     */\n    jointLimitsMin(handle, axis) {\n        const ret = wasm.rawmultibodyjointset_jointLimitsMin(this.__wbg_ptr, handle, axis);\n        return ret;\n    }\n    /**\n     * If this is a prismatic joint, returns its upper limit.\n     * @param {number} handle\n     * @param {RawJointAxis} axis\n     * @returns {number}\n     */\n    jointLimitsMax(handle, axis) {\n        const ret = wasm.rawmultibodyjointset_jointLimitsMax(this.__wbg_ptr, handle, axis);\n        return ret;\n    }\n    constructor() {\n        const ret = wasm.rawmultibodyjointset_new();\n        this.__wbg_ptr = ret >>> 0;\n        RawMultibodyJointSetFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @param {RawGenericJoint} params\n     * @param {number} parent1\n     * @param {number} parent2\n     * @param {boolean} wakeUp\n     * @returns {number}\n     */\n    createJoint(params, parent1, parent2, wakeUp) {\n        _assertClass(params, RawGenericJoint);\n        const ret = wasm.rawmultibodyjointset_createJoint(this.__wbg_ptr, params.__wbg_ptr, parent1, parent2, wakeUp);\n        return ret;\n    }\n    /**\n     * @param {number} handle\n     * @param {boolean} wakeUp\n     */\n    remove(handle, wakeUp) {\n        wasm.rawmultibodyjointset_remove(this.__wbg_ptr, handle, wakeUp);\n    }\n    /**\n     * @param {number} handle\n     * @returns {boolean}\n     */\n    contains(handle) {\n        const ret = wasm.rawmultibodyjointset_contains(this.__wbg_ptr, handle);\n        return ret !== 0;\n    }\n    /**\n     * Applies the given JavaScript function to the integer handle of each joint managed by this physics world.\n     *\n     * # Parameters\n     * - `f(handle)`: the function to apply to the integer handle of each joint managed by this set. Called as `f(collider)`.\n     * @param {Function} f\n     */\n    forEachJointHandle(f) {\n        try {\n            wasm.rawmultibodyjointset_forEachJointHandle(this.__wbg_ptr, addBorrowedObject(f));\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n     * Applies the given JavaScript function to the integer handle of each joint attached to the given rigid-body.\n     *\n     * # Parameters\n     * - `f(handle)`: the function to apply to the integer handle of each joint attached to the rigid-body. Called as `f(collider)`.\n     * @param {number} body\n     * @param {Function} f\n     */\n    forEachJointAttachedToRigidBody(body, f) {\n        try {\n            wasm.rawmultibodyjointset_forEachJointAttachedToRigidBody(this.__wbg_ptr, body, addBorrowedObject(f));\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n}\n\nconst RawNarrowPhaseFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawnarrowphase_free(ptr >>> 0, 1));\n\nexport class RawNarrowPhase {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawNarrowPhase.prototype);\n        obj.__wbg_ptr = ptr;\n        RawNarrowPhaseFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawNarrowPhaseFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawnarrowphase_free(ptr, 0);\n    }\n    constructor() {\n        const ret = wasm.rawnarrowphase_new();\n        this.__wbg_ptr = ret >>> 0;\n        RawNarrowPhaseFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @param {number} handle1\n     * @param {Function} f\n     */\n    contact_pairs_with(handle1, f) {\n        wasm.rawnarrowphase_contact_pairs_with(this.__wbg_ptr, handle1, addHeapObject(f));\n    }\n    /**\n     * @param {number} handle1\n     * @param {number} handle2\n     * @returns {RawContactPair | undefined}\n     */\n    contact_pair(handle1, handle2) {\n        const ret = wasm.rawnarrowphase_contact_pair(this.__wbg_ptr, handle1, handle2);\n        return ret === 0 ? undefined : RawContactPair.__wrap(ret);\n    }\n    /**\n     * @param {number} handle1\n     * @param {Function} f\n     */\n    intersection_pairs_with(handle1, f) {\n        wasm.rawnarrowphase_intersection_pairs_with(this.__wbg_ptr, handle1, addHeapObject(f));\n    }\n    /**\n     * @param {number} handle1\n     * @param {number} handle2\n     * @returns {boolean}\n     */\n    intersection_pair(handle1, handle2) {\n        const ret = wasm.rawnarrowphase_intersection_pair(this.__wbg_ptr, handle1, handle2);\n        return ret !== 0;\n    }\n}\n\nconst RawPhysicsPipelineFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawphysicspipeline_free(ptr >>> 0, 1));\n\nexport class RawPhysicsPipeline {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawPhysicsPipelineFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawphysicspipeline_free(ptr, 0);\n    }\n    constructor() {\n        const ret = wasm.rawphysicspipeline_new();\n        this.__wbg_ptr = ret >>> 0;\n        RawPhysicsPipelineFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @param {RawVector} gravity\n     * @param {RawIntegrationParameters} integrationParameters\n     * @param {RawIslandManager} islands\n     * @param {RawBroadPhase} broadPhase\n     * @param {RawNarrowPhase} narrowPhase\n     * @param {RawRigidBodySet} bodies\n     * @param {RawColliderSet} colliders\n     * @param {RawImpulseJointSet} joints\n     * @param {RawMultibodyJointSet} articulations\n     * @param {RawCCDSolver} ccd_solver\n     */\n    step(gravity, integrationParameters, islands, broadPhase, narrowPhase, bodies, colliders, joints, articulations, ccd_solver) {\n        _assertClass(gravity, RawVector);\n        _assertClass(integrationParameters, RawIntegrationParameters);\n        _assertClass(islands, RawIslandManager);\n        _assertClass(broadPhase, RawBroadPhase);\n        _assertClass(narrowPhase, RawNarrowPhase);\n        _assertClass(bodies, RawRigidBodySet);\n        _assertClass(colliders, RawColliderSet);\n        _assertClass(joints, RawImpulseJointSet);\n        _assertClass(articulations, RawMultibodyJointSet);\n        _assertClass(ccd_solver, RawCCDSolver);\n        wasm.rawphysicspipeline_step(this.__wbg_ptr, gravity.__wbg_ptr, integrationParameters.__wbg_ptr, islands.__wbg_ptr, broadPhase.__wbg_ptr, narrowPhase.__wbg_ptr, bodies.__wbg_ptr, colliders.__wbg_ptr, joints.__wbg_ptr, articulations.__wbg_ptr, ccd_solver.__wbg_ptr);\n    }\n    /**\n     * @param {RawVector} gravity\n     * @param {RawIntegrationParameters} integrationParameters\n     * @param {RawIslandManager} islands\n     * @param {RawBroadPhase} broadPhase\n     * @param {RawNarrowPhase} narrowPhase\n     * @param {RawRigidBodySet} bodies\n     * @param {RawColliderSet} colliders\n     * @param {RawImpulseJointSet} joints\n     * @param {RawMultibodyJointSet} articulations\n     * @param {RawCCDSolver} ccd_solver\n     * @param {RawEventQueue} eventQueue\n     * @param {object} hookObject\n     * @param {Function} hookFilterContactPair\n     * @param {Function} hookFilterIntersectionPair\n     */\n    stepWithEvents(gravity, integrationParameters, islands, broadPhase, narrowPhase, bodies, colliders, joints, articulations, ccd_solver, eventQueue, hookObject, hookFilterContactPair, hookFilterIntersectionPair) {\n        _assertClass(gravity, RawVector);\n        _assertClass(integrationParameters, RawIntegrationParameters);\n        _assertClass(islands, RawIslandManager);\n        _assertClass(broadPhase, RawBroadPhase);\n        _assertClass(narrowPhase, RawNarrowPhase);\n        _assertClass(bodies, RawRigidBodySet);\n        _assertClass(colliders, RawColliderSet);\n        _assertClass(joints, RawImpulseJointSet);\n        _assertClass(articulations, RawMultibodyJointSet);\n        _assertClass(ccd_solver, RawCCDSolver);\n        _assertClass(eventQueue, RawEventQueue);\n        wasm.rawphysicspipeline_stepWithEvents(this.__wbg_ptr, gravity.__wbg_ptr, integrationParameters.__wbg_ptr, islands.__wbg_ptr, broadPhase.__wbg_ptr, narrowPhase.__wbg_ptr, bodies.__wbg_ptr, colliders.__wbg_ptr, joints.__wbg_ptr, articulations.__wbg_ptr, ccd_solver.__wbg_ptr, eventQueue.__wbg_ptr, addHeapObject(hookObject), addHeapObject(hookFilterContactPair), addHeapObject(hookFilterIntersectionPair));\n    }\n}\n\nconst RawPidControllerFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawpidcontroller_free(ptr >>> 0, 1));\n\nexport class RawPidController {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawPidControllerFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawpidcontroller_free(ptr, 0);\n    }\n    /**\n     * @param {number} kp\n     * @param {number} ki\n     * @param {number} kd\n     * @param {number} axes_mask\n     */\n    constructor(kp, ki, kd, axes_mask) {\n        const ret = wasm.rawpidcontroller_new(kp, ki, kd, axes_mask);\n        this.__wbg_ptr = ret >>> 0;\n        RawPidControllerFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @param {number} kp\n     * @param {number} axes\n     */\n    set_kp(kp, axes) {\n        wasm.rawpidcontroller_set_kp(this.__wbg_ptr, kp, axes);\n    }\n    /**\n     * @param {number} ki\n     * @param {number} axes\n     */\n    set_ki(ki, axes) {\n        wasm.rawpidcontroller_set_ki(this.__wbg_ptr, ki, axes);\n    }\n    /**\n     * @param {number} kd\n     * @param {number} axes\n     */\n    set_kd(kd, axes) {\n        wasm.rawpidcontroller_set_kd(this.__wbg_ptr, kd, axes);\n    }\n    /**\n     * @param {number} axes_mask\n     */\n    set_axes_mask(axes_mask) {\n        wasm.rawpidcontroller_set_axes_mask(this.__wbg_ptr, axes_mask);\n    }\n    reset_integrals() {\n        wasm.rawpidcontroller_reset_integrals(this.__wbg_ptr);\n    }\n    /**\n     * @param {number} dt\n     * @param {RawRigidBodySet} bodies\n     * @param {number} rb_handle\n     * @param {RawVector} target_translation\n     * @param {RawVector} target_linvel\n     */\n    apply_linear_correction(dt, bodies, rb_handle, target_translation, target_linvel) {\n        _assertClass(bodies, RawRigidBodySet);\n        _assertClass(target_translation, RawVector);\n        _assertClass(target_linvel, RawVector);\n        wasm.rawpidcontroller_apply_linear_correction(this.__wbg_ptr, dt, bodies.__wbg_ptr, rb_handle, target_translation.__wbg_ptr, target_linvel.__wbg_ptr);\n    }\n    /**\n     * @param {number} dt\n     * @param {RawRigidBodySet} bodies\n     * @param {number} rb_handle\n     * @param {RawRotation} target_rotation\n     * @param {RawVector} target_angvel\n     */\n    apply_angular_correction(dt, bodies, rb_handle, target_rotation, target_angvel) {\n        _assertClass(bodies, RawRigidBodySet);\n        _assertClass(target_rotation, RawRotation);\n        _assertClass(target_angvel, RawVector);\n        wasm.rawpidcontroller_apply_angular_correction(this.__wbg_ptr, dt, bodies.__wbg_ptr, rb_handle, target_rotation.__wbg_ptr, target_angvel.__wbg_ptr);\n    }\n    /**\n     * @param {number} dt\n     * @param {RawRigidBodySet} bodies\n     * @param {number} rb_handle\n     * @param {RawVector} target_translation\n     * @param {RawVector} target_linvel\n     * @returns {RawVector}\n     */\n    linear_correction(dt, bodies, rb_handle, target_translation, target_linvel) {\n        _assertClass(bodies, RawRigidBodySet);\n        _assertClass(target_translation, RawVector);\n        _assertClass(target_linvel, RawVector);\n        const ret = wasm.rawpidcontroller_linear_correction(this.__wbg_ptr, dt, bodies.__wbg_ptr, rb_handle, target_translation.__wbg_ptr, target_linvel.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @param {number} dt\n     * @param {RawRigidBodySet} bodies\n     * @param {number} rb_handle\n     * @param {RawRotation} target_rotation\n     * @param {RawVector} target_angvel\n     * @returns {RawVector}\n     */\n    angular_correction(dt, bodies, rb_handle, target_rotation, target_angvel) {\n        _assertClass(bodies, RawRigidBodySet);\n        _assertClass(target_rotation, RawRotation);\n        _assertClass(target_angvel, RawVector);\n        const ret = wasm.rawpidcontroller_angular_correction(this.__wbg_ptr, dt, bodies.__wbg_ptr, rb_handle, target_rotation.__wbg_ptr, target_angvel.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n}\n\nconst RawPointColliderProjectionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawpointcolliderprojection_free(ptr >>> 0, 1));\n\nexport class RawPointColliderProjection {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawPointColliderProjection.prototype);\n        obj.__wbg_ptr = ptr;\n        RawPointColliderProjectionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawPointColliderProjectionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawpointcolliderprojection_free(ptr, 0);\n    }\n    /**\n     * @returns {number}\n     */\n    colliderHandle() {\n        const ret = wasm.rawpointcolliderprojection_colliderHandle(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {RawVector}\n     */\n    point() {\n        const ret = wasm.rawpointcolliderprojection_point(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {boolean}\n     */\n    isInside() {\n        const ret = wasm.rawpointcolliderprojection_isInside(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * @returns {RawFeatureType}\n     */\n    featureType() {\n        const ret = wasm.rawpointcolliderprojection_featureType(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    featureId() {\n        const ret = wasm.rawpointcolliderprojection_featureId(this.__wbg_ptr);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n}\n\nconst RawPointProjectionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawpointprojection_free(ptr >>> 0, 1));\n\nexport class RawPointProjection {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawPointProjection.prototype);\n        obj.__wbg_ptr = ptr;\n        RawPointProjectionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawPointProjectionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawpointprojection_free(ptr, 0);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    point() {\n        const ret = wasm.rawpointprojection_point(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {boolean}\n     */\n    isInside() {\n        const ret = wasm.rawpointprojection_isInside(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst RawQueryPipelineFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawquerypipeline_free(ptr >>> 0, 1));\n\nexport class RawQueryPipeline {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawQueryPipelineFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawquerypipeline_free(ptr, 0);\n    }\n    constructor() {\n        const ret = wasm.rawquerypipeline_new();\n        this.__wbg_ptr = ret >>> 0;\n        RawQueryPipelineFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @param {RawColliderSet} colliders\n     */\n    update(colliders) {\n        _assertClass(colliders, RawColliderSet);\n        wasm.rawquerypipeline_update(this.__wbg_ptr, colliders.__wbg_ptr);\n    }\n    /**\n     * @param {RawRigidBodySet} bodies\n     * @param {RawColliderSet} colliders\n     * @param {RawVector} rayOrig\n     * @param {RawVector} rayDir\n     * @param {number} maxToi\n     * @param {boolean} solid\n     * @param {number} filter_flags\n     * @param {number | null | undefined} filter_groups\n     * @param {number | null | undefined} filter_exclude_collider\n     * @param {number | null | undefined} filter_exclude_rigid_body\n     * @param {Function} filter_predicate\n     * @returns {RawRayColliderHit | undefined}\n     */\n    castRay(bodies, colliders, rayOrig, rayDir, maxToi, solid, filter_flags, filter_groups, filter_exclude_collider, filter_exclude_rigid_body, filter_predicate) {\n        try {\n            _assertClass(bodies, RawRigidBodySet);\n            _assertClass(colliders, RawColliderSet);\n            _assertClass(rayOrig, RawVector);\n            _assertClass(rayDir, RawVector);\n            const ret = wasm.rawquerypipeline_castRay(this.__wbg_ptr, bodies.__wbg_ptr, colliders.__wbg_ptr, rayOrig.__wbg_ptr, rayDir.__wbg_ptr, maxToi, solid, filter_flags, isLikeNone(filter_groups) ? 0x100000001 : (filter_groups) >>> 0, !isLikeNone(filter_exclude_collider), isLikeNone(filter_exclude_collider) ? 0 : filter_exclude_collider, !isLikeNone(filter_exclude_rigid_body), isLikeNone(filter_exclude_rigid_body) ? 0 : filter_exclude_rigid_body, addBorrowedObject(filter_predicate));\n            return ret === 0 ? undefined : RawRayColliderHit.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n     * @param {RawRigidBodySet} bodies\n     * @param {RawColliderSet} colliders\n     * @param {RawVector} rayOrig\n     * @param {RawVector} rayDir\n     * @param {number} maxToi\n     * @param {boolean} solid\n     * @param {number} filter_flags\n     * @param {number | null | undefined} filter_groups\n     * @param {number | null | undefined} filter_exclude_collider\n     * @param {number | null | undefined} filter_exclude_rigid_body\n     * @param {Function} filter_predicate\n     * @returns {RawRayColliderIntersection | undefined}\n     */\n    castRayAndGetNormal(bodies, colliders, rayOrig, rayDir, maxToi, solid, filter_flags, filter_groups, filter_exclude_collider, filter_exclude_rigid_body, filter_predicate) {\n        try {\n            _assertClass(bodies, RawRigidBodySet);\n            _assertClass(colliders, RawColliderSet);\n            _assertClass(rayOrig, RawVector);\n            _assertClass(rayDir, RawVector);\n            const ret = wasm.rawquerypipeline_castRayAndGetNormal(this.__wbg_ptr, bodies.__wbg_ptr, colliders.__wbg_ptr, rayOrig.__wbg_ptr, rayDir.__wbg_ptr, maxToi, solid, filter_flags, isLikeNone(filter_groups) ? 0x100000001 : (filter_groups) >>> 0, !isLikeNone(filter_exclude_collider), isLikeNone(filter_exclude_collider) ? 0 : filter_exclude_collider, !isLikeNone(filter_exclude_rigid_body), isLikeNone(filter_exclude_rigid_body) ? 0 : filter_exclude_rigid_body, addBorrowedObject(filter_predicate));\n            return ret === 0 ? undefined : RawRayColliderIntersection.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n     * @param {RawRigidBodySet} bodies\n     * @param {RawColliderSet} colliders\n     * @param {RawVector} rayOrig\n     * @param {RawVector} rayDir\n     * @param {number} maxToi\n     * @param {boolean} solid\n     * @param {Function} callback\n     * @param {number} filter_flags\n     * @param {number | null | undefined} filter_groups\n     * @param {number | null | undefined} filter_exclude_collider\n     * @param {number | null | undefined} filter_exclude_rigid_body\n     * @param {Function} filter_predicate\n     */\n    intersectionsWithRay(bodies, colliders, rayOrig, rayDir, maxToi, solid, callback, filter_flags, filter_groups, filter_exclude_collider, filter_exclude_rigid_body, filter_predicate) {\n        try {\n            _assertClass(bodies, RawRigidBodySet);\n            _assertClass(colliders, RawColliderSet);\n            _assertClass(rayOrig, RawVector);\n            _assertClass(rayDir, RawVector);\n            wasm.rawquerypipeline_intersectionsWithRay(this.__wbg_ptr, bodies.__wbg_ptr, colliders.__wbg_ptr, rayOrig.__wbg_ptr, rayDir.__wbg_ptr, maxToi, solid, addBorrowedObject(callback), filter_flags, isLikeNone(filter_groups) ? 0x100000001 : (filter_groups) >>> 0, !isLikeNone(filter_exclude_collider), isLikeNone(filter_exclude_collider) ? 0 : filter_exclude_collider, !isLikeNone(filter_exclude_rigid_body), isLikeNone(filter_exclude_rigid_body) ? 0 : filter_exclude_rigid_body, addBorrowedObject(filter_predicate));\n        } finally {\n            heap[stack_pointer++] = undefined;\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n     * @param {RawRigidBodySet} bodies\n     * @param {RawColliderSet} colliders\n     * @param {RawVector} shapePos\n     * @param {RawRotation} shapeRot\n     * @param {RawShape} shape\n     * @param {number} filter_flags\n     * @param {number | null | undefined} filter_groups\n     * @param {number | null | undefined} filter_exclude_collider\n     * @param {number | null | undefined} filter_exclude_rigid_body\n     * @param {Function} filter_predicate\n     * @returns {number | undefined}\n     */\n    intersectionWithShape(bodies, colliders, shapePos, shapeRot, shape, filter_flags, filter_groups, filter_exclude_collider, filter_exclude_rigid_body, filter_predicate) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(bodies, RawRigidBodySet);\n            _assertClass(colliders, RawColliderSet);\n            _assertClass(shapePos, RawVector);\n            _assertClass(shapeRot, RawRotation);\n            _assertClass(shape, RawShape);\n            wasm.rawquerypipeline_intersectionWithShape(retptr, this.__wbg_ptr, bodies.__wbg_ptr, colliders.__wbg_ptr, shapePos.__wbg_ptr, shapeRot.__wbg_ptr, shape.__wbg_ptr, filter_flags, isLikeNone(filter_groups) ? 0x100000001 : (filter_groups) >>> 0, !isLikeNone(filter_exclude_collider), isLikeNone(filter_exclude_collider) ? 0 : filter_exclude_collider, !isLikeNone(filter_exclude_rigid_body), isLikeNone(filter_exclude_rigid_body) ? 0 : filter_exclude_rigid_body, addBorrowedObject(filter_predicate));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r2 = getDataViewMemory0().getFloat64(retptr + 8 * 1, true);\n            return r0 === 0 ? undefined : r2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n     * @param {RawRigidBodySet} bodies\n     * @param {RawColliderSet} colliders\n     * @param {RawVector} point\n     * @param {boolean} solid\n     * @param {number} filter_flags\n     * @param {number | null | undefined} filter_groups\n     * @param {number | null | undefined} filter_exclude_collider\n     * @param {number | null | undefined} filter_exclude_rigid_body\n     * @param {Function} filter_predicate\n     * @returns {RawPointColliderProjection | undefined}\n     */\n    projectPoint(bodies, colliders, point, solid, filter_flags, filter_groups, filter_exclude_collider, filter_exclude_rigid_body, filter_predicate) {\n        try {\n            _assertClass(bodies, RawRigidBodySet);\n            _assertClass(colliders, RawColliderSet);\n            _assertClass(point, RawVector);\n            const ret = wasm.rawquerypipeline_projectPoint(this.__wbg_ptr, bodies.__wbg_ptr, colliders.__wbg_ptr, point.__wbg_ptr, solid, filter_flags, isLikeNone(filter_groups) ? 0x100000001 : (filter_groups) >>> 0, !isLikeNone(filter_exclude_collider), isLikeNone(filter_exclude_collider) ? 0 : filter_exclude_collider, !isLikeNone(filter_exclude_rigid_body), isLikeNone(filter_exclude_rigid_body) ? 0 : filter_exclude_rigid_body, addBorrowedObject(filter_predicate));\n            return ret === 0 ? undefined : RawPointColliderProjection.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n     * @param {RawRigidBodySet} bodies\n     * @param {RawColliderSet} colliders\n     * @param {RawVector} point\n     * @param {number} filter_flags\n     * @param {number | null | undefined} filter_groups\n     * @param {number | null | undefined} filter_exclude_collider\n     * @param {number | null | undefined} filter_exclude_rigid_body\n     * @param {Function} filter_predicate\n     * @returns {RawPointColliderProjection | undefined}\n     */\n    projectPointAndGetFeature(bodies, colliders, point, filter_flags, filter_groups, filter_exclude_collider, filter_exclude_rigid_body, filter_predicate) {\n        try {\n            _assertClass(bodies, RawRigidBodySet);\n            _assertClass(colliders, RawColliderSet);\n            _assertClass(point, RawVector);\n            const ret = wasm.rawquerypipeline_projectPointAndGetFeature(this.__wbg_ptr, bodies.__wbg_ptr, colliders.__wbg_ptr, point.__wbg_ptr, filter_flags, isLikeNone(filter_groups) ? 0x100000001 : (filter_groups) >>> 0, !isLikeNone(filter_exclude_collider), isLikeNone(filter_exclude_collider) ? 0 : filter_exclude_collider, !isLikeNone(filter_exclude_rigid_body), isLikeNone(filter_exclude_rigid_body) ? 0 : filter_exclude_rigid_body, addBorrowedObject(filter_predicate));\n            return ret === 0 ? undefined : RawPointColliderProjection.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n     * @param {RawRigidBodySet} bodies\n     * @param {RawColliderSet} colliders\n     * @param {RawVector} point\n     * @param {Function} callback\n     * @param {number} filter_flags\n     * @param {number | null | undefined} filter_groups\n     * @param {number | null | undefined} filter_exclude_collider\n     * @param {number | null | undefined} filter_exclude_rigid_body\n     * @param {Function} filter_predicate\n     */\n    intersectionsWithPoint(bodies, colliders, point, callback, filter_flags, filter_groups, filter_exclude_collider, filter_exclude_rigid_body, filter_predicate) {\n        try {\n            _assertClass(bodies, RawRigidBodySet);\n            _assertClass(colliders, RawColliderSet);\n            _assertClass(point, RawVector);\n            wasm.rawquerypipeline_intersectionsWithPoint(this.__wbg_ptr, bodies.__wbg_ptr, colliders.__wbg_ptr, point.__wbg_ptr, addBorrowedObject(callback), filter_flags, isLikeNone(filter_groups) ? 0x100000001 : (filter_groups) >>> 0, !isLikeNone(filter_exclude_collider), isLikeNone(filter_exclude_collider) ? 0 : filter_exclude_collider, !isLikeNone(filter_exclude_rigid_body), isLikeNone(filter_exclude_rigid_body) ? 0 : filter_exclude_rigid_body, addBorrowedObject(filter_predicate));\n        } finally {\n            heap[stack_pointer++] = undefined;\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n     * @param {RawRigidBodySet} bodies\n     * @param {RawColliderSet} colliders\n     * @param {RawVector} shapePos\n     * @param {RawRotation} shapeRot\n     * @param {RawVector} shapeVel\n     * @param {RawShape} shape\n     * @param {number} target_distance\n     * @param {number} maxToi\n     * @param {boolean} stop_at_penetration\n     * @param {number} filter_flags\n     * @param {number | null | undefined} filter_groups\n     * @param {number | null | undefined} filter_exclude_collider\n     * @param {number | null | undefined} filter_exclude_rigid_body\n     * @param {Function} filter_predicate\n     * @returns {RawColliderShapeCastHit | undefined}\n     */\n    castShape(bodies, colliders, shapePos, shapeRot, shapeVel, shape, target_distance, maxToi, stop_at_penetration, filter_flags, filter_groups, filter_exclude_collider, filter_exclude_rigid_body, filter_predicate) {\n        try {\n            _assertClass(bodies, RawRigidBodySet);\n            _assertClass(colliders, RawColliderSet);\n            _assertClass(shapePos, RawVector);\n            _assertClass(shapeRot, RawRotation);\n            _assertClass(shapeVel, RawVector);\n            _assertClass(shape, RawShape);\n            const ret = wasm.rawquerypipeline_castShape(this.__wbg_ptr, bodies.__wbg_ptr, colliders.__wbg_ptr, shapePos.__wbg_ptr, shapeRot.__wbg_ptr, shapeVel.__wbg_ptr, shape.__wbg_ptr, target_distance, maxToi, stop_at_penetration, filter_flags, isLikeNone(filter_groups) ? 0x100000001 : (filter_groups) >>> 0, !isLikeNone(filter_exclude_collider), isLikeNone(filter_exclude_collider) ? 0 : filter_exclude_collider, !isLikeNone(filter_exclude_rigid_body), isLikeNone(filter_exclude_rigid_body) ? 0 : filter_exclude_rigid_body, addBorrowedObject(filter_predicate));\n            return ret === 0 ? undefined : RawColliderShapeCastHit.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n     * @param {RawRigidBodySet} bodies\n     * @param {RawColliderSet} colliders\n     * @param {RawVector} shapePos\n     * @param {RawRotation} shapeRot\n     * @param {RawShape} shape\n     * @param {Function} callback\n     * @param {number} filter_flags\n     * @param {number | null | undefined} filter_groups\n     * @param {number | null | undefined} filter_exclude_collider\n     * @param {number | null | undefined} filter_exclude_rigid_body\n     * @param {Function} filter_predicate\n     */\n    intersectionsWithShape(bodies, colliders, shapePos, shapeRot, shape, callback, filter_flags, filter_groups, filter_exclude_collider, filter_exclude_rigid_body, filter_predicate) {\n        try {\n            _assertClass(bodies, RawRigidBodySet);\n            _assertClass(colliders, RawColliderSet);\n            _assertClass(shapePos, RawVector);\n            _assertClass(shapeRot, RawRotation);\n            _assertClass(shape, RawShape);\n            wasm.rawquerypipeline_intersectionsWithShape(this.__wbg_ptr, bodies.__wbg_ptr, colliders.__wbg_ptr, shapePos.__wbg_ptr, shapeRot.__wbg_ptr, shape.__wbg_ptr, addBorrowedObject(callback), filter_flags, isLikeNone(filter_groups) ? 0x100000001 : (filter_groups) >>> 0, !isLikeNone(filter_exclude_collider), isLikeNone(filter_exclude_collider) ? 0 : filter_exclude_collider, !isLikeNone(filter_exclude_rigid_body), isLikeNone(filter_exclude_rigid_body) ? 0 : filter_exclude_rigid_body, addBorrowedObject(filter_predicate));\n        } finally {\n            heap[stack_pointer++] = undefined;\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n     * @param {RawVector} aabbCenter\n     * @param {RawVector} aabbHalfExtents\n     * @param {Function} callback\n     */\n    collidersWithAabbIntersectingAabb(aabbCenter, aabbHalfExtents, callback) {\n        try {\n            _assertClass(aabbCenter, RawVector);\n            _assertClass(aabbHalfExtents, RawVector);\n            wasm.rawquerypipeline_collidersWithAabbIntersectingAabb(this.__wbg_ptr, aabbCenter.__wbg_ptr, aabbHalfExtents.__wbg_ptr, addBorrowedObject(callback));\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n}\n\nconst RawRayColliderHitFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawraycolliderhit_free(ptr >>> 0, 1));\n\nexport class RawRayColliderHit {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawRayColliderHit.prototype);\n        obj.__wbg_ptr = ptr;\n        RawRayColliderHitFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawRayColliderHitFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawraycolliderhit_free(ptr, 0);\n    }\n    /**\n     * @returns {number}\n     */\n    colliderHandle() {\n        const ret = wasm.rawcharactercollision_handle(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {number}\n     */\n    timeOfImpact() {\n        const ret = wasm.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst RawRayColliderIntersectionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawraycolliderintersection_free(ptr >>> 0, 1));\n\nexport class RawRayColliderIntersection {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawRayColliderIntersection.prototype);\n        obj.__wbg_ptr = ptr;\n        RawRayColliderIntersectionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawRayColliderIntersectionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawraycolliderintersection_free(ptr, 0);\n    }\n    /**\n     * @returns {number}\n     */\n    colliderHandle() {\n        const ret = wasm.rawpointcolliderprojection_colliderHandle(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {RawVector}\n     */\n    normal() {\n        const ret = wasm.rawcollidershapecasthit_witness1(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    time_of_impact() {\n        const ret = wasm.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {RawFeatureType}\n     */\n    featureType() {\n        const ret = wasm.rawpointcolliderprojection_featureType(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    featureId() {\n        const ret = wasm.rawpointcolliderprojection_featureId(this.__wbg_ptr);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n}\n\nconst RawRayIntersectionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawrayintersection_free(ptr >>> 0, 1));\n\nexport class RawRayIntersection {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawRayIntersection.prototype);\n        obj.__wbg_ptr = ptr;\n        RawRayIntersectionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawRayIntersectionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawrayintersection_free(ptr, 0);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    normal() {\n        const ret = wasm.rawcollidershapecasthit_witness1(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    time_of_impact() {\n        const ret = wasm.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {RawFeatureType}\n     */\n    featureType() {\n        const ret = wasm.rawpointcolliderprojection_featureType(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    featureId() {\n        const ret = wasm.rawpointcolliderprojection_featureId(this.__wbg_ptr);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n}\n\nconst RawRigidBodySetFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawrigidbodyset_free(ptr >>> 0, 1));\n\nexport class RawRigidBodySet {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawRigidBodySet.prototype);\n        obj.__wbg_ptr = ptr;\n        RawRigidBodySetFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawRigidBodySetFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawrigidbodyset_free(ptr, 0);\n    }\n    /**\n     * The world-space translation of this rigid-body.\n     * @param {number} handle\n     * @returns {RawVector}\n     */\n    rbTranslation(handle) {\n        const ret = wasm.rawrigidbodyset_rbTranslation(this.__wbg_ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * The world-space orientation of this rigid-body.\n     * @param {number} handle\n     * @returns {RawRotation}\n     */\n    rbRotation(handle) {\n        const ret = wasm.rawrigidbodyset_rbRotation(this.__wbg_ptr, handle);\n        return RawRotation.__wrap(ret);\n    }\n    /**\n     * Put the given rigid-body to sleep.\n     * @param {number} handle\n     */\n    rbSleep(handle) {\n        wasm.rawrigidbodyset_rbSleep(this.__wbg_ptr, handle);\n    }\n    /**\n     * Is this rigid-body sleeping?\n     * @param {number} handle\n     * @returns {boolean}\n     */\n    rbIsSleeping(handle) {\n        const ret = wasm.rawrigidbodyset_rbIsSleeping(this.__wbg_ptr, handle);\n        return ret !== 0;\n    }\n    /**\n     * Is the velocity of this rigid-body not zero?\n     * @param {number} handle\n     * @returns {boolean}\n     */\n    rbIsMoving(handle) {\n        const ret = wasm.rawrigidbodyset_rbIsMoving(this.__wbg_ptr, handle);\n        return ret !== 0;\n    }\n    /**\n     * The world-space predicted translation of this rigid-body.\n     *\n     * If this rigid-body is kinematic this value is set by the `setNextKinematicTranslation`\n     * method and is used for estimating the kinematic body velocity at the next timestep.\n     * For non-kinematic bodies, this value is currently unspecified.\n     * @param {number} handle\n     * @returns {RawVector}\n     */\n    rbNextTranslation(handle) {\n        const ret = wasm.rawrigidbodyset_rbNextTranslation(this.__wbg_ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * The world-space predicted orientation of this rigid-body.\n     *\n     * If this rigid-body is kinematic this value is set by the `setNextKinematicRotation`\n     * method and is used for estimating the kinematic body velocity at the next timestep.\n     * For non-kinematic bodies, this value is currently unspecified.\n     * @param {number} handle\n     * @returns {RawRotation}\n     */\n    rbNextRotation(handle) {\n        const ret = wasm.rawrigidbodyset_rbNextRotation(this.__wbg_ptr, handle);\n        return RawRotation.__wrap(ret);\n    }\n    /**\n     * Sets the translation of this rigid-body.\n     *\n     * # Parameters\n     * - `x`: the world-space position of the rigid-body along the `x` axis.\n     * - `y`: the world-space position of the rigid-body along the `y` axis.\n     * - `z`: the world-space position of the rigid-body along the `z` axis.\n     * - `wakeUp`: forces the rigid-body to wake-up so it is properly affected by forces if it\n     * wasn't moving before modifying its position.\n     * @param {number} handle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @param {boolean} wakeUp\n     */\n    rbSetTranslation(handle, x, y, z, wakeUp) {\n        wasm.rawrigidbodyset_rbSetTranslation(this.__wbg_ptr, handle, x, y, z, wakeUp);\n    }\n    /**\n     * Sets the rotation quaternion of this rigid-body.\n     *\n     * This does nothing if a zero quaternion is provided.\n     *\n     * # Parameters\n     * - `x`: the first vector component of the quaternion.\n     * - `y`: the second vector component of the quaternion.\n     * - `z`: the third vector component of the quaternion.\n     * - `w`: the scalar component of the quaternion.\n     * - `wakeUp`: forces the rigid-body to wake-up so it is properly affected by forces if it\n     * wasn't moving before modifying its position.\n     * @param {number} handle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @param {number} w\n     * @param {boolean} wakeUp\n     */\n    rbSetRotation(handle, x, y, z, w, wakeUp) {\n        wasm.rawrigidbodyset_rbSetRotation(this.__wbg_ptr, handle, x, y, z, w, wakeUp);\n    }\n    /**\n     * Sets the linear velocity of this rigid-body.\n     * @param {number} handle\n     * @param {RawVector} linvel\n     * @param {boolean} wakeUp\n     */\n    rbSetLinvel(handle, linvel, wakeUp) {\n        _assertClass(linvel, RawVector);\n        wasm.rawrigidbodyset_rbSetLinvel(this.__wbg_ptr, handle, linvel.__wbg_ptr, wakeUp);\n    }\n    /**\n     * Sets the angular velocity of this rigid-body.\n     * @param {number} handle\n     * @param {RawVector} angvel\n     * @param {boolean} wakeUp\n     */\n    rbSetAngvel(handle, angvel, wakeUp) {\n        _assertClass(angvel, RawVector);\n        wasm.rawrigidbodyset_rbSetAngvel(this.__wbg_ptr, handle, angvel.__wbg_ptr, wakeUp);\n    }\n    /**\n     * If this rigid body is kinematic, sets its future translation after the next timestep integration.\n     *\n     * This should be used instead of `rigidBody.setTranslation` to make the dynamic object\n     * interacting with this kinematic body behave as expected. Internally, Rapier will compute\n     * an artificial velocity for this rigid-body from its current position and its next kinematic\n     * position. This velocity will be used to compute forces on dynamic bodies interacting with\n     * this body.\n     *\n     * # Parameters\n     * - `x`: the world-space position of the rigid-body along the `x` axis.\n     * - `y`: the world-space position of the rigid-body along the `y` axis.\n     * - `z`: the world-space position of the rigid-body along the `z` axis.\n     * @param {number} handle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     */\n    rbSetNextKinematicTranslation(handle, x, y, z) {\n        wasm.rawrigidbodyset_rbSetNextKinematicTranslation(this.__wbg_ptr, handle, x, y, z);\n    }\n    /**\n     * If this rigid body is kinematic, sets its future rotation after the next timestep integration.\n     *\n     * This should be used instead of `rigidBody.setRotation` to make the dynamic object\n     * interacting with this kinematic body behave as expected. Internally, Rapier will compute\n     * an artificial velocity for this rigid-body from its current position and its next kinematic\n     * position. This velocity will be used to compute forces on dynamic bodies interacting with\n     * this body.\n     *\n     * # Parameters\n     * - `x`: the first vector component of the quaternion.\n     * - `y`: the second vector component of the quaternion.\n     * - `z`: the third vector component of the quaternion.\n     * - `w`: the scalar component of the quaternion.\n     * @param {number} handle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @param {number} w\n     */\n    rbSetNextKinematicRotation(handle, x, y, z, w) {\n        wasm.rawrigidbodyset_rbSetNextKinematicRotation(this.__wbg_ptr, handle, x, y, z, w);\n    }\n    /**\n     * @param {number} handle\n     * @param {RawColliderSet} colliders\n     */\n    rbRecomputeMassPropertiesFromColliders(handle, colliders) {\n        _assertClass(colliders, RawColliderSet);\n        wasm.rawrigidbodyset_rbRecomputeMassPropertiesFromColliders(this.__wbg_ptr, handle, colliders.__wbg_ptr);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} mass\n     * @param {boolean} wake_up\n     */\n    rbSetAdditionalMass(handle, mass, wake_up) {\n        wasm.rawrigidbodyset_rbSetAdditionalMass(this.__wbg_ptr, handle, mass, wake_up);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} mass\n     * @param {RawVector} centerOfMass\n     * @param {RawVector} principalAngularInertia\n     * @param {RawRotation} angularInertiaFrame\n     * @param {boolean} wake_up\n     */\n    rbSetAdditionalMassProperties(handle, mass, centerOfMass, principalAngularInertia, angularInertiaFrame, wake_up) {\n        _assertClass(centerOfMass, RawVector);\n        _assertClass(principalAngularInertia, RawVector);\n        _assertClass(angularInertiaFrame, RawRotation);\n        wasm.rawrigidbodyset_rbSetAdditionalMassProperties(this.__wbg_ptr, handle, mass, centerOfMass.__wbg_ptr, principalAngularInertia.__wbg_ptr, angularInertiaFrame.__wbg_ptr, wake_up);\n    }\n    /**\n     * The linear velocity of this rigid-body.\n     * @param {number} handle\n     * @returns {RawVector}\n     */\n    rbLinvel(handle) {\n        const ret = wasm.rawrigidbodyset_rbLinvel(this.__wbg_ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * The angular velocity of this rigid-body.\n     * @param {number} handle\n     * @returns {RawVector}\n     */\n    rbAngvel(handle) {\n        const ret = wasm.rawrigidbodyset_rbAngvel(this.__wbg_ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @param {number} handle\n     * @param {boolean} locked\n     * @param {boolean} wake_up\n     */\n    rbLockTranslations(handle, locked, wake_up) {\n        wasm.rawrigidbodyset_rbLockTranslations(this.__wbg_ptr, handle, locked, wake_up);\n    }\n    /**\n     * @param {number} handle\n     * @param {boolean} allow_x\n     * @param {boolean} allow_y\n     * @param {boolean} allow_z\n     * @param {boolean} wake_up\n     */\n    rbSetEnabledTranslations(handle, allow_x, allow_y, allow_z, wake_up) {\n        wasm.rawrigidbodyset_rbSetEnabledTranslations(this.__wbg_ptr, handle, allow_x, allow_y, allow_z, wake_up);\n    }\n    /**\n     * @param {number} handle\n     * @param {boolean} locked\n     * @param {boolean} wake_up\n     */\n    rbLockRotations(handle, locked, wake_up) {\n        wasm.rawrigidbodyset_rbLockRotations(this.__wbg_ptr, handle, locked, wake_up);\n    }\n    /**\n     * @param {number} handle\n     * @param {boolean} allow_x\n     * @param {boolean} allow_y\n     * @param {boolean} allow_z\n     * @param {boolean} wake_up\n     */\n    rbSetEnabledRotations(handle, allow_x, allow_y, allow_z, wake_up) {\n        wasm.rawrigidbodyset_rbSetEnabledRotations(this.__wbg_ptr, handle, allow_x, allow_y, allow_z, wake_up);\n    }\n    /**\n     * @param {number} handle\n     * @returns {number}\n     */\n    rbDominanceGroup(handle) {\n        const ret = wasm.rawrigidbodyset_rbDominanceGroup(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * @param {number} handle\n     * @param {number} group\n     */\n    rbSetDominanceGroup(handle, group) {\n        wasm.rawrigidbodyset_rbSetDominanceGroup(this.__wbg_ptr, handle, group);\n    }\n    /**\n     * @param {number} handle\n     * @param {boolean} enabled\n     */\n    rbEnableCcd(handle, enabled) {\n        wasm.rawrigidbodyset_rbEnableCcd(this.__wbg_ptr, handle, enabled);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} prediction\n     */\n    rbSetSoftCcdPrediction(handle, prediction) {\n        wasm.rawrigidbodyset_rbSetSoftCcdPrediction(this.__wbg_ptr, handle, prediction);\n    }\n    /**\n     * The mass of this rigid-body.\n     * @param {number} handle\n     * @returns {number}\n     */\n    rbMass(handle) {\n        const ret = wasm.rawrigidbodyset_rbMass(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * The inverse of the mass of a rigid-body.\n     *\n     * If this is zero, the rigid-body is assumed to have infinite mass.\n     * @param {number} handle\n     * @returns {number}\n     */\n    rbInvMass(handle) {\n        const ret = wasm.rawrigidbodyset_rbInvMass(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * The inverse mass taking into account translation locking.\n     * @param {number} handle\n     * @returns {RawVector}\n     */\n    rbEffectiveInvMass(handle) {\n        const ret = wasm.rawrigidbodyset_rbEffectiveInvMass(this.__wbg_ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * The center of mass of a rigid-body expressed in its local-space.\n     * @param {number} handle\n     * @returns {RawVector}\n     */\n    rbLocalCom(handle) {\n        const ret = wasm.rawrigidbodyset_rbLocalCom(this.__wbg_ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * The world-space center of mass of the rigid-body.\n     * @param {number} handle\n     * @returns {RawVector}\n     */\n    rbWorldCom(handle) {\n        const ret = wasm.rawrigidbodyset_rbWorldCom(this.__wbg_ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * The inverse of the principal angular inertia of the rigid-body.\n     *\n     * Components set to zero are assumed to be infinite along the corresponding principal axis.\n     * @param {number} handle\n     * @returns {RawVector}\n     */\n    rbInvPrincipalInertiaSqrt(handle) {\n        const ret = wasm.rawrigidbodyset_rbInvPrincipalInertiaSqrt(this.__wbg_ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * The principal vectors of the local angular inertia tensor of the rigid-body.\n     * @param {number} handle\n     * @returns {RawRotation}\n     */\n    rbPrincipalInertiaLocalFrame(handle) {\n        const ret = wasm.rawrigidbodyset_rbPrincipalInertiaLocalFrame(this.__wbg_ptr, handle);\n        return RawRotation.__wrap(ret);\n    }\n    /**\n     * The angular inertia along the principal inertia axes of the rigid-body.\n     * @param {number} handle\n     * @returns {RawVector}\n     */\n    rbPrincipalInertia(handle) {\n        const ret = wasm.rawrigidbodyset_rbPrincipalInertia(this.__wbg_ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * The square-root of the world-space inverse angular inertia tensor of the rigid-body,\n     * taking into account rotation locking.\n     * @param {number} handle\n     * @returns {RawSdpMatrix3}\n     */\n    rbEffectiveWorldInvInertiaSqrt(handle) {\n        const ret = wasm.rawrigidbodyset_rbEffectiveWorldInvInertiaSqrt(this.__wbg_ptr, handle);\n        return RawSdpMatrix3.__wrap(ret);\n    }\n    /**\n     * The effective world-space angular inertia (that takes the potential rotation locking into account) of\n     * this rigid-body.\n     * @param {number} handle\n     * @returns {RawSdpMatrix3}\n     */\n    rbEffectiveAngularInertia(handle) {\n        const ret = wasm.rawrigidbodyset_rbEffectiveAngularInertia(this.__wbg_ptr, handle);\n        return RawSdpMatrix3.__wrap(ret);\n    }\n    /**\n     * Wakes this rigid-body up.\n     *\n     * A dynamic rigid-body that does not move during several consecutive frames will\n     * be put to sleep by the physics engine, i.e., it will stop being simulated in order\n     * to avoid useless computations.\n     * This method forces a sleeping rigid-body to wake-up. This is useful, e.g., before modifying\n     * the position of a dynamic body so that it is properly simulated afterwards.\n     * @param {number} handle\n     */\n    rbWakeUp(handle) {\n        wasm.rawrigidbodyset_rbWakeUp(this.__wbg_ptr, handle);\n    }\n    /**\n     * Is Continuous Collision Detection enabled for this rigid-body?\n     * @param {number} handle\n     * @returns {boolean}\n     */\n    rbIsCcdEnabled(handle) {\n        const ret = wasm.rawrigidbodyset_rbIsCcdEnabled(this.__wbg_ptr, handle);\n        return ret !== 0;\n    }\n    /**\n     * @param {number} handle\n     * @returns {number}\n     */\n    rbSoftCcdPrediction(handle) {\n        const ret = wasm.rawrigidbodyset_rbSoftCcdPrediction(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * The number of colliders attached to this rigid-body.\n     * @param {number} handle\n     * @returns {number}\n     */\n    rbNumColliders(handle) {\n        const ret = wasm.rawrigidbodyset_rbNumColliders(this.__wbg_ptr, handle);\n        return ret >>> 0;\n    }\n    /**\n     * Retrieves the `i-th` collider attached to this rigid-body.\n     *\n     * # Parameters\n     * - `at`: The index of the collider to retrieve. Must be a number in `[0, this.numColliders()[`.\n     *         This index is **not** the same as the unique identifier of the collider.\n     * @param {number} handle\n     * @param {number} at\n     * @returns {number}\n     */\n    rbCollider(handle, at) {\n        const ret = wasm.rawrigidbodyset_rbCollider(this.__wbg_ptr, handle, at);\n        return ret;\n    }\n    /**\n     * The status of this rigid-body: fixed, dynamic, or kinematic.\n     * @param {number} handle\n     * @returns {RawRigidBodyType}\n     */\n    rbBodyType(handle) {\n        const ret = wasm.rawrigidbodyset_rbBodyType(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * Set a new status for this rigid-body: fixed, dynamic, or kinematic.\n     * @param {number} handle\n     * @param {RawRigidBodyType} status\n     * @param {boolean} wake_up\n     */\n    rbSetBodyType(handle, status, wake_up) {\n        wasm.rawrigidbodyset_rbSetBodyType(this.__wbg_ptr, handle, status, wake_up);\n    }\n    /**\n     * Is this rigid-body fixed?\n     * @param {number} handle\n     * @returns {boolean}\n     */\n    rbIsFixed(handle) {\n        const ret = wasm.rawrigidbodyset_rbIsFixed(this.__wbg_ptr, handle);\n        return ret !== 0;\n    }\n    /**\n     * Is this rigid-body kinematic?\n     * @param {number} handle\n     * @returns {boolean}\n     */\n    rbIsKinematic(handle) {\n        const ret = wasm.rawrigidbodyset_rbIsKinematic(this.__wbg_ptr, handle);\n        return ret !== 0;\n    }\n    /**\n     * Is this rigid-body dynamic?\n     * @param {number} handle\n     * @returns {boolean}\n     */\n    rbIsDynamic(handle) {\n        const ret = wasm.rawrigidbodyset_rbIsDynamic(this.__wbg_ptr, handle);\n        return ret !== 0;\n    }\n    /**\n     * The linear damping coefficient of this rigid-body.\n     * @param {number} handle\n     * @returns {number}\n     */\n    rbLinearDamping(handle) {\n        const ret = wasm.rawrigidbodyset_rbLinearDamping(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * The angular damping coefficient of this rigid-body.\n     * @param {number} handle\n     * @returns {number}\n     */\n    rbAngularDamping(handle) {\n        const ret = wasm.rawrigidbodyset_rbAngularDamping(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * @param {number} handle\n     * @param {number} factor\n     */\n    rbSetLinearDamping(handle, factor) {\n        wasm.rawrigidbodyset_rbSetLinearDamping(this.__wbg_ptr, handle, factor);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} factor\n     */\n    rbSetAngularDamping(handle, factor) {\n        wasm.rawrigidbodyset_rbSetAngularDamping(this.__wbg_ptr, handle, factor);\n    }\n    /**\n     * @param {number} handle\n     * @param {boolean} enabled\n     */\n    rbSetEnabled(handle, enabled) {\n        wasm.rawrigidbodyset_rbSetEnabled(this.__wbg_ptr, handle, enabled);\n    }\n    /**\n     * @param {number} handle\n     * @returns {boolean}\n     */\n    rbIsEnabled(handle) {\n        const ret = wasm.rawrigidbodyset_rbIsEnabled(this.__wbg_ptr, handle);\n        return ret !== 0;\n    }\n    /**\n     * @param {number} handle\n     * @returns {number}\n     */\n    rbGravityScale(handle) {\n        const ret = wasm.rawrigidbodyset_rbGravityScale(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * @param {number} handle\n     * @param {number} factor\n     * @param {boolean} wakeUp\n     */\n    rbSetGravityScale(handle, factor, wakeUp) {\n        wasm.rawrigidbodyset_rbSetGravityScale(this.__wbg_ptr, handle, factor, wakeUp);\n    }\n    /**\n     * Resets to zero all user-added forces added to this rigid-body.\n     * @param {number} handle\n     * @param {boolean} wakeUp\n     */\n    rbResetForces(handle, wakeUp) {\n        wasm.rawrigidbodyset_rbResetForces(this.__wbg_ptr, handle, wakeUp);\n    }\n    /**\n     * Resets to zero all user-added torques added to this rigid-body.\n     * @param {number} handle\n     * @param {boolean} wakeUp\n     */\n    rbResetTorques(handle, wakeUp) {\n        wasm.rawrigidbodyset_rbResetTorques(this.__wbg_ptr, handle, wakeUp);\n    }\n    /**\n     * Adds a force at the center-of-mass of this rigid-body.\n     *\n     * # Parameters\n     * - `force`: the world-space force to apply on the rigid-body.\n     * - `wakeUp`: should the rigid-body be automatically woken-up?\n     * @param {number} handle\n     * @param {RawVector} force\n     * @param {boolean} wakeUp\n     */\n    rbAddForce(handle, force, wakeUp) {\n        _assertClass(force, RawVector);\n        wasm.rawrigidbodyset_rbAddForce(this.__wbg_ptr, handle, force.__wbg_ptr, wakeUp);\n    }\n    /**\n     * Applies an impulse at the center-of-mass of this rigid-body.\n     *\n     * # Parameters\n     * - `impulse`: the world-space impulse to apply on the rigid-body.\n     * - `wakeUp`: should the rigid-body be automatically woken-up?\n     * @param {number} handle\n     * @param {RawVector} impulse\n     * @param {boolean} wakeUp\n     */\n    rbApplyImpulse(handle, impulse, wakeUp) {\n        _assertClass(impulse, RawVector);\n        wasm.rawrigidbodyset_rbApplyImpulse(this.__wbg_ptr, handle, impulse.__wbg_ptr, wakeUp);\n    }\n    /**\n     * Adds a torque at the center-of-mass of this rigid-body.\n     *\n     * # Parameters\n     * - `torque`: the world-space torque to apply on the rigid-body.\n     * - `wakeUp`: should the rigid-body be automatically woken-up?\n     * @param {number} handle\n     * @param {RawVector} torque\n     * @param {boolean} wakeUp\n     */\n    rbAddTorque(handle, torque, wakeUp) {\n        _assertClass(torque, RawVector);\n        wasm.rawrigidbodyset_rbAddTorque(this.__wbg_ptr, handle, torque.__wbg_ptr, wakeUp);\n    }\n    /**\n     * Applies an impulsive torque at the center-of-mass of this rigid-body.\n     *\n     * # Parameters\n     * - `torque impulse`: the world-space torque impulse to apply on the rigid-body.\n     * - `wakeUp`: should the rigid-body be automatically woken-up?\n     * @param {number} handle\n     * @param {RawVector} torque_impulse\n     * @param {boolean} wakeUp\n     */\n    rbApplyTorqueImpulse(handle, torque_impulse, wakeUp) {\n        _assertClass(torque_impulse, RawVector);\n        wasm.rawrigidbodyset_rbApplyTorqueImpulse(this.__wbg_ptr, handle, torque_impulse.__wbg_ptr, wakeUp);\n    }\n    /**\n     * Adds a force at the given world-space point of this rigid-body.\n     *\n     * # Parameters\n     * - `force`: the world-space force to apply on the rigid-body.\n     * - `point`: the world-space point where the impulse is to be applied on the rigid-body.\n     * - `wakeUp`: should the rigid-body be automatically woken-up?\n     * @param {number} handle\n     * @param {RawVector} force\n     * @param {RawVector} point\n     * @param {boolean} wakeUp\n     */\n    rbAddForceAtPoint(handle, force, point, wakeUp) {\n        _assertClass(force, RawVector);\n        _assertClass(point, RawVector);\n        wasm.rawrigidbodyset_rbAddForceAtPoint(this.__wbg_ptr, handle, force.__wbg_ptr, point.__wbg_ptr, wakeUp);\n    }\n    /**\n     * Applies an impulse at the given world-space point of this rigid-body.\n     *\n     * # Parameters\n     * - `impulse`: the world-space impulse to apply on the rigid-body.\n     * - `point`: the world-space point where the impulse is to be applied on the rigid-body.\n     * - `wakeUp`: should the rigid-body be automatically woken-up?\n     * @param {number} handle\n     * @param {RawVector} impulse\n     * @param {RawVector} point\n     * @param {boolean} wakeUp\n     */\n    rbApplyImpulseAtPoint(handle, impulse, point, wakeUp) {\n        _assertClass(impulse, RawVector);\n        _assertClass(point, RawVector);\n        wasm.rawrigidbodyset_rbApplyImpulseAtPoint(this.__wbg_ptr, handle, impulse.__wbg_ptr, point.__wbg_ptr, wakeUp);\n    }\n    /**\n     * @param {number} handle\n     * @returns {number}\n     */\n    rbAdditionalSolverIterations(handle) {\n        const ret = wasm.rawrigidbodyset_rbAdditionalSolverIterations(this.__wbg_ptr, handle);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} handle\n     * @param {number} iters\n     */\n    rbSetAdditionalSolverIterations(handle, iters) {\n        wasm.rawrigidbodyset_rbSetAdditionalSolverIterations(this.__wbg_ptr, handle, iters);\n    }\n    /**\n     * An arbitrary user-defined 32-bit integer\n     * @param {number} handle\n     * @returns {number}\n     */\n    rbUserData(handle) {\n        const ret = wasm.rawrigidbodyset_rbUserData(this.__wbg_ptr, handle);\n        return ret >>> 0;\n    }\n    /**\n     * Sets the user-defined 32-bit integer of this rigid-body.\n     *\n     * # Parameters\n     * - `data`: an arbitrary user-defined 32-bit integer.\n     * @param {number} handle\n     * @param {number} data\n     */\n    rbSetUserData(handle, data) {\n        wasm.rawrigidbodyset_rbSetUserData(this.__wbg_ptr, handle, data);\n    }\n    /**\n     * Retrieves the constant force(s) the user added to this rigid-body.\n     * Returns zero if the rigid-body is not dynamic.\n     * @param {number} handle\n     * @returns {RawVector}\n     */\n    rbUserForce(handle) {\n        const ret = wasm.rawrigidbodyset_rbUserForce(this.__wbg_ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * Retrieves the constant torque(s) the user added to this rigid-body.\n     * Returns zero if the rigid-body is not dynamic.\n     * @param {number} handle\n     * @returns {RawVector}\n     */\n    rbUserTorque(handle) {\n        const ret = wasm.rawrigidbodyset_rbUserTorque(this.__wbg_ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    constructor() {\n        const ret = wasm.rawrigidbodyset_new();\n        this.__wbg_ptr = ret >>> 0;\n        RawRigidBodySetFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @param {boolean} enabled\n     * @param {RawVector} translation\n     * @param {RawRotation} rotation\n     * @param {number} gravityScale\n     * @param {number} mass\n     * @param {boolean} massOnly\n     * @param {RawVector} centerOfMass\n     * @param {RawVector} linvel\n     * @param {RawVector} angvel\n     * @param {RawVector} principalAngularInertia\n     * @param {RawRotation} angularInertiaFrame\n     * @param {boolean} translationEnabledX\n     * @param {boolean} translationEnabledY\n     * @param {boolean} translationEnabledZ\n     * @param {boolean} rotationEnabledX\n     * @param {boolean} rotationEnabledY\n     * @param {boolean} rotationEnabledZ\n     * @param {number} linearDamping\n     * @param {number} angularDamping\n     * @param {RawRigidBodyType} rb_type\n     * @param {boolean} canSleep\n     * @param {boolean} sleeping\n     * @param {number} softCcdPrediction\n     * @param {boolean} ccdEnabled\n     * @param {number} dominanceGroup\n     * @param {number} additional_solver_iterations\n     * @returns {number}\n     */\n    createRigidBody(enabled, translation, rotation, gravityScale, mass, massOnly, centerOfMass, linvel, angvel, principalAngularInertia, angularInertiaFrame, translationEnabledX, translationEnabledY, translationEnabledZ, rotationEnabledX, rotationEnabledY, rotationEnabledZ, linearDamping, angularDamping, rb_type, canSleep, sleeping, softCcdPrediction, ccdEnabled, dominanceGroup, additional_solver_iterations) {\n        _assertClass(translation, RawVector);\n        _assertClass(rotation, RawRotation);\n        _assertClass(centerOfMass, RawVector);\n        _assertClass(linvel, RawVector);\n        _assertClass(angvel, RawVector);\n        _assertClass(principalAngularInertia, RawVector);\n        _assertClass(angularInertiaFrame, RawRotation);\n        const ret = wasm.rawrigidbodyset_createRigidBody(this.__wbg_ptr, enabled, translation.__wbg_ptr, rotation.__wbg_ptr, gravityScale, mass, massOnly, centerOfMass.__wbg_ptr, linvel.__wbg_ptr, angvel.__wbg_ptr, principalAngularInertia.__wbg_ptr, angularInertiaFrame.__wbg_ptr, translationEnabledX, translationEnabledY, translationEnabledZ, rotationEnabledX, rotationEnabledY, rotationEnabledZ, linearDamping, angularDamping, rb_type, canSleep, sleeping, softCcdPrediction, ccdEnabled, dominanceGroup, additional_solver_iterations);\n        return ret;\n    }\n    /**\n     * @param {number} handle\n     * @param {RawIslandManager} islands\n     * @param {RawColliderSet} colliders\n     * @param {RawImpulseJointSet} joints\n     * @param {RawMultibodyJointSet} articulations\n     */\n    remove(handle, islands, colliders, joints, articulations) {\n        _assertClass(islands, RawIslandManager);\n        _assertClass(colliders, RawColliderSet);\n        _assertClass(joints, RawImpulseJointSet);\n        _assertClass(articulations, RawMultibodyJointSet);\n        wasm.rawrigidbodyset_remove(this.__wbg_ptr, handle, islands.__wbg_ptr, colliders.__wbg_ptr, joints.__wbg_ptr, articulations.__wbg_ptr);\n    }\n    /**\n     * The number of rigid-bodies on this set.\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.rawcolliderset_len(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * Checks if a rigid-body with the given integer handle exists.\n     * @param {number} handle\n     * @returns {boolean}\n     */\n    contains(handle) {\n        const ret = wasm.rawrigidbodyset_contains(this.__wbg_ptr, handle);\n        return ret !== 0;\n    }\n    /**\n     * Applies the given JavaScript function to the integer handle of each rigid-body managed by this set.\n     *\n     * # Parameters\n     * - `f(handle)`: the function to apply to the integer handle of each rigid-body managed by this set. Called as `f(collider)`.\n     * @param {Function} f\n     */\n    forEachRigidBodyHandle(f) {\n        try {\n            wasm.rawrigidbodyset_forEachRigidBodyHandle(this.__wbg_ptr, addBorrowedObject(f));\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n     * @param {RawColliderSet} colliders\n     */\n    propagateModifiedBodyPositionsToColliders(colliders) {\n        _assertClass(colliders, RawColliderSet);\n        wasm.rawrigidbodyset_propagateModifiedBodyPositionsToColliders(this.__wbg_ptr, colliders.__wbg_ptr);\n    }\n}\n\nconst RawRotationFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawrotation_free(ptr >>> 0, 1));\n/**\n * A rotation quaternion.\n */\nexport class RawRotation {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawRotation.prototype);\n        obj.__wbg_ptr = ptr;\n        RawRotationFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawRotationFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawrotation_free(ptr, 0);\n    }\n    /**\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @param {number} w\n     */\n    constructor(x, y, z, w) {\n        const ret = wasm.rawrotation_new(x, y, z, w);\n        this.__wbg_ptr = ret >>> 0;\n        RawRotationFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * The identity quaternion.\n     * @returns {RawRotation}\n     */\n    static identity() {\n        const ret = wasm.rawrotation_identity();\n        return RawRotation.__wrap(ret);\n    }\n    /**\n     * The `x` component of this quaternion.\n     * @returns {number}\n     */\n    get x() {\n        const ret = wasm.rawrotation_x(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The `y` component of this quaternion.\n     * @returns {number}\n     */\n    get y() {\n        const ret = wasm.rawintegrationparameters_dt(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The `z` component of this quaternion.\n     * @returns {number}\n     */\n    get z() {\n        const ret = wasm.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The `w` component of this quaternion.\n     * @returns {number}\n     */\n    get w() {\n        const ret = wasm.rawrotation_w(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst RawSdpMatrix3Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawsdpmatrix3_free(ptr >>> 0, 1));\n\nexport class RawSdpMatrix3 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawSdpMatrix3.prototype);\n        obj.__wbg_ptr = ptr;\n        RawSdpMatrix3Finalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawSdpMatrix3Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawsdpmatrix3_free(ptr, 0);\n    }\n    /**\n     * Row major list of the upper-triangular part of the symmetric matrix.\n     * @returns {Float32Array}\n     */\n    elements() {\n        const ret = wasm.rawsdpmatrix3_elements(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n\nconst RawSerializationPipelineFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawserializationpipeline_free(ptr >>> 0, 1));\n\nexport class RawSerializationPipeline {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawSerializationPipelineFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawserializationpipeline_free(ptr, 0);\n    }\n    constructor() {\n        const ret = wasm.rawserializationpipeline_new();\n        this.__wbg_ptr = ret >>> 0;\n        RawSerializationPipelineFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @param {RawVector} gravity\n     * @param {RawIntegrationParameters} integrationParameters\n     * @param {RawIslandManager} islands\n     * @param {RawBroadPhase} broadPhase\n     * @param {RawNarrowPhase} narrowPhase\n     * @param {RawRigidBodySet} bodies\n     * @param {RawColliderSet} colliders\n     * @param {RawImpulseJointSet} impulse_joints\n     * @param {RawMultibodyJointSet} multibody_joints\n     * @returns {Uint8Array | undefined}\n     */\n    serializeAll(gravity, integrationParameters, islands, broadPhase, narrowPhase, bodies, colliders, impulse_joints, multibody_joints) {\n        _assertClass(gravity, RawVector);\n        _assertClass(integrationParameters, RawIntegrationParameters);\n        _assertClass(islands, RawIslandManager);\n        _assertClass(broadPhase, RawBroadPhase);\n        _assertClass(narrowPhase, RawNarrowPhase);\n        _assertClass(bodies, RawRigidBodySet);\n        _assertClass(colliders, RawColliderSet);\n        _assertClass(impulse_joints, RawImpulseJointSet);\n        _assertClass(multibody_joints, RawMultibodyJointSet);\n        const ret = wasm.rawserializationpipeline_serializeAll(this.__wbg_ptr, gravity.__wbg_ptr, integrationParameters.__wbg_ptr, islands.__wbg_ptr, broadPhase.__wbg_ptr, narrowPhase.__wbg_ptr, bodies.__wbg_ptr, colliders.__wbg_ptr, impulse_joints.__wbg_ptr, multibody_joints.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {Uint8Array} data\n     * @returns {RawDeserializedWorld | undefined}\n     */\n    deserializeAll(data) {\n        const ret = wasm.rawserializationpipeline_deserializeAll(this.__wbg_ptr, addHeapObject(data));\n        return ret === 0 ? undefined : RawDeserializedWorld.__wrap(ret);\n    }\n}\n\nconst RawShapeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawshape_free(ptr >>> 0, 1));\n\nexport class RawShape {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawShape.prototype);\n        obj.__wbg_ptr = ptr;\n        RawShapeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawShapeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawshape_free(ptr, 0);\n    }\n    /**\n     * @param {number} hx\n     * @param {number} hy\n     * @param {number} hz\n     * @returns {RawShape}\n     */\n    static cuboid(hx, hy, hz) {\n        const ret = wasm.rawshape_cuboid(hx, hy, hz);\n        return RawShape.__wrap(ret);\n    }\n    /**\n     * @param {number} hx\n     * @param {number} hy\n     * @param {number} hz\n     * @param {number} borderRadius\n     * @returns {RawShape}\n     */\n    static roundCuboid(hx, hy, hz, borderRadius) {\n        const ret = wasm.rawshape_roundCuboid(hx, hy, hz, borderRadius);\n        return RawShape.__wrap(ret);\n    }\n    /**\n     * @param {number} radius\n     * @returns {RawShape}\n     */\n    static ball(radius) {\n        const ret = wasm.rawshape_ball(radius);\n        return RawShape.__wrap(ret);\n    }\n    /**\n     * @param {RawVector} normal\n     * @returns {RawShape}\n     */\n    static halfspace(normal) {\n        _assertClass(normal, RawVector);\n        const ret = wasm.rawshape_halfspace(normal.__wbg_ptr);\n        return RawShape.__wrap(ret);\n    }\n    /**\n     * @param {number} halfHeight\n     * @param {number} radius\n     * @returns {RawShape}\n     */\n    static capsule(halfHeight, radius) {\n        const ret = wasm.rawshape_capsule(halfHeight, radius);\n        return RawShape.__wrap(ret);\n    }\n    /**\n     * @param {number} halfHeight\n     * @param {number} radius\n     * @returns {RawShape}\n     */\n    static cylinder(halfHeight, radius) {\n        const ret = wasm.rawshape_cylinder(halfHeight, radius);\n        return RawShape.__wrap(ret);\n    }\n    /**\n     * @param {number} halfHeight\n     * @param {number} radius\n     * @param {number} borderRadius\n     * @returns {RawShape}\n     */\n    static roundCylinder(halfHeight, radius, borderRadius) {\n        const ret = wasm.rawshape_roundCylinder(halfHeight, radius, borderRadius);\n        return RawShape.__wrap(ret);\n    }\n    /**\n     * @param {number} halfHeight\n     * @param {number} radius\n     * @returns {RawShape}\n     */\n    static cone(halfHeight, radius) {\n        const ret = wasm.rawshape_cone(halfHeight, radius);\n        return RawShape.__wrap(ret);\n    }\n    /**\n     * @param {number} halfHeight\n     * @param {number} radius\n     * @param {number} borderRadius\n     * @returns {RawShape}\n     */\n    static roundCone(halfHeight, radius, borderRadius) {\n        const ret = wasm.rawshape_roundCone(halfHeight, radius, borderRadius);\n        return RawShape.__wrap(ret);\n    }\n    /**\n     * @param {Float32Array} vertices\n     * @param {Uint32Array} indices\n     * @returns {RawShape}\n     */\n    static polyline(vertices, indices) {\n        const ptr0 = passArrayF32ToWasm0(vertices, wasm.__wbindgen_export_2);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray32ToWasm0(indices, wasm.__wbindgen_export_2);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.rawshape_polyline(ptr0, len0, ptr1, len1);\n        return RawShape.__wrap(ret);\n    }\n    /**\n     * @param {Float32Array} vertices\n     * @param {Uint32Array} indices\n     * @param {number} flags\n     * @returns {RawShape | undefined}\n     */\n    static trimesh(vertices, indices, flags) {\n        const ptr0 = passArrayF32ToWasm0(vertices, wasm.__wbindgen_export_2);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray32ToWasm0(indices, wasm.__wbindgen_export_2);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.rawshape_trimesh(ptr0, len0, ptr1, len1, flags);\n        return ret === 0 ? undefined : RawShape.__wrap(ret);\n    }\n    /**\n     * @param {number} nrows\n     * @param {number} ncols\n     * @param {Float32Array} heights\n     * @param {RawVector} scale\n     * @param {number} flags\n     * @returns {RawShape}\n     */\n    static heightfield(nrows, ncols, heights, scale, flags) {\n        const ptr0 = passArrayF32ToWasm0(heights, wasm.__wbindgen_export_2);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(scale, RawVector);\n        const ret = wasm.rawshape_heightfield(nrows, ncols, ptr0, len0, scale.__wbg_ptr, flags);\n        return RawShape.__wrap(ret);\n    }\n    /**\n     * @param {RawVector} p1\n     * @param {RawVector} p2\n     * @returns {RawShape}\n     */\n    static segment(p1, p2) {\n        _assertClass(p1, RawVector);\n        _assertClass(p2, RawVector);\n        const ret = wasm.rawshape_segment(p1.__wbg_ptr, p2.__wbg_ptr);\n        return RawShape.__wrap(ret);\n    }\n    /**\n     * @param {RawVector} p1\n     * @param {RawVector} p2\n     * @param {RawVector} p3\n     * @returns {RawShape}\n     */\n    static triangle(p1, p2, p3) {\n        _assertClass(p1, RawVector);\n        _assertClass(p2, RawVector);\n        _assertClass(p3, RawVector);\n        const ret = wasm.rawshape_triangle(p1.__wbg_ptr, p2.__wbg_ptr, p3.__wbg_ptr);\n        return RawShape.__wrap(ret);\n    }\n    /**\n     * @param {RawVector} p1\n     * @param {RawVector} p2\n     * @param {RawVector} p3\n     * @param {number} borderRadius\n     * @returns {RawShape}\n     */\n    static roundTriangle(p1, p2, p3, borderRadius) {\n        _assertClass(p1, RawVector);\n        _assertClass(p2, RawVector);\n        _assertClass(p3, RawVector);\n        const ret = wasm.rawshape_roundTriangle(p1.__wbg_ptr, p2.__wbg_ptr, p3.__wbg_ptr, borderRadius);\n        return RawShape.__wrap(ret);\n    }\n    /**\n     * @param {Float32Array} points\n     * @returns {RawShape | undefined}\n     */\n    static convexHull(points) {\n        const ptr0 = passArrayF32ToWasm0(points, wasm.__wbindgen_export_2);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.rawshape_convexHull(ptr0, len0);\n        return ret === 0 ? undefined : RawShape.__wrap(ret);\n    }\n    /**\n     * @param {Float32Array} points\n     * @param {number} borderRadius\n     * @returns {RawShape | undefined}\n     */\n    static roundConvexHull(points, borderRadius) {\n        const ptr0 = passArrayF32ToWasm0(points, wasm.__wbindgen_export_2);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.rawshape_roundConvexHull(ptr0, len0, borderRadius);\n        return ret === 0 ? undefined : RawShape.__wrap(ret);\n    }\n    /**\n     * @param {Float32Array} vertices\n     * @param {Uint32Array} indices\n     * @returns {RawShape | undefined}\n     */\n    static convexMesh(vertices, indices) {\n        const ptr0 = passArrayF32ToWasm0(vertices, wasm.__wbindgen_export_2);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray32ToWasm0(indices, wasm.__wbindgen_export_2);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.rawshape_convexMesh(ptr0, len0, ptr1, len1);\n        return ret === 0 ? undefined : RawShape.__wrap(ret);\n    }\n    /**\n     * @param {Float32Array} vertices\n     * @param {Uint32Array} indices\n     * @param {number} borderRadius\n     * @returns {RawShape | undefined}\n     */\n    static roundConvexMesh(vertices, indices, borderRadius) {\n        const ptr0 = passArrayF32ToWasm0(vertices, wasm.__wbindgen_export_2);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray32ToWasm0(indices, wasm.__wbindgen_export_2);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.rawshape_roundConvexMesh(ptr0, len0, ptr1, len1, borderRadius);\n        return ret === 0 ? undefined : RawShape.__wrap(ret);\n    }\n    /**\n     * @param {RawVector} shapePos1\n     * @param {RawRotation} shapeRot1\n     * @param {RawVector} shapeVel1\n     * @param {RawShape} shape2\n     * @param {RawVector} shapePos2\n     * @param {RawRotation} shapeRot2\n     * @param {RawVector} shapeVel2\n     * @param {number} target_distance\n     * @param {number} maxToi\n     * @param {boolean} stop_at_penetration\n     * @returns {RawShapeCastHit | undefined}\n     */\n    castShape(shapePos1, shapeRot1, shapeVel1, shape2, shapePos2, shapeRot2, shapeVel2, target_distance, maxToi, stop_at_penetration) {\n        _assertClass(shapePos1, RawVector);\n        _assertClass(shapeRot1, RawRotation);\n        _assertClass(shapeVel1, RawVector);\n        _assertClass(shape2, RawShape);\n        _assertClass(shapePos2, RawVector);\n        _assertClass(shapeRot2, RawRotation);\n        _assertClass(shapeVel2, RawVector);\n        const ret = wasm.rawshape_castShape(this.__wbg_ptr, shapePos1.__wbg_ptr, shapeRot1.__wbg_ptr, shapeVel1.__wbg_ptr, shape2.__wbg_ptr, shapePos2.__wbg_ptr, shapeRot2.__wbg_ptr, shapeVel2.__wbg_ptr, target_distance, maxToi, stop_at_penetration);\n        return ret === 0 ? undefined : RawShapeCastHit.__wrap(ret);\n    }\n    /**\n     * @param {RawVector} shapePos1\n     * @param {RawRotation} shapeRot1\n     * @param {RawShape} shape2\n     * @param {RawVector} shapePos2\n     * @param {RawRotation} shapeRot2\n     * @returns {boolean}\n     */\n    intersectsShape(shapePos1, shapeRot1, shape2, shapePos2, shapeRot2) {\n        _assertClass(shapePos1, RawVector);\n        _assertClass(shapeRot1, RawRotation);\n        _assertClass(shape2, RawShape);\n        _assertClass(shapePos2, RawVector);\n        _assertClass(shapeRot2, RawRotation);\n        const ret = wasm.rawshape_intersectsShape(this.__wbg_ptr, shapePos1.__wbg_ptr, shapeRot1.__wbg_ptr, shape2.__wbg_ptr, shapePos2.__wbg_ptr, shapeRot2.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * @param {RawVector} shapePos1\n     * @param {RawRotation} shapeRot1\n     * @param {RawShape} shape2\n     * @param {RawVector} shapePos2\n     * @param {RawRotation} shapeRot2\n     * @param {number} prediction\n     * @returns {RawShapeContact | undefined}\n     */\n    contactShape(shapePos1, shapeRot1, shape2, shapePos2, shapeRot2, prediction) {\n        _assertClass(shapePos1, RawVector);\n        _assertClass(shapeRot1, RawRotation);\n        _assertClass(shape2, RawShape);\n        _assertClass(shapePos2, RawVector);\n        _assertClass(shapeRot2, RawRotation);\n        const ret = wasm.rawshape_contactShape(this.__wbg_ptr, shapePos1.__wbg_ptr, shapeRot1.__wbg_ptr, shape2.__wbg_ptr, shapePos2.__wbg_ptr, shapeRot2.__wbg_ptr, prediction);\n        return ret === 0 ? undefined : RawShapeContact.__wrap(ret);\n    }\n    /**\n     * @param {RawVector} shapePos\n     * @param {RawRotation} shapeRot\n     * @param {RawVector} point\n     * @returns {boolean}\n     */\n    containsPoint(shapePos, shapeRot, point) {\n        _assertClass(shapePos, RawVector);\n        _assertClass(shapeRot, RawRotation);\n        _assertClass(point, RawVector);\n        const ret = wasm.rawshape_containsPoint(this.__wbg_ptr, shapePos.__wbg_ptr, shapeRot.__wbg_ptr, point.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * @param {RawVector} shapePos\n     * @param {RawRotation} shapeRot\n     * @param {RawVector} point\n     * @param {boolean} solid\n     * @returns {RawPointProjection}\n     */\n    projectPoint(shapePos, shapeRot, point, solid) {\n        _assertClass(shapePos, RawVector);\n        _assertClass(shapeRot, RawRotation);\n        _assertClass(point, RawVector);\n        const ret = wasm.rawshape_projectPoint(this.__wbg_ptr, shapePos.__wbg_ptr, shapeRot.__wbg_ptr, point.__wbg_ptr, solid);\n        return RawPointProjection.__wrap(ret);\n    }\n    /**\n     * @param {RawVector} shapePos\n     * @param {RawRotation} shapeRot\n     * @param {RawVector} rayOrig\n     * @param {RawVector} rayDir\n     * @param {number} maxToi\n     * @returns {boolean}\n     */\n    intersectsRay(shapePos, shapeRot, rayOrig, rayDir, maxToi) {\n        _assertClass(shapePos, RawVector);\n        _assertClass(shapeRot, RawRotation);\n        _assertClass(rayOrig, RawVector);\n        _assertClass(rayDir, RawVector);\n        const ret = wasm.rawshape_intersectsRay(this.__wbg_ptr, shapePos.__wbg_ptr, shapeRot.__wbg_ptr, rayOrig.__wbg_ptr, rayDir.__wbg_ptr, maxToi);\n        return ret !== 0;\n    }\n    /**\n     * @param {RawVector} shapePos\n     * @param {RawRotation} shapeRot\n     * @param {RawVector} rayOrig\n     * @param {RawVector} rayDir\n     * @param {number} maxToi\n     * @param {boolean} solid\n     * @returns {number}\n     */\n    castRay(shapePos, shapeRot, rayOrig, rayDir, maxToi, solid) {\n        _assertClass(shapePos, RawVector);\n        _assertClass(shapeRot, RawRotation);\n        _assertClass(rayOrig, RawVector);\n        _assertClass(rayDir, RawVector);\n        const ret = wasm.rawshape_castRay(this.__wbg_ptr, shapePos.__wbg_ptr, shapeRot.__wbg_ptr, rayOrig.__wbg_ptr, rayDir.__wbg_ptr, maxToi, solid);\n        return ret;\n    }\n    /**\n     * @param {RawVector} shapePos\n     * @param {RawRotation} shapeRot\n     * @param {RawVector} rayOrig\n     * @param {RawVector} rayDir\n     * @param {number} maxToi\n     * @param {boolean} solid\n     * @returns {RawRayIntersection | undefined}\n     */\n    castRayAndGetNormal(shapePos, shapeRot, rayOrig, rayDir, maxToi, solid) {\n        _assertClass(shapePos, RawVector);\n        _assertClass(shapeRot, RawRotation);\n        _assertClass(rayOrig, RawVector);\n        _assertClass(rayDir, RawVector);\n        const ret = wasm.rawshape_castRayAndGetNormal(this.__wbg_ptr, shapePos.__wbg_ptr, shapeRot.__wbg_ptr, rayOrig.__wbg_ptr, rayDir.__wbg_ptr, maxToi, solid);\n        return ret === 0 ? undefined : RawRayIntersection.__wrap(ret);\n    }\n}\n\nconst RawShapeCastHitFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawshapecasthit_free(ptr >>> 0, 1));\n\nexport class RawShapeCastHit {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawShapeCastHit.prototype);\n        obj.__wbg_ptr = ptr;\n        RawShapeCastHitFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawShapeCastHitFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawshapecasthit_free(ptr, 0);\n    }\n    /**\n     * @returns {number}\n     */\n    time_of_impact() {\n        const ret = wasm.rawrotation_x(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {RawVector}\n     */\n    witness1() {\n        const ret = wasm.rawshapecasthit_witness1(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    witness2() {\n        const ret = wasm.rawcontactforceevent_total_force(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    normal1() {\n        const ret = wasm.rawshapecasthit_normal1(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    normal2() {\n        const ret = wasm.rawshapecasthit_normal2(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n}\n\nconst RawShapeContactFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawshapecontact_free(ptr >>> 0, 1));\n\nexport class RawShapeContact {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawShapeContact.prototype);\n        obj.__wbg_ptr = ptr;\n        RawShapeContactFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawShapeContactFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawshapecontact_free(ptr, 0);\n    }\n    /**\n     * @returns {number}\n     */\n    distance() {\n        const ret = wasm.rawkinematiccharactercontroller_maxSlopeClimbAngle(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {RawVector}\n     */\n    point1() {\n        const ret = wasm.rawpointprojection_point(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    point2() {\n        const ret = wasm.rawcollidershapecasthit_witness1(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    normal1() {\n        const ret = wasm.rawcollidershapecasthit_witness2(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    normal2() {\n        const ret = wasm.rawcharactercollision_translationDeltaApplied(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n}\n\nconst RawVectorFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawvector_free(ptr >>> 0, 1));\n/**\n * A vector.\n */\nexport class RawVector {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawVector.prototype);\n        obj.__wbg_ptr = ptr;\n        RawVectorFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawVectorFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawvector_free(ptr, 0);\n    }\n    /**\n     * Creates a new vector filled with zeros.\n     * @returns {RawVector}\n     */\n    static zero() {\n        const ret = wasm.rawvector_zero();\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * Creates a new 3D vector from its two components.\n     *\n     * # Parameters\n     * - `x`: the `x` component of this 3D vector.\n     * - `y`: the `y` component of this 3D vector.\n     * - `z`: the `z` component of this 3D vector.\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     */\n    constructor(x, y, z) {\n        const ret = wasm.rawvector_new(x, y, z);\n        this.__wbg_ptr = ret >>> 0;\n        RawVectorFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * The `x` component of this vector.\n     * @returns {number}\n     */\n    get x() {\n        const ret = wasm.rawrotation_x(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Sets the `x` component of this vector.\n     * @param {number} x\n     */\n    set x(x) {\n        wasm.rawvector_set_x(this.__wbg_ptr, x);\n    }\n    /**\n     * The `y` component of this vector.\n     * @returns {number}\n     */\n    get y() {\n        const ret = wasm.rawintegrationparameters_dt(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Sets the `y` component of this vector.\n     * @param {number} y\n     */\n    set y(y) {\n        wasm.rawintegrationparameters_set_dt(this.__wbg_ptr, y);\n    }\n    /**\n     * The `z` component of this vector.\n     * @returns {number}\n     */\n    get z() {\n        const ret = wasm.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Sets the `z` component of this vector.\n     * @param {number} z\n     */\n    set z(z) {\n        wasm.rawvector_set_z(this.__wbg_ptr, z);\n    }\n    /**\n     * Create a new 3D vector from this vector with its components rearranged as `{x, y, z}`.\n     *\n     * This will effectively return a copy of `this`. This method exist for completeness with the\n     * other swizzling functions.\n     * @returns {RawVector}\n     */\n    xyz() {\n        const ret = wasm.rawvector_xyz(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * Create a new 3D vector from this vector with its components rearranged as `{y, x, z}`.\n     * @returns {RawVector}\n     */\n    yxz() {\n        const ret = wasm.rawvector_yxz(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * Create a new 3D vector from this vector with its components rearranged as `{z, x, y}`.\n     * @returns {RawVector}\n     */\n    zxy() {\n        const ret = wasm.rawvector_zxy(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * Create a new 3D vector from this vector with its components rearranged as `{x, z, y}`.\n     * @returns {RawVector}\n     */\n    xzy() {\n        const ret = wasm.rawvector_xzy(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * Create a new 3D vector from this vector with its components rearranged as `{y, z, x}`.\n     * @returns {RawVector}\n     */\n    yzx() {\n        const ret = wasm.rawvector_yzx(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * Create a new 3D vector from this vector with its components rearranged as `{z, y, x}`.\n     * @returns {RawVector}\n     */\n    zyx() {\n        const ret = wasm.rawvector_zyx(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n}\n\nexport function __wbg_bind_c8359b1cba058168(arg0, arg1, arg2, arg3) {\n    const ret = getObject(arg0).bind(getObject(arg1), getObject(arg2), getObject(arg3));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_buffer_609cc3eee51ed158(arg0) {\n    const ret = getObject(arg0).buffer;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_call_7cccdd69e0791ae2() { return handleError(function (arg0, arg1, arg2) {\n    const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_call_833bed5770ea2041() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = getObject(arg0).call(getObject(arg1), getObject(arg2), getObject(arg3));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_call_b8adc8b1d0a0d8eb() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n    const ret = getObject(arg0).call(getObject(arg1), getObject(arg2), getObject(arg3), getObject(arg4));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_length_3b4f022188ae8db6(arg0) {\n    const ret = getObject(arg0).length;\n    return ret;\n};\n\nexport function __wbg_length_a446193dc22c12f8(arg0) {\n    const ret = getObject(arg0).length;\n    return ret;\n};\n\nexport function __wbg_new_a12002a7f91c75be(arg0) {\n    const ret = new Uint8Array(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_newwithbyteoffsetandlength_d97e637ebe145a9a(arg0, arg1, arg2) {\n    const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_newwithbyteoffsetandlength_e6b7e69acd4c7354(arg0, arg1, arg2) {\n    const ret = new Float32Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_newwithlength_5a5efe313cfd59f1(arg0) {\n    const ret = new Float32Array(arg0 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_rawcontactforceevent_new(arg0) {\n    const ret = RawContactForceEvent.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_rawraycolliderintersection_new(arg0) {\n    const ret = RawRayColliderIntersection.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_set_10bad9bee0e9c58b(arg0, arg1, arg2) {\n    getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n};\n\nexport function __wbg_set_65595bdd868b3009(arg0, arg1, arg2) {\n    getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n};\n\nexport function __wbindgen_boolean_get(arg0) {\n    const v = getObject(arg0);\n    const ret = typeof(v) === 'boolean' ? (v ? 1 : 0) : 2;\n    return ret;\n};\n\nexport function __wbindgen_is_function(arg0) {\n    const ret = typeof(getObject(arg0)) === 'function';\n    return ret;\n};\n\nexport function __wbindgen_memory() {\n    const ret = wasm.memory;\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_number_get(arg0, arg1) {\n    const obj = getObject(arg1);\n    const ret = typeof(obj) === 'number' ? obj : undefined;\n    getDataViewMemory0().setFloat64(arg0 + 8 * 1, isLikeNone(ret) ? 0 : ret, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);\n};\n\nexport function __wbindgen_number_new(arg0) {\n    const ret = arg0;\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_object_drop_ref(arg0) {\n    takeObject(arg0);\n};\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n","// client/src/entities/player.js\n\n/**\n * Класс игрока, управляющий поведением и состоянием персонажа\n */\nexport class Player {\n    /**\n     * @param {Object} options - настройки игрока\n     * @param {Object} options.position - начальная позиция\n     * @param {Object} options.renderer - ссылка на рендерер\n     * @param {Object} options.input - ссылка на обработчик ввода\n     * @param {Object} options.game - ссылка на игровой объект\n     */\n    constructor(options) {\n        // Базовые параметры\n        this.id = options.id || 'local_player';\n        this.isLocalPlayer = options.isLocalPlayer !== undefined ? options.isLocalPlayer : true;\n        \n        // Позиция и вращение\n        this.position = options.position || { x: 0, y: 0, z: 0 };\n        this.rotation = options.rotation || { x: 0, y: 0, z: 0 };\n        this.direction = { x: 0, z: -1 }; // Направление взгляда (по умолчанию вперед)\n        \n        // Характеристики\n        this.health = options.health || 100;\n        this.maxHealth = options.maxHealth || 100;\n        this.speed = options.speed || 5; // базовая скорость движения\n        this.weapon = options.weapon || 'pistol';\n        this.ammo = options.ammo || 30;\n        this.weaponType = 'single'; // 'single' или 'auto'\n        this.fireRate = 500; // задержка между выстрелами в мс (для одиночного оружия)\n        this.recoil = { x: 0.05, y: 0.05 }; // сила отдачи\n        \n        // Инвентарь\n        this.inventory = options.inventory || {\n            items: [],\n            maxSlots: 25 // 5x5 сетка\n        };\n        \n        // Состояния\n        this.isMoving = false;\n        this.isRunning = false;\n        this.isAiming = false;\n        this.isShooting = false;\n        this.canShoot = true; // флаг возможности стрельбы\n        this.lastShootTime = 0;\n        this.currentState = 'idle'; // idle, walk, run, aim, shoot\n        \n        // Параметры обзора\n        this.viewAngle = 90; // начальный угол обзора в градусах\n        this.normalViewAngle = 90;\n        this.aimingViewAngle = 45;\n        this.runningViewAngle = 70; // угол обзора при беге\n        this.viewDistance = 50; // дальность видимости\n        \n        // Параметры движения\n        this.normalSpeed = 5;\n        this.runningSpeed = 7.5; // скорость бега (+50%)\n        this.aimingSpeed = 1.5; // скорость при прицеливании (-70%)\n        this.acceleration = 10; // ускорение для плавности движения\n        this.velocity = { x: 0, z: 0 }; // текущая скорость\n        \n        // Ссылки на другие модули\n        this.renderer = options.renderer;\n        this.input = options.input;\n        this.game = options.game;\n        this.mesh = null; // будет инициализирован при создании модели\n        \n        // Если это локальный игрок, настраиваем управление\n        if (this.isLocalPlayer) {\n            this.setupControls();\n        }\n        \n        // Создаем модель игрока\n        this.createModel();\n    }\n    \n    /**\n     * Создание модели игрока\n     */\n    createModel() {\n        // Если рендерер не доступен, выходим\n        if (!this.renderer) return;\n        \n        // Создаем меш через рендерер\n        this.mesh = this.renderer.addPlayer({\n            position: this.position,\n            rotation: this.rotation,\n            isLocalPlayer: this.isLocalPlayer\n        });\n    }\n    \n    /**\n     * Настройка управления игроком\n     */\n    setupControls() {\n        if (!this.input) return;\n        \n        // Добавляем обработчик ЛКМ для прицеливания\n        this.input.setMouseDownCallback((button, position) => {\n            if (button === 0) { // Левая кнопка\n                this.startAiming();\n            }\n        });\n        \n        // Обработчик отпускания ЛКМ\n        this.input.setMouseUpCallback((button) => {\n            if (button === 0) { // Левая кнопка\n                this.stopAiming();\n            }\n        });\n        \n        // Обработчик ПКМ для стрельбы\n        this.input.setRightClickCallback(() => {\n            this.tryShoot();\n        });\n        \n        // Обработчик движения мыши для вращения\n        this.input.setMouseMoveCallback((position, delta) => {\n            this.handleMouseMove(position);\n        });\n    }\n    \n    /**\n     * Начало прицеливания\n     */\n    startAiming() {\n        this.isAiming = true;\n        this.speed = this.aimingSpeed;\n        this.viewAngle = this.aimingViewAngle;\n        console.log('Начало прицеливания');\n    }\n    \n    /**\n     * Конец прицеливания\n     */\n    stopAiming() {\n        this.isAiming = false;\n        this.speed = this.normalSpeed;\n        this.viewAngle = this.normalViewAngle;\n        console.log('Конец прицеливания');\n    }\n    \n    /**\n     * Попытка выстрела\n     */\n    tryShoot() {\n        // Можно стрелять только если игрок прицеливается\n        if (!this.isAiming || !this.canShoot || this.ammo <= 0) {\n            return;\n        }\n        \n        const currentTime = Date.now();\n        \n        // Проверяем временную задержку между выстрелами\n        if (currentTime - this.lastShootTime < this.fireRate) {\n            return;\n        }\n        \n        // Устанавливаем время последнего выстрела\n        this.lastShootTime = currentTime;\n        \n        // Уменьшаем количество патронов\n        this.ammo--;\n        \n        // Устанавливаем флаг стрельбы (для анимации)\n        this.isShooting = true;\n        setTimeout(() => {\n            this.isShooting = false;\n        }, 100);\n        \n        // Применяем отдачу\n        this.applyRecoil();\n        \n        // Создаем выстрел\n        this.createShot();\n        \n        // Для одиночного оружия добавляем задержку перед следующим выстрелом\n        if (this.weaponType === 'single') {\n            this.canShoot = false;\n            setTimeout(() => {\n                this.canShoot = true;\n            }, this.fireRate);\n        }\n        \n        // Отправляем информацию о выстреле на сервер\n        if (this.game && this.game.network) {\n            this.game.network.sendPlayerShoot(\n                this.position,\n                this.direction,\n                this.weapon\n            );\n        }\n    }\n    \n    /**\n     * Применение отдачи при стрельбе\n     */\n    applyRecoil() {\n        // Случайное смещение прицела в пределах recoil\n        const recoilX = (Math.random() - 0.5) * this.recoil.x * 2;\n        const recoilY = -Math.abs(Math.random() * this.recoil.y); // Всегда вверх\n        \n        // Получаем текущую позицию мыши\n        const mousePos = this.input.getMousePosition();\n        \n        // Симулируем движение мыши с отдачей\n        const newMousePos = {\n            x: mousePos.x + recoilX * 100, // Умножаем для заметного эффекта\n            y: mousePos.y + recoilY * 100\n        };\n        \n        // Обновляем направление игрока\n        this.handleMouseMove(newMousePos);\n    }\n    \n    /**\n     * Обработка движения мыши\n     * @param {Object} position - позиция мыши {x, y}\n     */\n    handleMouseMove(position) {\n        // Получаем размеры канваса\n        const canvasRect = this.renderer.canvas.getBoundingClientRect();\n        const canvasCenter = {\n            x: canvasRect.left + canvasRect.width / 2,\n            y: canvasRect.top + canvasRect.height / 2\n        };\n        \n        // Вычисляем вектор от центра к мыши\n        const mouseVec = {\n            x: position.x - canvasCenter.x,\n            y: position.y - canvasCenter.y\n        };\n        \n        // Нормализуем вектор\n        const length = Math.sqrt(mouseVec.x * mouseVec.x + mouseVec.y * mouseVec.y);\n        if (length > 0) {\n            mouseVec.x /= length;\n            mouseVec.y /= length;\n        }\n        \n        // Вычисляем угол поворота (в радианах)\n        const angle = Math.atan2(mouseVec.x, -mouseVec.y);\n        \n        // Устанавливаем направление игрока\n        this.rotation.y = angle;\n        this.direction = {\n            x: Math.sin(angle),\n            z: -Math.cos(angle)\n        };\n    }\n    \n    /**\n     * Обновление состояния игрока\n     * @param {number} deltaTime - прошедшее время с предыдущего кадра\n     */\n    update(deltaTime) {\n        if (!deltaTime) return;\n        \n        // Только локальный игрок может двигаться сам\n        if (this.isLocalPlayer) {\n            this.handleMovement(deltaTime);\n            \n            // Обновляем камеру для слежения за игроком\n            if (this.renderer) {\n                this.renderer.updateCamera(this.position);\n            }\n            \n            // Обновляем параметры при нажатии Shift (бег)\n            this.handleRunning();\n            \n            // Обновляем состояние анимации\n            this.updateAnimationState();\n        }\n        \n        // Обновляем модель (позицию и анимацию)\n        this.updateModel();\n    }\n    \n    /**\n     * Обработка бега (нажатие Shift)\n     */\n    handleRunning() {\n        if (!this.input) return;\n        \n        const wasRunning = this.isRunning;\n        \n        // Проверяем нажат ли Shift и не в режиме прицеливания\n        if (this.input.isKeyPressed('ShiftLeft') && !this.isAiming) {\n            if (!this.isRunning) {\n                this.isRunning = true;\n                this.speed = this.runningSpeed;\n                this.viewAngle = this.runningViewAngle;\n            }\n        } else if (this.isRunning) {\n            this.isRunning = false;\n            this.speed = this.isAiming ? this.aimingSpeed : this.normalSpeed;\n            this.viewAngle = this.isAiming ? this.aimingViewAngle : this.normalViewAngle;\n        }\n        \n        // Если состояние бега изменилось, сообщаем об этом\n        if (wasRunning !== this.isRunning) {\n            console.log(this.isRunning ? 'Начало бега' : 'Конец бега');\n        }\n    }\n    \n    /**\n     * Обновление состояния анимации\n     */\n    updateAnimationState() {\n        let newState = 'idle';\n        \n        if (this.isMoving) {\n            newState = this.isRunning ? 'run' : 'walk';\n        }\n        \n        if (this.isAiming) {\n            newState = 'aim';\n        }\n        \n        if (this.isShooting) {\n            newState = 'shoot';\n        }\n        \n        if (this.currentState !== newState) {\n            this.currentState = newState;\n            console.log(`Состояние анимации: ${this.currentState}`);\n            \n            // Здесь будет логика смены анимации\n        }\n    }\n    \n    /**\n     * Обработка движения игрока\n     * @param {number} deltaTime - прошедшее время с предыдущего кадра\n     */\n    handleMovement(deltaTime) {\n        if (!this.input) return;\n        \n        // Получаем направление движения\n        const moveDir = this.input.getMovementDirection();\n        \n        // Если вектор движения нулевой, снижаем скорость\n        if (moveDir.x === 0 && moveDir.z === 0) {\n            // Применяем трение для плавной остановки\n            this.velocity.x *= 0.9;\n            this.velocity.z *= 0.9;\n            \n            // Если скорость совсем маленькая, останавливаемся\n            if (Math.abs(this.velocity.x) < 0.01 && Math.abs(this.velocity.z) < 0.01) {\n                this.velocity.x = 0;\n                this.velocity.z = 0;\n                this.isMoving = false;\n            }\n        } else {\n            // Устанавливаем флаг движения\n            this.isMoving = true;\n            \n            // Вычисляем целевую скорость с учетом нормализации\n            const length = Math.sqrt(moveDir.x * moveDir.x + moveDir.z * moveDir.z);\n            const normalizedDir = {\n                x: moveDir.x / length,\n                z: moveDir.z / length\n            };\n            \n            const targetVel = {\n                x: normalizedDir.x * this.speed,\n                z: normalizedDir.z * this.speed\n            };\n            \n            // Плавно изменяем скорость\n            this.velocity.x += (targetVel.x - this.velocity.x) * this.acceleration * deltaTime;\n            this.velocity.z += (targetVel.z - this.velocity.z) * this.acceleration * deltaTime;\n        }\n        \n        // Вычисляем новую позицию\n        const newX = this.position.x + this.velocity.x * deltaTime;\n        const newZ = this.position.z + this.velocity.z * deltaTime;\n        \n        // Проверка столкновений (упрощенная)\n        const canMoveX = this.checkCollision({ x: newX, y: this.position.y, z: this.position.z });\n        const canMoveZ = this.checkCollision({ x: this.position.x, y: this.position.y, z: newZ });\n        \n        // Обновляем позицию\n        if (canMoveX) {\n            this.position.x = newX;\n        } else {\n            this.velocity.x = 0; // Остановка при столкновении\n        }\n        \n        if (canMoveZ) {\n            this.position.z = newZ;\n        } else {\n            this.velocity.z = 0; // Остановка при столкновении\n        }\n        \n        // Отправляем изменения на сервер, если доступно\n        if (this.game && this.game.network) {\n            this.game.network.sendPlayerMove(this.position, this.rotation);\n        }\n    }\n    \n    /**\n     * Упрощенная проверка столкновений\n     * @param {Object} newPosition - новая позиция для проверки\n     * @returns {boolean} - можно ли двигаться на новую позицию\n     */\n    checkCollision(newPosition) {\n        // Проверяем выход за границы карты\n        const mapSize = 500; // Половина размера карты (1000x1000)\n        \n        if (Math.abs(newPosition.x) > mapSize || Math.abs(newPosition.z) > mapSize) {\n            return false;\n        }\n        \n        // Здесь должна быть проверка столкновений с объектами\n        // В прототипе используем только границы карты\n        \n        return true;\n    }\n    \n    /**\n     * Создание выстрела (визуально и логически)\n     */\n    createShot() {\n        // В прототипе создаем простой луч\n        if (this.renderer && this.renderer.scene) {\n            const rayStart = { ...this.position };\n            rayStart.y += 1; // Уровень \"глаз\"\n            \n            const rayEnd = {\n                x: rayStart.x + this.direction.x * 100,\n                y: rayStart.y,\n                z: rayStart.z + this.direction.z * 100\n            };\n            \n            // Создаем временный луч для визуализации выстрела\n            this.renderer.createTemporaryBeam(rayStart, rayEnd, 0xFF0000, 100);\n            \n            console.log('Выстрел!', this.direction);\n        }\n    }\n    \n    /**\n     * Обновление модели игрока\n     */\n    updateModel() {\n        if (this.mesh && this.renderer) {\n            // Обновляем позицию меша\n            this.renderer.updateObjectTransform(this.mesh, this.position, this.rotation);\n            \n            // В будущем здесь будет управление анимациями\n        }\n    }\n    \n    /**\n     * Получение угла обзора\n     * @returns {number} - текущий угол обзора в градусах\n     */\n    getViewAngle() {\n        return this.viewAngle;\n    }\n    \n    /**\n     * Получение дальности обзора\n     * @returns {number} - текущая дальность обзора\n     */\n    getViewDistance() {\n        return this.viewDistance;\n    }\n    \n    /**\n     * Получение направления взгляда\n     * @returns {Object} - вектор направления {x, z}\n     */\n    getViewDirection() {\n        return { ...this.direction };\n    }\n}","import { RawBroadPhase } from \"../raw\";\n/**\n * The broad-phase used for coarse collision-detection.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `broadPhase.free()`\n * once you are done using it.\n */\nexport class BroadPhase {\n    /**\n     * Release the WASM memory occupied by this broad-phase.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n    constructor(raw) {\n        this.raw = raw || new RawBroadPhase();\n    }\n}\n//# sourceMappingURL=broad_phase.js.map","import { GameCore } from './gameCore.js';\nimport * as RAPIER from '@dimforge/rapier3d';\n\n// Инициализация Rapier перед запуском игры\nawait RAPIER.init();\n\nexport class Game extends GameCore {\n  static RAPIER = RAPIER; // 👈 если хочешь передавать его в другие модули\n}","// client/src/core/gameEvents.js\n\nimport { log } from './gameCore.js';\n\n/**\n * Класс для обработки событий в игре\n */\nexport class GameEvents {\n    /**\n     * @param {Object} game - ссылка на основной класс игры\n     */\n    constructor(game) {\n        this.game = game;\n        \n        // Привязка методов к this\n        this.handleGlobalError = this.handleGlobalError.bind(this);\n        this.handlePromiseError = this.handlePromiseError.bind(this);\n        \n        // Регистрация обработчиков глобальных ошибок\n        window.addEventListener('error', this.handleGlobalError);\n        window.addEventListener('unhandledrejection', this.handlePromiseError);\n    }\n    \n    /**\n     * Настройка обработчиков событий\n     */\n    setupEventListeners() {\n        try {\n            // Обработчики для главного меню\n            const startGameButton = document.getElementById('start-game');\n            if (startGameButton) {\n                startGameButton.addEventListener('click', () => this.game.startGame());\n            }\n            \n            const settingsButton = document.getElementById('settings');\n            if (settingsButton) {\n                settingsButton.addEventListener('click', () => {\n                    log('Настройки');\n                    // В будущем здесь будет открытие меню настроек\n                });\n            }\n            \n            // Обработчик для закрытия инвентаря\n            const closeInventoryButton = document.getElementById('close-inventory');\n            if (closeInventoryButton) {\n                closeInventoryButton.addEventListener('click', () => {\n                    this.game.ui.hideInventory();\n                });\n            }\n            \n            // Обработчики клавиш\n            if (this.game.input) {\n                this.game.input.addKeyCallback('KeyI', () => {\n                    if (this.game.state.isInScene('game')) {\n                        this.game.ui.toggleInventory();\n                    }\n                });\n                \n                // Обработчик ESC для паузы\n                this.game.input.addKeyCallback('Escape', () => {\n                    if (this.game.state.isInScene('game')) {\n                        this.game.state.togglePause();\n                    }\n                });\n            }\n            \n            // Интеграция с VK (если доступно)\n            if (window.vkBridge) {\n                try {\n                    window.vkBridge.send('VKWebAppInit');\n                    log('VK Bridge инициализирован');\n                } catch (e) {\n                    log(`Ошибка инициализации VK Bridge: ${e.message}`);\n                }\n            }\n            \n            // Обработчик изменения размера окна\n            window.addEventListener('resize', () => {\n                if (this.game.renderer) {\n                    // Перерисовываем сцену при изменении размера окна\n                    this.game.renderer.render(this.game.world.player);\n                }\n            });\n            \n            log('Обработчики событий настроены');\n        } catch (error) {\n            log(`Ошибка настройки обработчиков событий: ${error.message}`);\n            throw error;\n        }\n    }\n    \n    /**\n     * Обработка глобальных ошибок\n     * @param {ErrorEvent} event - событие ошибки\n     */\n    handleGlobalError(event) {\n        log(`Глобальная ошибка: ${event.message} в ${event.filename}:${event.lineno}`);\n        \n        // Показываем сообщение об ошибке, если игра ещё не запущена\n        if (this.game.state.isInScene('loading')) {\n            this.game.ui.showErrorScreen(`Ошибка: ${event.message}`);\n        }\n        \n        // Предотвращаем дополнительную обработку ошибки\n        event.preventDefault();\n    }\n    \n    /**\n     * Обработка необработанных ошибок промисов\n     * @param {PromiseRejectionEvent} event - событие отклонения промиса\n     */\n    handlePromiseError(event) {\n        const errorMessage = event.reason?.message || 'Неизвестная ошибка Promise';\n        log(`Необработанная ошибка Promise: ${errorMessage}`);\n        \n        // Показываем сообщение об ошибке, если игра ещё не запущена\n        if (this.game.state.isInScene('loading')) {\n            this.game.ui.showErrorScreen(`Ошибка асинхронной операции: ${errorMessage}`);\n        }\n        \n        // Предотвращаем дополнительную обработку ошибки\n        event.preventDefault();\n    }\n}","import { version as vers } from \"./raw\";\nexport function version() {\n    return vers();\n}\nexport * from \"./math\";\nexport * from \"./dynamics\";\nexport * from \"./geometry\";\nexport * from \"./pipeline\";\nexport * from \"./init\";\nexport * from \"./control\";\n//# sourceMappingURL=exports.js.map","import { RawKinematicCharacterController, RawCharacterCollision } from \"../raw\";\nimport { VectorOps } from \"../math\";\n/**\n * A collision between the character and an obstacle hit on its path.\n */\nexport class CharacterCollision {\n}\n/**\n * A character controller for controlling kinematic bodies and parentless colliders by hitting\n * and sliding against obstacles.\n */\nexport class KinematicCharacterController {\n    constructor(offset, params, bodies, colliders, queries) {\n        this.params = params;\n        this.bodies = bodies;\n        this.colliders = colliders;\n        this.queries = queries;\n        this.raw = new RawKinematicCharacterController(offset);\n        this.rawCharacterCollision = new RawCharacterCollision();\n        this._applyImpulsesToDynamicBodies = false;\n        this._characterMass = null;\n    }\n    /** @internal */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n            this.rawCharacterCollision.free();\n        }\n        this.raw = undefined;\n        this.rawCharacterCollision = undefined;\n    }\n    /**\n     * The direction that goes \"up\". Used to determine where the floor is, and the floor’s angle.\n     */\n    up() {\n        return this.raw.up();\n    }\n    /**\n     * Sets the direction that goes \"up\". Used to determine where the floor is, and the floor’s angle.\n     */\n    setUp(vector) {\n        let rawVect = VectorOps.intoRaw(vector);\n        return this.raw.setUp(rawVect);\n        rawVect.free();\n    }\n    applyImpulsesToDynamicBodies() {\n        return this._applyImpulsesToDynamicBodies;\n    }\n    setApplyImpulsesToDynamicBodies(enabled) {\n        this._applyImpulsesToDynamicBodies = enabled;\n    }\n    /**\n     * Returns the custom value of the character mass, if it was set by `this.setCharacterMass`.\n     */\n    characterMass() {\n        return this._characterMass;\n    }\n    /**\n     * Set the mass of the character to be used for impulse resolution if `self.applyImpulsesToDynamicBodies`\n     * is set to `true`.\n     *\n     * If no character mass is set explicitly (or if it is set to `null`) it is automatically assumed to be equal\n     * to the mass of the rigid-body the character collider is attached to; or equal to 0 if the character collider\n     * isn’t attached to any rigid-body.\n     *\n     * @param mass - The mass to set.\n     */\n    setCharacterMass(mass) {\n        this._characterMass = mass;\n    }\n    /**\n     * A small gap to preserve between the character and its surroundings.\n     *\n     * This value should not be too large to avoid visual artifacts, but shouldn’t be too small\n     * (must not be zero) to improve numerical stability of the character controller.\n     */\n    offset() {\n        return this.raw.offset();\n    }\n    /**\n     * Sets a small gap to preserve between the character and its surroundings.\n     *\n     * This value should not be too large to avoid visual artifacts, but shouldn’t be too small\n     * (must not be zero) to improve numerical stability of the character controller.\n     */\n    setOffset(value) {\n        this.raw.setOffset(value);\n    }\n    /// Increase this number if your character appears to get stuck when sliding against surfaces.\n    ///\n    /// This is a small distance applied to the movement toward the contact normals of shapes hit\n    /// by the character controller. This helps shape-casting not getting stuck in an always-penetrating\n    /// state during the sliding calculation.\n    ///\n    /// This value should remain fairly small since it can introduce artificial \"bumps\" when sliding\n    /// along a flat surface.\n    normalNudgeFactor() {\n        return this.raw.normalNudgeFactor();\n    }\n    /// Increase this number if your character appears to get stuck when sliding against surfaces.\n    ///\n    /// This is a small distance applied to the movement toward the contact normals of shapes hit\n    /// by the character controller. This helps shape-casting not getting stuck in an always-penetrating\n    /// state during the sliding calculation.\n    ///\n    /// This value should remain fairly small since it can introduce artificial \"bumps\" when sliding\n    /// along a flat surface.\n    setNormalNudgeFactor(value) {\n        this.raw.setNormalNudgeFactor(value);\n    }\n    /**\n     * Is sliding against obstacles enabled?\n     */\n    slideEnabled() {\n        return this.raw.slideEnabled();\n    }\n    /**\n     * Enable or disable sliding against obstacles.\n     */\n    setSlideEnabled(enabled) {\n        this.raw.setSlideEnabled(enabled);\n    }\n    /**\n     * The maximum step height a character can automatically step over.\n     */\n    autostepMaxHeight() {\n        return this.raw.autostepMaxHeight();\n    }\n    /**\n     * The minimum width of free space that must be available after stepping on a stair.\n     */\n    autostepMinWidth() {\n        return this.raw.autostepMinWidth();\n    }\n    /**\n     * Can the character automatically step over dynamic bodies too?\n     */\n    autostepIncludesDynamicBodies() {\n        return this.raw.autostepIncludesDynamicBodies();\n    }\n    /**\n     * Is automatically stepping over small objects enabled?\n     */\n    autostepEnabled() {\n        return this.raw.autostepEnabled();\n    }\n    /**\n     * Enabled automatically stepping over small objects.\n     *\n     * @param maxHeight - The maximum step height a character can automatically step over.\n     * @param minWidth - The minimum width of free space that must be available after stepping on a stair.\n     * @param includeDynamicBodies - Can the character automatically step over dynamic bodies too?\n     */\n    enableAutostep(maxHeight, minWidth, includeDynamicBodies) {\n        this.raw.enableAutostep(maxHeight, minWidth, includeDynamicBodies);\n    }\n    /**\n     * Disable automatically stepping over small objects.\n     */\n    disableAutostep() {\n        return this.raw.disableAutostep();\n    }\n    /**\n     * The maximum angle (radians) between the floor’s normal and the `up` vector that the\n     * character is able to climb.\n     */\n    maxSlopeClimbAngle() {\n        return this.raw.maxSlopeClimbAngle();\n    }\n    /**\n     * Sets the maximum angle (radians) between the floor’s normal and the `up` vector that the\n     * character is able to climb.\n     */\n    setMaxSlopeClimbAngle(angle) {\n        this.raw.setMaxSlopeClimbAngle(angle);\n    }\n    /**\n     * The minimum angle (radians) between the floor’s normal and the `up` vector before the\n     * character starts to slide down automatically.\n     */\n    minSlopeSlideAngle() {\n        return this.raw.minSlopeSlideAngle();\n    }\n    /**\n     * Sets the minimum angle (radians) between the floor’s normal and the `up` vector before the\n     * character starts to slide down automatically.\n     */\n    setMinSlopeSlideAngle(angle) {\n        this.raw.setMinSlopeSlideAngle(angle);\n    }\n    /**\n     * If snap-to-ground is enabled, should the character be automatically snapped to the ground if\n     * the distance between the ground and its feet are smaller than the specified threshold?\n     */\n    snapToGroundDistance() {\n        return this.raw.snapToGroundDistance();\n    }\n    /**\n     * Enables automatically snapping the character to the ground if the distance between\n     * the ground and its feet are smaller than the specified threshold.\n     */\n    enableSnapToGround(distance) {\n        this.raw.enableSnapToGround(distance);\n    }\n    /**\n     * Disables automatically snapping the character to the ground.\n     */\n    disableSnapToGround() {\n        this.raw.disableSnapToGround();\n    }\n    /**\n     * Is automatically snapping the character to the ground enabled?\n     */\n    snapToGroundEnabled() {\n        return this.raw.snapToGroundEnabled();\n    }\n    /**\n     * Computes the movement the given collider is able to execute after hitting and sliding on obstacles.\n     *\n     * @param collider - The collider to move.\n     * @param desiredTranslationDelta - The desired collider movement.\n     * @param filterFlags - Flags for excluding whole subsets of colliders from the obstacles taken into account.\n     * @param filterGroups - Groups for excluding colliders with incompatible collision groups from the obstacles\n     *                       taken into account.\n     * @param filterPredicate - Any collider for which this closure returns `false` will be excluded from the\n     *                          obstacles taken into account.\n     */\n    computeColliderMovement(collider, desiredTranslationDelta, filterFlags, filterGroups, filterPredicate) {\n        let rawTranslationDelta = VectorOps.intoRaw(desiredTranslationDelta);\n        this.raw.computeColliderMovement(this.params.dt, this.bodies.raw, this.colliders.raw, this.queries.raw, collider.handle, rawTranslationDelta, this._applyImpulsesToDynamicBodies, this._characterMass, filterFlags, filterGroups, this.colliders.castClosure(filterPredicate));\n        rawTranslationDelta.free();\n    }\n    /**\n     * The movement computed by the last call to `this.computeColliderMovement`.\n     */\n    computedMovement() {\n        return VectorOps.fromRaw(this.raw.computedMovement());\n    }\n    /**\n     * The result of ground detection computed by the last call to `this.computeColliderMovement`.\n     */\n    computedGrounded() {\n        return this.raw.computedGrounded();\n    }\n    /**\n     * The number of collisions against obstacles detected along the path of the last call\n     * to `this.computeColliderMovement`.\n     */\n    numComputedCollisions() {\n        return this.raw.numComputedCollisions();\n    }\n    /**\n     * Returns the collision against one of the obstacles detected along the path of the last\n     * call to `this.computeColliderMovement`.\n     *\n     * @param i - The i-th collision will be returned.\n     * @param out - If this argument is set, it will be filled with the collision information.\n     */\n    computedCollision(i, out) {\n        if (!this.raw.computedCollision(i, this.rawCharacterCollision)) {\n            return null;\n        }\n        else {\n            let c = this.rawCharacterCollision;\n            out = out !== null && out !== void 0 ? out : new CharacterCollision();\n            out.translationDeltaApplied = VectorOps.fromRaw(c.translationDeltaApplied());\n            out.translationDeltaRemaining = VectorOps.fromRaw(c.translationDeltaRemaining());\n            out.toi = c.toi();\n            out.witness1 = VectorOps.fromRaw(c.worldWitness1());\n            out.witness2 = VectorOps.fromRaw(c.worldWitness2());\n            out.normal1 = VectorOps.fromRaw(c.worldNormal1());\n            out.normal2 = VectorOps.fromRaw(c.worldNormal2());\n            out.collider = this.colliders.get(c.handle());\n            return out;\n        }\n    }\n}\n//# sourceMappingURL=character_controller.js.map","/**\n * Класс для управления сетевым соединением игры\n * Для прототипа будет имитировать серверное соединение\n */\nexport class NetworkManager {\n    constructor() {\n        this.socket = null;\n        this.connected = false;\n        this.serverUrl = 'wss://your-server-url.com'; // Изменить на реальный URL при деплое\n        this.mockMode = true; // Для прототипа используем мок-режим\n        \n        // Колбэки для событий\n        this.eventHandlers = {\n            connect: [],\n            disconnect: [],\n            error: [],\n            message: [],\n            playerMove: [],\n            playerShoot: [],\n            playerDamage: [],\n            itemPickup: [],\n            npcSpawn: [],\n            npcMove: [],\n            gameState: []\n        };\n        \n        // Данные для мок-режима\n        this.mockData = {\n            players: {},\n            npcs: {},\n            items: {}\n        };\n        \n        // ID игрока (для локальной игры будет фиксированным)\n        this.playerId = 'local_player';\n    }\n    \n    /**\n     * Подключение к серверу\n     * @returns {Promise} - промис подключения\n     */\n    connect() {\n        return new Promise((resolve) => {\n            // В режиме прототипа имитируем подключение\n            console.log('Запущен режим прототипа (без сервера)');\n            this.connected = true;\n            \n            // Генерируем тестовые данные\n            this.generateMockData();\n            \n            // Имитируем время загрузки\n            setTimeout(() => {\n                // Вызываем обработчики подключения\n                this.eventHandlers.connect.forEach(handler => handler());\n                \n                // Имитация движения NPC\n                this.startMockNpcMovement();\n                \n                resolve();\n            }, 500);\n        });\n    }\n    \n    /**\n     * Генерация тестовых данных для мок-режима\n     */\n    generateMockData() {\n        // Генерируем предметы на карте\n        for (let i = 0; i < 15; i++) {\n            const id = `item_${i}`;\n            const x = (Math.random() - 0.5) * 80;\n            const z = (Math.random() - 0.5) * 80;\n            \n            // Случайный тип предмета\n            const types = ['weapon', 'medkit', 'ammo'];\n            const type = types[Math.floor(Math.random() * types.length)];\n            \n            this.mockData.items[id] = {\n                id,\n                type,\n                position: { x, y: 0, z },\n                properties: {}\n            };\n        }\n        \n        // Генерируем NPC\n        for (let i = 0; i < 5; i++) {\n            const id = `npc_${i}`;\n            const x = (Math.random() - 0.5) * 80;\n            const z = (Math.random() - 0.5) * 80;\n            \n            this.mockData.npcs[id] = {\n                id,\n                type: 'enemy',\n                position: { x, y: 0, z },\n                health: 100,\n                state: 'patrol'\n            };\n        }\n    }\n    \n    /**\n     * Запуск имитации движения NPC\n     */\n    startMockNpcMovement() {\n        setInterval(() => {\n            // Для каждого NPC\n            Object.keys(this.mockData.npcs).forEach(id => {\n                const npc = this.mockData.npcs[id];\n                \n                // Случайное перемещение\n                const moveX = (Math.random() - 0.5) * 2;\n                const moveZ = (Math.random() - 0.5) * 2;\n                \n                npc.position.x += moveX;\n                npc.position.z += moveZ;\n                \n                // Проверка границ карты\n                npc.position.x = Math.max(-45, Math.min(45, npc.position.x));\n                npc.position.z = Math.max(-45, Math.min(45, npc.position.z));\n                \n                // Вызываем обработчики перемещения NPC\n                this.eventHandlers.npcMove.forEach(handler => handler({\n                    id,\n                    position: npc.position\n                }));\n            });\n        }, 1000); // Обновляем каждую секунду\n    }\n    \n    /**\n     * Регистрация обработчика события\n     * @param {string} event - название события\n     * @param {Function} handler - функция-обработчик\n     */\n    on(event, handler) {\n        if (this.eventHandlers[event]) {\n            this.eventHandlers[event].push(handler);\n        }\n    }\n    \n    /**\n     * Отправка информации о перемещении игрока\n     * @param {Object} position - новая позиция\n     * @param {Object} rotation - новое вращение\n     */\n    sendPlayerMove(position, rotation) {\n        if (!this.connected) return;\n        \n        // В мок-режиме просто сохраняем данные\n        if (this.mockMode) {\n            this.mockData.players[this.playerId] = {\n                ...this.mockData.players[this.playerId],\n                position,\n                rotation\n            };\n        }\n    }\n    \n    /**\n     * Отправка информации о выстреле игрока\n     * @param {Object} position - позиция выстрела\n     * @param {Object} direction - направление выстрела\n     * @param {string} weapon - используемое оружие\n     */\n    sendPlayerShoot(position, direction, weapon) {\n        if (!this.connected) return;\n        \n        console.log('Выстрел игрока:', { position, direction, weapon });\n        \n        // В реальной игре здесь была бы отправка данных на сервер\n    }\n    \n    /**\n     * Отправка информации о подборе предмета\n     * @param {string} itemId - ID поднятого предмета\n     * @param {string} itemType - тип предмета\n     */\n    sendItemPickup(itemId, itemType) {\n        if (!this.connected) return;\n        \n        console.log('Подбор предмета:', { itemId, itemType });\n        \n        // В мок-режиме удаляем предмет из данных\n        if (this.mockMode) {\n            delete this.mockData.items[itemId];\n        }\n    }\n}","/**\n * Менеджер физики, отвечающий за инициализацию и управление физикой игры\n * Использует Rapier.js для физических расчетов\n */\nimport { initRapier } from './rapier-integration.js';\n\nexport class PhysicsManager {\n    constructor() {\n        this.world = null; // Физический мир Rapier\n        this.bodies = new Map(); // Карта физических тел\n        this.colliders = new Map(); // Карта коллайдеров\n        this.isInitialized = false; // Флаг инициализации\n        this.RAPIER = null; // Ссылка на объект RAPIER\n        this.initPromise = null; // Промис инициализации\n    }\n\n    /**\n     * Инициализация физики\n     * @returns {Promise} - промис, который разрешается, когда физика инициализирована\n     */\n    async init() {\n        // Если инициализация уже началась, возвращаем существующий промис\n        if (this.initPromise) {\n            return this.initPromise;\n        }\n\n        // Создаем промис инициализации\n        this.initPromise = new Promise(async (resolve) => {\n            try {\n                console.log('PhysicsManager: начало инициализации...');\n                \n                // Инициализируем Rapier.js\n                this.RAPIER = await initRapier();\n                \n\n                // Инициализируем физический мир\n                console.log('PhysicsManager: создание физического мира...');\n                \n                // Создаем мир с гравитацией (0, -9.81, 0)\n                const gravity = { x: 0.0, y: -9.81, z: 0.0 };\n                \n                // Проверяем, правильный ли формат конструктора\n                if (typeof this.RAPIER.World === 'function') {\n                    this.world = new this.RAPIER.World(gravity);\n                } else if (typeof this.RAPIER.World?.new === 'function') {\n                    // Альтернативный синтаксис для некоторых версий\n                    this.world = this.RAPIER.World.new(gravity);\n                } else {\n                    console.error('PhysicsManager: не удалось создать физический мир. Неподдерживаемый API.');\n                    resolve(false);\n                    return;\n                }\n                \n                // Устанавливаем флаг инициализации\n                this.isInitialized = true;\n                \n                console.log('PhysicsManager: физический движок успешно инициализирован.');\n                resolve(true);\n            } catch (error) {\n                console.error('PhysicsManager: ошибка при инициализации физики:', error);\n                this.isInitialized = false;\n                resolve(false);\n            }\n        });\n\n        return this.initPromise;\n    }\n\n    /**\n     * Проверка, инициализирован ли физический движок\n     * @returns {boolean} - результат проверки\n     */\n    isReady() {\n        return this.isInitialized && this.world !== null;\n    }\n\n    /**\n     * Получение физического мира\n     * @returns {Object} - физический мир Rapier\n     */\n    getWorld() {\n        return this.world;\n    }\n\n    /**\n     * Обновление физики\n     * @param {number} deltaTime - время с последнего обновления в секундах\n     */\n    update(deltaTime) {\n        if (!this.isReady()) return;\n        \n        try {\n            // Шаг физической симуляции\n            if (typeof this.world.step === 'function') {\n                this.world.step();\n            } else if (typeof this.world.timestep === 'function') {\n                // Альтернативный метод для некоторых версий API\n                this.world.timestep(deltaTime || 1/60);\n            }\n            \n            // Обновление позиций объектов на основе физики\n            this.updateBodies();\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при обновлении физики:', error);\n        }\n    }\n\n    /**\n     * Обновление позиций объектов на основе физики\n     */\n    updateBodies() {\n        try {\n            // Для каждого физического тела обновляем позицию соответствующего 3D объекта\n            for (let [object, body] of this.bodies) {\n                if (object && object.position && body) {\n                    let position;\n                    \n                    // Получаем позицию в зависимости от API\n                    if (typeof body.translation === 'function') {\n                        position = body.translation();\n                    } else if (typeof body.getTranslation === 'function') {\n                        position = body.getTranslation();\n                    } else if (body.translation) {\n                        position = body.translation;\n                    } else {\n                        continue; // Пропускаем, если не можем получить позицию\n                    }\n                    \n                    // Обновляем позицию 3D объекта\n                    object.position.set(position.x, position.y, position.z);\n                    \n                    // Если у объекта есть метод обновления позиции, вызываем его\n                    if (typeof object.updatePhysics === 'function') {\n                        object.updatePhysics(body);\n                    }\n                }\n            }\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при обновлении позиций объектов:', error);\n        }\n    }\n\n    /**\n     * Создание статического коллайдера для препятствия\n     * @param {Object} options - параметры коллайдера\n     * @param {Object} options.position - позиция коллайдера {x, y, z}\n     * @param {Object} options.size - размеры коллайдера {x, y, z}\n     * @param {Object} options.object - связанный 3D объект (опционально)\n     * @returns {Object} - созданный коллайдер\n     */\n    createObstacle(options) {\n        if (!this.isReady()) return null;\n        \n        try {\n            const position = options.position || { x: 0, y: 0, z: 0 };\n            const size = options.size || { x: 1, y: 1, z: 1 };\n            \n            // Создаем жесткое тело\n            let rigidBodyDesc;\n            if (typeof this.RAPIER.RigidBodyDesc.fixed === 'function') {\n                rigidBodyDesc = this.RAPIER.RigidBodyDesc.fixed()\n                    .setTranslation(position.x, position.y, position.z);\n            } else {\n                // Альтернативный синтаксис\n                rigidBodyDesc = new this.RAPIER.RigidBodyDesc(this.RAPIER.RigidBodyType.Fixed);\n                rigidBodyDesc.translation = { x: position.x, y: position.y, z: position.z };\n            }\n            \n            const rigidBody = this.world.createRigidBody(rigidBodyDesc);\n            \n            // Создаем коллайдер в форме прямоугольника\n            let colliderDesc;\n            if (typeof this.RAPIER.ColliderDesc.cuboid === 'function') {\n                colliderDesc = this.RAPIER.ColliderDesc.cuboid(\n                    size.x / 2, size.y / 2, size.z / 2\n                );\n            } else {\n                // Альтернативный синтаксис\n                colliderDesc = new this.RAPIER.ColliderDesc(\n                    new this.RAPIER.Cuboid(size.x / 2, size.y / 2, size.z / 2)\n                );\n            }\n            \n            const collider = this.world.createCollider(colliderDesc, rigidBody);\n            \n            // Если передан 3D объект, сохраняем его связь с физическим телом\n            if (options.object) {\n                this.bodies.set(options.object, rigidBody);\n                this.colliders.set(options.object, collider);\n            }\n            \n            return collider;\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при создании препятствия:', error);\n            return null;\n        }\n    }\n\n    /**\n     * Создание динамического тела для игрока или NPC\n     * @param {Object} options - параметры тела\n     * @param {Object} options.position - начальная позиция {x, y, z}\n     * @param {number} options.radius - радиус коллайдера\n     * @param {number} options.height - высота коллайдера\n     * @param {Object} options.object - связанный 3D объект\n     * @returns {Object} - созданное физическое тело\n     */\n    createCharacter(options) {\n        if (!this.isReady()) return null;\n        \n        try {\n            const position = options.position || { x: 0, y: 0, z: 0 };\n            const radius = options.radius || 0.5;\n            const height = options.height || 1.8;\n            \n            // Создаем жесткое тело\n            let rigidBodyDesc;\n            if (typeof this.RAPIER.RigidBodyDesc.dynamic === 'function') {\n                rigidBodyDesc = this.RAPIER.RigidBodyDesc.dynamic()\n                    .setTranslation(position.x, position.y, position.z)\n                    .setCanSleep(false) // Тело всегда активно\n                    .setLinearDamping(0.2); // Добавляем затухание для более плавного движения\n            } else {\n                // Альтернативный синтаксис\n                rigidBodyDesc = new this.RAPIER.RigidBodyDesc(this.RAPIER.RigidBodyType.Dynamic);\n                rigidBodyDesc.translation = { x: position.x, y: position.y, z: position.z };\n                rigidBodyDesc.canSleep = false;\n                rigidBodyDesc.linearDamping = 0.2;\n            }\n            \n            const rigidBody = this.world.createRigidBody(rigidBodyDesc);\n            \n            // Создаем коллайдер в форме капсулы\n            let colliderDesc;\n            if (typeof this.RAPIER.ColliderDesc.capsule === 'function') {\n                colliderDesc = this.RAPIER.ColliderDesc.capsule(\n                    height / 2 - radius, // половина высоты без учета полусфер\n                    radius // радиус\n                );\n            } else {\n                // Альтернативный синтаксис\n                colliderDesc = new this.RAPIER.ColliderDesc(\n                    new this.RAPIER.Capsule(height / 2 - radius, radius)\n                );\n            }\n            \n            const collider = this.world.createCollider(colliderDesc, rigidBody);\n            \n            // Если передан 3D объект, сохраняем его связь с физическим телом\n            if (options.object) {\n                this.bodies.set(options.object, rigidBody);\n                this.colliders.set(options.object, collider);\n            }\n            \n            return rigidBody;\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при создании персонажа:', error);\n            return null;\n        }\n    }\n    \n    /**\n     * Выполнение рейкаста для проверки пересечения с объектами\n     * @param {Object} origin - начальная точка луча {x, y, z}\n     * @param {Object} direction - направление луча {x, y, z}\n     * @param {number} maxDistance - максимальная дистанция\n     * @returns {Object|null} - результат рейкаста или null, если нет пересечений\n     */\n    castRay(origin, direction, maxDistance = 100) {\n        if (!this.isReady()) return null;\n        \n        try {\n            // Создаем луч\n            let ray;\n            if (typeof this.RAPIER.Ray === 'function') {\n                ray = new this.RAPIER.Ray(origin, direction);\n            } else {\n                // Альтернативный синтаксис для объектных параметров\n                ray = { origin, direction };\n            }\n            \n            // Выполняем рейкаст\n            if (typeof this.world.castRay === 'function') {\n                return this.world.castRay(ray, maxDistance, true);\n            } else if (typeof this.world.castRayAndGetNormal === 'function') {\n                return this.world.castRayAndGetNormal(origin, direction, maxDistance, true);\n            } else {\n                console.warn('PhysicsManager: метод рейкаста не доступен');\n                return null;\n            }\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при выполнении рейкаста:', error);\n            return null;\n        }\n    }\n    \n    /**\n     * Создание неподвижного препятствия в виде плоскости (например, пол)\n     * @param {Object} options - параметры плоскости\n     * @param {Object} options.normal - нормаль к плоскости {x, y, z}\n     * @param {number} options.offset - смещение от начала координат\n     * @returns {Object} - созданный коллайдер\n     */\n    createGround(options = {}) {\n        if (!this.isReady()) return null;\n        \n        try {\n            const normal = options.normal || { x: 0, y: 1, z: 0 }; // По умолчанию вверх\n            const offset = options.offset || 0;\n            \n            // Создаем жесткое тело\n            let rigidBodyDesc;\n            if (typeof this.RAPIER.RigidBodyDesc.fixed === 'function') {\n                rigidBodyDesc = this.RAPIER.RigidBodyDesc.fixed();\n            } else {\n                // Альтернативный синтаксис\n                rigidBodyDesc = new this.RAPIER.RigidBodyDesc(this.RAPIER.RigidBodyType.Fixed);\n            }\n            \n            const rigidBody = this.world.createRigidBody(rigidBodyDesc);\n            \n            // Создаем коллайдер в форме плоскости\n            let colliderDesc;\n            if (typeof this.RAPIER.ColliderDesc.halfspace === 'function') {\n                colliderDesc = this.RAPIER.ColliderDesc.halfspace(normal, offset);\n            } else {\n                // Альтернативный синтаксис для Plane или HalfSpace\n                colliderDesc = new this.RAPIER.ColliderDesc(\n                    new this.RAPIER.HalfSpace(normal, offset)\n                );\n            }\n            \n            return this.world.createCollider(colliderDesc, rigidBody);\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при создании плоскости:', error);\n            return null;\n        }\n    }\n    \n    /**\n     * Удаление физического тела\n     * @param {Object} object - 3D объект, связанный с физическим телом\n     */\n    removeBody(object) {\n        try {\n            if (this.bodies.has(object)) {\n                const body = this.bodies.get(object);\n                this.world.removeRigidBody(body);\n                this.bodies.delete(object);\n            }\n            \n            if (this.colliders.has(object)) {\n                this.colliders.delete(object);\n            }\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при удалении тела:', error);\n        }\n    }\n    \n    /**\n     * Освобождение ресурсов\n     */\n    dispose() {\n        try {\n            // Очищаем все коллекции\n            this.bodies.clear();\n            this.colliders.clear();\n            \n            // Уничтожаем физический мир\n            if (this.world) {\n                // У некоторых версий Rapier.js есть метод free() для освобождения ресурсов\n                if (typeof this.world.free === 'function') {\n                    this.world.free();\n                }\n                this.world = null;\n            }\n            \n            this.isInitialized = false;\n            this.initPromise = null;\n            console.log('PhysicsManager: ресурсы освобождены');\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при освобождении ресурсов:', error);\n        }\n    }\n}","import { RawDynamicRayCastVehicleController } from \"../raw\";\nimport { VectorOps } from \"../math\";\n/**\n * A character controller to simulate vehicles using ray-casting for the wheels.\n */\nexport class DynamicRayCastVehicleController {\n    constructor(chassis, bodies, colliders, queries) {\n        this.raw = new RawDynamicRayCastVehicleController(chassis.handle);\n        this.bodies = bodies;\n        this.colliders = colliders;\n        this.queries = queries;\n        this._chassis = chassis;\n    }\n    /** @internal */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n    /**\n     * Updates the vehicle’s velocity based on its suspension, engine force, and brake.\n     *\n     * This directly updates the velocity of its chassis rigid-body.\n     *\n     * @param dt - Time increment used to integrate forces.\n     * @param filterFlags - Flag to exclude categories of objects from the wheels’ ray-cast.\n     * @param filterGroups - Only colliders compatible with these groups will be hit by the wheels’ ray-casts.\n     * @param filterPredicate - Callback to filter out which collider will be hit by the wheels’ ray-casts.\n     */\n    updateVehicle(dt, filterFlags, filterGroups, filterPredicate) {\n        this.raw.update_vehicle(dt, this.bodies.raw, this.colliders.raw, this.queries.raw, filterFlags, filterGroups, this.colliders.castClosure(filterPredicate));\n    }\n    /**\n     * The current forward speed of the vehicle.\n     */\n    currentVehicleSpeed() {\n        return this.raw.current_vehicle_speed();\n    }\n    /**\n     * The rigid-body used as the chassis.\n     */\n    chassis() {\n        return this._chassis;\n    }\n    /**\n     * The chassis’ local _up_ direction (`0 = x, 1 = y, 2 = z`).\n     */\n    get indexUpAxis() {\n        return this.raw.index_up_axis();\n    }\n    /**\n     * Sets the chassis’ local _up_ direction (`0 = x, 1 = y, 2 = z`).\n     */\n    set indexUpAxis(axis) {\n        this.raw.set_index_up_axis(axis);\n    }\n    /**\n     * The chassis’ local _forward_ direction (`0 = x, 1 = y, 2 = z`).\n     */\n    get indexForwardAxis() {\n        return this.raw.index_forward_axis();\n    }\n    /**\n     * Sets the chassis’ local _forward_ direction (`0 = x, 1 = y, 2 = z`).\n     */\n    set setIndexForwardAxis(axis) {\n        this.raw.set_index_forward_axis(axis);\n    }\n    /**\n     * Adds a new wheel attached to this vehicle.\n     * @param chassisConnectionCs  - The position of the wheel relative to the chassis.\n     * @param directionCs - The direction of the wheel’s suspension, relative to the chassis. The ray-casting will\n     *                      happen following this direction to detect the ground.\n     * @param axleCs - The wheel’s axle axis, relative to the chassis.\n     * @param suspensionRestLength - The rest length of the wheel’s suspension spring.\n     * @param radius - The wheel’s radius.\n     */\n    addWheel(chassisConnectionCs, directionCs, axleCs, suspensionRestLength, radius) {\n        let rawChassisConnectionCs = VectorOps.intoRaw(chassisConnectionCs);\n        let rawDirectionCs = VectorOps.intoRaw(directionCs);\n        let rawAxleCs = VectorOps.intoRaw(axleCs);\n        this.raw.add_wheel(rawChassisConnectionCs, rawDirectionCs, rawAxleCs, suspensionRestLength, radius);\n        rawChassisConnectionCs.free();\n        rawDirectionCs.free();\n        rawAxleCs.free();\n    }\n    /**\n     * The number of wheels attached to this vehicle.\n     */\n    numWheels() {\n        return this.raw.num_wheels();\n    }\n    /*\n     *\n     * Access to wheel properties.\n     *\n     */\n    /*\n     * Getters + setters\n     */\n    /**\n     * The position of the i-th wheel, relative to the chassis.\n     */\n    wheelChassisConnectionPointCs(i) {\n        return VectorOps.fromRaw(this.raw.wheel_chassis_connection_point_cs(i));\n    }\n    /**\n     * Sets the position of the i-th wheel, relative to the chassis.\n     */\n    setWheelChassisConnectionPointCs(i, value) {\n        let rawValue = VectorOps.intoRaw(value);\n        this.raw.set_wheel_chassis_connection_point_cs(i, rawValue);\n        rawValue.free();\n    }\n    /**\n     * The rest length of the i-th wheel’s suspension spring.\n     */\n    wheelSuspensionRestLength(i) {\n        return this.raw.wheel_suspension_rest_length(i);\n    }\n    /**\n     * Sets the rest length of the i-th wheel’s suspension spring.\n     */\n    setWheelSuspensionRestLength(i, value) {\n        this.raw.set_wheel_suspension_rest_length(i, value);\n    }\n    /**\n     * The maximum distance the i-th wheel suspension can travel before and after its resting length.\n     */\n    wheelMaxSuspensionTravel(i) {\n        return this.raw.wheel_max_suspension_travel(i);\n    }\n    /**\n     * Sets the maximum distance the i-th wheel suspension can travel before and after its resting length.\n     */\n    setWheelMaxSuspensionTravel(i, value) {\n        this.raw.set_wheel_max_suspension_travel(i, value);\n    }\n    /**\n     * The i-th wheel’s radius.\n     */\n    wheelRadius(i) {\n        return this.raw.wheel_radius(i);\n    }\n    /**\n     * Sets the i-th wheel’s radius.\n     */\n    setWheelRadius(i, value) {\n        this.raw.set_wheel_radius(i, value);\n    }\n    /**\n     * The i-th wheel’s suspension stiffness.\n     *\n     * Increase this value if the suspension appears to not push the vehicle strong enough.\n     */\n    wheelSuspensionStiffness(i) {\n        return this.raw.wheel_suspension_stiffness(i);\n    }\n    /**\n     * Sets the i-th wheel’s suspension stiffness.\n     *\n     * Increase this value if the suspension appears to not push the vehicle strong enough.\n     */\n    setWheelSuspensionStiffness(i, value) {\n        this.raw.set_wheel_suspension_stiffness(i, value);\n    }\n    /**\n     * The i-th wheel’s suspension’s damping when it is being compressed.\n     */\n    wheelSuspensionCompression(i) {\n        return this.raw.wheel_suspension_compression(i);\n    }\n    /**\n     * The i-th wheel’s suspension’s damping when it is being compressed.\n     */\n    setWheelSuspensionCompression(i, value) {\n        this.raw.set_wheel_suspension_compression(i, value);\n    }\n    /**\n     * The i-th wheel’s suspension’s damping when it is being released.\n     *\n     * Increase this value if the suspension appears to overshoot.\n     */\n    wheelSuspensionRelaxation(i) {\n        return this.raw.wheel_suspension_relaxation(i);\n    }\n    /**\n     * Sets the i-th wheel’s suspension’s damping when it is being released.\n     *\n     * Increase this value if the suspension appears to overshoot.\n     */\n    setWheelSuspensionRelaxation(i, value) {\n        this.raw.set_wheel_suspension_relaxation(i, value);\n    }\n    /**\n     * The maximum force applied by the i-th wheel’s suspension.\n     */\n    wheelMaxSuspensionForce(i) {\n        return this.raw.wheel_max_suspension_force(i);\n    }\n    /**\n     * Sets the maximum force applied by the i-th wheel’s suspension.\n     */\n    setWheelMaxSuspensionForce(i, value) {\n        this.raw.set_wheel_max_suspension_force(i, value);\n    }\n    /**\n     * The maximum amount of braking impulse applied on the i-th wheel to slow down the vehicle.\n     */\n    wheelBrake(i) {\n        return this.raw.wheel_brake(i);\n    }\n    /**\n     * Set the maximum amount of braking impulse applied on the i-th wheel to slow down the vehicle.\n     */\n    setWheelBrake(i, value) {\n        this.raw.set_wheel_brake(i, value);\n    }\n    /**\n     * The steering angle (radians) for the i-th wheel.\n     */\n    wheelSteering(i) {\n        return this.raw.wheel_steering(i);\n    }\n    /**\n     * Sets the steering angle (radians) for the i-th wheel.\n     */\n    setWheelSteering(i, value) {\n        this.raw.set_wheel_steering(i, value);\n    }\n    /**\n     * The forward force applied by the i-th wheel on the chassis.\n     */\n    wheelEngineForce(i) {\n        return this.raw.wheel_engine_force(i);\n    }\n    /**\n     * Sets the forward force applied by the i-th wheel on the chassis.\n     */\n    setWheelEngineForce(i, value) {\n        this.raw.set_wheel_engine_force(i, value);\n    }\n    /**\n     * The direction of the i-th wheel’s suspension, relative to the chassis.\n     *\n     * The ray-casting will happen following this direction to detect the ground.\n     */\n    wheelDirectionCs(i) {\n        return VectorOps.fromRaw(this.raw.wheel_direction_cs(i));\n    }\n    /**\n     * Sets the direction of the i-th wheel’s suspension, relative to the chassis.\n     *\n     * The ray-casting will happen following this direction to detect the ground.\n     */\n    setWheelDirectionCs(i, value) {\n        let rawValue = VectorOps.intoRaw(value);\n        this.raw.set_wheel_direction_cs(i, rawValue);\n        rawValue.free();\n    }\n    /**\n     * The i-th wheel’s axle axis, relative to the chassis.\n     *\n     * The axis index defined as 0 = X, 1 = Y, 2 = Z.\n     */\n    wheelAxleCs(i) {\n        return VectorOps.fromRaw(this.raw.wheel_axle_cs(i));\n    }\n    /**\n     * Sets the i-th wheel’s axle axis, relative to the chassis.\n     *\n     * The axis index defined as 0 = X, 1 = Y, 2 = Z.\n     */\n    setWheelAxleCs(i, value) {\n        let rawValue = VectorOps.intoRaw(value);\n        this.raw.set_wheel_axle_cs(i, rawValue);\n        rawValue.free();\n    }\n    /**\n     * Parameter controlling how much traction the tire has.\n     *\n     * The larger the value, the more instantaneous braking will happen (with the risk of\n     * causing the vehicle to flip if it’s too strong).\n     */\n    wheelFrictionSlip(i) {\n        return this.raw.wheel_friction_slip(i);\n    }\n    /**\n     * Sets the parameter controlling how much traction the tire has.\n     *\n     * The larger the value, the more instantaneous braking will happen (with the risk of\n     * causing the vehicle to flip if it’s too strong).\n     */\n    setWheelFrictionSlip(i, value) {\n        this.raw.set_wheel_friction_slip(i, value);\n    }\n    /**\n     * The multiplier of friction between a tire and the collider it’s on top of.\n     *\n     * The larger the value, the stronger side friction will be.\n     */\n    wheelSideFrictionStiffness(i) {\n        return this.raw.wheel_side_friction_stiffness(i);\n    }\n    /**\n     * The multiplier of friction between a tire and the collider it’s on top of.\n     *\n     * The larger the value, the stronger side friction will be.\n     */\n    setWheelSideFrictionStiffness(i, value) {\n        this.raw.set_wheel_side_friction_stiffness(i, value);\n    }\n    /*\n     * Getters only.\n     */\n    /**\n     *  The i-th wheel’s current rotation angle (radians) on its axle.\n     */\n    wheelRotation(i) {\n        return this.raw.wheel_rotation(i);\n    }\n    /**\n     *  The forward impulses applied by the i-th wheel on the chassis.\n     */\n    wheelForwardImpulse(i) {\n        return this.raw.wheel_forward_impulse(i);\n    }\n    /**\n     *  The side impulses applied by the i-th wheel on the chassis.\n     */\n    wheelSideImpulse(i) {\n        return this.raw.wheel_side_impulse(i);\n    }\n    /**\n     *  The force applied by the i-th wheel suspension.\n     */\n    wheelSuspensionForce(i) {\n        return this.raw.wheel_suspension_force(i);\n    }\n    /**\n     *  The (world-space) contact normal between the i-th wheel and the floor.\n     */\n    wheelContactNormal(i) {\n        return VectorOps.fromRaw(this.raw.wheel_contact_normal_ws(i));\n    }\n    /**\n     *  The (world-space) point hit by the wheel’s ray-cast for the i-th wheel.\n     */\n    wheelContactPoint(i) {\n        return VectorOps.fromRaw(this.raw.wheel_contact_point_ws(i));\n    }\n    /**\n     *  The suspension length for the i-th wheel.\n     */\n    wheelSuspensionLength(i) {\n        return this.raw.wheel_suspension_length(i);\n    }\n    /**\n     *  The (world-space) starting point of the ray-cast for the i-th wheel.\n     */\n    wheelHardPoint(i) {\n        return VectorOps.fromRaw(this.raw.wheel_hard_point_ws(i));\n    }\n    /**\n     *  Is the i-th wheel in contact with the ground?\n     */\n    wheelIsInContact(i) {\n        return this.raw.wheel_is_in_contact(i);\n    }\n    /**\n     *  The collider hit by the ray-cast for the i-th wheel.\n     */\n    wheelGroundObject(i) {\n        return this.colliders.get(this.raw.wheel_ground_object(i));\n    }\n}\n//# sourceMappingURL=ray_cast_vehicle_controller.js.map","import { VectorOps } from \"../math\";\n/**\n * The contact info between two shapes.\n */\nexport class ShapeContact {\n    constructor(dist, point1, point2, normal1, normal2) {\n        this.distance = dist;\n        this.point1 = point1;\n        this.point2 = point2;\n        this.normal1 = normal1;\n        this.normal2 = normal2;\n    }\n    static fromRaw(raw) {\n        if (!raw)\n            return null;\n        const result = new ShapeContact(raw.distance(), VectorOps.fromRaw(raw.point1()), VectorOps.fromRaw(raw.point2()), VectorOps.fromRaw(raw.normal1()), VectorOps.fromRaw(raw.normal2()));\n        raw.free();\n        return result;\n    }\n}\n//# sourceMappingURL=contact.js.map","/**\n* Система визуализации конуса зрения и тумана войны в стиле Darkwood\n* Использует Rapier.js для расчета рейкастов и Three.js для отображения\n*/\nexport class VisionSystem {\n    /**\n     * @param {Object} options - настройки системы визуализации\n     * @param {Object} options.scene - Three.js сцена\n     * @param {Object} options.world - Rapier.js мир физики\n     * @param {Object} options.player - игрок, для которого отображается конус зрения\n     * @param {number} options.fov - угол обзора в градусах (по умолчанию 90)\n     * @param {number} options.rayCount - количество лучей (по умолчанию 50)\n     * @param {number} options.maxDistance - максимальная дистанция обзора (по умолчанию 50)\n     * @param {boolean} options.memoryEnabled - сохранение посещенных областей (по умолчанию true)\n     * @param {boolean} options.blurEdges - размытие краев конуса зрения (по умолчанию true)\n     */\n    constructor(options) {\n        // Проверяем наличие обязательных параметров\n        if (!options.scene || !options.player) {\n            console.error('VisionSystem: не указаны обязательные параметры (scene, player)');\n            return;\n        }\n \n        this.scene = options.scene;\n        this.world = options.world; // Может быть undefined на момент создания\n        this.player = options.player;\n        \n        // Настройки по умолчанию\n        this.fov = options.fov !== undefined ? options.fov : 90; // угол обзора в градусах\n        this.rayCount = options.rayCount || 60; // количество лучей (было 50, оптимизировано)\n        this.maxDistance = options.maxDistance || 50; // максимальная дистанция обзора\n        this.memoryEnabled = options.memoryEnabled !== undefined ? options.memoryEnabled : true; // сохранение посещенных областей\n        this.blurEdges = options.blurEdges !== undefined ? options.blurEdges : true; // размытие краев конуса зрения\n        \n        // Константы для динамической настройки угла обзора\n        this.normalFov = 90; // нормальный угол обзора в градусах\n        this.aimingFov = 45; // угол обзора при прицеливании\n        this.runningFov = 70; // угол обзора при беге\n        \n        // Внутренние переменные\n        this.visibilityMask = null; // маска для затемнения невидимых областей\n        this.memoryMask = null; // маска для посещенных областей\n        this.visibilityShape = null; // форма для вырезания конуса видимости\n        this.currentVisionMesh = null; // текущая область конуса видимости\n        \n        // Для хранения информации о посещенных зонах\n        this.cellSize = options.cellSize || 5; // размер ячейки для карты посещенных областей\n        this.gridSize = 1000; // размер игрового мира\n        this.gridResolution = Math.ceil(this.gridSize / this.cellSize); // разрешение сетки\n        this.memoryGrid = new Array(this.gridResolution); // сетка посещенных областей\n        \n        // Флаги состояния\n        this.isInitialized = false;\n        this.isRapierReady = false;\n        this.isRapierChecked = false;\n        this.initializationPromise = null;\n        this.lastErrorTime = 0;\n        this.updateInterval = options.updateInterval || 0; // 0 = каждый кадр, иначе мс между обновлениями\n        this.lastUpdateTime = 0;\n        this.errorCooldown = 5000; // Пауза между повторными логами ошибок (мс)\n        \n        // Инициализация сетки памяти\n        for (let i = 0; i < this.gridResolution; i++) {\n            this.memoryGrid[i] = new Array(this.gridResolution).fill(0);\n        }\n        \n        // Группа для всех элементов системы видимости\n        this.visibilityGroup = new THREE.Group();\n        this.scene.add(this.visibilityGroup);\n \n        // Асинхронная инициализация\n        this.init();\n    }\n    \n    /**\n     * Асинхронная инициализация системы видимости\n     * @returns {Promise} - промис, который разрешается после инициализации\n     */\n    async init() {\n        if (this.initializationPromise) {\n            return this.initializationPromise;\n        }\n        \n        this.initializationPromise = new Promise(async (resolve) => {\n            try {\n                console.log('VisionSystem: начало инициализации...');\n                \n                // Создаем слои видимости\n                this.initVisibilityLayers();\n                \n                // Проверка доступности Rapier\n                await this.checkRapierAvailability();\n                \n                this.isInitialized = true;\n                console.log('VisionSystem: успешно инициализирована');\n                resolve(true);\n            } catch (error) {\n                console.error('VisionSystem: ошибка при инициализации:', error);\n                resolve(false);\n            }\n        });\n        \n        return this.initializationPromise;\n    }\n    \n    /**\n     * Проверка доступности библиотеки Rapier\n     * @returns {Promise} - промис, который разрешается, когда Rapier доступен\n     */\n    async checkRapierAvailability() {\n        // Если уже проверили - возвращаем результат\n        if (this.isRapierChecked) {\n            return this.isRapierReady;\n        }\n        \n        return new Promise((resolve) => {\n            // Функция для проверки доступности Rapier\n            const checkRapier = () => {\n                // Проверяем доступность Rapier у нас\n                const RAPIER = this.getRapierInstance();\n                if (RAPIER) {\n                    console.log('VisionSystem: RAPIER доступен');\n                    this.isRapierReady = true;\n                    this.isRapierChecked = true;\n                    resolve(true);\n                    return;\n                }\n                \n                // Если Rapier недоступен и мир не установлен - продолжаем проверять\n                if (!this.world) {\n                    setTimeout(checkRapier, 100);\n                    return;\n                }\n                \n                // Проверяем, есть ли у мира метод castRay или castRayAndGetNormal\n                if (typeof this.world.castRay === 'function' || \n                    typeof this.world.castRayAndGetNormal === 'function') {\n                    console.log('VisionSystem: мир физики доступен и поддерживает рейкасты');\n                    this.isRapierReady = true;\n                    this.isRapierChecked = true;\n                    resolve(true);\n                    return;\n                }\n                \n                // Продолжаем проверять, но не чаще раза в 100 мс\n                setTimeout(checkRapier, 100);\n            };\n            \n            // Начинаем проверку\n            checkRapier();\n        });\n    }\n \n    /**\n     * Получение экземпляра RAPIER из разных источников\n     * @returns {Object|null} - объект RAPIER или null, если он недоступен\n     */\n    getRapierInstance() {\n        if (typeof RAPIER !== 'undefined') {\n            return RAPIER;\n        }\n        \n        if (typeof window !== 'undefined' && window.RAPIER) {\n            return window.RAPIER;\n        }\n        \n        return null;\n    }\n \n    /**\n     * Инициализация слоев видимости\n     */\n    initVisibilityLayers() {\n        // 1. Создаем слой тумана войны (полностью закрывает карту)\n        this.createFogOfWarLayer();\n        \n        // 2. Создаем слой памяти (посещенные области в черно-белом)\n        this.createMemoryLayer();\n        \n        // 3. Создаем слой текущей видимости (конус зрения)\n        this.createVisionConeLayer();\n    }\n    \n    /**\n     * Создание слоя тумана войны\n     */\n    createFogOfWarLayer() {\n        // Создаем большой черный прямоугольник, покрывающий весь мир\n        const fogGeometry = new THREE.PlaneGeometry(this.gridSize * 1.5, this.gridSize * 1.5);\n        const fogMaterial = new THREE.MeshBasicMaterial({\n            color: 0x000000,\n            transparent: true,\n            opacity: 0.95,\n            side: THREE.DoubleSide,\n            depthTest: false,\n            depthWrite: false\n        });\n        \n        this.fogOfWarMesh = new THREE.Mesh(fogGeometry, fogMaterial);\n        this.fogOfWarMesh.rotation.x = -Math.PI / 2; // горизонтально\n        this.fogOfWarMesh.position.y = 0.3; // немного выше остальных слоев\n        this.fogOfWarMesh.renderOrder = 997; // рендерим под остальными слоями\n        this.visibilityGroup.add(this.fogOfWarMesh);\n    }\n    \n    /**\n     * Создание слоя памяти (посещенные области)\n     */\n    createMemoryLayer() {\n        // Создаем сетку для отображения посещенных областей\n        const gridGeometry = new THREE.PlaneGeometry(\n            this.gridSize * 1.5, \n            this.gridSize * 1.5,\n            this.gridResolution,\n            this.gridResolution\n        );\n        \n        // Материал для посещенных областей (чёрно-белый)\n        const memoryMaterial = new THREE.ShaderMaterial({\n            uniforms: {\n                opacity: { value: 0.7 },\n                colorInfluence: { value: 0.2 } // насколько сильно сохраняется цвет (0 = полностью ЧБ, 1 = цветной)\n            },\n            vertexShader: `\n                varying vec2 vUv;\n                varying vec3 vPosition;\n                \n                void main() {\n                    vUv = uv;\n                    vPosition = position;\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                }\n            `,\n            fragmentShader: `\n                uniform float opacity;\n                uniform float colorInfluence;\n                \n                varying vec2 vUv;\n                varying vec3 vPosition;\n                \n                void main() {\n                    // В реальной реализации здесь будет использоваться текстура с рендера сцены\n                    // Для прототипа просто делаем ЧБ эффект\n                    gl_FragColor = vec4(0.3, 0.3, 0.3, opacity);\n                }\n            `,\n            transparent: true,\n            side: THREE.DoubleSide,\n            depthTest: false,\n            depthWrite: false\n        });\n        \n        this.memoryMesh = new THREE.Mesh(gridGeometry, memoryMaterial);\n        this.memoryMesh.rotation.x = -Math.PI / 2; // горизонтально\n        this.memoryMesh.position.y = 0.2; // выше земли, но ниже тумана\n        this.memoryMesh.renderOrder = 998; // рендерим между туманом и конусом видимости\n        this.visibilityGroup.add(this.memoryMesh);\n        \n        // Создаем атрибут видимости для вершин\n        const visibilityAttribute = new Float32Array(gridGeometry.attributes.position.count);\n        for (let i = 0; i < visibilityAttribute.length; i++) {\n            visibilityAttribute[i] = 0.0; // изначально все вершины невидимы\n        }\n        \n        gridGeometry.setAttribute('visibility', new THREE.BufferAttribute(visibilityAttribute, 1));\n    }\n    \n    /**\n     * Создание слоя конуса видимости\n     */\n    createVisionConeLayer() {\n        // Создаем базовую геометрию (будет обновляться каждый кадр)\n        const initialShape = new THREE.Shape();\n        initialShape.moveTo(0, 0);\n        initialShape.lineTo(5, 5);\n        initialShape.lineTo(-5, 5);\n        initialShape.lineTo(0, 0);\n        \n        // Маска для затемнения невидимых областей\n        const maskMaterial = new THREE.MeshBasicMaterial({\n            color: 0x000000,\n            side: THREE.DoubleSide,\n            transparent: true,\n            opacity: 0.8,\n            depthTest: false,\n            depthWrite: false\n        });\n        \n        // Создаем пустую маску (будет обновляться каждый кадр)\n        const worldSize = this.gridSize * 1.5;\n        const maskGeometry = new THREE.PlaneGeometry(worldSize, worldSize);\n        this.visibilityMask = new THREE.Mesh(maskGeometry, maskMaterial);\n        this.visibilityMask.rotation.x = -Math.PI / 2; // горизонтально\n        this.visibilityMask.position.y = 0.1; // ниже всех остальных слоёв\n        this.visibilityMask.renderOrder = 999; // рендерим последним\n        this.visibilityGroup.add(this.visibilityMask);\n    }\n    \n    /**\n     * Проверка готовности системы видимости\n     * @returns {boolean} - флаг готовности\n     */\n    isReady() {\n        return this.isInitialized && this.isRapierReady && !!this.world;\n    }\n    \n    /**\n     * Обновление конуса видимости\n     */\n    update() {\n        // Если система не инициализирована, ждем\n        if (!this.isInitialized) {\n            return;\n        }\n        \n        // Если Rapier не готов, пробуем проверить его доступность\n        if (!this.isRapierReady) {\n            this.checkRapierAvailability();\n            return;\n        }\n        \n        // Если не переданы необходимые объекты, выходим\n        if (!this.player || !this.world) {\n            return;\n        }\n \n        // Проверяем, не слишком ли рано для обновления (для оптимизации)\n        const now = Date.now();\n        if (this.updateInterval > 0 && now - this.lastUpdateTime < this.updateInterval) {\n            return;\n        }\n        this.lastUpdateTime = now;\n        \n        try {\n            // Получаем актуальные данные от игрока\n            const playerPos = this.player.position;\n            let playerDirection = { x: 0, z: -1 }; // направление по умолчанию\n            \n            // Пытаемся получить текущее направление взгляда, если метод существует\n            if (typeof this.player.getViewDirection === 'function') {\n                playerDirection = this.player.getViewDirection();\n            }\n            \n            // Определяем текущий угол обзора в зависимости от состояния игрока\n            let currentFov = this.normalFov;\n            if (this.player.isAiming) {\n                currentFov = this.aimingFov;\n            } else if (this.player.isRunning) {\n                currentFov = this.runningFov;\n            }\n            // Преобразуем угол из градусов в радианы\n            const fovRadians = (currentFov * Math.PI) / 180;\n            \n            // Вычисляем направление взгляда игрока в радианах\n            const directionAngle = Math.atan2(playerDirection.x, playerDirection.z);\n            \n            // Обновляем маску видимости\n            this.updateVisionMask(playerPos, directionAngle, fovRadians);\n            \n            // Обновляем карту памяти\n            if (this.memoryEnabled) {\n                this.updateMemoryMap(playerPos, directionAngle, fovRadians);\n            }\n        } catch (error) {\n            // Ограничиваем частоту вывода ошибок в консоль\n            const now = Date.now();\n            if (now - this.lastErrorTime > this.errorCooldown) {\n                console.error('VisionSystem: ошибка при обновлении:', error);\n                this.lastErrorTime = now;\n            }\n        }\n    }\n    \n    /**\n     * Обновление маски видимости (конуса зрения)\n     * @param {Object} playerPos - позиция игрока\n     * @param {number} directionAngle - угол направления взгляда в радианах\n     * @param {number} fovRadians - угол обзора в радианах\n     */\n    updateVisionMask(playerPos, directionAngle, fovRadians) {\n        // Защитная проверка - Rapier должен быть доступен\n        if (!this.isRapierReady || !this.world) {\n            return;\n        }\n        \n        // Защитная проверка объектов\n        if (!playerPos || directionAngle === undefined || fovRadians === undefined) {\n            return;\n        }\n        \n        try {\n            // Получаем экземпляр RAPIER\n            const RAPIER = this.getRapierInstance();\n            if (!RAPIER) {\n                console.warn('VisionSystem: RAPIER не определен при обновлении маски видимости');\n                return;\n            }\n            \n            // Половина угла обзора\n            const halfFov = fovRadians / 2;\n            \n            // Определяем точку старта лучей\n            const origin = {\n                x: playerPos.x,\n                y: playerPos.y + 1.0, // на уровне \"глаз\" игрока\n                z: playerPos.z\n            };\n            \n            // Формируем список углов для выпуска лучей\n            const angles = [];\n            for (let i = 0; i < this.rayCount; i++) {\n                const angle = directionAngle - halfFov + (i / (this.rayCount - 1)) * fovRadians;\n                angles.push(angle);\n            }\n            \n            // Вычисляем точки контура видимой области\n            const points = [];\n            \n            // Добавляем первую точку - позиция игрока\n            points.push(new THREE.Vector2(0, 0));\n            \n            // Выпускаем лучи и находим точки пересечения\n            angles.forEach(angle => {\n                // Единичный вектор направления в горизонтальной плоскости\n                const dir = {\n                    x: Math.sin(angle),\n                    y: 0,\n                    z: Math.cos(angle)\n                };\n                \n                // Выполняем рейкаст\n                let endPoint;\n                \n                try {\n                    // Создаем луч Rapier (с проверкой существования конструктора)\n                    let ray;\n                    if (typeof RAPIER.Ray === 'function') {\n                        ray = new RAPIER.Ray(origin, dir);\n                    } else if (RAPIER.Ray) {\n                        ray = RAPIER.Ray.new(origin, dir);\n                    } else {\n                        // Если Ray недоступен, используем базовое значение\n                        endPoint = {\n                            x: origin.x + dir.x * this.maxDistance,\n                            z: origin.z + dir.z * this.maxDistance\n                        };\n                        points.push(new THREE.Vector2(\n                            endPoint.x - origin.x,\n                            endPoint.z - origin.z\n                        ));\n                        return; // Выход из текущей итерации forEach\n                    }\n                    \n                    // Выполняем рейкаст в физическом мире\n                    let hit = null;\n                    if (typeof this.world.castRay === 'function') {\n                        hit = this.world.castRay(ray, this.maxDistance, true);\n                    } else if (typeof this.world.castRayAndGetNormal === 'function') {\n                        const result = this.world.castRayAndGetNormal(origin, dir, this.maxDistance, true);\n                        hit = result.hasHit ? result : null;\n                    }\n                    \n                    if (hit) {\n                        // Луч столкнулся с препятствием\n                        const hitDist = typeof hit.toi === 'function' ? hit.toi() : hit.toi;\n                        const impactDistance = hitDist * this.maxDistance * 0.99;\n                        \n                        // Конечная точка чуть ближе точки столкновения\n                        endPoint = {\n                            x: origin.x + dir.x * impactDistance,\n                            z: origin.z + dir.z * impactDistance\n                        };\n                    } else {\n                        // Луч не встретил препятствий\n                        endPoint = {\n                            x: origin.x + dir.x * this.maxDistance,\n                            z: origin.z + dir.z * this.maxDistance\n                        };\n                    }\n                } catch (error) {\n                    console.error('VisionSystem: ошибка при выполнении рейкаста:', error);\n                    // В случае ошибки используем максимальную дистанцию\n                    endPoint = {\n                        x: origin.x + dir.x * this.maxDistance,\n                        z: origin.z + dir.z * this.maxDistance\n                    };\n                }\n                \n                // Добавляем точку в список\n                points.push(new THREE.Vector2(\n                    endPoint.x - origin.x,\n                    endPoint.z - origin.z\n                ));\n                \n                // Отмечаем область как посещенную\n                if (this.memoryEnabled) {\n                    this.markVisitedArea(endPoint.x, endPoint.z);\n                }\n            });\n            \n            // Добавляем последнюю точку, замыкающую форму\n            if (points.length > 1) {\n                points.push(points[1].clone());\n            }\n            \n            // Создаем форму конуса видимости\n            this.updateVisibilityShape(points, playerPos);\n        } catch (error) {\n            console.error('VisionSystem: ошибка при обновлении маски видимости:', error);\n        }\n    }\n    \n    /**\n     * Обновление формы видимости\n     * @param {Array} points - точки контура видимой области\n     * @param {Object} playerPos - позиция игрока\n     */\n    updateVisibilityShape(points, playerPos) {\n        // Проверяем валидность точек\n        if (!points || points.length < 3) {\n            console.warn('VisionSystem: недостаточно точек для создания формы видимости');\n            return;\n        }\n        \n        try {\n            // Создаем форму конуса видимости\n            const shape = new THREE.Shape();\n            shape.moveTo(points[0].x, points[0].y);\n            \n            for (let i = 1; i < points.length; i++) {\n                shape.lineTo(points[i].x, points[i].y);\n            }\n            \n            // Создаем внешний контур (большой прямоугольник)\n            const worldSize = this.maxDistance * 2;\n            const outerShape = new THREE.Shape();\n            outerShape.moveTo(-worldSize, -worldSize);\n            outerShape.lineTo(worldSize, -worldSize);\n            outerShape.lineTo(worldSize, worldSize);\n            outerShape.lineTo(-worldSize, worldSize);\n            outerShape.lineTo(-worldSize, -worldSize);\n            \n            // Вырезаем форму конуса\n            outerShape.holes.push(shape);\n            \n            // Обновляем геометрию маски\n            if (this.visibilityMask) {\n                // Удаляем старую геометрию\n                if (this.visibilityMask.geometry) {\n                    this.visibilityMask.geometry.dispose();\n                }\n                \n                // Создаем новую геометрию\n                this.visibilityMask.geometry = new THREE.ShapeGeometry(outerShape);\n                \n                // Перемещаем в позицию игрока\n                this.visibilityMask.position.set(playerPos.x, 0.1, playerPos.z);\n            }\n        } catch (error) {\n            console.error('VisionSystem: ошибка при обновлении формы видимости:', error);\n        }\n    }\n    \n    /**\n     * Отметка области как посещенной\n     * @param {number} x - координата X в мировом пространстве\n     * @param {number} z - координата Z в мировом пространстве\n     */\n    markVisitedArea(x, z) {\n        // Преобразуем мировые координаты в координаты сетки\n        const halfGridSize = this.gridSize / 2;\n        const gridX = Math.floor((x + halfGridSize) / this.cellSize);\n        const gridZ = Math.floor((z + halfGridSize) / this.cellSize);\n        \n        // Проверяем, что координаты внутри сетки\n        if (gridX >= 0 && gridX < this.gridResolution && \n            gridZ >= 0 && gridZ < this.gridResolution) {\n            \n            // Отмечаем область как посещенную\n            this.memoryGrid[gridX][gridZ] = 1;\n            \n            // Отмечаем соседние ячейки для плавного перехода\n            const radius = 1; // радиус влияния в ячейках сетки\n            \n            for (let dx = -radius; dx <= radius; dx++) {\n                for (let dz = -radius; dz <= radius; dz++) {\n                    const nx = gridX + dx;\n                    const nz = gridZ + dz;\n                    \n                    if (nx >= 0 && nx < this.gridResolution && \n                        nz >= 0 && nz < this.gridResolution) {\n                        \n                        // Устанавливаем значение не меньше 0.7 для соседних ячеек\n                        this.memoryGrid[nx][nz] = Math.max(this.memoryGrid[nx][nz], 0.7);\n                    }\n                }\n            }\n        }\n    }\n    \n    /**\n     * Обновление карты памяти\n     * @param {Object} playerPos - позиция игрока\n     * @param {number} directionAngle - угол направления взгляда\n     * @param {number} fovRadians - угол обзора в радианах\n     */\n    updateMemoryMap(playerPos, directionAngle, fovRadians) {\n        if (!this.memoryEnabled || !this.memoryMesh) return;\n        \n        try {\n            // Обновляем сетку памяти на маске тумана войны\n            if (this.fogOfWarMesh && this.fogOfWarMesh.material) {\n                // Здесь обычно используется шейдер или другой метод для \n                // обновления маски на основе сетки памяти\n                \n                // В этой реализации для простоты мы просто накладываем\n                // маску поверх тех областей, которые не посещены\n \n                // Обновляем непрозрачность маски памяти в зависимости от стейта\n                // В полной реализации здесь было бы обновление шейдера\n                \n                // Дополнительное: создание отверстий в тумане войны на основе сетки памяти\n                // Создаем геометрию для вырезания посещенных областей из тумана войны\n                // (Для прототипа не реализуем полностью)\n            }\n \n            // В полной реализации здесь было бы обновление шейдера\n            // на основе карты посещенных областей\n        } catch (error) {\n            console.error('VisionSystem: ошибка при обновлении карты памяти:', error);\n        }\n    }\n    \n    /**\n     * Изменение угла обзора\n     * @param {number} fov - новый угол обзора в градусах\n     */\n    setFov(fov) {\n        this.fov = fov;\n    }\n    \n    /**\n     * Изменение максимальной дистанции видимости\n     * @param {number} distance - новая максимальная дистанция\n     */\n    setMaxDistance(distance) {\n        this.maxDistance = distance;\n    }\n    \n    /**\n     * Изменение количества лучей\n     * @param {number} count - новое количество лучей\n     */\n    setRayCount(count) {\n        this.rayCount = count;\n    }\n    \n    /**\n     * Очистка карты памяти (сброс посещенных областей)\n     */\n    clearMemory() {\n        if (!this.memoryEnabled) return;\n        \n        // Сбрасываем сетку памяти\n        for (let i = 0; i < this.gridResolution; i++) {\n            for (let j = 0; j < this.gridResolution; j++) {\n                this.memoryGrid[i][j] = 0;\n            }\n        }\n        \n        console.log('VisionSystem: карта памяти очищена');\n    }\n    \n    /**\n    * Освобождение ресурсов системы\n    */\n   dispose() {\n    try {\n        // Удаляем маску видимости\n        if (this.visibilityMask) {\n            if (this.visibilityMask.geometry) {\n                this.visibilityMask.geometry.dispose();\n            }\n            if (this.visibilityMask.material) {\n                this.visibilityMask.material.dispose();\n            }\n            this.visibilityGroup.remove(this.visibilityMask);\n        }\n        \n        // Удаляем маску памяти\n        if (this.memoryMesh) {\n            if (this.memoryMesh.geometry) {\n                this.memoryMesh.geometry.dispose();\n            }\n            if (this.memoryMesh.material) {\n                this.memoryMesh.material.dispose();\n            }\n            this.visibilityGroup.remove(this.memoryMesh);\n        }\n        \n        // Удаляем маску тумана войны\n        if (this.fogOfWarMesh) {\n            if (this.fogOfWarMesh.geometry) {\n                this.fogOfWarMesh.geometry.dispose();\n            }\n            if (this.fogOfWarMesh.material) {\n                this.fogOfWarMesh.material.dispose();\n            }\n            this.visibilityGroup.remove(this.fogOfWarMesh);\n        }\n        \n        // Удаляем группу видимости\n        if (this.visibilityGroup) {\n            this.scene.remove(this.visibilityGroup);\n        }\n        \n        // Сбрасываем переменные\n        this.visibilityMask = null;\n        this.memoryMesh = null;\n        this.fogOfWarMesh = null;\n        this.visibilityGroup = null;\n        this.memoryGrid = [];\n        this.isInitialized = false;\n        this.isRapierReady = false;\n        this.isRapierChecked = false;\n        this.initializationPromise = null;\n        \n        console.log('VisionSystem: ресурсы успешно освобождены');\n    } catch (error) {\n        console.error('VisionSystem: ошибка при освобождении ресурсов:', error);\n    }\n}\n}","// #if DIM3\nexport var FeatureType;\n(function (FeatureType) {\n    FeatureType[FeatureType[\"Vertex\"] = 0] = \"Vertex\";\n    FeatureType[FeatureType[\"Edge\"] = 1] = \"Edge\";\n    FeatureType[FeatureType[\"Face\"] = 2] = \"Face\";\n    FeatureType[FeatureType[\"Unknown\"] = 3] = \"Unknown\";\n})(FeatureType || (FeatureType = {}));\n// #endif\n//# sourceMappingURL=feature.js.map","import { RotationOps, VectorOps } from \"../math\";\n// #if DIM3\nimport { SdpMatrix3Ops } from \"../math\";\n/**\n * The simulation status of a rigid-body.\n */\n// TODO: rename this to RigidBodyType\nexport var RigidBodyType;\n(function (RigidBodyType) {\n    /**\n     * A `RigidBodyType::Dynamic` body can be affected by all external forces.\n     */\n    RigidBodyType[RigidBodyType[\"Dynamic\"] = 0] = \"Dynamic\";\n    /**\n     * A `RigidBodyType::Fixed` body cannot be affected by external forces.\n     */\n    RigidBodyType[RigidBodyType[\"Fixed\"] = 1] = \"Fixed\";\n    /**\n     * A `RigidBodyType::KinematicPositionBased` body cannot be affected by any external forces but can be controlled\n     * by the user at the position level while keeping realistic one-way interaction with dynamic bodies.\n     *\n     * One-way interaction means that a kinematic body can push a dynamic body, but a kinematic body\n     * cannot be pushed by anything. In other words, the trajectory of a kinematic body can only be\n     * modified by the user and is independent from any contact or joint it is involved in.\n     */\n    RigidBodyType[RigidBodyType[\"KinematicPositionBased\"] = 2] = \"KinematicPositionBased\";\n    /**\n     * A `RigidBodyType::KinematicVelocityBased` body cannot be affected by any external forces but can be controlled\n     * by the user at the velocity level while keeping realistic one-way interaction with dynamic bodies.\n     *\n     * One-way interaction means that a kinematic body can push a dynamic body, but a kinematic body\n     * cannot be pushed by anything. In other words, the trajectory of a kinematic body can only be\n     * modified by the user and is independent from any contact or joint it is involved in.\n     */\n    RigidBodyType[RigidBodyType[\"KinematicVelocityBased\"] = 3] = \"KinematicVelocityBased\";\n})(RigidBodyType || (RigidBodyType = {}));\n/**\n * A rigid-body.\n */\nexport class RigidBody {\n    constructor(rawSet, colliderSet, handle) {\n        this.rawSet = rawSet;\n        this.colliderSet = colliderSet;\n        this.handle = handle;\n    }\n    /** @internal */\n    finalizeDeserialization(colliderSet) {\n        this.colliderSet = colliderSet;\n    }\n    /**\n     * Checks if this rigid-body is still valid (i.e. that it has\n     * not been deleted from the rigid-body set yet.\n     */\n    isValid() {\n        return this.rawSet.contains(this.handle);\n    }\n    /**\n     * Locks or unlocks the ability of this rigid-body to translate.\n     *\n     * @param locked - If `true`, this rigid-body will no longer translate due to forces and impulses.\n     * @param wakeUp - If `true`, this rigid-body will be automatically awaken if it is currently asleep.\n     */\n    lockTranslations(locked, wakeUp) {\n        return this.rawSet.rbLockTranslations(this.handle, locked, wakeUp);\n    }\n    /**\n     * Locks or unlocks the ability of this rigid-body to rotate.\n     *\n     * @param locked - If `true`, this rigid-body will no longer rotate due to torques and impulses.\n     * @param wakeUp - If `true`, this rigid-body will be automatically awaken if it is currently asleep.\n     */\n    lockRotations(locked, wakeUp) {\n        return this.rawSet.rbLockRotations(this.handle, locked, wakeUp);\n    }\n    // #if DIM3\n    /**\n     * Locks or unlocks the ability of this rigid-body to translate along individual coordinate axes.\n     *\n     * @param enableX - If `false`, this rigid-body will no longer translate due to torques and impulses, along the X coordinate axis.\n     * @param enableY - If `false`, this rigid-body will no longer translate due to torques and impulses, along the Y coordinate axis.\n     * @param enableZ - If `false`, this rigid-body will no longer translate due to torques and impulses, along the Z coordinate axis.\n     * @param wakeUp - If `true`, this rigid-body will be automatically awaken if it is currently asleep.\n     */\n    setEnabledTranslations(enableX, enableY, enableZ, wakeUp) {\n        return this.rawSet.rbSetEnabledTranslations(this.handle, enableX, enableY, enableZ, wakeUp);\n    }\n    /**\n     * Locks or unlocks the ability of this rigid-body to translate along individual coordinate axes.\n     *\n     * @param enableX - If `false`, this rigid-body will no longer translate due to torques and impulses, along the X coordinate axis.\n     * @param enableY - If `false`, this rigid-body will no longer translate due to torques and impulses, along the Y coordinate axis.\n     * @param enableZ - If `false`, this rigid-body will no longer translate due to torques and impulses, along the Z coordinate axis.\n     * @param wakeUp - If `true`, this rigid-body will be automatically awaken if it is currently asleep.\n     * @deprecated use `this.setEnabledTranslations` with the same arguments instead.\n     */\n    restrictTranslations(enableX, enableY, enableZ, wakeUp) {\n        this.setEnabledTranslations(enableX, enableY, enableZ, wakeUp);\n    }\n    /**\n     * Locks or unlocks the ability of this rigid-body to rotate along individual coordinate axes.\n     *\n     * @param enableX - If `false`, this rigid-body will no longer rotate due to torques and impulses, along the X coordinate axis.\n     * @param enableY - If `false`, this rigid-body will no longer rotate due to torques and impulses, along the Y coordinate axis.\n     * @param enableZ - If `false`, this rigid-body will no longer rotate due to torques and impulses, along the Z coordinate axis.\n     * @param wakeUp - If `true`, this rigid-body will be automatically awaken if it is currently asleep.\n     */\n    setEnabledRotations(enableX, enableY, enableZ, wakeUp) {\n        return this.rawSet.rbSetEnabledRotations(this.handle, enableX, enableY, enableZ, wakeUp);\n    }\n    /**\n     * Locks or unlocks the ability of this rigid-body to rotate along individual coordinate axes.\n     *\n     * @param enableX - If `false`, this rigid-body will no longer rotate due to torques and impulses, along the X coordinate axis.\n     * @param enableY - If `false`, this rigid-body will no longer rotate due to torques and impulses, along the Y coordinate axis.\n     * @param enableZ - If `false`, this rigid-body will no longer rotate due to torques and impulses, along the Z coordinate axis.\n     * @param wakeUp - If `true`, this rigid-body will be automatically awaken if it is currently asleep.\n     * @deprecated use `this.setEnabledRotations` with the same arguments instead.\n     */\n    restrictRotations(enableX, enableY, enableZ, wakeUp) {\n        this.setEnabledRotations(enableX, enableY, enableZ, wakeUp);\n    }\n    // #endif\n    /**\n     * The dominance group, in [-127, +127] this rigid-body is part of.\n     */\n    dominanceGroup() {\n        return this.rawSet.rbDominanceGroup(this.handle);\n    }\n    /**\n     * Sets the dominance group of this rigid-body.\n     *\n     * @param group - The dominance group of this rigid-body. Must be a signed integer in the range [-127, +127].\n     */\n    setDominanceGroup(group) {\n        this.rawSet.rbSetDominanceGroup(this.handle, group);\n    }\n    /**\n     * The number of additional solver iterations that will be run for this\n     * rigid-body and everything that interacts with it directly or indirectly\n     * through contacts or joints.\n     */\n    additionalSolverIterations() {\n        return this.rawSet.rbAdditionalSolverIterations(this.handle);\n    }\n    /**\n     * Sets the number of additional solver iterations that will be run for this\n     * rigid-body and everything that interacts with it directly or indirectly\n     * through contacts or joints.\n     *\n     * Compared to increasing the global `World.numSolverIteration`, setting this\n     * value lets you increase accuracy on only a subset of the scene, resulting in reduced\n     * performance loss.\n     *\n     * @param iters - The new number of additional solver iterations (default: 0).\n     */\n    setAdditionalSolverIterations(iters) {\n        this.rawSet.rbSetAdditionalSolverIterations(this.handle, iters);\n    }\n    /**\n     * Enable or disable CCD (Continuous Collision Detection) for this rigid-body.\n     *\n     * @param enabled - If `true`, CCD will be enabled for this rigid-body.\n     */\n    enableCcd(enabled) {\n        this.rawSet.rbEnableCcd(this.handle, enabled);\n    }\n    /**\n     * Sets the soft-CCD prediction distance for this rigid-body.\n     *\n     * See the documentation of `RigidBodyDesc.setSoftCcdPrediction` for\n     * additional details.\n     */\n    setSoftCcdPrediction(distance) {\n        this.rawSet.rbSetSoftCcdPrediction(this.handle, distance);\n    }\n    /**\n     * Gets the soft-CCD prediction distance for this rigid-body.\n     *\n     * See the documentation of `RigidBodyDesc.setSoftCcdPrediction` for\n     * additional details.\n     */\n    softCcdPrediction() {\n        return this.rawSet.rbSoftCcdPrediction(this.handle);\n    }\n    /**\n     * The world-space translation of this rigid-body.\n     */\n    translation() {\n        let res = this.rawSet.rbTranslation(this.handle);\n        return VectorOps.fromRaw(res);\n    }\n    /**\n     * The world-space orientation of this rigid-body.\n     */\n    rotation() {\n        let res = this.rawSet.rbRotation(this.handle);\n        return RotationOps.fromRaw(res);\n    }\n    /**\n     * The world-space next translation of this rigid-body.\n     *\n     * If this rigid-body is kinematic this value is set by the `setNextKinematicTranslation`\n     * method and is used for estimating the kinematic body velocity at the next timestep.\n     * For non-kinematic bodies, this value is currently unspecified.\n     */\n    nextTranslation() {\n        let res = this.rawSet.rbNextTranslation(this.handle);\n        return VectorOps.fromRaw(res);\n    }\n    /**\n     * The world-space next orientation of this rigid-body.\n     *\n     * If this rigid-body is kinematic this value is set by the `setNextKinematicRotation`\n     * method and is used for estimating the kinematic body velocity at the next timestep.\n     * For non-kinematic bodies, this value is currently unspecified.\n     */\n    nextRotation() {\n        let res = this.rawSet.rbNextRotation(this.handle);\n        return RotationOps.fromRaw(res);\n    }\n    /**\n     * Sets the translation of this rigid-body.\n     *\n     * @param tra - The world-space position of the rigid-body.\n     * @param wakeUp - Forces the rigid-body to wake-up so it is properly affected by forces if it\n     *                 wasn't moving before modifying its position.\n     */\n    setTranslation(tra, wakeUp) {\n        // #if DIM3\n        this.rawSet.rbSetTranslation(this.handle, tra.x, tra.y, tra.z, wakeUp);\n        // #endif\n    }\n    /**\n     * Sets the linear velocity of this rigid-body.\n     *\n     * @param vel - The linear velocity to set.\n     * @param wakeUp - Forces the rigid-body to wake-up if it was asleep.\n     */\n    setLinvel(vel, wakeUp) {\n        let rawVel = VectorOps.intoRaw(vel);\n        this.rawSet.rbSetLinvel(this.handle, rawVel, wakeUp);\n        rawVel.free();\n    }\n    /**\n     * The scale factor applied to the gravity affecting\n     * this rigid-body.\n     */\n    gravityScale() {\n        return this.rawSet.rbGravityScale(this.handle);\n    }\n    /**\n     * Sets the scale factor applied to the gravity affecting\n     * this rigid-body.\n     *\n     * @param factor - The scale factor to set. A value of 0.0 means\n     *   that this rigid-body will on longer be affected by gravity.\n     * @param wakeUp - Forces the rigid-body to wake-up if it was asleep.\n     */\n    setGravityScale(factor, wakeUp) {\n        this.rawSet.rbSetGravityScale(this.handle, factor, wakeUp);\n    }\n    // #if DIM3\n    /**\n     * Sets the rotation quaternion of this rigid-body.\n     *\n     * This does nothing if a zero quaternion is provided.\n     *\n     * @param rotation - The rotation to set.\n     * @param wakeUp - Forces the rigid-body to wake-up so it is properly affected by forces if it\n     * wasn't moving before modifying its position.\n     */\n    setRotation(rot, wakeUp) {\n        this.rawSet.rbSetRotation(this.handle, rot.x, rot.y, rot.z, rot.w, wakeUp);\n    }\n    /**\n     * Sets the angular velocity fo this rigid-body.\n     *\n     * @param vel - The angular velocity to set.\n     * @param wakeUp - Forces the rigid-body to wake-up if it was asleep.\n     */\n    setAngvel(vel, wakeUp) {\n        let rawVel = VectorOps.intoRaw(vel);\n        this.rawSet.rbSetAngvel(this.handle, rawVel, wakeUp);\n        rawVel.free();\n    }\n    // #endif\n    /**\n     * If this rigid body is kinematic, sets its future translation after the next timestep integration.\n     *\n     * This should be used instead of `rigidBody.setTranslation` to make the dynamic object\n     * interacting with this kinematic body behave as expected. Internally, Rapier will compute\n     * an artificial velocity for this rigid-body from its current position and its next kinematic\n     * position. This velocity will be used to compute forces on dynamic bodies interacting with\n     * this body.\n     *\n     * @param t - The kinematic translation to set.\n     */\n    setNextKinematicTranslation(t) {\n        // #if DIM3\n        this.rawSet.rbSetNextKinematicTranslation(this.handle, t.x, t.y, t.z);\n        // #endif\n    }\n    // #if DIM3\n    /**\n     * If this rigid body is kinematic, sets its future rotation after the next timestep integration.\n     *\n     * This should be used instead of `rigidBody.setRotation` to make the dynamic object\n     * interacting with this kinematic body behave as expected. Internally, Rapier will compute\n     * an artificial velocity for this rigid-body from its current position and its next kinematic\n     * position. This velocity will be used to compute forces on dynamic bodies interacting with\n     * this body.\n     *\n     * @param rot - The kinematic rotation to set.\n     */\n    setNextKinematicRotation(rot) {\n        this.rawSet.rbSetNextKinematicRotation(this.handle, rot.x, rot.y, rot.z, rot.w);\n    }\n    // #endif\n    /**\n     * The linear velocity of this rigid-body.\n     */\n    linvel() {\n        return VectorOps.fromRaw(this.rawSet.rbLinvel(this.handle));\n    }\n    // #if DIM3\n    /**\n     * The angular velocity of this rigid-body.\n     */\n    angvel() {\n        return VectorOps.fromRaw(this.rawSet.rbAngvel(this.handle));\n    }\n    // #endif\n    /**\n     * The mass of this rigid-body.\n     */\n    mass() {\n        return this.rawSet.rbMass(this.handle);\n    }\n    /**\n     * The inverse mass taking into account translation locking.\n     */\n    effectiveInvMass() {\n        return VectorOps.fromRaw(this.rawSet.rbEffectiveInvMass(this.handle));\n    }\n    /**\n     * The inverse of the mass of a rigid-body.\n     *\n     * If this is zero, the rigid-body is assumed to have infinite mass.\n     */\n    invMass() {\n        return this.rawSet.rbInvMass(this.handle);\n    }\n    /**\n     * The center of mass of a rigid-body expressed in its local-space.\n     */\n    localCom() {\n        return VectorOps.fromRaw(this.rawSet.rbLocalCom(this.handle));\n    }\n    /**\n     * The world-space center of mass of the rigid-body.\n     */\n    worldCom() {\n        return VectorOps.fromRaw(this.rawSet.rbWorldCom(this.handle));\n    }\n    // #if DIM3\n    /**\n     * The inverse of the principal angular inertia of the rigid-body.\n     *\n     * Components set to zero are assumed to be infinite along the corresponding principal axis.\n     */\n    invPrincipalInertiaSqrt() {\n        return VectorOps.fromRaw(this.rawSet.rbInvPrincipalInertiaSqrt(this.handle));\n    }\n    // #endif\n    // #if DIM3\n    /**\n     * The angular inertia along the principal inertia axes of the rigid-body.\n     */\n    principalInertia() {\n        return VectorOps.fromRaw(this.rawSet.rbPrincipalInertia(this.handle));\n    }\n    // #endif\n    // #if DIM3\n    /**\n     * The principal vectors of the local angular inertia tensor of the rigid-body.\n     */\n    principalInertiaLocalFrame() {\n        return RotationOps.fromRaw(this.rawSet.rbPrincipalInertiaLocalFrame(this.handle));\n    }\n    // #endif\n    // #if DIM3\n    /**\n     * The square-root of the world-space inverse angular inertia tensor of the rigid-body,\n     * taking into account rotation locking.\n     */\n    effectiveWorldInvInertiaSqrt() {\n        return SdpMatrix3Ops.fromRaw(this.rawSet.rbEffectiveWorldInvInertiaSqrt(this.handle));\n    }\n    // #endif\n    // #if DIM3\n    /**\n     * The effective world-space angular inertia (that takes the potential rotation locking into account) of\n     * this rigid-body.\n     */\n    effectiveAngularInertia() {\n        return SdpMatrix3Ops.fromRaw(this.rawSet.rbEffectiveAngularInertia(this.handle));\n    }\n    // #endif\n    /**\n     * Put this rigid body to sleep.\n     *\n     * A sleeping body no longer moves and is no longer simulated by the physics engine unless\n     * it is waken up. It can be woken manually with `this.wakeUp()` or automatically due to\n     * external forces like contacts.\n     */\n    sleep() {\n        this.rawSet.rbSleep(this.handle);\n    }\n    /**\n     * Wakes this rigid-body up.\n     *\n     * A dynamic rigid-body that does not move during several consecutive frames will\n     * be put to sleep by the physics engine, i.e., it will stop being simulated in order\n     * to avoid useless computations.\n     * This methods forces a sleeping rigid-body to wake-up. This is useful, e.g., before modifying\n     * the position of a dynamic body so that it is properly simulated afterwards.\n     */\n    wakeUp() {\n        this.rawSet.rbWakeUp(this.handle);\n    }\n    /**\n     * Is CCD enabled for this rigid-body?\n     */\n    isCcdEnabled() {\n        return this.rawSet.rbIsCcdEnabled(this.handle);\n    }\n    /**\n     * The number of colliders attached to this rigid-body.\n     */\n    numColliders() {\n        return this.rawSet.rbNumColliders(this.handle);\n    }\n    /**\n     * Retrieves the `i-th` collider attached to this rigid-body.\n     *\n     * @param i - The index of the collider to retrieve. Must be a number in `[0, this.numColliders()[`.\n     *         This index is **not** the same as the unique identifier of the collider.\n     */\n    collider(i) {\n        return this.colliderSet.get(this.rawSet.rbCollider(this.handle, i));\n    }\n    /**\n     * Sets whether this rigid-body is enabled or not.\n     *\n     * @param enabled - Set to `false` to disable this rigid-body and all its attached colliders.\n     */\n    setEnabled(enabled) {\n        this.rawSet.rbSetEnabled(this.handle, enabled);\n    }\n    /**\n     * Is this rigid-body enabled?\n     */\n    isEnabled() {\n        return this.rawSet.rbIsEnabled(this.handle);\n    }\n    /**\n     * The status of this rigid-body: static, dynamic, or kinematic.\n     */\n    bodyType() {\n        return this.rawSet.rbBodyType(this.handle);\n    }\n    /**\n     * Set a new status for this rigid-body: static, dynamic, or kinematic.\n     */\n    setBodyType(type, wakeUp) {\n        return this.rawSet.rbSetBodyType(this.handle, type, wakeUp);\n    }\n    /**\n     * Is this rigid-body sleeping?\n     */\n    isSleeping() {\n        return this.rawSet.rbIsSleeping(this.handle);\n    }\n    /**\n     * Is the velocity of this rigid-body not zero?\n     */\n    isMoving() {\n        return this.rawSet.rbIsMoving(this.handle);\n    }\n    /**\n     * Is this rigid-body static?\n     */\n    isFixed() {\n        return this.rawSet.rbIsFixed(this.handle);\n    }\n    /**\n     * Is this rigid-body kinematic?\n     */\n    isKinematic() {\n        return this.rawSet.rbIsKinematic(this.handle);\n    }\n    /**\n     * Is this rigid-body dynamic?\n     */\n    isDynamic() {\n        return this.rawSet.rbIsDynamic(this.handle);\n    }\n    /**\n     * The linear damping coefficient of this rigid-body.\n     */\n    linearDamping() {\n        return this.rawSet.rbLinearDamping(this.handle);\n    }\n    /**\n     * The angular damping coefficient of this rigid-body.\n     */\n    angularDamping() {\n        return this.rawSet.rbAngularDamping(this.handle);\n    }\n    /**\n     * Sets the linear damping factor applied to this rigid-body.\n     *\n     * @param factor - The damping factor to set.\n     */\n    setLinearDamping(factor) {\n        this.rawSet.rbSetLinearDamping(this.handle, factor);\n    }\n    /**\n     * Recompute the mass-properties of this rigid-bodies based on its currently attached colliders.\n     */\n    recomputeMassPropertiesFromColliders() {\n        this.rawSet.rbRecomputeMassPropertiesFromColliders(this.handle, this.colliderSet.raw);\n    }\n    /**\n     * Sets the rigid-body's additional mass.\n     *\n     * The total angular inertia of the rigid-body will be scaled automatically based on this additional mass. If this\n     * scaling effect isn’t desired, use Self::additional_mass_properties instead of this method.\n     *\n     * This is only the \"additional\" mass because the total mass of the rigid-body is equal to the sum of this\n     * additional mass and the mass computed from the colliders (with non-zero densities) attached to this rigid-body.\n     *\n     * That total mass (which includes the attached colliders’ contributions) will be updated at the name physics step,\n     * or can be updated manually with `this.recomputeMassPropertiesFromColliders`.\n     *\n     * This will override any previous additional mass-properties set by `this.setAdditionalMass`,\n     * `this.setAdditionalMassProperties`, `RigidBodyDesc::setAdditionalMass`, or\n     * `RigidBodyDesc.setAdditionalMassfProperties` for this rigid-body.\n     *\n     * @param mass - The additional mass to set.\n     * @param wakeUp - If `true` then the rigid-body will be woken up if it was put to sleep because it did not move for a while.\n     */\n    setAdditionalMass(mass, wakeUp) {\n        this.rawSet.rbSetAdditionalMass(this.handle, mass, wakeUp);\n    }\n    // #if DIM3\n    /**\n     * Sets the rigid-body's additional mass-properties.\n     *\n     * This is only the \"additional\" mass-properties because the total mass-properties of the rigid-body is equal to the\n     * sum of this additional mass-properties and the mass computed from the colliders (with non-zero densities) attached\n     * to this rigid-body.\n     *\n     * That total mass-properties (which include the attached colliders’ contributions) will be updated at the name\n     * physics step, or can be updated manually with `this.recomputeMassPropertiesFromColliders`.\n     *\n     * This will override any previous mass-properties set by `this.setAdditionalMass`,\n     * `this.setAdditionalMassProperties`, `RigidBodyDesc.setAdditionalMass`, or `RigidBodyDesc.setAdditionalMassProperties`\n     * for this rigid-body.\n     *\n     * If `wake_up` is true then the rigid-body will be woken up if it was put to sleep because it did not move for a while.\n     */\n    setAdditionalMassProperties(mass, centerOfMass, principalAngularInertia, angularInertiaLocalFrame, wakeUp) {\n        let rawCom = VectorOps.intoRaw(centerOfMass);\n        let rawPrincipalInertia = VectorOps.intoRaw(principalAngularInertia);\n        let rawInertiaFrame = RotationOps.intoRaw(angularInertiaLocalFrame);\n        this.rawSet.rbSetAdditionalMassProperties(this.handle, mass, rawCom, rawPrincipalInertia, rawInertiaFrame, wakeUp);\n        rawCom.free();\n        rawPrincipalInertia.free();\n        rawInertiaFrame.free();\n    }\n    // #endif\n    /**\n     * Sets the linear damping factor applied to this rigid-body.\n     *\n     * @param factor - The damping factor to set.\n     */\n    setAngularDamping(factor) {\n        this.rawSet.rbSetAngularDamping(this.handle, factor);\n    }\n    /**\n     * Resets to zero the user forces (but not torques) applied to this rigid-body.\n     *\n     * @param wakeUp - should the rigid-body be automatically woken-up?\n     */\n    resetForces(wakeUp) {\n        this.rawSet.rbResetForces(this.handle, wakeUp);\n    }\n    /**\n     * Resets to zero the user torques applied to this rigid-body.\n     *\n     * @param wakeUp - should the rigid-body be automatically woken-up?\n     */\n    resetTorques(wakeUp) {\n        this.rawSet.rbResetTorques(this.handle, wakeUp);\n    }\n    /**\n     * Adds a force at the center-of-mass of this rigid-body.\n     *\n     * @param force - the world-space force to add to the rigid-body.\n     * @param wakeUp - should the rigid-body be automatically woken-up?\n     */\n    addForce(force, wakeUp) {\n        const rawForce = VectorOps.intoRaw(force);\n        this.rawSet.rbAddForce(this.handle, rawForce, wakeUp);\n        rawForce.free();\n    }\n    /**\n     * Applies an impulse at the center-of-mass of this rigid-body.\n     *\n     * @param impulse - the world-space impulse to apply on the rigid-body.\n     * @param wakeUp - should the rigid-body be automatically woken-up?\n     */\n    applyImpulse(impulse, wakeUp) {\n        const rawImpulse = VectorOps.intoRaw(impulse);\n        this.rawSet.rbApplyImpulse(this.handle, rawImpulse, wakeUp);\n        rawImpulse.free();\n    }\n    // #if DIM3\n    /**\n     * Adds a torque at the center-of-mass of this rigid-body.\n     *\n     * @param torque - the world-space torque to add to the rigid-body.\n     * @param wakeUp - should the rigid-body be automatically woken-up?\n     */\n    addTorque(torque, wakeUp) {\n        const rawTorque = VectorOps.intoRaw(torque);\n        this.rawSet.rbAddTorque(this.handle, rawTorque, wakeUp);\n        rawTorque.free();\n    }\n    // #endif\n    // #if DIM3\n    /**\n     * Applies an impulsive torque at the center-of-mass of this rigid-body.\n     *\n     * @param torqueImpulse - the world-space torque impulse to apply on the rigid-body.\n     * @param wakeUp - should the rigid-body be automatically woken-up?\n     */\n    applyTorqueImpulse(torqueImpulse, wakeUp) {\n        const rawTorqueImpulse = VectorOps.intoRaw(torqueImpulse);\n        this.rawSet.rbApplyTorqueImpulse(this.handle, rawTorqueImpulse, wakeUp);\n        rawTorqueImpulse.free();\n    }\n    // #endif\n    /**\n     * Adds a force at the given world-space point of this rigid-body.\n     *\n     * @param force - the world-space force to add to the rigid-body.\n     * @param point - the world-space point where the impulse is to be applied on the rigid-body.\n     * @param wakeUp - should the rigid-body be automatically woken-up?\n     */\n    addForceAtPoint(force, point, wakeUp) {\n        const rawForce = VectorOps.intoRaw(force);\n        const rawPoint = VectorOps.intoRaw(point);\n        this.rawSet.rbAddForceAtPoint(this.handle, rawForce, rawPoint, wakeUp);\n        rawForce.free();\n        rawPoint.free();\n    }\n    /**\n     * Applies an impulse at the given world-space point of this rigid-body.\n     *\n     * @param impulse - the world-space impulse to apply on the rigid-body.\n     * @param point - the world-space point where the impulse is to be applied on the rigid-body.\n     * @param wakeUp - should the rigid-body be automatically woken-up?\n     */\n    applyImpulseAtPoint(impulse, point, wakeUp) {\n        const rawImpulse = VectorOps.intoRaw(impulse);\n        const rawPoint = VectorOps.intoRaw(point);\n        this.rawSet.rbApplyImpulseAtPoint(this.handle, rawImpulse, rawPoint, wakeUp);\n        rawImpulse.free();\n        rawPoint.free();\n    }\n    /**\n     * Retrieves the constant force(s) the user added to this rigid-body\n     * Returns zero if the rigid-body is not dynamic.\n     */\n    userForce() {\n        return VectorOps.fromRaw(this.rawSet.rbUserForce(this.handle));\n    }\n    // #if DIM3\n    /**\n     * Retrieves the constant torque(s) the user added to this rigid-body\n     * Returns zero if the rigid-body is not dynamic.\n     */\n    userTorque() {\n        return VectorOps.fromRaw(this.rawSet.rbUserTorque(this.handle));\n    }\n}\nexport class RigidBodyDesc {\n    constructor(status) {\n        this.enabled = true;\n        this.status = status;\n        this.translation = VectorOps.zeros();\n        this.rotation = RotationOps.identity();\n        this.gravityScale = 1.0;\n        this.linvel = VectorOps.zeros();\n        this.mass = 0.0;\n        this.massOnly = false;\n        this.centerOfMass = VectorOps.zeros();\n        this.translationsEnabledX = true;\n        this.translationsEnabledY = true;\n        // #if DIM3\n        this.angvel = VectorOps.zeros();\n        this.principalAngularInertia = VectorOps.zeros();\n        this.angularInertiaLocalFrame = RotationOps.identity();\n        this.translationsEnabledZ = true;\n        this.rotationsEnabledX = true;\n        this.rotationsEnabledY = true;\n        this.rotationsEnabledZ = true;\n        // #endif\n        this.linearDamping = 0.0;\n        this.angularDamping = 0.0;\n        this.canSleep = true;\n        this.sleeping = false;\n        this.ccdEnabled = false;\n        this.softCcdPrediction = 0.0;\n        this.dominanceGroup = 0;\n        this.additionalSolverIterations = 0;\n    }\n    /**\n     * A rigid-body descriptor used to build a dynamic rigid-body.\n     */\n    static dynamic() {\n        return new RigidBodyDesc(RigidBodyType.Dynamic);\n    }\n    /**\n     * A rigid-body descriptor used to build a position-based kinematic rigid-body.\n     */\n    static kinematicPositionBased() {\n        return new RigidBodyDesc(RigidBodyType.KinematicPositionBased);\n    }\n    /**\n     * A rigid-body descriptor used to build a velocity-based kinematic rigid-body.\n     */\n    static kinematicVelocityBased() {\n        return new RigidBodyDesc(RigidBodyType.KinematicVelocityBased);\n    }\n    /**\n     * A rigid-body descriptor used to build a fixed rigid-body.\n     */\n    static fixed() {\n        return new RigidBodyDesc(RigidBodyType.Fixed);\n    }\n    /**\n     * A rigid-body descriptor used to build a dynamic rigid-body.\n     *\n     * @deprecated The method has been renamed to `.dynamic()`.\n     */\n    static newDynamic() {\n        return new RigidBodyDesc(RigidBodyType.Dynamic);\n    }\n    /**\n     * A rigid-body descriptor used to build a position-based kinematic rigid-body.\n     *\n     * @deprecated The method has been renamed to `.kinematicPositionBased()`.\n     */\n    static newKinematicPositionBased() {\n        return new RigidBodyDesc(RigidBodyType.KinematicPositionBased);\n    }\n    /**\n     * A rigid-body descriptor used to build a velocity-based kinematic rigid-body.\n     *\n     * @deprecated The method has been renamed to `.kinematicVelocityBased()`.\n     */\n    static newKinematicVelocityBased() {\n        return new RigidBodyDesc(RigidBodyType.KinematicVelocityBased);\n    }\n    /**\n     * A rigid-body descriptor used to build a fixed rigid-body.\n     *\n     * @deprecated The method has been renamed to `.fixed()`.\n     */\n    static newStatic() {\n        return new RigidBodyDesc(RigidBodyType.Fixed);\n    }\n    setDominanceGroup(group) {\n        this.dominanceGroup = group;\n        return this;\n    }\n    /**\n     * Sets the number of additional solver iterations that will be run for this\n     * rigid-body and everything that interacts with it directly or indirectly\n     * through contacts or joints.\n     *\n     * Compared to increasing the global `World.numSolverIteration`, setting this\n     * value lets you increase accuracy on only a subset of the scene, resulting in reduced\n     * performance loss.\n     *\n     * @param iters - The new number of additional solver iterations (default: 0).\n     */\n    setAdditionalSolverIterations(iters) {\n        this.additionalSolverIterations = iters;\n        return this;\n    }\n    /**\n     * Sets whether the created rigid-body will be enabled or disabled.\n     * @param enabled − If set to `false` the rigid-body will be disabled at creation.\n     */\n    setEnabled(enabled) {\n        this.enabled = enabled;\n        return this;\n    }\n    // #if DIM3\n    /**\n     * Sets the initial translation of the rigid-body to create.\n     *\n     * @param tra - The translation to set.\n     */\n    setTranslation(x, y, z) {\n        if (typeof x != \"number\" ||\n            typeof y != \"number\" ||\n            typeof z != \"number\")\n            throw TypeError(\"The translation components must be numbers.\");\n        this.translation = { x: x, y: y, z: z };\n        return this;\n    }\n    // #endif\n    /**\n     * Sets the initial rotation of the rigid-body to create.\n     *\n     * @param rot - The rotation to set.\n     */\n    setRotation(rot) {\n        // #if DIM3\n        RotationOps.copy(this.rotation, rot);\n        // #endif\n        return this;\n    }\n    /**\n     * Sets the scale factor applied to the gravity affecting\n     * the rigid-body being built.\n     *\n     * @param scale - The scale factor. Set this to `0.0` if the rigid-body\n     *   needs to ignore gravity.\n     */\n    setGravityScale(scale) {\n        this.gravityScale = scale;\n        return this;\n    }\n    /**\n     * Sets the initial mass of the rigid-body being built, before adding colliders' contributions.\n     *\n     * @param mass − The initial mass of the rigid-body to create.\n     */\n    setAdditionalMass(mass) {\n        this.mass = mass;\n        this.massOnly = true;\n        return this;\n    }\n    // #if DIM3\n    /**\n     * Sets the initial linear velocity of the rigid-body to create.\n     *\n     * @param x - The linear velocity to set along the `x` axis.\n     * @param y - The linear velocity to set along the `y` axis.\n     * @param z - The linear velocity to set along the `z` axis.\n     */\n    setLinvel(x, y, z) {\n        if (typeof x != \"number\" ||\n            typeof y != \"number\" ||\n            typeof z != \"number\")\n            throw TypeError(\"The linvel components must be numbers.\");\n        this.linvel = { x: x, y: y, z: z };\n        return this;\n    }\n    /**\n     * Sets the initial angular velocity of the rigid-body to create.\n     *\n     * @param vel - The angular velocity to set.\n     */\n    setAngvel(vel) {\n        VectorOps.copy(this.angvel, vel);\n        return this;\n    }\n    /**\n     * Sets the mass properties of the rigid-body being built.\n     *\n     * Note that the final mass properties of the rigid-bodies depends\n     * on the initial mass-properties of the rigid-body (set by this method)\n     * to which is added the contributions of all the colliders with non-zero density\n     * attached to this rigid-body.\n     *\n     * Therefore, if you want your provided mass properties to be the final\n     * mass properties of your rigid-body, don't attach colliders to it, or\n     * only attach colliders with densities equal to zero.\n     *\n     * @param mass − The initial mass of the rigid-body to create.\n     * @param centerOfMass − The initial center-of-mass of the rigid-body to create.\n     * @param principalAngularInertia − The initial principal angular inertia of the rigid-body to create.\n     *                                  These are the eigenvalues of the angular inertia matrix.\n     * @param angularInertiaLocalFrame − The initial local angular inertia frame of the rigid-body to create.\n     *                                   These are the eigenvectors of the angular inertia matrix.\n     */\n    setAdditionalMassProperties(mass, centerOfMass, principalAngularInertia, angularInertiaLocalFrame) {\n        this.mass = mass;\n        VectorOps.copy(this.centerOfMass, centerOfMass);\n        VectorOps.copy(this.principalAngularInertia, principalAngularInertia);\n        RotationOps.copy(this.angularInertiaLocalFrame, angularInertiaLocalFrame);\n        this.massOnly = false;\n        return this;\n    }\n    /**\n     * Allow translation of this rigid-body only along specific axes.\n     * @param translationsEnabledX - Are translations along the X axis enabled?\n     * @param translationsEnabledY - Are translations along the y axis enabled?\n     * @param translationsEnabledZ - Are translations along the Z axis enabled?\n     */\n    enabledTranslations(translationsEnabledX, translationsEnabledY, translationsEnabledZ) {\n        this.translationsEnabledX = translationsEnabledX;\n        this.translationsEnabledY = translationsEnabledY;\n        this.translationsEnabledZ = translationsEnabledZ;\n        return this;\n    }\n    /**\n     * Allow translation of this rigid-body only along specific axes.\n     * @param translationsEnabledX - Are translations along the X axis enabled?\n     * @param translationsEnabledY - Are translations along the y axis enabled?\n     * @param translationsEnabledZ - Are translations along the Z axis enabled?\n     * @deprecated use `this.enabledTranslations` with the same arguments instead.\n     */\n    restrictTranslations(translationsEnabledX, translationsEnabledY, translationsEnabledZ) {\n        return this.enabledTranslations(translationsEnabledX, translationsEnabledY, translationsEnabledZ);\n    }\n    /**\n     * Locks all translations that would have resulted from forces on\n     * the created rigid-body.\n     */\n    lockTranslations() {\n        return this.enabledTranslations(false, false, false);\n    }\n    /**\n     * Allow rotation of this rigid-body only along specific axes.\n     * @param rotationsEnabledX - Are rotations along the X axis enabled?\n     * @param rotationsEnabledY - Are rotations along the y axis enabled?\n     * @param rotationsEnabledZ - Are rotations along the Z axis enabled?\n     */\n    enabledRotations(rotationsEnabledX, rotationsEnabledY, rotationsEnabledZ) {\n        this.rotationsEnabledX = rotationsEnabledX;\n        this.rotationsEnabledY = rotationsEnabledY;\n        this.rotationsEnabledZ = rotationsEnabledZ;\n        return this;\n    }\n    /**\n     * Allow rotation of this rigid-body only along specific axes.\n     * @param rotationsEnabledX - Are rotations along the X axis enabled?\n     * @param rotationsEnabledY - Are rotations along the y axis enabled?\n     * @param rotationsEnabledZ - Are rotations along the Z axis enabled?\n     * @deprecated use `this.enabledRotations` with the same arguments instead.\n     */\n    restrictRotations(rotationsEnabledX, rotationsEnabledY, rotationsEnabledZ) {\n        return this.enabledRotations(rotationsEnabledX, rotationsEnabledY, rotationsEnabledZ);\n    }\n    /**\n     * Locks all rotations that would have resulted from forces on\n     * the created rigid-body.\n     */\n    lockRotations() {\n        return this.restrictRotations(false, false, false);\n    }\n    // #endif\n    /**\n     * Sets the linear damping of the rigid-body to create.\n     *\n     * This will progressively slowdown the translational movement of the rigid-body.\n     *\n     * @param damping - The angular damping coefficient. Should be >= 0. The higher this\n     *                  value is, the stronger the translational slowdown will be.\n     */\n    setLinearDamping(damping) {\n        this.linearDamping = damping;\n        return this;\n    }\n    /**\n     * Sets the angular damping of the rigid-body to create.\n     *\n     * This will progressively slowdown the rotational movement of the rigid-body.\n     *\n     * @param damping - The angular damping coefficient. Should be >= 0. The higher this\n     *                  value is, the stronger the rotational slowdown will be.\n     */\n    setAngularDamping(damping) {\n        this.angularDamping = damping;\n        return this;\n    }\n    /**\n     * Sets whether or not the rigid-body to create can sleep.\n     *\n     * @param can - true if the rigid-body can sleep, false if it can't.\n     */\n    setCanSleep(can) {\n        this.canSleep = can;\n        return this;\n    }\n    /**\n     * Sets whether or not the rigid-body is to be created asleep.\n     *\n     * @param can - true if the rigid-body should be in sleep, default false.\n     */\n    setSleeping(sleeping) {\n        this.sleeping = sleeping;\n        return this;\n    }\n    /**\n     * Sets whether Continuous Collision Detection (CCD) is enabled for this rigid-body.\n     *\n     * @param enabled - true if the rigid-body has CCD enabled.\n     */\n    setCcdEnabled(enabled) {\n        this.ccdEnabled = enabled;\n        return this;\n    }\n    /**\n     * Sets the maximum prediction distance Soft Continuous Collision-Detection.\n     *\n     * When set to 0, soft-CCD is disabled. Soft-CCD helps prevent tunneling especially of\n     * slow-but-thin to moderately fast objects. The soft CCD prediction distance indicates how\n     * far in the object’s path the CCD algorithm is allowed to inspect. Large values can impact\n     * performance badly by increasing the work needed from the broad-phase.\n     *\n     * It is a generally cheaper variant of regular CCD (that can be enabled with\n     * `RigidBodyDesc::setCcdEnabled` since it relies on predictive constraints instead of\n     * shape-cast and substeps.\n     */\n    setSoftCcdPrediction(distance) {\n        this.softCcdPrediction = distance;\n        return this;\n    }\n    /**\n     * Sets the user-defined object of this rigid-body.\n     *\n     * @param userData - The user-defined object to set.\n     */\n    setUserData(data) {\n        this.userData = data;\n        return this;\n    }\n}\n//# sourceMappingURL=rigid_body.js.map","// client/src/core/GameState.js\n\nimport { log } from './gameCore.js';\n\n/**\n * Класс для управления состоянием игры\n */\nexport class GameState {\n    /**\n     * @param {Object} game - ссылка на основной класс игры\n     */\n    constructor(game) {\n        this.game = game;\n        \n        // Флаги состояния\n        this.isRunning = false;\n        this.isLoading = true;\n        this.isPaused = false;\n        \n        // Текущая сцена (loading, menu, game, pause)\n        this.currentScene = 'loading';\n        \n        // Настройки видимости\n        this.fogOfWarEnabled = true;\n        this.visibilitySystemEnabled = true;\n    }\n    \n    /**\n     * Переключение состояния паузы\n     */\n    togglePause() {\n        if (this.isRunning) {\n            this.pauseGame();\n        } else {\n            this.resumeGame();\n        }\n    }\n    \n    /**\n     * Остановить игру (пауза)\n     */\n    pauseGame() {\n        this.isRunning = false;\n        this.isPaused = true;\n        \n        if (this.game.input) {\n            this.game.input.disableGameControls();\n        }\n        \n        // Здесь можно добавить отображение меню паузы\n        log('Игра на паузе');\n    }\n    \n    /**\n     * Возобновить игру\n     */\n    resumeGame() {\n        this.isRunning = true;\n        this.isPaused = false;\n        \n        if (this.game.input) {\n            this.game.input.enableGameControls();\n        }\n        \n        // Скрываем меню паузы\n        log('Игра возобновлена');\n        \n        // Перезапускаем игровой цикл\n        this.game.lastFrameTime = performance.now();\n        requestAnimationFrame(this.game.update);\n    }\n    \n    /**\n     * Завершение игры\n     */\n    endGame() {\n        this.isRunning = false;\n        this.currentScene = 'menu';\n        \n        // Очистка игрового мира\n        if (this.game.world) {\n            this.game.world.clear();\n        }\n        \n        // Очищаем физику\n        if (this.game.physics) {\n            this.game.physics.dispose();\n        }\n        \n        // Отображение главного меню\n        if (this.game.ui) {\n            if (this.game.ui.gameCanvas) {\n                this.game.ui.gameCanvas.classList.add('hidden');\n            }\n            if (this.game.ui.hudElement) {\n                this.game.ui.hudElement.classList.add('hidden');\n            }\n            if (this.game.ui.mainMenu) {\n                this.game.ui.mainMenu.classList.remove('hidden');\n            }\n        }\n        \n        log('Игра завершена');\n    }\n    \n    /**\n     * Проверка, находится ли игра в указанной сцене\n     * @param {string} scene - имя сцены для проверки\n     * @returns {boolean} результат проверки\n     */\n    isInScene(scene) {\n        return this.currentScene === scene;\n    }\n}","import { RawMultibodyJointSet } from \"../raw\";\nimport { Coarena } from \"../coarena\";\nimport { MultibodyJoint,\n// #endif\n } from \"./multibody_joint\";\n/**\n * A set of joints.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `jointSet.free()`\n * once you are done using it (and all the joints it created).\n */\nexport class MultibodyJointSet {\n    /**\n     * Release the WASM memory occupied by this joint set.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n        if (!!this.map) {\n            this.map.clear();\n        }\n        this.map = undefined;\n    }\n    constructor(raw) {\n        this.raw = raw || new RawMultibodyJointSet();\n        this.map = new Coarena();\n        // Initialize the map with the existing elements, if any.\n        if (raw) {\n            raw.forEachJointHandle((handle) => {\n                this.map.set(handle, MultibodyJoint.newTyped(this.raw, handle));\n            });\n        }\n    }\n    /**\n     * Creates a new joint and return its integer handle.\n     *\n     * @param desc - The joint's parameters.\n     * @param parent1 - The handle of the first rigid-body this joint is attached to.\n     * @param parent2 - The handle of the second rigid-body this joint is attached to.\n     * @param wakeUp - Should the attached rigid-bodies be awakened?\n     */\n    createJoint(desc, parent1, parent2, wakeUp) {\n        const rawParams = desc.intoRaw();\n        const handle = this.raw.createJoint(rawParams, parent1, parent2, wakeUp);\n        rawParams.free();\n        let joint = MultibodyJoint.newTyped(this.raw, handle);\n        this.map.set(handle, joint);\n        return joint;\n    }\n    /**\n     * Remove a joint from this set.\n     *\n     * @param handle - The integer handle of the joint.\n     * @param wake_up - If `true`, the rigid-bodies attached by the removed joint will be woken-up automatically.\n     */\n    remove(handle, wake_up) {\n        this.raw.remove(handle, wake_up);\n        this.map.delete(handle);\n    }\n    /**\n     * Internal function, do not call directly.\n     * @param handle\n     */\n    unmap(handle) {\n        this.map.delete(handle);\n    }\n    /**\n     * The number of joints on this set.\n     */\n    len() {\n        return this.map.len();\n    }\n    /**\n     * Does this set contain a joint with the given handle?\n     *\n     * @param handle - The joint handle to check.\n     */\n    contains(handle) {\n        return this.get(handle) != null;\n    }\n    /**\n     * Gets the joint with the given handle.\n     *\n     * Returns `null` if no joint with the specified handle exists.\n     *\n     * @param handle - The integer handle of the joint to retrieve.\n     */\n    get(handle) {\n        return this.map.get(handle);\n    }\n    /**\n     * Applies the given closure to each joint contained by this set.\n     *\n     * @param f - The closure to apply.\n     */\n    forEach(f) {\n        this.map.forEach(f);\n    }\n    /**\n     * Calls the given closure with the integer handle of each multibody joint attached to this rigid-body.\n     *\n     * @param f - The closure called with the integer handle of each multibody joint attached to the rigid-body.\n     */\n    forEachJointHandleAttachedToRigidBody(handle, f) {\n        this.raw.forEachJointAttachedToRigidBody(handle, f);\n    }\n    /**\n     * Gets all joints in the list.\n     *\n     * @returns joint list.\n     */\n    getAll() {\n        return this.map.getAll();\n    }\n}\n//# sourceMappingURL=multibody_joint_set.js.map","import * as RAPIER from \"./exports\";\nexport * from \"./exports\";\nexport default RAPIER;\n//# sourceMappingURL=rapier.js.map","import { RotationOps, VectorOps } from \"../math\";\nimport { CoefficientCombineRule, } from \"../dynamics\";\nimport { ActiveHooks, ActiveEvents } from \"../pipeline\";\nimport { Shape, Cuboid, Ball, Capsule, TriMesh, Polyline, Heightfield, Segment, Triangle, RoundTriangle, RoundCuboid, \n// #if DIM3\nCylinder, RoundCylinder, Cone, RoundCone, ConvexPolyhedron, RoundConvexPolyhedron,\n// #endif\n } from \"./shape\";\nimport { RayIntersection } from \"./ray\";\nimport { PointProjection } from \"./point\";\nimport { ColliderShapeCastHit, ShapeCastHit } from \"./toi\";\nimport { ShapeContact } from \"./contact\";\n/**\n * Flags affecting whether collision-detection happens between two colliders\n * depending on the type of rigid-bodies they are attached to.\n */\nexport var ActiveCollisionTypes;\n(function (ActiveCollisionTypes) {\n    /**\n     * Enable collision-detection between a collider attached to a dynamic body\n     * and another collider attached to a dynamic body.\n     */\n    ActiveCollisionTypes[ActiveCollisionTypes[\"DYNAMIC_DYNAMIC\"] = 1] = \"DYNAMIC_DYNAMIC\";\n    /**\n     * Enable collision-detection between a collider attached to a dynamic body\n     * and another collider attached to a kinematic body.\n     */\n    ActiveCollisionTypes[ActiveCollisionTypes[\"DYNAMIC_KINEMATIC\"] = 12] = \"DYNAMIC_KINEMATIC\";\n    /**\n     * Enable collision-detection between a collider attached to a dynamic body\n     * and another collider attached to a fixed body (or not attached to any body).\n     */\n    ActiveCollisionTypes[ActiveCollisionTypes[\"DYNAMIC_FIXED\"] = 2] = \"DYNAMIC_FIXED\";\n    /**\n     * Enable collision-detection between a collider attached to a kinematic body\n     * and another collider attached to a kinematic body.\n     */\n    ActiveCollisionTypes[ActiveCollisionTypes[\"KINEMATIC_KINEMATIC\"] = 52224] = \"KINEMATIC_KINEMATIC\";\n    /**\n     * Enable collision-detection between a collider attached to a kinematic body\n     * and another collider attached to a fixed body (or not attached to any body).\n     */\n    ActiveCollisionTypes[ActiveCollisionTypes[\"KINEMATIC_FIXED\"] = 8704] = \"KINEMATIC_FIXED\";\n    /**\n     * Enable collision-detection between a collider attached to a fixed body (or\n     * not attached to any body) and another collider attached to a fixed body (or\n     * not attached to any body).\n     */\n    ActiveCollisionTypes[ActiveCollisionTypes[\"FIXED_FIXED\"] = 32] = \"FIXED_FIXED\";\n    /**\n     * The default active collision types, enabling collisions between a dynamic body\n     * and another body of any type, but not enabling collisions between two non-dynamic bodies.\n     */\n    ActiveCollisionTypes[ActiveCollisionTypes[\"DEFAULT\"] = 15] = \"DEFAULT\";\n    /**\n     * Enable collisions between any kind of rigid-bodies (including between two non-dynamic bodies).\n     */\n    ActiveCollisionTypes[ActiveCollisionTypes[\"ALL\"] = 60943] = \"ALL\";\n})(ActiveCollisionTypes || (ActiveCollisionTypes = {}));\n/**\n * A geometric entity that can be attached to a body so it can be affected\n * by contacts and proximity queries.\n */\nexport class Collider {\n    constructor(colliderSet, handle, parent, shape) {\n        this.colliderSet = colliderSet;\n        this.handle = handle;\n        this._parent = parent;\n        this._shape = shape;\n    }\n    /** @internal */\n    finalizeDeserialization(bodies) {\n        if (this.handle != null) {\n            this._parent = bodies.get(this.colliderSet.raw.coParent(this.handle));\n        }\n    }\n    ensureShapeIsCached() {\n        if (!this._shape)\n            this._shape = Shape.fromRaw(this.colliderSet.raw, this.handle);\n    }\n    /**\n     * The shape of this collider.\n     */\n    get shape() {\n        this.ensureShapeIsCached();\n        return this._shape;\n    }\n    /**\n     * Checks if this collider is still valid (i.e. that it has\n     * not been deleted from the collider set yet).\n     */\n    isValid() {\n        return this.colliderSet.raw.contains(this.handle);\n    }\n    /**\n     * The world-space translation of this rigid-body.\n     */\n    translation() {\n        return VectorOps.fromRaw(this.colliderSet.raw.coTranslation(this.handle));\n    }\n    /**\n     * The world-space orientation of this rigid-body.\n     */\n    rotation() {\n        return RotationOps.fromRaw(this.colliderSet.raw.coRotation(this.handle));\n    }\n    /**\n     * Is this collider a sensor?\n     */\n    isSensor() {\n        return this.colliderSet.raw.coIsSensor(this.handle);\n    }\n    /**\n     * Sets whether or not this collider is a sensor.\n     * @param isSensor - If `true`, the collider will be a sensor.\n     */\n    setSensor(isSensor) {\n        this.colliderSet.raw.coSetSensor(this.handle, isSensor);\n    }\n    /**\n     * Sets the new shape of the collider.\n     * @param shape - The collider’s new shape.\n     */\n    setShape(shape) {\n        let rawShape = shape.intoRaw();\n        this.colliderSet.raw.coSetShape(this.handle, rawShape);\n        rawShape.free();\n        this._shape = shape;\n    }\n    /**\n     * Sets whether this collider is enabled or not.\n     *\n     * @param enabled - Set to `false` to disable this collider (its parent rigid-body won’t be disabled automatically by this).\n     */\n    setEnabled(enabled) {\n        this.colliderSet.raw.coSetEnabled(this.handle, enabled);\n    }\n    /**\n     * Is this collider enabled?\n     */\n    isEnabled() {\n        return this.colliderSet.raw.coIsEnabled(this.handle);\n    }\n    /**\n     * Sets the restitution coefficient of the collider to be created.\n     *\n     * @param restitution - The restitution coefficient in `[0, 1]`. A value of 0 (the default) means no bouncing behavior\n     *                   while 1 means perfect bouncing (though energy may still be lost due to numerical errors of the\n     *                   constraints solver).\n     */\n    setRestitution(restitution) {\n        this.colliderSet.raw.coSetRestitution(this.handle, restitution);\n    }\n    /**\n     * Sets the friction coefficient of the collider to be created.\n     *\n     * @param friction - The friction coefficient. Must be greater or equal to 0. This is generally smaller than 1. The\n     *                   higher the coefficient, the stronger friction forces will be for contacts with the collider\n     *                   being built.\n     */\n    setFriction(friction) {\n        this.colliderSet.raw.coSetFriction(this.handle, friction);\n    }\n    /**\n     * Gets the rule used to combine the friction coefficients of two colliders\n     * colliders involved in a contact.\n     */\n    frictionCombineRule() {\n        return this.colliderSet.raw.coFrictionCombineRule(this.handle);\n    }\n    /**\n     * Sets the rule used to combine the friction coefficients of two colliders\n     * colliders involved in a contact.\n     *\n     * @param rule − The combine rule to apply.\n     */\n    setFrictionCombineRule(rule) {\n        this.colliderSet.raw.coSetFrictionCombineRule(this.handle, rule);\n    }\n    /**\n     * Gets the rule used to combine the restitution coefficients of two colliders\n     * colliders involved in a contact.\n     */\n    restitutionCombineRule() {\n        return this.colliderSet.raw.coRestitutionCombineRule(this.handle);\n    }\n    /**\n     * Sets the rule used to combine the restitution coefficients of two colliders\n     * colliders involved in a contact.\n     *\n     * @param rule − The combine rule to apply.\n     */\n    setRestitutionCombineRule(rule) {\n        this.colliderSet.raw.coSetRestitutionCombineRule(this.handle, rule);\n    }\n    /**\n     * Sets the collision groups used by this collider.\n     *\n     * Two colliders will interact iff. their collision groups are compatible.\n     * See the documentation of `InteractionGroups` for details on teh used bit pattern.\n     *\n     * @param groups - The collision groups used for the collider being built.\n     */\n    setCollisionGroups(groups) {\n        this.colliderSet.raw.coSetCollisionGroups(this.handle, groups);\n    }\n    /**\n     * Sets the solver groups used by this collider.\n     *\n     * Forces between two colliders in contact will be computed iff their solver\n     * groups are compatible.\n     * See the documentation of `InteractionGroups` for details on the used bit pattern.\n     *\n     * @param groups - The solver groups used for the collider being built.\n     */\n    setSolverGroups(groups) {\n        this.colliderSet.raw.coSetSolverGroups(this.handle, groups);\n    }\n    /**\n     * Sets the contact skin for this collider.\n     *\n     * See the documentation of `ColliderDesc.setContactSkin` for additional details.\n     */\n    contactSkin() {\n        return this.colliderSet.raw.coContactSkin(this.handle);\n    }\n    /**\n     * Sets the contact skin for this collider.\n     *\n     * See the documentation of `ColliderDesc.setContactSkin` for additional details.\n     *\n     * @param thickness - The contact skin thickness.\n     */\n    setContactSkin(thickness) {\n        return this.colliderSet.raw.coSetContactSkin(this.handle, thickness);\n    }\n    /**\n     * Get the physics hooks active for this collider.\n     */\n    activeHooks() {\n        return this.colliderSet.raw.coActiveHooks(this.handle);\n    }\n    /**\n     * Set the physics hooks active for this collider.\n     *\n     * Use this to enable custom filtering rules for contact/intersecstion pairs involving this collider.\n     *\n     * @param activeHooks - The hooks active for contact/intersection pairs involving this collider.\n     */\n    setActiveHooks(activeHooks) {\n        this.colliderSet.raw.coSetActiveHooks(this.handle, activeHooks);\n    }\n    /**\n     * The events active for this collider.\n     */\n    activeEvents() {\n        return this.colliderSet.raw.coActiveEvents(this.handle);\n    }\n    /**\n     * Set the events active for this collider.\n     *\n     * Use this to enable contact and/or intersection event reporting for this collider.\n     *\n     * @param activeEvents - The events active for contact/intersection pairs involving this collider.\n     */\n    setActiveEvents(activeEvents) {\n        this.colliderSet.raw.coSetActiveEvents(this.handle, activeEvents);\n    }\n    /**\n     * Gets the collision types active for this collider.\n     */\n    activeCollisionTypes() {\n        return this.colliderSet.raw.coActiveCollisionTypes(this.handle);\n    }\n    /**\n     * Sets the total force magnitude beyond which a contact force event can be emitted.\n     *\n     * @param threshold - The new force threshold.\n     */\n    setContactForceEventThreshold(threshold) {\n        return this.colliderSet.raw.coSetContactForceEventThreshold(this.handle, threshold);\n    }\n    /**\n     * The total force magnitude beyond which a contact force event can be emitted.\n     */\n    contactForceEventThreshold() {\n        return this.colliderSet.raw.coContactForceEventThreshold(this.handle);\n    }\n    /**\n     * Set the collision types active for this collider.\n     *\n     * @param activeCollisionTypes - The hooks active for contact/intersection pairs involving this collider.\n     */\n    setActiveCollisionTypes(activeCollisionTypes) {\n        this.colliderSet.raw.coSetActiveCollisionTypes(this.handle, activeCollisionTypes);\n    }\n    /**\n     * Sets the uniform density of this collider.\n     *\n     * This will override any previous mass-properties set by `this.setDensity`,\n     * `this.setMass`, `this.setMassProperties`, `ColliderDesc.density`,\n     * `ColliderDesc.mass`, or `ColliderDesc.massProperties` for this collider.\n     *\n     * The mass and angular inertia of this collider will be computed automatically based on its\n     * shape.\n     */\n    setDensity(density) {\n        this.colliderSet.raw.coSetDensity(this.handle, density);\n    }\n    /**\n     * Sets the mass of this collider.\n     *\n     * This will override any previous mass-properties set by `this.setDensity`,\n     * `this.setMass`, `this.setMassProperties`, `ColliderDesc.density`,\n     * `ColliderDesc.mass`, or `ColliderDesc.massProperties` for this collider.\n     *\n     * The angular inertia of this collider will be computed automatically based on its shape\n     * and this mass value.\n     */\n    setMass(mass) {\n        this.colliderSet.raw.coSetMass(this.handle, mass);\n    }\n    // #if DIM3\n    /**\n     * Sets the mass of this collider.\n     *\n     * This will override any previous mass-properties set by `this.setDensity`,\n     * `this.setMass`, `this.setMassProperties`, `ColliderDesc.density`,\n     * `ColliderDesc.mass`, or `ColliderDesc.massProperties` for this collider.\n     */\n    setMassProperties(mass, centerOfMass, principalAngularInertia, angularInertiaLocalFrame) {\n        let rawCom = VectorOps.intoRaw(centerOfMass);\n        let rawPrincipalInertia = VectorOps.intoRaw(principalAngularInertia);\n        let rawInertiaFrame = RotationOps.intoRaw(angularInertiaLocalFrame);\n        this.colliderSet.raw.coSetMassProperties(this.handle, mass, rawCom, rawPrincipalInertia, rawInertiaFrame);\n        rawCom.free();\n        rawPrincipalInertia.free();\n        rawInertiaFrame.free();\n    }\n    // #endif\n    /**\n     * Sets the translation of this collider.\n     *\n     * @param tra - The world-space position of the collider.\n     */\n    setTranslation(tra) {\n        // #if DIM3\n        this.colliderSet.raw.coSetTranslation(this.handle, tra.x, tra.y, tra.z);\n        // #endif\n    }\n    /**\n     * Sets the translation of this collider relative to its parent rigid-body.\n     *\n     * Does nothing if this collider isn't attached to a rigid-body.\n     *\n     * @param tra - The new translation of the collider relative to its parent.\n     */\n    setTranslationWrtParent(tra) {\n        // #if DIM3\n        this.colliderSet.raw.coSetTranslationWrtParent(this.handle, tra.x, tra.y, tra.z);\n        // #endif\n    }\n    // #if DIM3\n    /**\n     * Sets the rotation quaternion of this collider.\n     *\n     * This does nothing if a zero quaternion is provided.\n     *\n     * @param rotation - The rotation to set.\n     */\n    setRotation(rot) {\n        this.colliderSet.raw.coSetRotation(this.handle, rot.x, rot.y, rot.z, rot.w);\n    }\n    /**\n     * Sets the rotation quaternion of this collider relative to its parent rigid-body.\n     *\n     * This does nothing if a zero quaternion is provided or if this collider isn't\n     * attached to a rigid-body.\n     *\n     * @param rotation - The rotation to set.\n     */\n    setRotationWrtParent(rot) {\n        this.colliderSet.raw.coSetRotationWrtParent(this.handle, rot.x, rot.y, rot.z, rot.w);\n    }\n    // #endif\n    /**\n     * The type of the shape of this collider.\n     * @deprecated this field will be removed in the future, please access this field on `shape` member instead.\n     */\n    shapeType() {\n        return this.colliderSet.raw.coShapeType(this.handle);\n    }\n    /**\n     * The half-extents of this collider if it is a cuboid shape.\n     * @deprecated this field will be removed in the future, please access this field on `shape` member instead.\n     */\n    halfExtents() {\n        return VectorOps.fromRaw(this.colliderSet.raw.coHalfExtents(this.handle));\n    }\n    /**\n     * Sets the half-extents of this collider if it is a cuboid shape.\n     *\n     * @param newHalfExtents - desired half extents.\n     */\n    setHalfExtents(newHalfExtents) {\n        const rawPoint = VectorOps.intoRaw(newHalfExtents);\n        this.colliderSet.raw.coSetHalfExtents(this.handle, rawPoint);\n    }\n    /**\n     * The radius of this collider if it is a ball, cylinder, capsule, or cone shape.\n     * @deprecated this field will be removed in the future, please access this field on `shape` member instead.\n     */\n    radius() {\n        return this.colliderSet.raw.coRadius(this.handle);\n    }\n    /**\n     * Sets the radius of this collider if it is a ball, cylinder, capsule, or cone shape.\n     *\n     * @param newRadius - desired radius.\n     */\n    setRadius(newRadius) {\n        this.colliderSet.raw.coSetRadius(this.handle, newRadius);\n    }\n    /**\n     * The radius of the round edges of this collider if it is a round cylinder.\n     * @deprecated this field will be removed in the future, please access this field on `shape` member instead.\n     */\n    roundRadius() {\n        return this.colliderSet.raw.coRoundRadius(this.handle);\n    }\n    /**\n     * Sets the radius of the round edges of this collider if it has round edges.\n     *\n     * @param newBorderRadius - desired round edge radius.\n     */\n    setRoundRadius(newBorderRadius) {\n        this.colliderSet.raw.coSetRoundRadius(this.handle, newBorderRadius);\n    }\n    /**\n     * The half height of this collider if it is a cylinder, capsule, or cone shape.\n     * @deprecated this field will be removed in the future, please access this field on `shape` member instead.\n     */\n    halfHeight() {\n        return this.colliderSet.raw.coHalfHeight(this.handle);\n    }\n    /**\n     * Sets the half height of this collider if it is a cylinder, capsule, or cone shape.\n     *\n     * @param newHalfheight - desired half height.\n     */\n    setHalfHeight(newHalfheight) {\n        this.colliderSet.raw.coSetHalfHeight(this.handle, newHalfheight);\n    }\n    /**\n     * If this collider has a triangle mesh, polyline, convex polygon, or convex polyhedron shape,\n     * this returns the vertex buffer of said shape.\n     * @deprecated this field will be removed in the future, please access this field on `shape` member instead.\n     */\n    vertices() {\n        return this.colliderSet.raw.coVertices(this.handle);\n    }\n    /**\n     * If this collider has a triangle mesh, polyline, or convex polyhedron shape,\n     * this returns the index buffer of said shape.\n     * @deprecated this field will be removed in the future, please access this field on `shape` member instead.\n     */\n    indices() {\n        return this.colliderSet.raw.coIndices(this.handle);\n    }\n    /**\n     * If this collider has a heightfield shape, this returns the heights buffer of\n     * the heightfield.\n     * In 3D, the returned height matrix is provided in column-major order.\n     * @deprecated this field will be removed in the future, please access this field on `shape` member instead.\n     */\n    heightfieldHeights() {\n        return this.colliderSet.raw.coHeightfieldHeights(this.handle);\n    }\n    /**\n     * If this collider has a heightfield shape, this returns the scale\n     * applied to it.\n     * @deprecated this field will be removed in the future, please access this field on `shape` member instead.\n     */\n    heightfieldScale() {\n        let scale = this.colliderSet.raw.coHeightfieldScale(this.handle);\n        return VectorOps.fromRaw(scale);\n    }\n    // #if DIM3\n    /**\n     * If this collider has a heightfield shape, this returns the number of\n     * rows of its height matrix.\n     * @deprecated this field will be removed in the future, please access this field on `shape` member instead.\n     */\n    heightfieldNRows() {\n        return this.colliderSet.raw.coHeightfieldNRows(this.handle);\n    }\n    /**\n     * If this collider has a heightfield shape, this returns the number of\n     * columns of its height matrix.\n     * @deprecated this field will be removed in the future, please access this field on `shape` member instead.\n     */\n    heightfieldNCols() {\n        return this.colliderSet.raw.coHeightfieldNCols(this.handle);\n    }\n    // #endif\n    /**\n     * The rigid-body this collider is attached to.\n     */\n    parent() {\n        return this._parent;\n    }\n    /**\n     * The friction coefficient of this collider.\n     */\n    friction() {\n        return this.colliderSet.raw.coFriction(this.handle);\n    }\n    /**\n     * The restitution coefficient of this collider.\n     */\n    restitution() {\n        return this.colliderSet.raw.coRestitution(this.handle);\n    }\n    /**\n     * The density of this collider.\n     */\n    density() {\n        return this.colliderSet.raw.coDensity(this.handle);\n    }\n    /**\n     * The mass of this collider.\n     */\n    mass() {\n        return this.colliderSet.raw.coMass(this.handle);\n    }\n    /**\n     * The volume of this collider.\n     */\n    volume() {\n        return this.colliderSet.raw.coVolume(this.handle);\n    }\n    /**\n     * The collision groups of this collider.\n     */\n    collisionGroups() {\n        return this.colliderSet.raw.coCollisionGroups(this.handle);\n    }\n    /**\n     * The solver groups of this collider.\n     */\n    solverGroups() {\n        return this.colliderSet.raw.coSolverGroups(this.handle);\n    }\n    /**\n     * Tests if this collider contains a point.\n     *\n     * @param point - The point to test.\n     */\n    containsPoint(point) {\n        let rawPoint = VectorOps.intoRaw(point);\n        let result = this.colliderSet.raw.coContainsPoint(this.handle, rawPoint);\n        rawPoint.free();\n        return result;\n    }\n    /**\n     * Find the projection of a point on this collider.\n     *\n     * @param point - The point to project.\n     * @param solid - If this is set to `true` then the collider shapes are considered to\n     *   be plain (if the point is located inside of a plain shape, its projection is the point\n     *   itself). If it is set to `false` the collider shapes are considered to be hollow\n     *   (if the point is located inside of an hollow shape, it is projected on the shape's\n     *   boundary).\n     */\n    projectPoint(point, solid) {\n        let rawPoint = VectorOps.intoRaw(point);\n        let result = PointProjection.fromRaw(this.colliderSet.raw.coProjectPoint(this.handle, rawPoint, solid));\n        rawPoint.free();\n        return result;\n    }\n    /**\n     * Tests if this collider intersects the given ray.\n     *\n     * @param ray - The ray to cast.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the length of the ray to `ray.dir.norm() * maxToi`.\n     */\n    intersectsRay(ray, maxToi) {\n        let rawOrig = VectorOps.intoRaw(ray.origin);\n        let rawDir = VectorOps.intoRaw(ray.dir);\n        let result = this.colliderSet.raw.coIntersectsRay(this.handle, rawOrig, rawDir, maxToi);\n        rawOrig.free();\n        rawDir.free();\n        return result;\n    }\n    /*\n     * Computes the smallest time between this and the given shape under translational movement are separated by a distance smaller or equal to distance.\n     *\n     * @param collider1Vel - The constant velocity of the current shape to cast (i.e. the cast direction).\n     * @param shape2 - The shape to cast against.\n     * @param shape2Pos - The position of the second shape.\n     * @param shape2Rot - The rotation of the second shape.\n     * @param shape2Vel - The constant velocity of the second shape.\n     * @param targetDistance − If the shape moves closer to this distance from a collider, a hit\n     *                         will be returned.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the distance traveled by the shape to `collider1Vel.norm() * maxToi`.\n     * @param stopAtPenetration - If set to `false`, the linear shape-cast won’t immediately stop if\n     *   the shape is penetrating another shape at its starting point **and** its trajectory is such\n     *   that it’s on a path to exit that penetration state.\n     */\n    castShape(collider1Vel, shape2, shape2Pos, shape2Rot, shape2Vel, targetDistance, maxToi, stopAtPenetration) {\n        let rawCollider1Vel = VectorOps.intoRaw(collider1Vel);\n        let rawShape2Pos = VectorOps.intoRaw(shape2Pos);\n        let rawShape2Rot = RotationOps.intoRaw(shape2Rot);\n        let rawShape2Vel = VectorOps.intoRaw(shape2Vel);\n        let rawShape2 = shape2.intoRaw();\n        let result = ShapeCastHit.fromRaw(this.colliderSet, this.colliderSet.raw.coCastShape(this.handle, rawCollider1Vel, rawShape2, rawShape2Pos, rawShape2Rot, rawShape2Vel, targetDistance, maxToi, stopAtPenetration));\n        rawCollider1Vel.free();\n        rawShape2Pos.free();\n        rawShape2Rot.free();\n        rawShape2Vel.free();\n        rawShape2.free();\n        return result;\n    }\n    /*\n     * Computes the smallest time between this and the given collider under translational movement are separated by a distance smaller or equal to distance.\n     *\n     * @param collider1Vel - The constant velocity of the current collider to cast (i.e. the cast direction).\n     * @param collider2 - The collider to cast against.\n     * @param collider2Vel - The constant velocity of the second collider.\n     * @param targetDistance − If the shape moves closer to this distance from a collider, a hit\n     *                         will be returned.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the distance traveled by the shape to `shapeVel.norm() * maxToi`.\n     * @param stopAtPenetration - If set to `false`, the linear shape-cast won’t immediately stop if\n     *   the shape is penetrating another shape at its starting point **and** its trajectory is such\n     *   that it’s on a path to exit that penetration state.\n     */\n    castCollider(collider1Vel, collider2, collider2Vel, targetDistance, maxToi, stopAtPenetration) {\n        let rawCollider1Vel = VectorOps.intoRaw(collider1Vel);\n        let rawCollider2Vel = VectorOps.intoRaw(collider2Vel);\n        let result = ColliderShapeCastHit.fromRaw(this.colliderSet, this.colliderSet.raw.coCastCollider(this.handle, rawCollider1Vel, collider2.handle, rawCollider2Vel, targetDistance, maxToi, stopAtPenetration));\n        rawCollider1Vel.free();\n        rawCollider2Vel.free();\n        return result;\n    }\n    intersectsShape(shape2, shapePos2, shapeRot2) {\n        let rawPos2 = VectorOps.intoRaw(shapePos2);\n        let rawRot2 = RotationOps.intoRaw(shapeRot2);\n        let rawShape2 = shape2.intoRaw();\n        let result = this.colliderSet.raw.coIntersectsShape(this.handle, rawShape2, rawPos2, rawRot2);\n        rawPos2.free();\n        rawRot2.free();\n        rawShape2.free();\n        return result;\n    }\n    /**\n     * Computes one pair of contact points between the shape owned by this collider and the given shape.\n     *\n     * @param shape2 - The second shape.\n     * @param shape2Pos - The initial position of the second shape.\n     * @param shape2Rot - The rotation of the second shape.\n     * @param prediction - The prediction value, if the shapes are separated by a distance greater than this value, test will fail.\n     * @returns `null` if the shapes are separated by a distance greater than prediction, otherwise contact details. The result is given in world-space.\n     */\n    contactShape(shape2, shape2Pos, shape2Rot, prediction) {\n        let rawPos2 = VectorOps.intoRaw(shape2Pos);\n        let rawRot2 = RotationOps.intoRaw(shape2Rot);\n        let rawShape2 = shape2.intoRaw();\n        let result = ShapeContact.fromRaw(this.colliderSet.raw.coContactShape(this.handle, rawShape2, rawPos2, rawRot2, prediction));\n        rawPos2.free();\n        rawRot2.free();\n        rawShape2.free();\n        return result;\n    }\n    /**\n     * Computes one pair of contact points between the collider and the given collider.\n     *\n     * @param collider2 - The second collider.\n     * @param prediction - The prediction value, if the shapes are separated by a distance greater than this value, test will fail.\n     * @returns `null` if the shapes are separated by a distance greater than prediction, otherwise contact details. The result is given in world-space.\n     */\n    contactCollider(collider2, prediction) {\n        let result = ShapeContact.fromRaw(this.colliderSet.raw.coContactCollider(this.handle, collider2.handle, prediction));\n        return result;\n    }\n    /**\n     * Find the closest intersection between a ray and this collider.\n     *\n     * This also computes the normal at the hit point.\n     * @param ray - The ray to cast.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the length of the ray to `ray.dir.norm() * maxToi`.\n     * @param solid - If `false` then the ray will attempt to hit the boundary of a shape, even if its\n     *   origin already lies inside of a shape. In other terms, `true` implies that all shapes are plain,\n     *   whereas `false` implies that all shapes are hollow for this ray-cast.\n     * @returns The time-of-impact between this collider and the ray, or `-1` if there is no intersection.\n     */\n    castRay(ray, maxToi, solid) {\n        let rawOrig = VectorOps.intoRaw(ray.origin);\n        let rawDir = VectorOps.intoRaw(ray.dir);\n        let result = this.colliderSet.raw.coCastRay(this.handle, rawOrig, rawDir, maxToi, solid);\n        rawOrig.free();\n        rawDir.free();\n        return result;\n    }\n    /**\n     * Find the closest intersection between a ray and this collider.\n     *\n     * This also computes the normal at the hit point.\n     * @param ray - The ray to cast.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the length of the ray to `ray.dir.norm() * maxToi`.\n     * @param solid - If `false` then the ray will attempt to hit the boundary of a shape, even if its\n     *   origin already lies inside of a shape. In other terms, `true` implies that all shapes are plain,\n     *   whereas `false` implies that all shapes are hollow for this ray-cast.\n     */\n    castRayAndGetNormal(ray, maxToi, solid) {\n        let rawOrig = VectorOps.intoRaw(ray.origin);\n        let rawDir = VectorOps.intoRaw(ray.dir);\n        let result = RayIntersection.fromRaw(this.colliderSet.raw.coCastRayAndGetNormal(this.handle, rawOrig, rawDir, maxToi, solid));\n        rawOrig.free();\n        rawDir.free();\n        return result;\n    }\n}\nexport var MassPropsMode;\n(function (MassPropsMode) {\n    MassPropsMode[MassPropsMode[\"Density\"] = 0] = \"Density\";\n    MassPropsMode[MassPropsMode[\"Mass\"] = 1] = \"Mass\";\n    MassPropsMode[MassPropsMode[\"MassProps\"] = 2] = \"MassProps\";\n})(MassPropsMode || (MassPropsMode = {}));\nexport class ColliderDesc {\n    /**\n     * Initializes a collider descriptor from the collision shape.\n     *\n     * @param shape - The shape of the collider being built.\n     */\n    constructor(shape) {\n        this.enabled = true;\n        this.shape = shape;\n        this.massPropsMode = MassPropsMode.Density;\n        this.density = 1.0;\n        this.friction = 0.5;\n        this.restitution = 0.0;\n        this.rotation = RotationOps.identity();\n        this.translation = VectorOps.zeros();\n        this.isSensor = false;\n        this.collisionGroups = 4294967295;\n        this.solverGroups = 4294967295;\n        this.frictionCombineRule = CoefficientCombineRule.Average;\n        this.restitutionCombineRule = CoefficientCombineRule.Average;\n        this.activeCollisionTypes = ActiveCollisionTypes.DEFAULT;\n        this.activeEvents = ActiveEvents.NONE;\n        this.activeHooks = ActiveHooks.NONE;\n        this.mass = 0.0;\n        this.centerOfMass = VectorOps.zeros();\n        this.contactForceEventThreshold = 0.0;\n        this.contactSkin = 0.0;\n        // #if DIM3\n        this.principalAngularInertia = VectorOps.zeros();\n        this.angularInertiaLocalFrame = RotationOps.identity();\n        // #endif\n    }\n    /**\n     * Create a new collider descriptor with a ball shape.\n     *\n     * @param radius - The radius of the ball.\n     */\n    static ball(radius) {\n        const shape = new Ball(radius);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Create a new collider descriptor with a capsule shape.\n     *\n     * @param halfHeight - The half-height of the capsule, along the `y` axis.\n     * @param radius - The radius of the capsule basis.\n     */\n    static capsule(halfHeight, radius) {\n        const shape = new Capsule(halfHeight, radius);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Creates a new segment shape.\n     *\n     * @param a - The first point of the segment.\n     * @param b - The second point of the segment.\n     */\n    static segment(a, b) {\n        const shape = new Segment(a, b);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Creates a new triangle shape.\n     *\n     * @param a - The first point of the triangle.\n     * @param b - The second point of the triangle.\n     * @param c - The third point of the triangle.\n     */\n    static triangle(a, b, c) {\n        const shape = new Triangle(a, b, c);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Creates a new triangle shape with round corners.\n     *\n     * @param a - The first point of the triangle.\n     * @param b - The second point of the triangle.\n     * @param c - The third point of the triangle.\n     * @param borderRadius - The radius of the borders of this triangle. In 3D,\n     *   this is also equal to half the thickness of the triangle.\n     */\n    static roundTriangle(a, b, c, borderRadius) {\n        const shape = new RoundTriangle(a, b, c, borderRadius);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Creates a new collider descriptor with a polyline shape.\n     *\n     * @param vertices - The coordinates of the polyline's vertices.\n     * @param indices - The indices of the polyline's segments. If this is `undefined` or `null`,\n     *    the vertices are assumed to describe a line strip.\n     */\n    static polyline(vertices, indices) {\n        const shape = new Polyline(vertices, indices);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Creates a new collider descriptor with a triangle mesh shape.\n     *\n     * @param vertices - The coordinates of the triangle mesh's vertices.\n     * @param indices - The indices of the triangle mesh's triangles.\n     */\n    static trimesh(vertices, indices, flags) {\n        const shape = new TriMesh(vertices, indices, flags);\n        return new ColliderDesc(shape);\n    }\n    // #if DIM3\n    /**\n     * Creates a new collider descriptor with a cuboid shape.\n     *\n     * @param hx - The half-width of the rectangle along its local `x` axis.\n     * @param hy - The half-width of the rectangle along its local `y` axis.\n     * @param hz - The half-width of the rectangle along its local `z` axis.\n     */\n    static cuboid(hx, hy, hz) {\n        const shape = new Cuboid(hx, hy, hz);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Creates a new collider descriptor with a rectangular shape with round borders.\n     *\n     * @param hx - The half-width of the rectangle along its local `x` axis.\n     * @param hy - The half-width of the rectangle along its local `y` axis.\n     * @param hz - The half-width of the rectangle along its local `z` axis.\n     * @param borderRadius - The radius of the cuboid's borders.\n     */\n    static roundCuboid(hx, hy, hz, borderRadius) {\n        const shape = new RoundCuboid(hx, hy, hz, borderRadius);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Creates a new collider descriptor with a heightfield shape.\n     *\n     * @param nrows − The number of rows in the heights matrix.\n     * @param ncols - The number of columns in the heights matrix.\n     * @param heights - The heights of the heightfield along its local `y` axis,\n     *                  provided as a matrix stored in column-major order.\n     * @param scale - The scale factor applied to the heightfield.\n     */\n    static heightfield(nrows, ncols, heights, scale, flags) {\n        const shape = new Heightfield(nrows, ncols, heights, scale, flags);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Create a new collider descriptor with a cylinder shape.\n     *\n     * @param halfHeight - The half-height of the cylinder, along the `y` axis.\n     * @param radius - The radius of the cylinder basis.\n     */\n    static cylinder(halfHeight, radius) {\n        const shape = new Cylinder(halfHeight, radius);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Create a new collider descriptor with a cylinder shape with rounded corners.\n     *\n     * @param halfHeight - The half-height of the cylinder, along the `y` axis.\n     * @param radius - The radius of the cylinder basis.\n     * @param borderRadius - The radius of the cylinder's rounded edges and vertices.\n     */\n    static roundCylinder(halfHeight, radius, borderRadius) {\n        const shape = new RoundCylinder(halfHeight, radius, borderRadius);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Create a new collider descriptor with a cone shape.\n     *\n     * @param halfHeight - The half-height of the cone, along the `y` axis.\n     * @param radius - The radius of the cone basis.\n     */\n    static cone(halfHeight, radius) {\n        const shape = new Cone(halfHeight, radius);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Create a new collider descriptor with a cone shape with rounded corners.\n     *\n     * @param halfHeight - The half-height of the cone, along the `y` axis.\n     * @param radius - The radius of the cone basis.\n     * @param borderRadius - The radius of the cone's rounded edges and vertices.\n     */\n    static roundCone(halfHeight, radius, borderRadius) {\n        const shape = new RoundCone(halfHeight, radius, borderRadius);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Computes the convex-hull of the given points and use the resulting\n     * convex polyhedron as the shape for this new collider descriptor.\n     *\n     * @param points - The point that will be used to compute the convex-hull.\n     */\n    static convexHull(points) {\n        const shape = new ConvexPolyhedron(points, null);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Creates a new collider descriptor that uses the given set of points assumed\n     * to form a convex polyline (no convex-hull computation will be done).\n     *\n     * @param vertices - The vertices of the convex polyline.\n     */\n    static convexMesh(vertices, indices) {\n        const shape = new ConvexPolyhedron(vertices, indices);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Computes the convex-hull of the given points and use the resulting\n     * convex polyhedron as the shape for this new collider descriptor. A\n     * border is added to that convex polyhedron to give it round corners.\n     *\n     * @param points - The point that will be used to compute the convex-hull.\n     * @param borderRadius - The radius of the round border added to the convex polyhedron.\n     */\n    static roundConvexHull(points, borderRadius) {\n        const shape = new RoundConvexPolyhedron(points, null, borderRadius);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Creates a new collider descriptor that uses the given set of points assumed\n     * to form a round convex polyline (no convex-hull computation will be done).\n     *\n     * @param vertices - The vertices of the convex polyline.\n     * @param borderRadius - The radius of the round border added to the convex polyline.\n     */\n    static roundConvexMesh(vertices, indices, borderRadius) {\n        const shape = new RoundConvexPolyhedron(vertices, indices, borderRadius);\n        return new ColliderDesc(shape);\n    }\n    // #endif\n    // #if DIM3\n    /**\n     * Sets the position of the collider to be created relative to the rigid-body it is attached to.\n     */\n    setTranslation(x, y, z) {\n        if (typeof x != \"number\" ||\n            typeof y != \"number\" ||\n            typeof z != \"number\")\n            throw TypeError(\"The translation components must be numbers.\");\n        this.translation = { x: x, y: y, z: z };\n        return this;\n    }\n    // #endif\n    /**\n     * Sets the rotation of the collider to be created relative to the rigid-body it is attached to.\n     *\n     * @param rot - The rotation of the collider to be created relative to the rigid-body it is attached to.\n     */\n    setRotation(rot) {\n        // #if DIM3\n        RotationOps.copy(this.rotation, rot);\n        // #endif\n        return this;\n    }\n    /**\n     * Sets whether or not the collider being created is a sensor.\n     *\n     * A sensor collider does not take part of the physics simulation, but generates\n     * proximity events.\n     *\n     * @param sensor - Set to `true` of the collider built is to be a sensor.\n     */\n    setSensor(sensor) {\n        this.isSensor = sensor;\n        return this;\n    }\n    /**\n     * Sets whether the created collider will be enabled or disabled.\n     * @param enabled − If set to `false` the collider will be disabled at creation.\n     */\n    setEnabled(enabled) {\n        this.enabled = enabled;\n        return this;\n    }\n    /**\n     * Sets the contact skin of the collider.\n     *\n     * The contact skin acts as if the collider was enlarged with a skin of width `skin_thickness`\n     * around it, keeping objects further apart when colliding.\n     *\n     * A non-zero contact skin can increase performance, and in some cases, stability. However\n     * it creates a small gap between colliding object (equal to the sum of their skin). If the\n     * skin is sufficiently small, this might not be visually significant or can be hidden by the\n     * rendering assets.\n     */\n    setContactSkin(thickness) {\n        this.contactSkin = thickness;\n        return this;\n    }\n    /**\n     * Sets the density of the collider being built.\n     *\n     * The mass and angular inertia tensor will be computed automatically based on this density and the collider’s shape.\n     *\n     * @param density - The density to set, must be greater or equal to 0. A density of 0 means that this collider\n     *                  will not affect the mass or angular inertia of the rigid-body it is attached to.\n     */\n    setDensity(density) {\n        this.massPropsMode = MassPropsMode.Density;\n        this.density = density;\n        return this;\n    }\n    /**\n     * Sets the mass of the collider being built.\n     *\n     * The angular inertia tensor will be computed automatically based on this mass and the collider’s shape.\n     *\n     * @param mass - The mass to set, must be greater or equal to 0.\n     */\n    setMass(mass) {\n        this.massPropsMode = MassPropsMode.Mass;\n        this.mass = mass;\n        return this;\n    }\n    // #if DIM3\n    /**\n     * Sets the mass properties of the collider being built.\n     *\n     * This replaces the mass-properties automatically computed from the collider's density and shape.\n     * These mass-properties will be added to the mass-properties of the rigid-body this collider will be attached to.\n     *\n     * @param mass − The mass of the collider to create.\n     * @param centerOfMass − The center-of-mass of the collider to create.\n     * @param principalAngularInertia − The initial principal angular inertia of the collider to create.\n     *                                  These are the eigenvalues of the angular inertia matrix.\n     * @param angularInertiaLocalFrame − The initial local angular inertia frame of the collider to create.\n     *                                   These are the eigenvectors of the angular inertia matrix.\n     */\n    setMassProperties(mass, centerOfMass, principalAngularInertia, angularInertiaLocalFrame) {\n        this.massPropsMode = MassPropsMode.MassProps;\n        this.mass = mass;\n        VectorOps.copy(this.centerOfMass, centerOfMass);\n        VectorOps.copy(this.principalAngularInertia, principalAngularInertia);\n        RotationOps.copy(this.angularInertiaLocalFrame, angularInertiaLocalFrame);\n        return this;\n    }\n    // #endif\n    /**\n     * Sets the restitution coefficient of the collider to be created.\n     *\n     * @param restitution - The restitution coefficient in `[0, 1]`. A value of 0 (the default) means no bouncing behavior\n     *                   while 1 means perfect bouncing (though energy may still be lost due to numerical errors of the\n     *                   constraints solver).\n     */\n    setRestitution(restitution) {\n        this.restitution = restitution;\n        return this;\n    }\n    /**\n     * Sets the friction coefficient of the collider to be created.\n     *\n     * @param friction - The friction coefficient. Must be greater or equal to 0. This is generally smaller than 1. The\n     *                   higher the coefficient, the stronger friction forces will be for contacts with the collider\n     *                   being built.\n     */\n    setFriction(friction) {\n        this.friction = friction;\n        return this;\n    }\n    /**\n     * Sets the rule used to combine the friction coefficients of two colliders\n     * colliders involved in a contact.\n     *\n     * @param rule − The combine rule to apply.\n     */\n    setFrictionCombineRule(rule) {\n        this.frictionCombineRule = rule;\n        return this;\n    }\n    /**\n     * Sets the rule used to combine the restitution coefficients of two colliders\n     * colliders involved in a contact.\n     *\n     * @param rule − The combine rule to apply.\n     */\n    setRestitutionCombineRule(rule) {\n        this.restitutionCombineRule = rule;\n        return this;\n    }\n    /**\n     * Sets the collision groups used by this collider.\n     *\n     * Two colliders will interact iff. their collision groups are compatible.\n     * See the documentation of `InteractionGroups` for details on teh used bit pattern.\n     *\n     * @param groups - The collision groups used for the collider being built.\n     */\n    setCollisionGroups(groups) {\n        this.collisionGroups = groups;\n        return this;\n    }\n    /**\n     * Sets the solver groups used by this collider.\n     *\n     * Forces between two colliders in contact will be computed iff their solver\n     * groups are compatible.\n     * See the documentation of `InteractionGroups` for details on the used bit pattern.\n     *\n     * @param groups - The solver groups used for the collider being built.\n     */\n    setSolverGroups(groups) {\n        this.solverGroups = groups;\n        return this;\n    }\n    /**\n     * Set the physics hooks active for this collider.\n     *\n     * Use this to enable custom filtering rules for contact/intersecstion pairs involving this collider.\n     *\n     * @param activeHooks - The hooks active for contact/intersection pairs involving this collider.\n     */\n    setActiveHooks(activeHooks) {\n        this.activeHooks = activeHooks;\n        return this;\n    }\n    /**\n     * Set the events active for this collider.\n     *\n     * Use this to enable contact and/or intersection event reporting for this collider.\n     *\n     * @param activeEvents - The events active for contact/intersection pairs involving this collider.\n     */\n    setActiveEvents(activeEvents) {\n        this.activeEvents = activeEvents;\n        return this;\n    }\n    /**\n     * Set the collision types active for this collider.\n     *\n     * @param activeCollisionTypes - The hooks active for contact/intersection pairs involving this collider.\n     */\n    setActiveCollisionTypes(activeCollisionTypes) {\n        this.activeCollisionTypes = activeCollisionTypes;\n        return this;\n    }\n    /**\n     * Sets the total force magnitude beyond which a contact force event can be emitted.\n     *\n     * @param threshold - The force threshold to set.\n     */\n    setContactForceEventThreshold(threshold) {\n        this.contactForceEventThreshold = threshold;\n        return this;\n    }\n}\n//# sourceMappingURL=collider.js.map","import { RawImpulseJointSet } from \"../raw\";\nimport { Coarena } from \"../coarena\";\nimport { ImpulseJoint,\n// #endif\n } from \"./impulse_joint\";\n/**\n * A set of joints.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `jointSet.free()`\n * once you are done using it (and all the joints it created).\n */\nexport class ImpulseJointSet {\n    /**\n     * Release the WASM memory occupied by this joint set.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n        if (!!this.map) {\n            this.map.clear();\n        }\n        this.map = undefined;\n    }\n    constructor(raw) {\n        this.raw = raw || new RawImpulseJointSet();\n        this.map = new Coarena();\n        // Initialize the map with the existing elements, if any.\n        if (raw) {\n            raw.forEachJointHandle((handle) => {\n                this.map.set(handle, ImpulseJoint.newTyped(raw, null, handle));\n            });\n        }\n    }\n    /** @internal */\n    finalizeDeserialization(bodies) {\n        this.map.forEach((joint) => joint.finalizeDeserialization(bodies));\n    }\n    /**\n     * Creates a new joint and return its integer handle.\n     *\n     * @param bodies - The set of rigid-bodies containing the bodies the joint is attached to.\n     * @param desc - The joint's parameters.\n     * @param parent1 - The handle of the first rigid-body this joint is attached to.\n     * @param parent2 - The handle of the second rigid-body this joint is attached to.\n     * @param wakeUp - Should the attached rigid-bodies be awakened?\n     */\n    createJoint(bodies, desc, parent1, parent2, wakeUp) {\n        const rawParams = desc.intoRaw();\n        const handle = this.raw.createJoint(rawParams, parent1, parent2, wakeUp);\n        rawParams.free();\n        let joint = ImpulseJoint.newTyped(this.raw, bodies, handle);\n        this.map.set(handle, joint);\n        return joint;\n    }\n    /**\n     * Remove a joint from this set.\n     *\n     * @param handle - The integer handle of the joint.\n     * @param wakeUp - If `true`, the rigid-bodies attached by the removed joint will be woken-up automatically.\n     */\n    remove(handle, wakeUp) {\n        this.raw.remove(handle, wakeUp);\n        this.unmap(handle);\n    }\n    /**\n     * Calls the given closure with the integer handle of each impulse joint attached to this rigid-body.\n     *\n     * @param f - The closure called with the integer handle of each impulse joint attached to the rigid-body.\n     */\n    forEachJointHandleAttachedToRigidBody(handle, f) {\n        this.raw.forEachJointAttachedToRigidBody(handle, f);\n    }\n    /**\n     * Internal function, do not call directly.\n     * @param handle\n     */\n    unmap(handle) {\n        this.map.delete(handle);\n    }\n    /**\n     * The number of joints on this set.\n     */\n    len() {\n        return this.map.len();\n    }\n    /**\n     * Does this set contain a joint with the given handle?\n     *\n     * @param handle - The joint handle to check.\n     */\n    contains(handle) {\n        return this.get(handle) != null;\n    }\n    /**\n     * Gets the joint with the given handle.\n     *\n     * Returns `null` if no joint with the specified handle exists.\n     *\n     * @param handle - The integer handle of the joint to retrieve.\n     */\n    get(handle) {\n        return this.map.get(handle);\n    }\n    /**\n     * Applies the given closure to each joint contained by this set.\n     *\n     * @param f - The closure to apply.\n     */\n    forEach(f) {\n        this.map.forEach(f);\n    }\n    /**\n     * Gets all joints in the list.\n     *\n     * @returns joint list.\n     */\n    getAll() {\n        return this.map.getAll();\n    }\n}\n//# sourceMappingURL=impulse_joint_set.js.map","import { VectorOps } from \"../math\";\n/**\n * The intersection between a ray and a collider.\n */\nexport class ShapeCastHit {\n    constructor(time_of_impact, witness1, witness2, normal1, normal2) {\n        this.time_of_impact = time_of_impact;\n        this.witness1 = witness1;\n        this.witness2 = witness2;\n        this.normal1 = normal1;\n        this.normal2 = normal2;\n    }\n    static fromRaw(colliderSet, raw) {\n        if (!raw)\n            return null;\n        const result = new ShapeCastHit(raw.time_of_impact(), VectorOps.fromRaw(raw.witness1()), VectorOps.fromRaw(raw.witness2()), VectorOps.fromRaw(raw.normal1()), VectorOps.fromRaw(raw.normal2()));\n        raw.free();\n        return result;\n    }\n}\n/**\n * The intersection between a ray and a collider.\n */\nexport class ColliderShapeCastHit extends ShapeCastHit {\n    constructor(collider, time_of_impact, witness1, witness2, normal1, normal2) {\n        super(time_of_impact, witness1, witness2, normal1, normal2);\n        this.collider = collider;\n    }\n    static fromRaw(colliderSet, raw) {\n        if (!raw)\n            return null;\n        const result = new ColliderShapeCastHit(colliderSet.get(raw.colliderHandle()), raw.time_of_impact(), VectorOps.fromRaw(raw.witness1()), VectorOps.fromRaw(raw.witness2()), VectorOps.fromRaw(raw.normal1()), VectorOps.fromRaw(raw.normal2()));\n        raw.free();\n        return result;\n    }\n}\n//# sourceMappingURL=toi.js.map","// client/src/core/GameWorld.js\n\nimport { Player } from '../entities/player.js';\nimport { VisionSystem } from '../physics/vision-system.js';\nimport { log } from './gameCore.js';\n\n/**\n * Класс для управления игровым миром и сущностями\n */\nexport class GameWorld {\n    /**\n     * @param {Object} game - ссылка на основной класс игры\n     */\n    constructor(game) {\n        this.game = game;\n        \n        // Сущности\n        this.player = null;\n        this.entities = [];\n        \n        // Системы\n        this.visionSystem = null;\n    }\n    \n    /**\n     * Инициализация игрового мира\n     */\n    async initialize() {\n        try {\n            // Создание тестовых стен\n            this.createTestWalls();\n            \n            // Создание игрока\n            this.player = new Player({\n                position: { x: 0, y: 0, z: 0 },\n                renderer: this.game.renderer,\n                input: this.game.input,\n                game: this.game\n            });\n            \n            log('Игрок создан');\n            \n            // Инициализация системы видимости\n            await this.initVisionSystem();\n            \n            return true;\n        } catch (error) {\n            log(`Ошибка инициализации игрового мира: ${error.message}`);\n            return false;\n        }\n    }\n    \n    /**\n     * Обновление игрового мира\n     * @param {number} deltaTime - время между кадрами\n     */\n    update(deltaTime) {\n        // Обновление игрока\n        if (this.player) {\n            this.player.update(deltaTime);\n        }\n        \n        // Обновление других сущностей\n        this.entities.forEach(entity => {\n            if (entity.update) {\n                entity.update(deltaTime);\n            }\n        });\n    }\n    \n    /**\n     * Фиксированное обновление для физики\n     * @param {number} deltaTime - фиксированный временной шаг\n     */\n    fixedUpdate(deltaTime) {\n        // Обновляем состояние сущностей (NPC и др.)\n        this.entities.forEach(entity => {\n            if (entity.fixedUpdate) {\n                entity.fixedUpdate(deltaTime);\n            }\n        });\n    }\n    \n    /**\n     * Метод для инициализации системы видимости\n     */\n    async initVisionSystem() {\n        try {\n            if (!this.game.renderer || !this.game.renderer.scene || !this.player) {\n                throw new Error('Не все компоненты доступны для инициализации системы видимости');\n            }\n            \n            log('Инициализация системы видимости...');\n            \n            // Создаем систему видимости\n            const visionSystem = new VisionSystem({\n                scene: this.game.renderer.scene,\n                world: this.game.physics.getWorld(),\n                player: this.player,\n                fov: 90, // Начальный угол обзора\n                rayCount: 60, // Количество лучей\n                maxDistance: 50, // Максимальная дистанция видимости\n                memoryEnabled: true, // Запоминать посещенные области\n                blurEdges: true // Размытие краев видимости\n            });\n            \n            // Дожидаемся инициализации системы видимости\n            await visionSystem.init();\n            \n            // Проверяем готовность системы\n            if (!visionSystem.isReady()) {\n                log('Система видимости не готова, но будет инициализирована позже автоматически');\n            }\n            \n            // Сохраняем систему видимости в рендерере\n            this.game.renderer.visionSystem = visionSystem;\n            this.visionSystem = visionSystem;\n            \n            log('Система видимости инициализирована');\n            return true;\n        } catch (error) {\n            log(`Ошибка инициализации системы видимости: ${error.message}`);\n            return false;\n        }\n    }\n    \n    /**\n     * Метод для создания тестовых стен\n     */\n    createTestWalls() {\n        try {\n            if (!this.game.physics || !this.game.physics.isReady() || !this.game.renderer || !this.game.renderer.scene) {\n                log('Физика или рендерер не готовы для создания стен');\n                return;\n            }\n            \n            log('Создание тестовых стен...');\n            \n            // Создаем материал для стен\n            const wallMaterial = new THREE.MeshStandardMaterial({\n                color: 0x808080,\n                roughness: 0.7,\n                metalness: 0.2\n            });\n            \n            // Функция для создания стены\n            const createWall = (x, z, width, depth, height = 3) => {\n                // Создаем геометрию\n                const geometry = new THREE.BoxGeometry(width, height, depth);\n                const mesh = new THREE.Mesh(geometry, wallMaterial);\n                \n                // Устанавливаем позицию\n                mesh.position.set(x, height / 2, z);\n                \n                // Добавляем на сцену\n                this.game.renderer.scene.add(mesh);\n                \n                // Создаем физический коллайдер\n                this.game.physics.createObstacle({\n                    position: { x, y: height / 2, z },\n                    size: { x: width, y: height, z: depth },\n                    object: mesh\n                });\n                \n                return mesh;\n            };\n            \n            // Создаем стены лабиринта\n            // Горизонтальные стены (границы)\n            createWall(0, -20, 40, 1);\n            createWall(-20, 0, 1, 40);\n            createWall(20, 0, 1, 40);\n            createWall(0, 20, 40, 1);\n            \n            // Внутренние стены\n            createWall(-10, -10, 1, 20);\n            createWall(10, 10, 20, 1);\n            createWall(10, -5, 1, 10);\n            createWall(-5, 5, 10, 1);\n            \n            // Препятствия\n            createWall(-15, -15, 3, 3);\n            createWall(15, -15, 3, 3);\n            createWall(15, 15, 3, 3);\n            createWall(-15, 15, 3, 3);\n            \n            log('Тестовые стены созданы');\n        } catch (error) {\n            log(`Ошибка создания тестовых стен: ${error.message}`);\n        }\n    }\n    \n    /**\n     * Добавление сущности в игру\n     * @param {Object} entity - сущность для добавления\n     */\n    addEntity(entity) {\n        this.entities.push(entity);\n    }\n    \n    /**\n     * Удаление сущности из игры\n     * @param {Object} entity - сущность для удаления\n     */\n    removeEntity(entity) {\n        const index = this.entities.indexOf(entity);\n        if (index !== -1) {\n            this.entities.splice(index, 1);\n        }\n    }\n    \n    /**\n     * Очистка игрового мира\n     */\n    clear() {\n        // Удаляем все сущности\n        this.entities = [];\n        \n        // Удаляем игрока\n        this.player = null;\n        \n        // Очищаем системы\n        if (this.visionSystem) {\n            this.visionSystem.dispose();\n            this.visionSystem = null;\n        }\n        \n        if (this.game.renderer && this.game.renderer.visionSystem) {\n            this.game.renderer.visionSystem = null;\n        }\n    }\n}","// client/src/core/input.js\n\n/**\n * Класс обработки пользовательского ввода\n */\nexport class InputHandler {\n    constructor() {\n        // Состояние клавиш\n        this.keys = {};\n        \n        // Состояние мыши\n        this.mouse = {\n            position: { x: 0, y: 0 },\n            isDown: false,\n            rightIsDown: false\n        };\n        \n        // Последнее положение мыши для расчета дельты\n        this.lastMousePosition = { x: 0, y: 0 };\n        \n        // Колбэки для клавиш\n        this.keyCallbacks = {};\n        \n        // Колбэки для мыши\n        this.clickCallback = null;\n        this.rightClickCallback = null;\n        this.mouseMoveCallback = null;\n        this.mouseDownCallback = null;\n        this.mouseUpCallback = null;\n        \n        // Флаг активных игровых управлений\n        this.gameControlsEnabled = true;\n        \n        // Настройки ввода\n        this.mouseSensitivity = 1.0;\n        \n        // Привязка методов к контексту\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.handleKeyUp = this.handleKeyUp.bind(this);\n        this.handleMouseMove = this.handleMouseMove.bind(this);\n        this.handleMouseDown = this.handleMouseDown.bind(this);\n        this.handleMouseUp = this.handleMouseUp.bind(this);\n        this.handleContextMenu = this.handleContextMenu.bind(this);\n        \n        // Инициализация обработчиков событий\n        this.init();\n    }\n    \n    /**\n     * Инициализация обработчиков событий\n     */\n    init() {\n        // Добавление обработчиков событий клавиатуры\n        window.addEventListener('keydown', this.handleKeyDown);\n        window.addEventListener('keyup', this.handleKeyUp);\n        \n        // Добавление обработчиков событий мыши\n        window.addEventListener('mousemove', this.handleMouseMove);\n        window.addEventListener('mousedown', this.handleMouseDown);\n        window.addEventListener('mouseup', this.handleMouseUp);\n        window.addEventListener('contextmenu', this.handleContextMenu);\n        \n        // Подавление стандартных действий браузера\n        document.body.style.userSelect = 'none';\n    }\n    \n    /**\n     * Обработчик нажатия клавиши\n     * @param {KeyboardEvent} event - событие нажатия клавиши\n     */\n    handleKeyDown(event) {\n        // Запоминаем состояние клавиши\n        this.keys[event.code] = true;\n        \n        // Вызываем колбэк, если он установлен\n        if (this.keyCallbacks[event.code] && this.gameControlsEnabled) {\n            this.keyCallbacks[event.code]();\n        }\n    }\n    \n    /**\n     * Обработчик отпускания клавиши\n     * @param {KeyboardEvent} event - событие отпускания клавиши\n     */\n    handleKeyUp(event) {\n        // Запоминаем состояние клавиши\n        this.keys[event.code] = false;\n    }\n    \n    /**\n     * Обработчик движения мыши\n     * @param {MouseEvent} event - событие движения мыши\n     */\n    handleMouseMove(event) {\n        // Обновляем позицию мыши\n        this.mouse.position.x = event.clientX;\n        this.mouse.position.y = event.clientY;\n        \n        // Вычисляем delta движения с учетом чувствительности\n        const deltaX = (this.mouse.position.x - this.lastMousePosition.x) * this.mouseSensitivity;\n        const deltaY = (this.mouse.position.y - this.lastMousePosition.y) * this.mouseSensitivity;\n        \n        // Обновляем последнюю позицию\n        this.lastMousePosition.x = this.mouse.position.x;\n        this.lastMousePosition.y = this.mouse.position.y;\n        \n        // Вызываем колбэк движения, если он установлен\n        if (this.mouseMoveCallback && this.gameControlsEnabled) {\n            this.mouseMoveCallback(this.mouse.position, { x: deltaX, y: deltaY });\n        }\n    }\n    \n    /**\n     * Обработчик нажатия кнопки мыши\n     * @param {MouseEvent} event - событие нажатия кнопки мыши\n     */\n    handleMouseDown(event) {\n        if (event.button === 0) {\n            // Левая кнопка мыши\n            this.mouse.isDown = true;\n            \n            // Вызываем общий колбэк нажатия\n            if (this.mouseDownCallback && this.gameControlsEnabled) {\n                this.mouseDownCallback(0, this.mouse.position);\n            }\n            \n            // Вызываем колбэк левого клика\n            if (this.clickCallback && this.gameControlsEnabled) {\n                this.clickCallback(this.mouse.position);\n            }\n        } else if (event.button === 2) {\n            // Правая кнопка мыши\n            this.mouse.rightIsDown = true;\n            \n            // Вызываем общий колбэк нажатия\n            if (this.mouseDownCallback && this.gameControlsEnabled) {\n                this.mouseDownCallback(2, this.mouse.position);\n            }\n            \n            // Вызываем колбэк правого клика\n            if (this.rightClickCallback && this.gameControlsEnabled) {\n                this.rightClickCallback(this.mouse.position);\n            }\n        }\n    }\n    \n    /**\n     * Обработчик отпускания кнопки мыши\n     * @param {MouseEvent} event - событие отпускания кнопки мыши\n     */\n    handleMouseUp(event) {\n        if (event.button === 0) {\n            this.mouse.isDown = false;\n            \n            // Вызываем колбэк отпускания\n            if (this.mouseUpCallback && this.gameControlsEnabled) {\n                this.mouseUpCallback(0);\n            }\n        } else if (event.button === 2) {\n            this.mouse.rightIsDown = false;\n            \n            // Вызываем колбэк отпускания\n            if (this.mouseUpCallback && this.gameControlsEnabled) {\n                this.mouseUpCallback(2);\n            }\n        }\n    }\n    \n    /**\n     * Обработчик контекстного меню (правый клик)\n     * @param {MouseEvent} event - событие контекстного меню\n     */\n    handleContextMenu(event) {\n        // Предотвращаем появление стандартного контекстного меню\n        event.preventDefault();\n    }\n    \n    /**\n     * Проверка, нажата ли указанная клавиша\n     * @param {string} code - код клавиши\n     * @returns {boolean} - состояние клавиши\n     */\n    isKeyPressed(code) {\n        return this.gameControlsEnabled && this.keys[code] === true;\n    }\n    \n    /**\n     * Проверка, нажата ли левая кнопка мыши\n     * @returns {boolean} - состояние левой кнопки мыши\n     */\n    isMouseDown() {\n        return this.gameControlsEnabled && this.mouse.isDown;\n    }\n    \n    /**\n     * Проверка, нажата ли правая кнопка мыши\n     * @returns {boolean} - состояние правой кнопки мыши\n     */\n    isRightMouseDown() {\n        return this.gameControlsEnabled && this.mouse.rightIsDown;\n    }\n    \n    /**\n     * Получение текущей позиции мыши\n     * @returns {Object} - координаты мыши {x, y}\n     */\n    getMousePosition() {\n        return { ...this.mouse.position };\n    }\n    \n    /**\n     * Установка чувствительности мыши\n     * @param {number} sensitivity - чувствительность мыши\n     */\n    setMouseSensitivity(sensitivity) {\n        this.mouseSensitivity = sensitivity;\n    }\n    \n    /**\n     * Добавление колбэка для клавиши\n     * @param {string} code - код клавиши\n     * @param {Function} callback - функция обратного вызова\n     */\n    addKeyCallback(code, callback) {\n        this.keyCallbacks[code] = callback;\n    }\n    \n    /**\n     * Удаление колбэка для клавиши\n     * @param {string} code - код клавиши\n     */\n    removeKeyCallback(code) {\n        delete this.keyCallbacks[code];\n    }\n    \n    /**\n     * Установка колбэка для клика мыши\n     * @param {Function} callback - функция обратного вызова\n     */\n    setClickCallback(callback) {\n        this.clickCallback = callback;\n    }\n    \n    /**\n     * Установка колбэка для правого клика мыши\n     * @param {Function} callback - функция обратного вызова\n     */\n    setRightClickCallback(callback) {\n        this.rightClickCallback = callback;\n    }\n    \n    /**\n     * Установка колбэка для движения мыши\n     * @param {Function} callback - функция обратного вызова\n     */\n    setMouseMoveCallback(callback) {\n        this.mouseMoveCallback = callback;\n    }\n    \n    /**\n     * Установка колбэка для нажатия кнопки мыши\n     * @param {Function} callback - функция обратного вызова (button, position)\n     */\n    setMouseDownCallback(callback) {\n        this.mouseDownCallback = callback;\n    }\n    \n    /**\n     * Установка колбэка для отпускания кнопки мыши\n     * @param {Function} callback - функция обратного вызова (button)\n     */\n    setMouseUpCallback(callback) {\n        this.mouseUpCallback = callback;\n    }\n    \n    /**\n     * Отключение управления игрой (для меню, инвентаря и т.д.)\n     */\n    disableGameControls() {\n        this.gameControlsEnabled = false;\n    }\n    \n    /**\n     * Включение управления игрой\n     */\n    enableGameControls() {\n        this.gameControlsEnabled = true;\n    }\n    \n    /**\n     * Получение направления движения на основе нажатых клавиш\n     * @returns {Object} - вектор движения {x, z}\n     */\n    getMovementDirection() {\n        if (!this.gameControlsEnabled) {\n            return { x: 0, z: 0 };\n        }\n        \n        let dirX = 0;\n        let dirZ = 0;\n        \n        // Вперед/назад (WASD)\n        if (this.isKeyPressed('KeyW') || this.isKeyPressed('ArrowUp')) {\n            dirZ = -1;\n        } else if (this.isKeyPressed('KeyS') || this.isKeyPressed('ArrowDown')) {\n            dirZ = 1;\n        }\n        \n        // Влево/вправо (WASD)\n        if (this.isKeyPressed('KeyA') || this.isKeyPressed('ArrowLeft')) {\n            dirX = -1;\n        } else if (this.isKeyPressed('KeyD') || this.isKeyPressed('ArrowRight')) {\n            dirX = 1;\n        }\n        \n        return { x: dirX, z: dirZ };\n    }\n    \n    /**\n     * Очистка всех колбэков\n     */\n    clearCallbacks() {\n        this.keyCallbacks = {};\n        this.clickCallback = null;\n        this.rightClickCallback = null;\n        this.mouseMoveCallback = null;\n        this.mouseDownCallback = null;\n        this.mouseUpCallback = null;\n    }\n    \n    /**\n     * Уничтожение обработчика ввода и удаление обработчиков событий\n     */\n    destroy() {\n        window.removeEventListener('keydown', this.handleKeyDown);\n        window.removeEventListener('keyup', this.handleKeyUp);\n        window.removeEventListener('mousemove', this.handleMouseMove);\n        window.removeEventListener('mousedown', this.handleMouseDown);\n        window.removeEventListener('mouseup', this.handleMouseUp);\n        window.removeEventListener('contextmenu', this.handleContextMenu);\n        \n        document.body.style.userSelect = '';\n    }\n}","import { VectorOps, RotationOps } from \"../math\";\nimport { RawShape, RawShapeType } from \"../raw\";\nimport { ShapeContact } from \"./contact\";\nimport { PointProjection } from \"./point\";\nimport { RayIntersection } from \"./ray\";\nimport { ShapeCastHit } from \"./toi\";\nexport class Shape {\n    /**\n     * instant mode without cache\n     */\n    static fromRaw(rawSet, handle) {\n        const rawType = rawSet.coShapeType(handle);\n        let extents;\n        let borderRadius;\n        let vs;\n        let indices;\n        let halfHeight;\n        let radius;\n        let normal;\n        switch (rawType) {\n            case RawShapeType.Ball:\n                return new Ball(rawSet.coRadius(handle));\n            case RawShapeType.Cuboid:\n                extents = rawSet.coHalfExtents(handle);\n                // #if DIM3\n                return new Cuboid(extents.x, extents.y, extents.z);\n            // #endif\n            case RawShapeType.RoundCuboid:\n                extents = rawSet.coHalfExtents(handle);\n                borderRadius = rawSet.coRoundRadius(handle);\n                // #if DIM3\n                return new RoundCuboid(extents.x, extents.y, extents.z, borderRadius);\n            // #endif\n            case RawShapeType.Capsule:\n                halfHeight = rawSet.coHalfHeight(handle);\n                radius = rawSet.coRadius(handle);\n                return new Capsule(halfHeight, radius);\n            case RawShapeType.Segment:\n                vs = rawSet.coVertices(handle);\n                // #if DIM3\n                return new Segment(VectorOps.new(vs[0], vs[1], vs[2]), VectorOps.new(vs[3], vs[4], vs[5]));\n            // #endif\n            case RawShapeType.Polyline:\n                vs = rawSet.coVertices(handle);\n                indices = rawSet.coIndices(handle);\n                return new Polyline(vs, indices);\n            case RawShapeType.Triangle:\n                vs = rawSet.coVertices(handle);\n                // #if DIM3\n                return new Triangle(VectorOps.new(vs[0], vs[1], vs[2]), VectorOps.new(vs[3], vs[4], vs[5]), VectorOps.new(vs[6], vs[7], vs[8]));\n            // #endif\n            case RawShapeType.RoundTriangle:\n                vs = rawSet.coVertices(handle);\n                borderRadius = rawSet.coRoundRadius(handle);\n                // #if DIM3\n                return new RoundTriangle(VectorOps.new(vs[0], vs[1], vs[2]), VectorOps.new(vs[3], vs[4], vs[5]), VectorOps.new(vs[6], vs[7], vs[8]), borderRadius);\n            // #endif\n            case RawShapeType.HalfSpace:\n                normal = VectorOps.fromRaw(rawSet.coHalfspaceNormal(handle));\n                return new HalfSpace(normal);\n            case RawShapeType.TriMesh:\n                vs = rawSet.coVertices(handle);\n                indices = rawSet.coIndices(handle);\n                const tri_flags = rawSet.coTriMeshFlags(handle);\n                return new TriMesh(vs, indices, tri_flags);\n            case RawShapeType.HeightField:\n                const scale = rawSet.coHeightfieldScale(handle);\n                const heights = rawSet.coHeightfieldHeights(handle);\n                // #if DIM3\n                const nrows = rawSet.coHeightfieldNRows(handle);\n                const ncols = rawSet.coHeightfieldNCols(handle);\n                const hf_flags = rawSet.coHeightFieldFlags(handle);\n                return new Heightfield(nrows, ncols, heights, scale, hf_flags);\n            // #endif\n            // #if DIM3\n            case RawShapeType.ConvexPolyhedron:\n                vs = rawSet.coVertices(handle);\n                indices = rawSet.coIndices(handle);\n                return new ConvexPolyhedron(vs, indices);\n            case RawShapeType.RoundConvexPolyhedron:\n                vs = rawSet.coVertices(handle);\n                indices = rawSet.coIndices(handle);\n                borderRadius = rawSet.coRoundRadius(handle);\n                return new RoundConvexPolyhedron(vs, indices, borderRadius);\n            case RawShapeType.Cylinder:\n                halfHeight = rawSet.coHalfHeight(handle);\n                radius = rawSet.coRadius(handle);\n                return new Cylinder(halfHeight, radius);\n            case RawShapeType.RoundCylinder:\n                halfHeight = rawSet.coHalfHeight(handle);\n                radius = rawSet.coRadius(handle);\n                borderRadius = rawSet.coRoundRadius(handle);\n                return new RoundCylinder(halfHeight, radius, borderRadius);\n            case RawShapeType.Cone:\n                halfHeight = rawSet.coHalfHeight(handle);\n                radius = rawSet.coRadius(handle);\n                return new Cone(halfHeight, radius);\n            case RawShapeType.RoundCone:\n                halfHeight = rawSet.coHalfHeight(handle);\n                radius = rawSet.coRadius(handle);\n                borderRadius = rawSet.coRoundRadius(handle);\n                return new RoundCone(halfHeight, radius, borderRadius);\n            // #endif\n            default:\n                throw new Error(\"unknown shape type: \" + rawType);\n        }\n    }\n    /**\n     * Computes the time of impact between two moving shapes.\n     * @param shapePos1 - The initial position of this sahpe.\n     * @param shapeRot1 - The rotation of this shape.\n     * @param shapeVel1 - The velocity of this shape.\n     * @param shape2 - The second moving shape.\n     * @param shapePos2 - The initial position of the second shape.\n     * @param shapeRot2 - The rotation of the second shape.\n     * @param shapeVel2 - The velocity of the second shape.\n     * @param targetDistance − If the shape moves closer to this distance from a collider, a hit\n     *                         will be returned.\n     * @param maxToi - The maximum time when the impact can happen.\n     * @param stopAtPenetration - If set to `false`, the linear shape-cast won’t immediately stop if\n     *   the shape is penetrating another shape at its starting point **and** its trajectory is such\n     *   that it’s on a path to exit that penetration state.\n     * @returns If the two moving shapes collider at some point along their trajectories, this returns the\n     *  time at which the two shape collider as well as the contact information during the impact. Returns\n     *  `null`if the two shapes never collide along their paths.\n     */\n    castShape(shapePos1, shapeRot1, shapeVel1, shape2, shapePos2, shapeRot2, shapeVel2, targetDistance, maxToi, stopAtPenetration) {\n        let rawPos1 = VectorOps.intoRaw(shapePos1);\n        let rawRot1 = RotationOps.intoRaw(shapeRot1);\n        let rawVel1 = VectorOps.intoRaw(shapeVel1);\n        let rawPos2 = VectorOps.intoRaw(shapePos2);\n        let rawRot2 = RotationOps.intoRaw(shapeRot2);\n        let rawVel2 = VectorOps.intoRaw(shapeVel2);\n        let rawShape1 = this.intoRaw();\n        let rawShape2 = shape2.intoRaw();\n        let result = ShapeCastHit.fromRaw(null, rawShape1.castShape(rawPos1, rawRot1, rawVel1, rawShape2, rawPos2, rawRot2, rawVel2, targetDistance, maxToi, stopAtPenetration));\n        rawPos1.free();\n        rawRot1.free();\n        rawVel1.free();\n        rawPos2.free();\n        rawRot2.free();\n        rawVel2.free();\n        rawShape1.free();\n        rawShape2.free();\n        return result;\n    }\n    /**\n     * Tests if this shape intersects another shape.\n     *\n     * @param shapePos1 - The position of this shape.\n     * @param shapeRot1 - The rotation of this shape.\n     * @param shape2  - The second shape to test.\n     * @param shapePos2 - The position of the second shape.\n     * @param shapeRot2 - The rotation of the second shape.\n     * @returns `true` if the two shapes intersect, `false` if they don’t.\n     */\n    intersectsShape(shapePos1, shapeRot1, shape2, shapePos2, shapeRot2) {\n        let rawPos1 = VectorOps.intoRaw(shapePos1);\n        let rawRot1 = RotationOps.intoRaw(shapeRot1);\n        let rawPos2 = VectorOps.intoRaw(shapePos2);\n        let rawRot2 = RotationOps.intoRaw(shapeRot2);\n        let rawShape1 = this.intoRaw();\n        let rawShape2 = shape2.intoRaw();\n        let result = rawShape1.intersectsShape(rawPos1, rawRot1, rawShape2, rawPos2, rawRot2);\n        rawPos1.free();\n        rawRot1.free();\n        rawPos2.free();\n        rawRot2.free();\n        rawShape1.free();\n        rawShape2.free();\n        return result;\n    }\n    /**\n     * Computes one pair of contact points between two shapes.\n     *\n     * @param shapePos1 - The initial position of this sahpe.\n     * @param shapeRot1 - The rotation of this shape.\n     * @param shape2 - The second shape.\n     * @param shapePos2 - The initial position of the second shape.\n     * @param shapeRot2 - The rotation of the second shape.\n     * @param prediction - The prediction value, if the shapes are separated by a distance greater than this value, test will fail.\n     * @returns `null` if the shapes are separated by a distance greater than prediction, otherwise contact details. The result is given in world-space.\n     */\n    contactShape(shapePos1, shapeRot1, shape2, shapePos2, shapeRot2, prediction) {\n        let rawPos1 = VectorOps.intoRaw(shapePos1);\n        let rawRot1 = RotationOps.intoRaw(shapeRot1);\n        let rawPos2 = VectorOps.intoRaw(shapePos2);\n        let rawRot2 = RotationOps.intoRaw(shapeRot2);\n        let rawShape1 = this.intoRaw();\n        let rawShape2 = shape2.intoRaw();\n        let result = ShapeContact.fromRaw(rawShape1.contactShape(rawPos1, rawRot1, rawShape2, rawPos2, rawRot2, prediction));\n        rawPos1.free();\n        rawRot1.free();\n        rawPos2.free();\n        rawRot2.free();\n        rawShape1.free();\n        rawShape2.free();\n        return result;\n    }\n    containsPoint(shapePos, shapeRot, point) {\n        let rawPos = VectorOps.intoRaw(shapePos);\n        let rawRot = RotationOps.intoRaw(shapeRot);\n        let rawPoint = VectorOps.intoRaw(point);\n        let rawShape = this.intoRaw();\n        let result = rawShape.containsPoint(rawPos, rawRot, rawPoint);\n        rawPos.free();\n        rawRot.free();\n        rawPoint.free();\n        rawShape.free();\n        return result;\n    }\n    projectPoint(shapePos, shapeRot, point, solid) {\n        let rawPos = VectorOps.intoRaw(shapePos);\n        let rawRot = RotationOps.intoRaw(shapeRot);\n        let rawPoint = VectorOps.intoRaw(point);\n        let rawShape = this.intoRaw();\n        let result = PointProjection.fromRaw(rawShape.projectPoint(rawPos, rawRot, rawPoint, solid));\n        rawPos.free();\n        rawRot.free();\n        rawPoint.free();\n        rawShape.free();\n        return result;\n    }\n    intersectsRay(ray, shapePos, shapeRot, maxToi) {\n        let rawPos = VectorOps.intoRaw(shapePos);\n        let rawRot = RotationOps.intoRaw(shapeRot);\n        let rawRayOrig = VectorOps.intoRaw(ray.origin);\n        let rawRayDir = VectorOps.intoRaw(ray.dir);\n        let rawShape = this.intoRaw();\n        let result = rawShape.intersectsRay(rawPos, rawRot, rawRayOrig, rawRayDir, maxToi);\n        rawPos.free();\n        rawRot.free();\n        rawRayOrig.free();\n        rawRayDir.free();\n        rawShape.free();\n        return result;\n    }\n    castRay(ray, shapePos, shapeRot, maxToi, solid) {\n        let rawPos = VectorOps.intoRaw(shapePos);\n        let rawRot = RotationOps.intoRaw(shapeRot);\n        let rawRayOrig = VectorOps.intoRaw(ray.origin);\n        let rawRayDir = VectorOps.intoRaw(ray.dir);\n        let rawShape = this.intoRaw();\n        let result = rawShape.castRay(rawPos, rawRot, rawRayOrig, rawRayDir, maxToi, solid);\n        rawPos.free();\n        rawRot.free();\n        rawRayOrig.free();\n        rawRayDir.free();\n        rawShape.free();\n        return result;\n    }\n    castRayAndGetNormal(ray, shapePos, shapeRot, maxToi, solid) {\n        let rawPos = VectorOps.intoRaw(shapePos);\n        let rawRot = RotationOps.intoRaw(shapeRot);\n        let rawRayOrig = VectorOps.intoRaw(ray.origin);\n        let rawRayDir = VectorOps.intoRaw(ray.dir);\n        let rawShape = this.intoRaw();\n        let result = RayIntersection.fromRaw(rawShape.castRayAndGetNormal(rawPos, rawRot, rawRayOrig, rawRayDir, maxToi, solid));\n        rawPos.free();\n        rawRot.free();\n        rawRayOrig.free();\n        rawRayDir.free();\n        rawShape.free();\n        return result;\n    }\n}\n// #if DIM3\n/**\n * An enumeration representing the type of a shape.\n */\nexport var ShapeType;\n(function (ShapeType) {\n    ShapeType[ShapeType[\"Ball\"] = 0] = \"Ball\";\n    ShapeType[ShapeType[\"Cuboid\"] = 1] = \"Cuboid\";\n    ShapeType[ShapeType[\"Capsule\"] = 2] = \"Capsule\";\n    ShapeType[ShapeType[\"Segment\"] = 3] = \"Segment\";\n    ShapeType[ShapeType[\"Polyline\"] = 4] = \"Polyline\";\n    ShapeType[ShapeType[\"Triangle\"] = 5] = \"Triangle\";\n    ShapeType[ShapeType[\"TriMesh\"] = 6] = \"TriMesh\";\n    ShapeType[ShapeType[\"HeightField\"] = 7] = \"HeightField\";\n    // Compound = 8,\n    ShapeType[ShapeType[\"ConvexPolyhedron\"] = 9] = \"ConvexPolyhedron\";\n    ShapeType[ShapeType[\"Cylinder\"] = 10] = \"Cylinder\";\n    ShapeType[ShapeType[\"Cone\"] = 11] = \"Cone\";\n    ShapeType[ShapeType[\"RoundCuboid\"] = 12] = \"RoundCuboid\";\n    ShapeType[ShapeType[\"RoundTriangle\"] = 13] = \"RoundTriangle\";\n    ShapeType[ShapeType[\"RoundCylinder\"] = 14] = \"RoundCylinder\";\n    ShapeType[ShapeType[\"RoundCone\"] = 15] = \"RoundCone\";\n    ShapeType[ShapeType[\"RoundConvexPolyhedron\"] = 16] = \"RoundConvexPolyhedron\";\n    ShapeType[ShapeType[\"HalfSpace\"] = 17] = \"HalfSpace\";\n})(ShapeType || (ShapeType = {}));\n// NOTE: this **must** match the bits in the HeightFieldFlags on the rust side.\n/**\n * Flags controlling the behavior of some operations involving heightfields.\n */\nexport var HeightFieldFlags;\n(function (HeightFieldFlags) {\n    /**\n     * If set, a special treatment will be applied to contact manifold calculation to eliminate\n     * or fix contacts normals that could lead to incorrect bumps in physics simulation (especially\n     * on flat surfaces).\n     *\n     * This is achieved by taking into account adjacent triangle normals when computing contact\n     * points for a given triangle.\n     */\n    HeightFieldFlags[HeightFieldFlags[\"FIX_INTERNAL_EDGES\"] = 1] = \"FIX_INTERNAL_EDGES\";\n})(HeightFieldFlags || (HeightFieldFlags = {}));\n// #endif\n// NOTE: this **must** match the TriMeshFlags on the rust side.\n/**\n * Flags controlling the behavior of the triangle mesh creation and of some\n * operations involving triangle meshes.\n */\nexport var TriMeshFlags;\n(function (TriMeshFlags) {\n    // NOTE: these two flags are not really useful in JS.\n    //\n    // /**\n    //  * If set, the half-edge topology of the trimesh will be computed if possible.\n    //  */\n    // HALF_EDGE_TOPOLOGY = 0b0000_0001,\n    // /** If set, the half-edge topology and connected components of the trimesh will be computed if possible.\n    //  *\n    //  * Because of the way it is currently implemented, connected components can only be computed on\n    //  * a mesh where the half-edge topology computation succeeds. It will no longer be the case in the\n    //  * future once we decouple the computations.\n    //  */\n    // CONNECTED_COMPONENTS = 0b0000_0010,\n    /**\n     * If set, any triangle that results in a failing half-hedge topology computation will be deleted.\n     */\n    TriMeshFlags[TriMeshFlags[\"DELETE_BAD_TOPOLOGY_TRIANGLES\"] = 4] = \"DELETE_BAD_TOPOLOGY_TRIANGLES\";\n    /**\n     * If set, the trimesh will be assumed to be oriented (with outward normals).\n     *\n     * The pseudo-normals of its vertices and edges will be computed.\n     */\n    TriMeshFlags[TriMeshFlags[\"ORIENTED\"] = 8] = \"ORIENTED\";\n    /**\n     * If set, the duplicate vertices of the trimesh will be merged.\n     *\n     * Two vertices with the exact same coordinates will share the same entry on the\n     * vertex buffer and the index buffer is adjusted accordingly.\n     */\n    TriMeshFlags[TriMeshFlags[\"MERGE_DUPLICATE_VERTICES\"] = 16] = \"MERGE_DUPLICATE_VERTICES\";\n    /**\n     * If set, the triangles sharing two vertices with identical index values will be removed.\n     *\n     * Because of the way it is currently implemented, this methods implies that duplicate\n     * vertices will be merged. It will no longer be the case in the future once we decouple\n     * the computations.\n     */\n    TriMeshFlags[TriMeshFlags[\"DELETE_DEGENERATE_TRIANGLES\"] = 32] = \"DELETE_DEGENERATE_TRIANGLES\";\n    /**\n     * If set, two triangles sharing three vertices with identical index values (in any order)\n     * will be removed.\n     *\n     * Because of the way it is currently implemented, this methods implies that duplicate\n     * vertices will be merged. It will no longer be the case in the future once we decouple\n     * the computations.\n     */\n    TriMeshFlags[TriMeshFlags[\"DELETE_DUPLICATE_TRIANGLES\"] = 64] = \"DELETE_DUPLICATE_TRIANGLES\";\n    /**\n     * If set, a special treatment will be applied to contact manifold calculation to eliminate\n     * or fix contacts normals that could lead to incorrect bumps in physics simulation\n     * (especially on flat surfaces).\n     *\n     * This is achieved by taking into account adjacent triangle normals when computing contact\n     * points for a given triangle.\n     *\n     * /!\\ NOT SUPPORTED IN THE 2D VERSION OF RAPIER.\n     */\n    TriMeshFlags[TriMeshFlags[\"FIX_INTERNAL_EDGES\"] = 152] = \"FIX_INTERNAL_EDGES\";\n})(TriMeshFlags || (TriMeshFlags = {}));\n/**\n * A shape that is a sphere in 3D and a circle in 2D.\n */\nexport class Ball extends Shape {\n    /**\n     * Creates a new ball with the given radius.\n     * @param radius - The balls radius.\n     */\n    constructor(radius) {\n        super();\n        this.type = ShapeType.Ball;\n        this.radius = radius;\n    }\n    intoRaw() {\n        return RawShape.ball(this.radius);\n    }\n}\nexport class HalfSpace extends Shape {\n    /**\n     * Creates a new halfspace delimited by an infinite plane.\n     *\n     * @param normal - The outward normal of the plane.\n     */\n    constructor(normal) {\n        super();\n        this.type = ShapeType.HalfSpace;\n        this.normal = normal;\n    }\n    intoRaw() {\n        let n = VectorOps.intoRaw(this.normal);\n        let result = RawShape.halfspace(n);\n        n.free();\n        return result;\n    }\n}\n/**\n * A shape that is a box in 3D and a rectangle in 2D.\n */\nexport class Cuboid extends Shape {\n    // #if DIM3\n    /**\n     * Creates a new 3D cuboid.\n     * @param hx - The half width of the cuboid.\n     * @param hy - The half height of the cuboid.\n     * @param hz - The half depth of the cuboid.\n     */\n    constructor(hx, hy, hz) {\n        super();\n        this.type = ShapeType.Cuboid;\n        this.halfExtents = VectorOps.new(hx, hy, hz);\n    }\n    // #endif\n    intoRaw() {\n        // #if DIM3\n        return RawShape.cuboid(this.halfExtents.x, this.halfExtents.y, this.halfExtents.z);\n        // #endif\n    }\n}\n/**\n * A shape that is a box in 3D and a rectangle in 2D, with round corners.\n */\nexport class RoundCuboid extends Shape {\n    // #if DIM3\n    /**\n     * Creates a new 3D cuboid.\n     * @param hx - The half width of the cuboid.\n     * @param hy - The half height of the cuboid.\n     * @param hz - The half depth of the cuboid.\n     * @param borderRadius - The radius of the borders of this cuboid. This will\n     *   effectively increase the half-extents of the cuboid by this radius.\n     */\n    constructor(hx, hy, hz, borderRadius) {\n        super();\n        this.type = ShapeType.RoundCuboid;\n        this.halfExtents = VectorOps.new(hx, hy, hz);\n        this.borderRadius = borderRadius;\n    }\n    // #endif\n    intoRaw() {\n        // #if DIM3\n        return RawShape.roundCuboid(this.halfExtents.x, this.halfExtents.y, this.halfExtents.z, this.borderRadius);\n        // #endif\n    }\n}\n/**\n * A shape that is a capsule.\n */\nexport class Capsule extends Shape {\n    /**\n     * Creates a new capsule with the given radius and half-height.\n     * @param halfHeight - The balls half-height along the `y` axis.\n     * @param radius - The balls radius.\n     */\n    constructor(halfHeight, radius) {\n        super();\n        this.type = ShapeType.Capsule;\n        this.halfHeight = halfHeight;\n        this.radius = radius;\n    }\n    intoRaw() {\n        return RawShape.capsule(this.halfHeight, this.radius);\n    }\n}\n/**\n * A shape that is a segment.\n */\nexport class Segment extends Shape {\n    /**\n     * Creates a new segment shape.\n     * @param a - The first point of the segment.\n     * @param b - The second point of the segment.\n     */\n    constructor(a, b) {\n        super();\n        this.type = ShapeType.Segment;\n        this.a = a;\n        this.b = b;\n    }\n    intoRaw() {\n        let ra = VectorOps.intoRaw(this.a);\n        let rb = VectorOps.intoRaw(this.b);\n        let result = RawShape.segment(ra, rb);\n        ra.free();\n        rb.free();\n        return result;\n    }\n}\n/**\n * A shape that is a segment.\n */\nexport class Triangle extends Shape {\n    /**\n     * Creates a new triangle shape.\n     *\n     * @param a - The first point of the triangle.\n     * @param b - The second point of the triangle.\n     * @param c - The third point of the triangle.\n     */\n    constructor(a, b, c) {\n        super();\n        this.type = ShapeType.Triangle;\n        this.a = a;\n        this.b = b;\n        this.c = c;\n    }\n    intoRaw() {\n        let ra = VectorOps.intoRaw(this.a);\n        let rb = VectorOps.intoRaw(this.b);\n        let rc = VectorOps.intoRaw(this.c);\n        let result = RawShape.triangle(ra, rb, rc);\n        ra.free();\n        rb.free();\n        rc.free();\n        return result;\n    }\n}\n/**\n * A shape that is a triangle with round borders and a non-zero thickness.\n */\nexport class RoundTriangle extends Shape {\n    /**\n     * Creates a new triangle shape with round corners.\n     *\n     * @param a - The first point of the triangle.\n     * @param b - The second point of the triangle.\n     * @param c - The third point of the triangle.\n     * @param borderRadius - The radius of the borders of this triangle. In 3D,\n     *   this is also equal to half the thickness of the triangle.\n     */\n    constructor(a, b, c, borderRadius) {\n        super();\n        this.type = ShapeType.RoundTriangle;\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.borderRadius = borderRadius;\n    }\n    intoRaw() {\n        let ra = VectorOps.intoRaw(this.a);\n        let rb = VectorOps.intoRaw(this.b);\n        let rc = VectorOps.intoRaw(this.c);\n        let result = RawShape.roundTriangle(ra, rb, rc, this.borderRadius);\n        ra.free();\n        rb.free();\n        rc.free();\n        return result;\n    }\n}\n/**\n * A shape that is a triangle mesh.\n */\nexport class Polyline extends Shape {\n    /**\n     * Creates a new polyline shape.\n     *\n     * @param vertices - The coordinates of the polyline's vertices.\n     * @param indices - The indices of the polyline's segments. If this is `null` or not provided, then\n     *    the vertices are assumed to form a line strip.\n     */\n    constructor(vertices, indices) {\n        super();\n        this.type = ShapeType.Polyline;\n        this.vertices = vertices;\n        this.indices = indices !== null && indices !== void 0 ? indices : new Uint32Array(0);\n    }\n    intoRaw() {\n        return RawShape.polyline(this.vertices, this.indices);\n    }\n}\n/**\n * A shape that is a triangle mesh.\n */\nexport class TriMesh extends Shape {\n    /**\n     * Creates a new triangle mesh shape.\n     *\n     * @param vertices - The coordinates of the triangle mesh's vertices.\n     * @param indices - The indices of the triangle mesh's triangles.\n     */\n    constructor(vertices, indices, flags) {\n        super();\n        this.type = ShapeType.TriMesh;\n        this.vertices = vertices;\n        this.indices = indices;\n        this.flags = flags;\n    }\n    intoRaw() {\n        return RawShape.trimesh(this.vertices, this.indices, this.flags);\n    }\n}\n// #if DIM3\n/**\n * A shape that is a convex polygon.\n */\nexport class ConvexPolyhedron extends Shape {\n    /**\n     * Creates a new convex polygon shape.\n     *\n     * @param vertices - The coordinates of the convex polygon's vertices.\n     * @param indices - The index buffer of this convex mesh. If this is `null`\n     *   or `undefined`, the convex-hull of the input vertices will be computed\n     *   automatically. Otherwise, it will be assumed that the mesh you provide\n     *   is already convex.\n     */\n    constructor(vertices, indices) {\n        super();\n        this.type = ShapeType.ConvexPolyhedron;\n        this.vertices = vertices;\n        this.indices = indices;\n    }\n    intoRaw() {\n        if (!!this.indices) {\n            return RawShape.convexMesh(this.vertices, this.indices);\n        }\n        else {\n            return RawShape.convexHull(this.vertices);\n        }\n    }\n}\n/**\n * A shape that is a convex polygon.\n */\nexport class RoundConvexPolyhedron extends Shape {\n    /**\n     * Creates a new convex polygon shape.\n     *\n     * @param vertices - The coordinates of the convex polygon's vertices.\n     * @param indices - The index buffer of this convex mesh. If this is `null`\n     *   or `undefined`, the convex-hull of the input vertices will be computed\n     *   automatically. Otherwise, it will be assumed that the mesh you provide\n     *   is already convex.\n     * @param borderRadius - The radius of the borders of this convex polyhedron.\n     */\n    constructor(vertices, indices, borderRadius) {\n        super();\n        this.type = ShapeType.RoundConvexPolyhedron;\n        this.vertices = vertices;\n        this.indices = indices;\n        this.borderRadius = borderRadius;\n    }\n    intoRaw() {\n        if (!!this.indices) {\n            return RawShape.roundConvexMesh(this.vertices, this.indices, this.borderRadius);\n        }\n        else {\n            return RawShape.roundConvexHull(this.vertices, this.borderRadius);\n        }\n    }\n}\n/**\n * A shape that is a heightfield.\n */\nexport class Heightfield extends Shape {\n    /**\n     * Creates a new heightfield shape.\n     *\n     * @param nrows − The number of rows in the heights matrix.\n     * @param ncols - The number of columns in the heights matrix.\n     * @param heights - The heights of the heightfield along its local `y` axis,\n     *                  provided as a matrix stored in column-major order.\n     * @param scale - The dimensions of the heightfield's local `x,z` plane.\n     */\n    constructor(nrows, ncols, heights, scale, flags) {\n        super();\n        this.type = ShapeType.HeightField;\n        this.nrows = nrows;\n        this.ncols = ncols;\n        this.heights = heights;\n        this.scale = scale;\n        this.flags = flags;\n    }\n    intoRaw() {\n        let rawScale = VectorOps.intoRaw(this.scale);\n        let rawShape = RawShape.heightfield(this.nrows, this.ncols, this.heights, rawScale, this.flags);\n        rawScale.free();\n        return rawShape;\n    }\n}\n/**\n * A shape that is a 3D cylinder.\n */\nexport class Cylinder extends Shape {\n    /**\n     * Creates a new cylinder with the given radius and half-height.\n     * @param halfHeight - The balls half-height along the `y` axis.\n     * @param radius - The balls radius.\n     */\n    constructor(halfHeight, radius) {\n        super();\n        this.type = ShapeType.Cylinder;\n        this.halfHeight = halfHeight;\n        this.radius = radius;\n    }\n    intoRaw() {\n        return RawShape.cylinder(this.halfHeight, this.radius);\n    }\n}\n/**\n * A shape that is a 3D cylinder with round corners.\n */\nexport class RoundCylinder extends Shape {\n    /**\n     * Creates a new cylinder with the given radius and half-height.\n     * @param halfHeight - The balls half-height along the `y` axis.\n     * @param radius - The balls radius.\n     * @param borderRadius - The radius of the borders of this cylinder.\n     */\n    constructor(halfHeight, radius, borderRadius) {\n        super();\n        this.type = ShapeType.RoundCylinder;\n        this.borderRadius = borderRadius;\n        this.halfHeight = halfHeight;\n        this.radius = radius;\n    }\n    intoRaw() {\n        return RawShape.roundCylinder(this.halfHeight, this.radius, this.borderRadius);\n    }\n}\n/**\n * A shape that is a 3D cone.\n */\nexport class Cone extends Shape {\n    /**\n     * Creates a new cone with the given radius and half-height.\n     * @param halfHeight - The balls half-height along the `y` axis.\n     * @param radius - The balls radius.\n     */\n    constructor(halfHeight, radius) {\n        super();\n        this.type = ShapeType.Cone;\n        this.halfHeight = halfHeight;\n        this.radius = radius;\n    }\n    intoRaw() {\n        return RawShape.cone(this.halfHeight, this.radius);\n    }\n}\n/**\n * A shape that is a 3D cone with round corners.\n */\nexport class RoundCone extends Shape {\n    /**\n     * Creates a new cone with the given radius and half-height.\n     * @param halfHeight - The balls half-height along the `y` axis.\n     * @param radius - The balls radius.\n     * @param borderRadius - The radius of the borders of this cone.\n     */\n    constructor(halfHeight, radius, borderRadius) {\n        super();\n        this.type = ShapeType.RoundCone;\n        this.halfHeight = halfHeight;\n        this.radius = radius;\n        this.borderRadius = borderRadius;\n    }\n    intoRaw() {\n        return RawShape.roundCone(this.halfHeight, this.radius, this.borderRadius);\n    }\n}\n// #endif\n//# sourceMappingURL=shape.js.map","import { RawPhysicsPipeline } from \"../raw\";\nimport { VectorOps } from \"../math\";\nexport class PhysicsPipeline {\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n    constructor(raw) {\n        this.raw = raw || new RawPhysicsPipeline();\n    }\n    step(gravity, integrationParameters, islands, broadPhase, narrowPhase, bodies, colliders, impulseJoints, multibodyJoints, ccdSolver, eventQueue, hooks) {\n        let rawG = VectorOps.intoRaw(gravity);\n        if (!!eventQueue) {\n            this.raw.stepWithEvents(rawG, integrationParameters.raw, islands.raw, broadPhase.raw, narrowPhase.raw, bodies.raw, colliders.raw, impulseJoints.raw, multibodyJoints.raw, ccdSolver.raw, eventQueue.raw, hooks, !!hooks ? hooks.filterContactPair : null, !!hooks ? hooks.filterIntersectionPair : null);\n        }\n        else {\n            this.raw.step(rawG, integrationParameters.raw, islands.raw, broadPhase.raw, narrowPhase.raw, bodies.raw, colliders.raw, impulseJoints.raw, multibodyJoints.raw, ccdSolver.raw);\n        }\n        rawG.free();\n    }\n}\n//# sourceMappingURL=physics_pipeline.js.map","/**\n * Класс для управления HUD (интерфейсом в игре)\n */\nexport class HUD {\n    /**\n     * @param {HTMLElement} element - DOM элемент для отображения HUD\n     */\n    constructor(element) {\n        this.element = element;\n        \n        // Элементы HUD\n        this.healthBar = element.querySelector('#health-bar .health-value');\n        this.ammoCounter = element.querySelector('#ammo-counter');\n        this.weaponInfo = element.querySelector('#weapon-info');\n        this.statusMessages = element.querySelector('#status-messages');\n        \n        // Состояние HUD\n        this.health = 100;\n        this.ammo = 0;\n        this.weapon = 'Нет';\n        this.messages = [];\n        \n        // Таймер для удаления сообщений\n        this.messageTimer = null;\n        \n        // Инициализация\n        this.initialize();\n    }\n    \n    /**\n     * Инициализация HUD\n     */\n    initialize() {\n        // Обновляем элементы с начальными значениями, если они существуют\n        if (this.healthBar) this.updateHealthBar();\n        if (this.ammoCounter) this.updateAmmoCounter();\n        if (this.weaponInfo) this.updateWeaponInfo();\n    }\n    \n    /**\n     * Обновление HUD\n     * @param {Object} data - данные для обновления\n     */\n    update(data) {\n        // Обновляем только переданные данные\n        if (data.health !== undefined && data.health !== this.health) {\n            this.health = data.health;\n            this.updateHealthBar();\n        }\n        \n        if (data.ammo !== undefined && data.ammo !== this.ammo) {\n            this.ammo = data.ammo;\n            this.updateAmmoCounter();\n        }\n        \n        if (data.weapon !== undefined && data.weapon !== this.weapon) {\n            this.weapon = data.weapon;\n            this.updateWeaponInfo();\n        }\n    }\n    \n    /**\n     * Обновление полоски здоровья\n     */\n    updateHealthBar() {\n        // Обновляем ширину полоски здоровья\n        if (!this.healthBar) return;\n        \n        this.healthBar.style.width = `${this.health}%`;\n        \n        // Меняем цвет в зависимости от количества здоровья\n        if (this.health > 70) {\n            this.healthBar.style.backgroundColor = '#4CAF50'; // Зеленый\n        } else if (this.health > 30) {\n            this.healthBar.style.backgroundColor = '#FFC107'; // Желтый\n        } else {\n            this.healthBar.style.backgroundColor = '#F44336'; // Красный\n        }\n    }\n    \n    /**\n     * Обновление счетчика патронов\n     */\n    updateAmmoCounter() {\n        if (!this.ammoCounter) return;\n        this.ammoCounter.textContent = `${this.ammo}`;\n    }\n    \n    /**\n     * Обновление информации об оружии\n     */\n    updateWeaponInfo() {\n        if (!this.weaponInfo) return;\n        this.weaponInfo.textContent = this.weapon;\n    }\n    \n    /**\n     * Добавление сообщения в статус\n     * @param {string} message - текст сообщения\n     * @param {number} duration - длительность показа в миллисекундах\n     */\n    addStatusMessage(message, duration = 3000) {\n        // Добавляем сообщение в список\n        this.messages.push({\n            text: message,\n            timestamp: Date.now(),\n            duration\n        });\n        \n        // Обновляем отображение сообщений\n        this.updateStatusMessages();\n        \n        // Устанавливаем таймер для удаления сообщения\n        if (this.messageTimer === null) {\n            this.messageTimer = setInterval(() => {\n                this.checkMessagesTimeout();\n            }, 1000);\n        }\n    }\n    \n    /**\n     * Обновление отображения статусных сообщений\n     */\n    updateStatusMessages() {\n        if (!this.statusMessages) return;\n        \n        // Очищаем элемент\n        this.statusMessages.innerHTML = '';\n        \n        // Добавляем сообщения\n        this.messages.forEach(msg => {\n            const messageElement = document.createElement('div');\n            messageElement.className = 'status-message';\n            messageElement.textContent = msg.text;\n            \n            this.statusMessages.appendChild(messageElement);\n        });\n    }\n    \n    /**\n     * Проверка таймаута сообщений\n     */\n    checkMessagesTimeout() {\n        const now = Date.now();\n        let hasRemovedMessages = false;\n        \n        // Удаляем устаревшие сообщения\n        this.messages = this.messages.filter(msg => {\n            const isExpired = now - msg.timestamp > msg.duration;\n            if (isExpired) {\n                hasRemovedMessages = true;\n            }\n            return !isExpired;\n        });\n        \n        // Обновляем отображение, если были удалены сообщения\n        if (hasRemovedMessages) {\n            this.updateStatusMessages();\n        }\n        \n        // Останавливаем таймер, если нет сообщений\n        if (this.messages.length === 0) {\n            clearInterval(this.messageTimer);\n            this.messageTimer = null;\n        }\n    }\n    \n    /**\n     * Показать HUD\n     */\n    show() {\n        this.element.classList.remove('hidden');\n    }\n    \n    /**\n     * Скрыть HUD\n     */\n    hide() {\n        this.element.classList.add('hidden');\n    }\n}","import * as wasm from \"./rapier_wasm3d_bg.wasm\";\nexport * from \"./rapier_wasm3d_bg.js\";\nimport { __wbg_set_wasm } from \"./rapier_wasm3d_bg.js\";\n__wbg_set_wasm(wasm);","import { RawIntegrationParameters } from \"../raw\";\nexport class IntegrationParameters {\n    constructor(raw) {\n        this.raw = raw || new RawIntegrationParameters();\n    }\n    /**\n     * Free the WASM memory used by these integration parameters.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n    /**\n     * The timestep length (default: `1.0 / 60.0`)\n     */\n    get dt() {\n        return this.raw.dt;\n    }\n    /**\n     * The Error Reduction Parameter in `[0, 1]` is the proportion of\n     * the positional error to be corrected at each time step (default: `0.2`).\n     */\n    get contact_erp() {\n        return this.raw.contact_erp;\n    }\n    get lengthUnit() {\n        return this.raw.lengthUnit;\n    }\n    /**\n     * Normalized amount of penetration the engine won’t attempt to correct (default: `0.001m`).\n     *\n     * This threshold considered by the physics engine is this value multiplied by the `lengthUnit`.\n     */\n    get normalizedAllowedLinearError() {\n        return this.raw.normalizedAllowedLinearError;\n    }\n    /**\n     * The maximal normalized distance separating two objects that will generate predictive contacts (default: `0.002`).\n     *\n     * This threshold considered by the physics engine is this value multiplied by the `lengthUnit`.\n     */\n    get normalizedPredictionDistance() {\n        return this.raw.normalizedPredictionDistance;\n    }\n    /**\n     * The number of solver iterations run by the constraints solver for calculating forces (default: `4`).\n     */\n    get numSolverIterations() {\n        return this.raw.numSolverIterations;\n    }\n    /**\n     * Number of addition friction resolution iteration run during the last solver sub-step (default: `4`).\n     */\n    get numAdditionalFrictionIterations() {\n        return this.raw.numAdditionalFrictionIterations;\n    }\n    /**\n     * Number of internal Project Gauss Seidel (PGS) iterations run at each solver iteration (default: `1`).\n     */\n    get numInternalPgsIterations() {\n        return this.raw.numInternalPgsIterations;\n    }\n    /**\n     * Minimum number of dynamic bodies in each active island (default: `128`).\n     */\n    get minIslandSize() {\n        return this.raw.minIslandSize;\n    }\n    /**\n     * Maximum number of substeps performed by the  solver (default: `1`).\n     */\n    get maxCcdSubsteps() {\n        return this.raw.maxCcdSubsteps;\n    }\n    set dt(value) {\n        this.raw.dt = value;\n    }\n    set contact_natural_frequency(value) {\n        this.raw.contact_natural_frequency = value;\n    }\n    set lengthUnit(value) {\n        this.raw.lengthUnit = value;\n    }\n    set normalizedAllowedLinearError(value) {\n        this.raw.normalizedAllowedLinearError = value;\n    }\n    set normalizedPredictionDistance(value) {\n        this.raw.normalizedPredictionDistance = value;\n    }\n    /**\n     * Sets the number of solver iterations run by the constraints solver for calculating forces (default: `4`).\n     */\n    set numSolverIterations(value) {\n        this.raw.numSolverIterations = value;\n    }\n    /**\n     * Sets the number of addition friction resolution iteration run during the last solver sub-step (default: `4`).\n     */\n    set numAdditionalFrictionIterations(value) {\n        this.raw.numAdditionalFrictionIterations = value;\n    }\n    /**\n     * Sets the number of internal Project Gauss Seidel (PGS) iterations run at each solver iteration (default: `1`).\n     */\n    set numInternalPgsIterations(value) {\n        this.raw.numInternalPgsIterations = value;\n    }\n    set minIslandSize(value) {\n        this.raw.minIslandSize = value;\n    }\n    set maxCcdSubsteps(value) {\n        this.raw.maxCcdSubsteps = value;\n    }\n    switchToStandardPgsSolver() {\n        this.raw.switchToStandardPgsSolver();\n    }\n    switchToSmallStepsPgsSolver() {\n        this.raw.switchToSmallStepsPgsSolver();\n    }\n    switchToSmallStepsPgsSolverWithoutWarmstart() {\n        this.raw.switchToSmallStepsPgsSolverWithoutWarmstart();\n    }\n}\n//# sourceMappingURL=integration_parameters.js.map","import { RawEventQueue } from \"../raw\";\nimport { VectorOps } from \"../math\";\n/**\n * Flags indicating what events are enabled for colliders.\n */\nexport var ActiveEvents;\n(function (ActiveEvents) {\n    ActiveEvents[ActiveEvents[\"NONE\"] = 0] = \"NONE\";\n    /**\n     * Enable collision events.\n     */\n    ActiveEvents[ActiveEvents[\"COLLISION_EVENTS\"] = 1] = \"COLLISION_EVENTS\";\n    /**\n     * Enable contact force events.\n     */\n    ActiveEvents[ActiveEvents[\"CONTACT_FORCE_EVENTS\"] = 2] = \"CONTACT_FORCE_EVENTS\";\n})(ActiveEvents || (ActiveEvents = {}));\n/**\n * Event occurring when the sum of the magnitudes of the\n * contact forces between two colliders exceed a threshold.\n *\n * This object should **not** be stored anywhere. Its properties can only be\n * read from within the closure given to `EventHandler.drainContactForceEvents`.\n */\nexport class TempContactForceEvent {\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n    /**\n     * The first collider involved in the contact.\n     */\n    collider1() {\n        return this.raw.collider1();\n    }\n    /**\n     * The second collider involved in the contact.\n     */\n    collider2() {\n        return this.raw.collider2();\n    }\n    /**\n     * The sum of all the forces between the two colliders.\n     */\n    totalForce() {\n        return VectorOps.fromRaw(this.raw.total_force());\n    }\n    /**\n     * The sum of the magnitudes of each force between the two colliders.\n     *\n     * Note that this is **not** the same as the magnitude of `self.total_force`.\n     * Here we are summing the magnitude of all the forces, instead of taking\n     * the magnitude of their sum.\n     */\n    totalForceMagnitude() {\n        return this.raw.total_force_magnitude();\n    }\n    /**\n     * The world-space (unit) direction of the force with strongest magnitude.\n     */\n    maxForceDirection() {\n        return VectorOps.fromRaw(this.raw.max_force_direction());\n    }\n    /**\n     * The magnitude of the largest force at a contact point of this contact pair.\n     */\n    maxForceMagnitude() {\n        return this.raw.max_force_magnitude();\n    }\n}\n/**\n * A structure responsible for collecting events generated\n * by the physics engine.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `eventQueue.free()`\n * once you are done using it.\n */\nexport class EventQueue {\n    /**\n     * Creates a new event collector.\n     *\n     * @param autoDrain -setting this to `true` is strongly recommended. If true, the collector will\n     * be automatically drained before each `world.step(collector)`. If false, the collector will\n     * keep all events in memory unless it is manually drained/cleared; this may lead to unbounded use of\n     * RAM if no drain is performed.\n     */\n    constructor(autoDrain, raw) {\n        this.raw = raw || new RawEventQueue(autoDrain);\n    }\n    /**\n     * Release the WASM memory occupied by this event-queue.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n    /**\n     * Applies the given javascript closure on each collision event of this collector, then clear\n     * the internal collision event buffer.\n     *\n     * @param f - JavaScript closure applied to each collision event. The\n     * closure must take three arguments: two integers representing the handles of the colliders\n     * involved in the collision, and a boolean indicating if the collision started (true) or stopped\n     * (false).\n     */\n    drainCollisionEvents(f) {\n        this.raw.drainCollisionEvents(f);\n    }\n    /**\n     * Applies the given javascript closure on each contact force event of this collector, then clear\n     * the internal collision event buffer.\n     *\n     * @param f - JavaScript closure applied to each collision event. The\n     *            closure must take one `TempContactForceEvent` argument.\n     */\n    drainContactForceEvents(f) {\n        let event = new TempContactForceEvent();\n        this.raw.drainContactForceEvents((raw) => {\n            event.raw = raw;\n            f(event);\n            event.free();\n        });\n    }\n    /**\n     * Removes all events contained by this collector\n     */\n    clear() {\n        this.raw.clear();\n    }\n}\n//# sourceMappingURL=event_queue.js.map","// client/src/physics/rapier-integration.js\n\nimport * as RAPIER from '@dimforge/rapier3d';\n\n/**\n * Инициализация Rapier.js и возврат API\n * @returns {Promise<Object>} - модуль RAPIER после инициализации\n */\nexport async function initRapier() {\n    console.log('🛠 Инициализация Rapier 3D через модуль...');\n    await RAPIER.init();\n    console.log('✅ Rapier 3D инициализирован');\n    return RAPIER;\n}\n\n/**\n * Получение готового объекта RAPIER (если он уже инициализирован)\n */\nexport function getRapier() {\n    return RAPIER;\n}\n","import { RawIslandManager } from \"../raw\";\n/**\n * The CCD solver responsible for resolving Continuous Collision Detection.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `ccdSolver.free()`\n * once you are done using it.\n */\nexport class IslandManager {\n    /**\n     * Release the WASM memory occupied by this narrow-phase.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n    constructor(raw) {\n        this.raw = raw || new RawIslandManager();\n    }\n    /**\n     * Applies the given closure to the handle of each active rigid-bodies contained by this set.\n     *\n     * A rigid-body is active if it is not sleeping, i.e., if it moved recently.\n     *\n     * @param f - The closure to apply.\n     */\n    forEachActiveRigidBodyHandle(f) {\n        this.raw.forEachActiveRigidBodyHandle(f);\n    }\n}\n//# sourceMappingURL=island_manager.js.map","import { RawColliderSet } from \"../raw\";\nimport { Coarena } from \"../coarena\";\nimport { RotationOps, VectorOps } from \"../math\";\nimport { Collider } from \"./collider\";\n/**\n * A set of rigid bodies that can be handled by a physics pipeline.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `colliderSet.free()`\n * once you are done using it (and all the rigid-bodies it created).\n */\nexport class ColliderSet {\n    /**\n     * Release the WASM memory occupied by this collider set.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n        if (!!this.map) {\n            this.map.clear();\n        }\n        this.map = undefined;\n    }\n    constructor(raw) {\n        this.raw = raw || new RawColliderSet();\n        this.map = new Coarena();\n        // Initialize the map with the existing elements, if any.\n        if (raw) {\n            raw.forEachColliderHandle((handle) => {\n                this.map.set(handle, new Collider(this, handle, null));\n            });\n        }\n    }\n    /** @internal */\n    castClosure(f) {\n        return (handle) => {\n            if (!!f) {\n                return f(this.get(handle));\n            }\n            else {\n                return undefined;\n            }\n        };\n    }\n    /** @internal */\n    finalizeDeserialization(bodies) {\n        this.map.forEach((collider) => collider.finalizeDeserialization(bodies));\n    }\n    /**\n     * Creates a new collider and return its integer handle.\n     *\n     * @param bodies - The set of bodies where the collider's parent can be found.\n     * @param desc - The collider's description.\n     * @param parentHandle - The integer handle of the rigid-body this collider is attached to.\n     */\n    createCollider(bodies, desc, parentHandle) {\n        let hasParent = parentHandle != undefined && parentHandle != null;\n        if (hasParent && isNaN(parentHandle))\n            throw Error(\"Cannot create a collider with a parent rigid-body handle that is not a number.\");\n        let rawShape = desc.shape.intoRaw();\n        let rawTra = VectorOps.intoRaw(desc.translation);\n        let rawRot = RotationOps.intoRaw(desc.rotation);\n        let rawCom = VectorOps.intoRaw(desc.centerOfMass);\n        // #if DIM3\n        let rawPrincipalInertia = VectorOps.intoRaw(desc.principalAngularInertia);\n        let rawInertiaFrame = RotationOps.intoRaw(desc.angularInertiaLocalFrame);\n        // #endif\n        let handle = this.raw.createCollider(desc.enabled, rawShape, rawTra, rawRot, desc.massPropsMode, desc.mass, rawCom, \n        // #if DIM3\n        rawPrincipalInertia, rawInertiaFrame, \n        // #endif\n        desc.density, desc.friction, desc.restitution, desc.frictionCombineRule, desc.restitutionCombineRule, desc.isSensor, desc.collisionGroups, desc.solverGroups, desc.activeCollisionTypes, desc.activeHooks, desc.activeEvents, desc.contactForceEventThreshold, desc.contactSkin, hasParent, hasParent ? parentHandle : 0, bodies.raw);\n        rawShape.free();\n        rawTra.free();\n        rawRot.free();\n        rawCom.free();\n        // #if DIM3\n        rawPrincipalInertia.free();\n        rawInertiaFrame.free();\n        // #endif\n        let parent = hasParent ? bodies.get(parentHandle) : null;\n        let collider = new Collider(this, handle, parent, desc.shape);\n        this.map.set(handle, collider);\n        return collider;\n    }\n    /**\n     * Remove a collider from this set.\n     *\n     * @param handle - The integer handle of the collider to remove.\n     * @param bodies - The set of rigid-body containing the rigid-body the collider is attached to.\n     * @param wakeUp - If `true`, the rigid-body the removed collider is attached to will be woken-up automatically.\n     */\n    remove(handle, islands, bodies, wakeUp) {\n        this.raw.remove(handle, islands.raw, bodies.raw, wakeUp);\n        this.unmap(handle);\n    }\n    /**\n     * Internal function, do not call directly.\n     * @param handle\n     */\n    unmap(handle) {\n        this.map.delete(handle);\n    }\n    /**\n     * Gets the rigid-body with the given handle.\n     *\n     * @param handle - The handle of the rigid-body to retrieve.\n     */\n    get(handle) {\n        return this.map.get(handle);\n    }\n    /**\n     * The number of colliders on this set.\n     */\n    len() {\n        return this.map.len();\n    }\n    /**\n     * Does this set contain a collider with the given handle?\n     *\n     * @param handle - The collider handle to check.\n     */\n    contains(handle) {\n        return this.get(handle) != null;\n    }\n    /**\n     * Applies the given closure to each collider contained by this set.\n     *\n     * @param f - The closure to apply.\n     */\n    forEach(f) {\n        this.map.forEach(f);\n    }\n    /**\n     * Gets all colliders in the list.\n     *\n     * @returns collider list.\n     */\n    getAll() {\n        return this.map.getAll();\n    }\n}\n//# sourceMappingURL=collider_set.js.map","export var ActiveHooks;\n(function (ActiveHooks) {\n    ActiveHooks[ActiveHooks[\"NONE\"] = 0] = \"NONE\";\n    ActiveHooks[ActiveHooks[\"FILTER_CONTACT_PAIRS\"] = 1] = \"FILTER_CONTACT_PAIRS\";\n    ActiveHooks[ActiveHooks[\"FILTER_INTERSECTION_PAIRS\"] = 2] = \"FILTER_INTERSECTION_PAIRS\";\n    // MODIFY_SOLVER_CONTACTS = 0b0100, /* Not supported yet in JS. */\n})(ActiveHooks || (ActiveHooks = {}));\nexport var SolverFlags;\n(function (SolverFlags) {\n    SolverFlags[SolverFlags[\"EMPTY\"] = 0] = \"EMPTY\";\n    SolverFlags[SolverFlags[\"COMPUTE_IMPULSE\"] = 1] = \"COMPUTE_IMPULSE\";\n})(SolverFlags || (SolverFlags = {}));\n//# sourceMappingURL=physics_hooks.js.map","import { VectorOps } from \"../math\";\nimport { FeatureType } from \"./feature\";\n/**\n * A ray. This is a directed half-line.\n */\nexport class Ray {\n    /**\n     * Builds a ray from its origin and direction.\n     *\n     * @param origin - The ray's starting point.\n     * @param dir - The ray's direction of propagation.\n     */\n    constructor(origin, dir) {\n        this.origin = origin;\n        this.dir = dir;\n    }\n    pointAt(t) {\n        return {\n            x: this.origin.x + this.dir.x * t,\n            y: this.origin.y + this.dir.y * t,\n            // #if DIM3\n            z: this.origin.z + this.dir.z * t,\n            // #endif\n        };\n    }\n}\n/**\n * The intersection between a ray and a collider.\n */\nexport class RayIntersection {\n    constructor(timeOfImpact, normal, featureType, featureId) {\n        /**\n         * The type of the geometric feature the point was projected on.\n         */\n        this.featureType = FeatureType.Unknown;\n        /**\n         * The id of the geometric feature the point was projected on.\n         */\n        this.featureId = undefined;\n        this.timeOfImpact = timeOfImpact;\n        this.normal = normal;\n        if (featureId !== undefined)\n            this.featureId = featureId;\n        if (featureType !== undefined)\n            this.featureType = featureType;\n    }\n    static fromRaw(raw) {\n        if (!raw)\n            return null;\n        const result = new RayIntersection(raw.time_of_impact(), VectorOps.fromRaw(raw.normal()), raw.featureType(), raw.featureId());\n        raw.free();\n        return result;\n    }\n}\n/**\n * The intersection between a ray and a collider (includes the collider handle).\n */\nexport class RayColliderIntersection {\n    constructor(collider, timeOfImpact, normal, featureType, featureId) {\n        /**\n         * The type of the geometric feature the point was projected on.\n         */\n        this.featureType = FeatureType.Unknown;\n        /**\n         * The id of the geometric feature the point was projected on.\n         */\n        this.featureId = undefined;\n        this.collider = collider;\n        this.timeOfImpact = timeOfImpact;\n        this.normal = normal;\n        if (featureId !== undefined)\n            this.featureId = featureId;\n        if (featureType !== undefined)\n            this.featureType = featureType;\n    }\n    static fromRaw(colliderSet, raw) {\n        if (!raw)\n            return null;\n        const result = new RayColliderIntersection(colliderSet.get(raw.colliderHandle()), raw.time_of_impact(), VectorOps.fromRaw(raw.normal()), raw.featureType(), raw.featureId());\n        raw.free();\n        return result;\n    }\n}\n/**\n * The time of impact between a ray and a collider.\n */\nexport class RayColliderHit {\n    constructor(collider, timeOfImpact) {\n        this.collider = collider;\n        this.timeOfImpact = timeOfImpact;\n    }\n    static fromRaw(colliderSet, raw) {\n        if (!raw)\n            return null;\n        const result = new RayColliderHit(colliderSet.get(raw.colliderHandle()), raw.timeOfImpact());\n        raw.free();\n        return result;\n    }\n}\n//# sourceMappingURL=ray.js.map","import { RawCCDSolver } from \"../raw\";\n/**\n * The CCD solver responsible for resolving Continuous Collision Detection.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `ccdSolver.free()`\n * once you are done using it.\n */\nexport class CCDSolver {\n    /**\n     * Release the WASM memory occupied by this narrow-phase.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n    constructor(raw) {\n        this.raw = raw || new RawCCDSolver();\n    }\n}\n//# sourceMappingURL=ccd_solver.js.map","// client/src/core/renderer.js\n\n/**\n * Класс отвечающий за рендеринг игры с использованием Three.js\n */\nexport class Renderer {\n    /**\n     * @param {HTMLCanvasElement} canvas - DOM элемент canvas для рендеринга\n     */\n    constructor(canvas) {\n        this.canvas = canvas;\n        this.scene = null;\n        this.camera = null;\n        this.renderer = null;\n        this.lights = [];\n        this.models = {}; // Хранилище для загруженных моделей\n        this.textures = {}; // Хранилище для загруженных текстур\n        \n        // Элементы для системы видимости\n        this.visionSystem = null;\n        this.temporaryObjects = []; // Временные объекты (лучи, эффекты)\n    }\n\n    /**\n     * Настройка сцены, камеры и рендерера\n     */\n    setupScene() {\n        // Создание сцены\n        this.scene = new THREE.Scene();\n        this.scene.background = new THREE.Color(0x87CEEB); // Цвет неба\n        \n        // Создание камеры (перспективная, вид сверху)\n        const aspect = window.innerWidth / window.innerHeight;\n        this.camera = new THREE.PerspectiveCamera(75, aspect, 0.1, 1000);\n        this.camera.position.set(0, 30, 30); // Позиция над землей\n        this.camera.lookAt(0, 0, 0); // Направлена на игрока\n        \n        // Создание рендерера\n        this.renderer = new THREE.WebGLRenderer({\n            canvas: this.canvas,\n            antialias: true\n        });\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n        this.renderer.shadowMap.enabled = true;\n        \n        // Добавление освещения\n        this.setupLights();\n        \n        // Создание земли\n        this.createGround();\n        \n        // Инициализируем пустой объект для системы видимости\n        // Она будет инициализирована позже в Game.initVisionSystem()\n        this.visionSystem = null;\n        \n        // Обработчик изменения размера окна\n        window.addEventListener('resize', () => {\n            this.camera.aspect = window.innerWidth / window.innerHeight;\n            this.camera.updateProjectionMatrix();\n            this.renderer.setSize(window.innerWidth, window.innerHeight);\n        });\n    }\n    \n    /**\n     * Настройка освещения сцены\n     */\n    setupLights() {\n        // Основной направленный свет (имитация солнца)\n        const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n        directionalLight.position.set(10, 30, 10);\n        directionalLight.castShadow = true;\n        \n        // Настройка теней\n        directionalLight.shadow.mapSize.width = 2048;\n        directionalLight.shadow.mapSize.height = 2048;\n        directionalLight.shadow.camera.near = 0.5;\n        directionalLight.shadow.camera.far = 100;\n        directionalLight.shadow.camera.left = -50;\n        directionalLight.shadow.camera.right = 50;\n        directionalLight.shadow.camera.top = 50;\n        directionalLight.shadow.camera.bottom = -50;\n        \n        this.scene.add(directionalLight);\n        this.lights.push(directionalLight);\n        \n        // Рассеянный свет (чтобы тени не были слишком темными)\n        const ambientLight = new THREE.AmbientLight(0x505050, 0.7);\n        this.scene.add(ambientLight);\n        this.lights.push(ambientLight);\n    }\n    \n    /**\n     * Создание земли (простая поверхность для прототипа)\n     */\n    createGround() {\n        const groundGeometry = new THREE.PlaneGeometry(1000, 1000, 100, 100);\n        const groundMaterial = new THREE.MeshStandardMaterial({\n            color: 0x3e6539, // Зеленый цвет земли\n            roughness: 1,\n            metalness: 0\n        });\n        \n        const ground = new THREE.Mesh(groundGeometry, groundMaterial);\n        ground.rotation.x = -Math.PI / 2; // Разворот плоскости горизонтально\n        ground.position.y = -0.5;\n        ground.receiveShadow = true;\n        \n        this.scene.add(ground);\n    }\n    \n    /**\n     * Создание временного луча для визуализации выстрела\n     * @param {Object} start - начальная точка луча\n     * @param {Object} end - конечная точка луча\n     * @param {number} color - цвет луча\n     * @param {number} duration - длительность отображения в миллисекундах\n     */\n    createTemporaryBeam(start, end, color = 0xFF0000, duration = 100) {\n        // Создаем материал для луча\n        const material = new THREE.LineBasicMaterial({\n            color: color,\n            transparent: true,\n            opacity: 0.8\n        });\n        \n        // Создаем геометрию\n        const geometry = new THREE.BufferGeometry();\n        const points = [\n            new THREE.Vector3(start.x, start.y, start.z),\n            new THREE.Vector3(end.x, end.y, end.z)\n        ];\n        geometry.setFromPoints(points);\n        \n        // Создаем линию\n        const line = new THREE.Line(geometry, material);\n        this.scene.add(line);\n        \n        // Добавляем в список временных объектов\n        const tempObject = {\n            object: line,\n            endTime: Date.now() + duration\n        };\n        this.temporaryObjects.push(tempObject);\n        \n        // Устанавливаем таймер для удаления\n        setTimeout(() => {\n            this.removeTemporaryObject(tempObject);\n        }, duration);\n    }\n    \n    /**\n     * Удаление временного объекта\n     * @param {Object} tempObject - временный объект для удаления\n     */\n    removeTemporaryObject(tempObject) {\n        if (!tempObject || !tempObject.object) return;\n        \n        // Удаляем со сцены\n        this.scene.remove(tempObject.object);\n        \n        // Удаляем из списка\n        const index = this.temporaryObjects.indexOf(tempObject);\n        if (index !== -1) {\n            this.temporaryObjects.splice(index, 1);\n        }\n        \n        // Освобождаем ресурсы\n        if (tempObject.object.geometry) {\n            tempObject.object.geometry.dispose();\n        }\n        if (tempObject.object.material) {\n            tempObject.object.material.dispose();\n        }\n    }\n    \n    /**\n     * Очистка устаревших временных объектов\n     */\n    cleanTemporaryObjects() {\n        const now = Date.now();\n        \n        // Удаляем устаревшие объекты\n        this.temporaryObjects = this.temporaryObjects.filter(tempObj => {\n            if (tempObj.endTime <= now) {\n                this.scene.remove(tempObj.object);\n                \n                // Освобождаем ресурсы\n                if (tempObj.object.geometry) {\n                    tempObj.object.geometry.dispose();\n                }\n                if (tempObj.object.material) {\n                    tempObj.object.material.dispose();\n                }\n                \n                return false;\n            }\n            return true;\n        });\n    }\n    \n    /**\n     * Добавление игрока на сцену\n     * @param {Object} playerData - данные игрока\n     * @returns {THREE.Object3D} - объект игрока\n     */\n    addPlayer(playerData) {\n        // Создаем временную модель игрока (цилиндр)\n        const geometry = new THREE.CylinderGeometry(0.5, 0.5, 1.8, 8);\n        const material = new THREE.MeshStandardMaterial({\n            color: 0x1E90FF, // Синий цвет для игрока\n            roughness: 0.7\n        });\n        \n        const playerMesh = new THREE.Mesh(geometry, material);\n        playerMesh.position.copy(playerData.position);\n        playerMesh.castShadow = true;\n        playerMesh.receiveShadow = true;\n        \n        // Добавляем оружие (временное, упрощенное)\n        const weaponGeometry = new THREE.BoxGeometry(0.1, 0.1, 1);\n        const weaponMaterial = new THREE.MeshStandardMaterial({\n            color: 0x333333,\n            roughness: 0.5\n        });\n        \n        const weapon = new THREE.Mesh(weaponGeometry, weaponMaterial);\n        weapon.position.set(0.5, 0, 0.5); // Позиция относительно игрока\n        playerMesh.add(weapon);\n        \n        this.scene.add(playerMesh);\n        \n        return playerMesh;\n    }\n    \n    /**\n     * Обновление камеры для следования за игроком\n     * @param {Object} playerPosition - текущая позиция игрока\n     */\n    updateCamera(playerPosition) {\n        if (!this.camera) return;\n        \n        // Устанавливаем позицию камеры над игроком\n        this.camera.position.x = playerPosition.x;\n        this.camera.position.z = playerPosition.z + 30; // Немного сзади\n        \n        // Направляем камеру на игрока\n        this.camera.lookAt(playerPosition.x, playerPosition.y, playerPosition.z);\n    }\n    \n    /**\n     * Обновление трансформации объекта\n     * @param {THREE.Object3D} object - объект для обновления\n     * @param {Object} position - новая позиция\n     * @param {Object} rotation - новое вращение\n     */\n    updateObjectTransform(object, position, rotation) {\n        if (!object) return;\n        \n        // Обновляем позицию\n        if (position) {\n            object.position.x = position.x;\n            object.position.y = position.y;\n            object.position.z = position.z;\n        }\n        \n        // Обновляем вращение\n        if (rotation) {\n            object.rotation.y = rotation.y;\n        }\n    }\n    \n    /**\n     * Рендеринг сцены с учетом игрока\n     * @param {Object} player - объект игрока для системы видимости\n     */\n    render(player) {\n        if (!this.renderer || !this.scene || !this.camera) return;\n        \n        // Обновляем систему видимости, если она инициализирована и есть игрок\n        if (this.visionSystem && player) {\n            this.visionSystem.update();\n        }\n        \n        // Очищаем устаревшие временные объекты\n        this.cleanTemporaryObjects();\n        \n        // Рендерим сцену\n        this.renderer.render(this.scene, this.camera);\n    }\n    \n    /**\n     * Установка качества графики\n     * @param {string} quality - уровень качества ('low', 'medium', 'high')\n     */\n    setQuality(quality) {\n        if (!this.renderer) return;\n        \n        switch (quality) {\n            case 'low':\n                this.renderer.setPixelRatio(1);\n                this.renderer.shadowMap.enabled = false;\n                break;\n            case 'medium':\n                this.renderer.setPixelRatio(window.devicePixelRatio);\n                this.renderer.shadowMap.enabled = true;\n                this.renderer.shadowMap.type = THREE.PCFShadowMap;\n                break;\n            case 'high':\n                this.renderer.setPixelRatio(window.devicePixelRatio);\n                this.renderer.shadowMap.enabled = true;\n                this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n                break;\n        }\n    }\n    \n    /**\n     * Добавление предмета на сцену\n     * @param {Object} itemData - данные предмета\n     * @returns {THREE.Object3D} - объект предмета\n     */\n    addItem(itemData) {\n        // Создаем упрощенную модель предмета (в зависимости от типа)\n        let geometry, material;\n        \n        switch (itemData.type) {\n            case 'weapon':\n                geometry = new THREE.BoxGeometry(0.8, 0.3, 0.2);\n                material = new THREE.MeshStandardMaterial({ color: 0xFF5722 });\n                break;\n            case 'medkit':\n                geometry = new THREE.BoxGeometry(0.5, 0.3, 0.5);\n                material = new THREE.MeshStandardMaterial({ color: 0x4CAF50 });\n                break;\n            case 'ammo':\n                geometry = new THREE.BoxGeometry(0.3, 0.3, 0.3);\n                material = new THREE.MeshStandardMaterial({ color: 0xFFC107 });\n                break;\n            default:\n                geometry = new THREE.SphereGeometry(0.3, 8, 8);\n                material = new THREE.MeshStandardMaterial({ color: 0xCCCCCC });\n        }\n        \n        // Создаем меш\n        const itemMesh = new THREE.Mesh(geometry, material);\n        itemMesh.position.copy(itemData.position);\n        itemMesh.position.y = 0.2; // Чуть выше земли\n        itemMesh.castShadow = true;\n        itemMesh.receiveShadow = true;\n        \n        // Добавляем на сцену\n        this.scene.add(itemMesh);\n        \n        return itemMesh;\n    }\n    \n    /**\n     * Добавление NPC на сцену\n     * @param {Object} npcData - данные NPC\n     * @returns {THREE.Object3D} - объект NPC\n     */\n    addNPC(npcData) {\n        // Создаем модель NPC (цилиндр)\n        const geometry = new THREE.CylinderGeometry(0.5, 0.5, 1.8, 8);\n        const material = new THREE.MeshStandardMaterial({\n            color: npcData.type === 'enemy' ? 0xFF0000 : 0x00FF00,\n            roughness: 0.7\n        });\n        \n        const npcMesh = new THREE.Mesh(geometry, material);\n        npcMesh.position.copy(npcData.position);\n        npcMesh.castShadow = true;\n        npcMesh.receiveShadow = true;\n        \n        this.scene.add(npcMesh);\n        \n        return npcMesh;\n    }\n}","import { VectorOps } from \"../math\";\nimport { FeatureType } from \"./feature\";\n/**\n * The projection of a point on a collider.\n */\nexport class PointProjection {\n    constructor(point, isInside) {\n        this.point = point;\n        this.isInside = isInside;\n    }\n    static fromRaw(raw) {\n        if (!raw)\n            return null;\n        const result = new PointProjection(VectorOps.fromRaw(raw.point()), raw.isInside());\n        raw.free();\n        return result;\n    }\n}\n/**\n * The projection of a point on a collider (includes the collider handle).\n */\nexport class PointColliderProjection {\n    constructor(collider, point, isInside, featureType, featureId) {\n        /**\n         * The type of the geometric feature the point was projected on.\n         */\n        this.featureType = FeatureType.Unknown;\n        /**\n         * The id of the geometric feature the point was projected on.\n         */\n        this.featureId = undefined;\n        this.collider = collider;\n        this.point = point;\n        this.isInside = isInside;\n        if (featureId !== undefined)\n            this.featureId = featureId;\n        if (featureType !== undefined)\n            this.featureType = featureType;\n    }\n    static fromRaw(colliderSet, raw) {\n        if (!raw)\n            return null;\n        const result = new PointColliderProjection(colliderSet.get(raw.colliderHandle()), VectorOps.fromRaw(raw.point()), raw.isInside(), raw.featureType(), raw.featureId());\n        raw.free();\n        return result;\n    }\n}\n//# sourceMappingURL=point.js.map","import { BroadPhase, ColliderSet, NarrowPhase, } from \"../geometry\";\nimport { CCDSolver, IntegrationParameters, IslandManager, ImpulseJointSet, MultibodyJointSet, RigidBodySet, } from \"../dynamics\";\nimport { VectorOps } from \"../math\";\nimport { PhysicsPipeline } from \"./physics_pipeline\";\nimport { QueryPipeline } from \"./query_pipeline\";\nimport { SerializationPipeline } from \"./serialization_pipeline\";\nimport { DebugRenderBuffers, DebugRenderPipeline } from \"./debug_render_pipeline\";\nimport { KinematicCharacterController, PidController, } from \"../control\";\n// #if DIM3\nimport { DynamicRayCastVehicleController } from \"../control\";\n// #endif\n/**\n * The physics world.\n *\n * This contains all the data-structures necessary for creating and simulating\n * bodies with contacts, joints, and external forces.\n */\nexport class World {\n    // #endif\n    /**\n     * Release the WASM memory occupied by this physics world.\n     *\n     * All the fields of this physics world will be freed as well,\n     * so there is no need to call their `.free()` methods individually.\n     */\n    free() {\n        this.integrationParameters.free();\n        this.islands.free();\n        this.broadPhase.free();\n        this.narrowPhase.free();\n        this.bodies.free();\n        this.colliders.free();\n        this.impulseJoints.free();\n        this.multibodyJoints.free();\n        this.ccdSolver.free();\n        this.queryPipeline.free();\n        this.physicsPipeline.free();\n        this.serializationPipeline.free();\n        this.debugRenderPipeline.free();\n        this.characterControllers.forEach((controller) => controller.free());\n        this.pidControllers.forEach((controller) => controller.free());\n        // #if DIM3\n        this.vehicleControllers.forEach((controller) => controller.free());\n        // #endif\n        this.integrationParameters = undefined;\n        this.islands = undefined;\n        this.broadPhase = undefined;\n        this.narrowPhase = undefined;\n        this.bodies = undefined;\n        this.colliders = undefined;\n        this.ccdSolver = undefined;\n        this.impulseJoints = undefined;\n        this.multibodyJoints = undefined;\n        this.queryPipeline = undefined;\n        this.physicsPipeline = undefined;\n        this.serializationPipeline = undefined;\n        this.debugRenderPipeline = undefined;\n        this.characterControllers = undefined;\n        this.pidControllers = undefined;\n        // #if DIM3\n        this.vehicleControllers = undefined;\n        // #endif\n    }\n    constructor(gravity, rawIntegrationParameters, rawIslands, rawBroadPhase, rawNarrowPhase, rawBodies, rawColliders, rawImpulseJoints, rawMultibodyJoints, rawCCDSolver, rawQueryPipeline, rawPhysicsPipeline, rawSerializationPipeline, rawDebugRenderPipeline) {\n        this.gravity = gravity;\n        this.integrationParameters = new IntegrationParameters(rawIntegrationParameters);\n        this.islands = new IslandManager(rawIslands);\n        this.broadPhase = new BroadPhase(rawBroadPhase);\n        this.narrowPhase = new NarrowPhase(rawNarrowPhase);\n        this.bodies = new RigidBodySet(rawBodies);\n        this.colliders = new ColliderSet(rawColliders);\n        this.impulseJoints = new ImpulseJointSet(rawImpulseJoints);\n        this.multibodyJoints = new MultibodyJointSet(rawMultibodyJoints);\n        this.ccdSolver = new CCDSolver(rawCCDSolver);\n        this.queryPipeline = new QueryPipeline(rawQueryPipeline);\n        this.physicsPipeline = new PhysicsPipeline(rawPhysicsPipeline);\n        this.serializationPipeline = new SerializationPipeline(rawSerializationPipeline);\n        this.debugRenderPipeline = new DebugRenderPipeline(rawDebugRenderPipeline);\n        this.characterControllers = new Set();\n        this.pidControllers = new Set();\n        // #if DIM3\n        this.vehicleControllers = new Set();\n        // #endif\n        this.impulseJoints.finalizeDeserialization(this.bodies);\n        this.bodies.finalizeDeserialization(this.colliders);\n        this.colliders.finalizeDeserialization(this.bodies);\n    }\n    static fromRaw(raw) {\n        if (!raw)\n            return null;\n        return new World(VectorOps.fromRaw(raw.takeGravity()), raw.takeIntegrationParameters(), raw.takeIslandManager(), raw.takeBroadPhase(), raw.takeNarrowPhase(), raw.takeBodies(), raw.takeColliders(), raw.takeImpulseJoints(), raw.takeMultibodyJoints());\n    }\n    /**\n     * Takes a snapshot of this world.\n     *\n     * Use `World.restoreSnapshot` to create a new physics world with a state identical to\n     * the state when `.takeSnapshot()` is called.\n     */\n    takeSnapshot() {\n        return this.serializationPipeline.serializeAll(this.gravity, this.integrationParameters, this.islands, this.broadPhase, this.narrowPhase, this.bodies, this.colliders, this.impulseJoints, this.multibodyJoints);\n    }\n    /**\n     * Creates a new physics world from a snapshot.\n     *\n     * This new physics world will be an identical copy of the snapshoted physics world.\n     */\n    static restoreSnapshot(data) {\n        let deser = new SerializationPipeline();\n        return deser.deserializeAll(data);\n    }\n    /**\n     * Computes all the lines (and their colors) needed to render the scene.\n     */\n    debugRender() {\n        this.debugRenderPipeline.render(this.bodies, this.colliders, this.impulseJoints, this.multibodyJoints, this.narrowPhase);\n        return new DebugRenderBuffers(this.debugRenderPipeline.vertices, this.debugRenderPipeline.colors);\n    }\n    /**\n     * Advance the simulation by one time step.\n     *\n     * All events generated by the physics engine are ignored.\n     *\n     * @param EventQueue - (optional) structure responsible for collecting\n     *   events generated by the physics engine.\n     */\n    step(eventQueue, hooks) {\n        this.physicsPipeline.step(this.gravity, this.integrationParameters, this.islands, this.broadPhase, this.narrowPhase, this.bodies, this.colliders, this.impulseJoints, this.multibodyJoints, this.ccdSolver, eventQueue, hooks);\n        this.queryPipeline.update(this.colliders);\n    }\n    /**\n     * Update colliders positions after rigid-bodies moved.\n     *\n     * When a rigid-body moves, the positions of the colliders attached to it need to be updated. This update is\n     * generally automatically done at the beginning and the end of each simulation step with World.step.\n     * If the positions need to be updated without running a simulation step this method can be called manually.\n     */\n    propagateModifiedBodyPositionsToColliders() {\n        this.bodies.raw.propagateModifiedBodyPositionsToColliders(this.colliders.raw);\n    }\n    /**\n     * Ensure subsequent scene queries take into account the collider positions set before this method is called.\n     *\n     * This does not step the physics simulation forward.\n     */\n    updateSceneQueries() {\n        this.propagateModifiedBodyPositionsToColliders();\n        this.queryPipeline.update(this.colliders);\n    }\n    /**\n     * The current simulation timestep.\n     */\n    get timestep() {\n        return this.integrationParameters.dt;\n    }\n    /**\n     * Sets the new simulation timestep.\n     *\n     * The simulation timestep governs by how much the physics state of the world will\n     * be integrated. A simulation timestep should:\n     * - be as small as possible. Typical values evolve around 0.016 (assuming the chosen unit is milliseconds,\n     * corresponds to the time between two frames of a game running at 60FPS).\n     * - not vary too much during the course of the simulation. A timestep with large variations may\n     * cause instabilities in the simulation.\n     *\n     * @param dt - The timestep length, in seconds.\n     */\n    set timestep(dt) {\n        this.integrationParameters.dt = dt;\n    }\n    /**\n     * The approximate size of most dynamic objects in the scene.\n     *\n     * See the documentation of the `World.lengthUnit` setter for further details.\n     */\n    get lengthUnit() {\n        return this.integrationParameters.lengthUnit;\n    }\n    /**\n     * The approximate size of most dynamic objects in the scene.\n     *\n     * This value is used internally to estimate some length-based tolerance. In particular, the\n     * values `IntegrationParameters.allowedLinearError`,\n     * `IntegrationParameters.maxPenetrationCorrection`,\n     * `IntegrationParameters.predictionDistance`, `RigidBodyActivation.linearThreshold`\n     * are scaled by this value implicitly.\n     *\n     * This value can be understood as the number of units-per-meter in your physical world compared\n     * to a human-sized world in meter. For example, in a 2d game, if your typical object size is 100\n     * pixels, set the `[`Self::length_unit`]` parameter to 100.0. The physics engine will interpret\n     * it as if 100 pixels is equivalent to 1 meter in its various internal threshold.\n     * (default `1.0`).\n     */\n    set lengthUnit(unitsPerMeter) {\n        this.integrationParameters.lengthUnit = unitsPerMeter;\n    }\n    /**\n     * The number of solver iterations run by the constraints solver for calculating forces (default: `4`).\n     */\n    get numSolverIterations() {\n        return this.integrationParameters.numSolverIterations;\n    }\n    /**\n     * Sets the number of solver iterations run by the constraints solver for calculating forces (default: `4`).\n     *\n     * The greater this value is, the most rigid and realistic the physics simulation will be.\n     * However a greater number of iterations is more computationally intensive.\n     *\n     * @param niter - The new number of solver iterations.\n     */\n    set numSolverIterations(niter) {\n        this.integrationParameters.numSolverIterations = niter;\n    }\n    /**\n     * Number of addition friction resolution iteration run during the last solver sub-step (default: `4`).\n     */\n    get numAdditionalFrictionIterations() {\n        return this.integrationParameters.numAdditionalFrictionIterations;\n    }\n    /**\n     * Sets the number of addition friction resolution iteration run during the last solver sub-step (default: `4`).\n     *\n     * The greater this value is, the most realistic friction will be.\n     * However a greater number of iterations is more computationally intensive.\n     *\n     * @param niter - The new number of additional friction iterations.\n     */\n    set numAdditionalFrictionIterations(niter) {\n        this.integrationParameters.numAdditionalFrictionIterations = niter;\n    }\n    /**\n     * Number of internal Project Gauss Seidel (PGS) iterations run at each solver iteration (default: `1`).\n     */\n    get numInternalPgsIterations() {\n        return this.integrationParameters.numInternalPgsIterations;\n    }\n    /**\n     * Sets the Number of internal Project Gauss Seidel (PGS) iterations run at each solver iteration (default: `1`).\n     *\n     * Increasing this parameter will improve stability of the simulation. It will have a lesser effect than\n     * increasing `numSolverIterations` but is also less computationally expensive.\n     *\n     * @param niter - The new number of internal PGS iterations.\n     */\n    set numInternalPgsIterations(niter) {\n        this.integrationParameters.numInternalPgsIterations = niter;\n    }\n    /// Configures the integration parameters to match the old PGS solver\n    /// from Rapier JS version <= 0.11.\n    ///\n    /// This solver was slightly faster than the new one but resulted\n    /// in less stable joints and worse convergence rates.\n    ///\n    /// This should only be used for comparison purpose or if you are\n    /// experiencing problems with the new solver.\n    ///\n    /// NOTE: this does not affect any `RigidBody.additional_solver_iterations` that will\n    ///       still create solver iterations based on the new \"small-steps\" PGS solver.\n    switchToStandardPgsSolver() {\n        this.integrationParameters.switchToStandardPgsSolver();\n    }\n    /// Configures the integration parameters to match the new \"small-steps\" PGS solver\n    /// from Rapier version >= 0.12.\n    ///\n    /// The \"small-steps\" PGS solver is the default one when creating the physics world. So\n    /// calling this function is generally not needed unless `World.switch_to_standard_pgs_solver`\n    /// was called.\n    ///\n    /// This solver results in more stable joints and significantly better convergence\n    /// rates but is slightly slower in its default settings.\n    switchToSmallStepsPgsSolver() {\n        this.integrationParameters.switchToSmallStepsPgsSolver();\n    }\n    /// Configures the integration parameters to match the new \"small-steps\" PGS solver\n    /// from Rapier version >= 0.12. Warmstarting is disabled.\n    ///\n    /// The \"small-steps\" PGS solver is the default one when creating the physics world. So\n    /// calling this function is generally not needed unless `World.switch_to_standard_pgs_solver`\n    /// was called.\n    ///\n    /// This solver results in more stable joints and significantly better convergence\n    /// rates but is slightly slower in its default settings.\n    switchToSmallStepsPgsSolverWithoutWarmstart() {\n        this.integrationParameters.switchToSmallStepsPgsSolverWithoutWarmstart();\n    }\n    /**\n     * Creates a new rigid-body from the given rigid-body descriptor.\n     *\n     * @param body - The description of the rigid-body to create.\n     */\n    createRigidBody(body) {\n        return this.bodies.createRigidBody(this.colliders, body);\n    }\n    /**\n     * Creates a new character controller.\n     *\n     * @param offset - The artificial gap added between the character’s chape and its environment.\n     */\n    createCharacterController(offset) {\n        let controller = new KinematicCharacterController(offset, this.integrationParameters, this.bodies, this.colliders, this.queryPipeline);\n        this.characterControllers.add(controller);\n        return controller;\n    }\n    /**\n     * Removes a character controller from this world.\n     *\n     * @param controller - The character controller to remove.\n     */\n    removeCharacterController(controller) {\n        this.characterControllers.delete(controller);\n        controller.free();\n    }\n    /**\n     * Creates a new PID (Proportional-Integral-Derivative) controller.\n     *\n     * @param kp - The Proportional gain applied to the instantaneous linear position errors.\n     *             This is usually set to a multiple of the inverse of simulation step time\n     *             (e.g. `60` if the delta-time is `1.0 / 60.0`).\n     * @param ki - The linear gain applied to the Integral part of the PID controller.\n     * @param kd - The Derivative gain applied to the instantaneous linear velocity errors.\n     *             This is usually set to a value in `[0.0, 1.0]` where `0.0` implies no damping\n     *             (no correction of velocity errors) and `1.0` implies complete damping (velocity errors\n     *             are corrected in a single simulation step).\n     * @param axes - The axes affected by this controller.\n     *               Only coordinate axes with a bit flags set to `true` will be taken into\n     *               account when calculating the errors and corrections.\n     */\n    createPidController(kp, ki, kd, axes) {\n        let controller = new PidController(this.integrationParameters, this.bodies, kp, ki, kd, axes);\n        this.pidControllers.add(controller);\n        return controller;\n    }\n    /**\n     * Removes a PID controller from this world.\n     *\n     * @param controller - The PID controller to remove.\n     */\n    removePidController(controller) {\n        this.pidControllers.delete(controller);\n        controller.free();\n    }\n    // #if DIM3\n    /**\n     * Creates a new vehicle controller.\n     *\n     * @param chassis - The rigid-body used as the chassis of the vehicle controller. When the vehicle\n     *                  controller is updated, it will change directly the rigid-body’s velocity. This\n     *                  rigid-body must be a dynamic or kinematic-velocity-based rigid-body.\n     */\n    createVehicleController(chassis) {\n        let controller = new DynamicRayCastVehicleController(chassis, this.bodies, this.colliders, this.queryPipeline);\n        this.vehicleControllers.add(controller);\n        return controller;\n    }\n    /**\n     * Removes a vehicle controller from this world.\n     *\n     * @param controller - The vehicle controller to remove.\n     */\n    removeVehicleController(controller) {\n        this.vehicleControllers.delete(controller);\n        controller.free();\n    }\n    // #endif\n    /**\n     * Creates a new collider.\n     *\n     * @param desc - The description of the collider.\n     * @param parent - The rigid-body this collider is attached to.\n     */\n    createCollider(desc, parent) {\n        let parentHandle = parent ? parent.handle : undefined;\n        return this.colliders.createCollider(this.bodies, desc, parentHandle);\n    }\n    /**\n     * Creates a new impulse joint from the given joint descriptor.\n     *\n     * @param params - The description of the joint to create.\n     * @param parent1 - The first rigid-body attached to this joint.\n     * @param parent2 - The second rigid-body attached to this joint.\n     * @param wakeUp - Should the attached rigid-bodies be awakened?\n     */\n    createImpulseJoint(params, parent1, parent2, wakeUp) {\n        return this.impulseJoints.createJoint(this.bodies, params, parent1.handle, parent2.handle, wakeUp);\n    }\n    /**\n     * Creates a new multibody joint from the given joint descriptor.\n     *\n     * @param params - The description of the joint to create.\n     * @param parent1 - The first rigid-body attached to this joint.\n     * @param parent2 - The second rigid-body attached to this joint.\n     * @param wakeUp - Should the attached rigid-bodies be awakened?\n     */\n    createMultibodyJoint(params, parent1, parent2, wakeUp) {\n        return this.multibodyJoints.createJoint(params, parent1.handle, parent2.handle, wakeUp);\n    }\n    /**\n     * Retrieves a rigid-body from its handle.\n     *\n     * @param handle - The integer handle of the rigid-body to retrieve.\n     */\n    getRigidBody(handle) {\n        return this.bodies.get(handle);\n    }\n    /**\n     * Retrieves a collider from its handle.\n     *\n     * @param handle - The integer handle of the collider to retrieve.\n     */\n    getCollider(handle) {\n        return this.colliders.get(handle);\n    }\n    /**\n     * Retrieves an impulse joint from its handle.\n     *\n     * @param handle - The integer handle of the impulse joint to retrieve.\n     */\n    getImpulseJoint(handle) {\n        return this.impulseJoints.get(handle);\n    }\n    /**\n     * Retrieves an multibody joint from its handle.\n     *\n     * @param handle - The integer handle of the multibody joint to retrieve.\n     */\n    getMultibodyJoint(handle) {\n        return this.multibodyJoints.get(handle);\n    }\n    /**\n     * Removes the given rigid-body from this physics world.\n     *\n     * This will remove this rigid-body as well as all its attached colliders and joints.\n     * Every other bodies touching or attached by joints to this rigid-body will be woken-up.\n     *\n     * @param body - The rigid-body to remove.\n     */\n    removeRigidBody(body) {\n        if (this.bodies) {\n            this.bodies.remove(body.handle, this.islands, this.colliders, this.impulseJoints, this.multibodyJoints);\n        }\n    }\n    /**\n     * Removes the given collider from this physics world.\n     *\n     * @param collider - The collider to remove.\n     * @param wakeUp - If set to `true`, the rigid-body this collider is attached to will be awaken.\n     */\n    removeCollider(collider, wakeUp) {\n        if (this.colliders) {\n            this.colliders.remove(collider.handle, this.islands, this.bodies, wakeUp);\n        }\n    }\n    /**\n     * Removes the given impulse joint from this physics world.\n     *\n     * @param joint - The impulse joint to remove.\n     * @param wakeUp - If set to `true`, the rigid-bodies attached by this joint will be awaken.\n     */\n    removeImpulseJoint(joint, wakeUp) {\n        if (this.impulseJoints) {\n            this.impulseJoints.remove(joint.handle, wakeUp);\n        }\n    }\n    /**\n     * Removes the given multibody joint from this physics world.\n     *\n     * @param joint - The multibody joint to remove.\n     * @param wakeUp - If set to `true`, the rigid-bodies attached by this joint will be awaken.\n     */\n    removeMultibodyJoint(joint, wakeUp) {\n        if (this.impulseJoints) {\n            this.multibodyJoints.remove(joint.handle, wakeUp);\n        }\n    }\n    /**\n     * Applies the given closure to each collider managed by this physics world.\n     *\n     * @param f(collider) - The function to apply to each collider managed by this physics world. Called as `f(collider)`.\n     */\n    forEachCollider(f) {\n        this.colliders.forEach(f);\n    }\n    /**\n     * Applies the given closure to each rigid-body managed by this physics world.\n     *\n     * @param f(body) - The function to apply to each rigid-body managed by this physics world. Called as `f(collider)`.\n     */\n    forEachRigidBody(f) {\n        this.bodies.forEach(f);\n    }\n    /**\n     * Applies the given closure to each active rigid-body managed by this physics world.\n     *\n     * After a short time of inactivity, a rigid-body is automatically deactivated (\"asleep\") by\n     * the physics engine in order to save computational power. A sleeping rigid-body never moves\n     * unless it is moved manually by the user.\n     *\n     * @param f - The function to apply to each active rigid-body managed by this physics world. Called as `f(collider)`.\n     */\n    forEachActiveRigidBody(f) {\n        this.bodies.forEachActiveRigidBody(this.islands, f);\n    }\n    /**\n     * Find the closest intersection between a ray and the physics world.\n     *\n     * @param ray - The ray to cast.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the length of the ray to `ray.dir.norm() * maxToi`.\n     * @param solid - If `false` then the ray will attempt to hit the boundary of a shape, even if its\n     *   origin already lies inside of a shape. In other terms, `true` implies that all shapes are plain,\n     *   whereas `false` implies that all shapes are hollow for this ray-cast.\n     * @param groups - Used to filter the colliders that can or cannot be hit by the ray.\n     * @param filter - The callback to filter out which collider will be hit.\n     */\n    castRay(ray, maxToi, solid, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        return this.queryPipeline.castRay(this.bodies, this.colliders, ray, maxToi, solid, filterFlags, filterGroups, filterExcludeCollider ? filterExcludeCollider.handle : null, filterExcludeRigidBody ? filterExcludeRigidBody.handle : null, this.colliders.castClosure(filterPredicate));\n    }\n    /**\n     * Find the closest intersection between a ray and the physics world.\n     *\n     * This also computes the normal at the hit point.\n     * @param ray - The ray to cast.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the length of the ray to `ray.dir.norm() * maxToi`.\n     * @param solid - If `false` then the ray will attempt to hit the boundary of a shape, even if its\n     *   origin already lies inside of a shape. In other terms, `true` implies that all shapes are plain,\n     *   whereas `false` implies that all shapes are hollow for this ray-cast.\n     * @param groups - Used to filter the colliders that can or cannot be hit by the ray.\n     */\n    castRayAndGetNormal(ray, maxToi, solid, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        return this.queryPipeline.castRayAndGetNormal(this.bodies, this.colliders, ray, maxToi, solid, filterFlags, filterGroups, filterExcludeCollider ? filterExcludeCollider.handle : null, filterExcludeRigidBody ? filterExcludeRigidBody.handle : null, this.colliders.castClosure(filterPredicate));\n    }\n    /**\n     * Cast a ray and collects all the intersections between a ray and the scene.\n     *\n     * @param ray - The ray to cast.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the length of the ray to `ray.dir.norm() * maxToi`.\n     * @param solid - If `false` then the ray will attempt to hit the boundary of a shape, even if its\n     *   origin already lies inside of a shape. In other terms, `true` implies that all shapes are plain,\n     *   whereas `false` implies that all shapes are hollow for this ray-cast.\n     * @param groups - Used to filter the colliders that can or cannot be hit by the ray.\n     * @param callback - The callback called once per hit (in no particular order) between a ray and a collider.\n     *   If this callback returns `false`, then the cast will stop and no further hits will be detected/reported.\n     */\n    intersectionsWithRay(ray, maxToi, solid, callback, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        this.queryPipeline.intersectionsWithRay(this.bodies, this.colliders, ray, maxToi, solid, callback, filterFlags, filterGroups, filterExcludeCollider ? filterExcludeCollider.handle : null, filterExcludeRigidBody ? filterExcludeRigidBody.handle : null, this.colliders.castClosure(filterPredicate));\n    }\n    /**\n     * Gets the handle of up to one collider intersecting the given shape.\n     *\n     * @param shapePos - The position of the shape used for the intersection test.\n     * @param shapeRot - The orientation of the shape used for the intersection test.\n     * @param shape - The shape used for the intersection test.\n     * @param groups - The bit groups and filter associated to the ray, in order to only\n     *   hit the colliders with collision groups compatible with the ray's group.\n     */\n    intersectionWithShape(shapePos, shapeRot, shape, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        let handle = this.queryPipeline.intersectionWithShape(this.bodies, this.colliders, shapePos, shapeRot, shape, filterFlags, filterGroups, filterExcludeCollider ? filterExcludeCollider.handle : null, filterExcludeRigidBody ? filterExcludeRigidBody.handle : null, this.colliders.castClosure(filterPredicate));\n        return handle != null ? this.colliders.get(handle) : null;\n    }\n    /**\n     * Find the projection of a point on the closest collider.\n     *\n     * @param point - The point to project.\n     * @param solid - If this is set to `true` then the collider shapes are considered to\n     *   be plain (if the point is located inside of a plain shape, its projection is the point\n     *   itself). If it is set to `false` the collider shapes are considered to be hollow\n     *   (if the point is located inside of an hollow shape, it is projected on the shape's\n     *   boundary).\n     * @param groups - The bit groups and filter associated to the point to project, in order to only\n     *   project on colliders with collision groups compatible with the ray's group.\n     */\n    projectPoint(point, solid, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        return this.queryPipeline.projectPoint(this.bodies, this.colliders, point, solid, filterFlags, filterGroups, filterExcludeCollider ? filterExcludeCollider.handle : null, filterExcludeRigidBody ? filterExcludeRigidBody.handle : null, this.colliders.castClosure(filterPredicate));\n    }\n    /**\n     * Find the projection of a point on the closest collider.\n     *\n     * @param point - The point to project.\n     * @param groups - The bit groups and filter associated to the point to project, in order to only\n     *   project on colliders with collision groups compatible with the ray's group.\n     */\n    projectPointAndGetFeature(point, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        return this.queryPipeline.projectPointAndGetFeature(this.bodies, this.colliders, point, filterFlags, filterGroups, filterExcludeCollider ? filterExcludeCollider.handle : null, filterExcludeRigidBody ? filterExcludeRigidBody.handle : null, this.colliders.castClosure(filterPredicate));\n    }\n    /**\n     * Find all the colliders containing the given point.\n     *\n     * @param point - The point used for the containment test.\n     * @param groups - The bit groups and filter associated to the point to test, in order to only\n     *   test on colliders with collision groups compatible with the ray's group.\n     * @param callback - A function called with the handles of each collider with a shape\n     *   containing the `point`.\n     */\n    intersectionsWithPoint(point, callback, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        this.queryPipeline.intersectionsWithPoint(this.bodies, this.colliders, point, this.colliders.castClosure(callback), filterFlags, filterGroups, filterExcludeCollider ? filterExcludeCollider.handle : null, filterExcludeRigidBody ? filterExcludeRigidBody.handle : null, this.colliders.castClosure(filterPredicate));\n    }\n    /**\n     * Casts a shape at a constant linear velocity and retrieve the first collider it hits.\n     * This is similar to ray-casting except that we are casting a whole shape instead of\n     * just a point (the ray origin).\n     *\n     * @param shapePos - The initial position of the shape to cast.\n     * @param shapeRot - The initial rotation of the shape to cast.\n     * @param shapeVel - The constant velocity of the shape to cast (i.e. the cast direction).\n     * @param shape - The shape to cast.\n     * @param targetDistance − If the shape moves closer to this distance from a collider, a hit\n     *                         will be returned.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the distance traveled by the shape to `shapeVel.norm() * maxToi`.\n     * @param stopAtPenetration - If set to `false`, the linear shape-cast won’t immediately stop if\n     *   the shape is penetrating another shape at its starting point **and** its trajectory is such\n     *   that it’s on a path to exit that penetration state.\n     * @param groups - The bit groups and filter associated to the shape to cast, in order to only\n     *   test on colliders with collision groups compatible with this group.\n     */\n    castShape(shapePos, shapeRot, shapeVel, shape, targetDistance, maxToi, stopAtPenetration, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        return this.queryPipeline.castShape(this.bodies, this.colliders, shapePos, shapeRot, shapeVel, shape, targetDistance, maxToi, stopAtPenetration, filterFlags, filterGroups, filterExcludeCollider ? filterExcludeCollider.handle : null, filterExcludeRigidBody ? filterExcludeRigidBody.handle : null, this.colliders.castClosure(filterPredicate));\n    }\n    /**\n     * Retrieve all the colliders intersecting the given shape.\n     *\n     * @param shapePos - The position of the shape to test.\n     * @param shapeRot - The orientation of the shape to test.\n     * @param shape - The shape to test.\n     * @param groups - The bit groups and filter associated to the shape to test, in order to only\n     *   test on colliders with collision groups compatible with this group.\n     * @param callback - A function called with the handles of each collider intersecting the `shape`.\n     */\n    intersectionsWithShape(shapePos, shapeRot, shape, callback, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        this.queryPipeline.intersectionsWithShape(this.bodies, this.colliders, shapePos, shapeRot, shape, this.colliders.castClosure(callback), filterFlags, filterGroups, filterExcludeCollider ? filterExcludeCollider.handle : null, filterExcludeRigidBody ? filterExcludeRigidBody.handle : null, this.colliders.castClosure(filterPredicate));\n    }\n    /**\n     * Finds the handles of all the colliders with an AABB intersecting the given AABB.\n     *\n     * @param aabbCenter - The center of the AABB to test.\n     * @param aabbHalfExtents - The half-extents of the AABB to test.\n     * @param callback - The callback that will be called with the handles of all the colliders\n     *                   currently intersecting the given AABB.\n     */\n    collidersWithAabbIntersectingAabb(aabbCenter, aabbHalfExtents, callback) {\n        this.queryPipeline.collidersWithAabbIntersectingAabb(aabbCenter, aabbHalfExtents, this.colliders.castClosure(callback));\n    }\n    /**\n     * Enumerates all the colliders potentially in contact with the given collider.\n     *\n     * @param collider1 - The second collider involved in the contact.\n     * @param f - Closure that will be called on each collider that is in contact with `collider1`.\n     */\n    contactPairsWith(collider1, f) {\n        this.narrowPhase.contactPairsWith(collider1.handle, this.colliders.castClosure(f));\n    }\n    /**\n     * Enumerates all the colliders intersecting the given colliders, assuming one of them\n     * is a sensor.\n     */\n    intersectionPairsWith(collider1, f) {\n        this.narrowPhase.intersectionPairsWith(collider1.handle, this.colliders.castClosure(f));\n    }\n    /**\n     * Iterates through all the contact manifolds between the given pair of colliders.\n     *\n     * @param collider1 - The first collider involved in the contact.\n     * @param collider2 - The second collider involved in the contact.\n     * @param f - Closure that will be called on each contact manifold between the two colliders. If the second argument\n     *            passed to this closure is `true`, then the contact manifold data is flipped, i.e., methods like `localNormal1`\n     *            actually apply to the `collider2` and fields like `localNormal2` apply to the `collider1`.\n     */\n    contactPair(collider1, collider2, f) {\n        this.narrowPhase.contactPair(collider1.handle, collider2.handle, f);\n    }\n    /**\n     * Returns `true` if `collider1` and `collider2` intersect and at least one of them is a sensor.\n     * @param collider1 − The first collider involved in the intersection.\n     * @param collider2 − The second collider involved in the intersection.\n     */\n    intersectionPair(collider1, collider2) {\n        return this.narrowPhase.intersectionPair(collider1.handle, collider2.handle);\n    }\n}\n//# sourceMappingURL=world.js.map","import { RawRigidBodySet } from \"../raw\";\nimport { Coarena } from \"../coarena\";\nimport { VectorOps, RotationOps } from \"../math\";\nimport { RigidBody, } from \"./rigid_body\";\n/**\n * A set of rigid bodies that can be handled by a physics pipeline.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `rigidBodySet.free()`\n * once you are done using it (and all the rigid-bodies it created).\n */\nexport class RigidBodySet {\n    /**\n     * Release the WASM memory occupied by this rigid-body set.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n        if (!!this.map) {\n            this.map.clear();\n        }\n        this.map = undefined;\n    }\n    constructor(raw) {\n        this.raw = raw || new RawRigidBodySet();\n        this.map = new Coarena();\n        // deserialize\n        if (raw) {\n            raw.forEachRigidBodyHandle((handle) => {\n                this.map.set(handle, new RigidBody(raw, null, handle));\n            });\n        }\n    }\n    /**\n     * Internal method, do not call this explicitly.\n     */\n    finalizeDeserialization(colliderSet) {\n        this.map.forEach((rb) => rb.finalizeDeserialization(colliderSet));\n    }\n    /**\n     * Creates a new rigid-body and return its integer handle.\n     *\n     * @param desc - The description of the rigid-body to create.\n     */\n    createRigidBody(colliderSet, desc) {\n        let rawTra = VectorOps.intoRaw(desc.translation);\n        let rawRot = RotationOps.intoRaw(desc.rotation);\n        let rawLv = VectorOps.intoRaw(desc.linvel);\n        let rawCom = VectorOps.intoRaw(desc.centerOfMass);\n        // #if DIM3\n        let rawAv = VectorOps.intoRaw(desc.angvel);\n        let rawPrincipalInertia = VectorOps.intoRaw(desc.principalAngularInertia);\n        let rawInertiaFrame = RotationOps.intoRaw(desc.angularInertiaLocalFrame);\n        // #endif\n        let handle = this.raw.createRigidBody(desc.enabled, rawTra, rawRot, desc.gravityScale, desc.mass, desc.massOnly, rawCom, rawLv, \n        // #if DIM3\n        rawAv, rawPrincipalInertia, rawInertiaFrame, desc.translationsEnabledX, desc.translationsEnabledY, desc.translationsEnabledZ, desc.rotationsEnabledX, desc.rotationsEnabledY, desc.rotationsEnabledZ, \n        // #endif\n        desc.linearDamping, desc.angularDamping, desc.status, desc.canSleep, desc.sleeping, desc.softCcdPrediction, desc.ccdEnabled, desc.dominanceGroup, desc.additionalSolverIterations);\n        rawTra.free();\n        rawRot.free();\n        rawLv.free();\n        rawCom.free();\n        // #if DIM3\n        rawAv.free();\n        rawPrincipalInertia.free();\n        rawInertiaFrame.free();\n        // #endif\n        const body = new RigidBody(this.raw, colliderSet, handle);\n        body.userData = desc.userData;\n        this.map.set(handle, body);\n        return body;\n    }\n    /**\n     * Removes a rigid-body from this set.\n     *\n     * This will also remove all the colliders and joints attached to the rigid-body.\n     *\n     * @param handle - The integer handle of the rigid-body to remove.\n     * @param colliders - The set of colliders that may contain colliders attached to the removed rigid-body.\n     * @param impulseJoints - The set of impulse joints that may contain joints attached to the removed rigid-body.\n     * @param multibodyJoints - The set of multibody joints that may contain joints attached to the removed rigid-body.\n     */\n    remove(handle, islands, colliders, impulseJoints, multibodyJoints) {\n        // Unmap the entities that will be removed automatically because of the rigid-body removals.\n        for (let i = 0; i < this.raw.rbNumColliders(handle); i += 1) {\n            colliders.unmap(this.raw.rbCollider(handle, i));\n        }\n        impulseJoints.forEachJointHandleAttachedToRigidBody(handle, (handle) => impulseJoints.unmap(handle));\n        multibodyJoints.forEachJointHandleAttachedToRigidBody(handle, (handle) => multibodyJoints.unmap(handle));\n        // Remove the rigid-body.\n        this.raw.remove(handle, islands.raw, colliders.raw, impulseJoints.raw, multibodyJoints.raw);\n        this.map.delete(handle);\n    }\n    /**\n     * The number of rigid-bodies on this set.\n     */\n    len() {\n        return this.map.len();\n    }\n    /**\n     * Does this set contain a rigid-body with the given handle?\n     *\n     * @param handle - The rigid-body handle to check.\n     */\n    contains(handle) {\n        return this.get(handle) != null;\n    }\n    /**\n     * Gets the rigid-body with the given handle.\n     *\n     * @param handle - The handle of the rigid-body to retrieve.\n     */\n    get(handle) {\n        return this.map.get(handle);\n    }\n    /**\n     * Applies the given closure to each rigid-body contained by this set.\n     *\n     * @param f - The closure to apply.\n     */\n    forEach(f) {\n        this.map.forEach(f);\n    }\n    /**\n     * Applies the given closure to each active rigid-bodies contained by this set.\n     *\n     * A rigid-body is active if it is not sleeping, i.e., if it moved recently.\n     *\n     * @param f - The closure to apply.\n     */\n    forEachActiveRigidBody(islands, f) {\n        islands.forEachActiveRigidBodyHandle((handle) => {\n            f(this.get(handle));\n        });\n    }\n    /**\n     * Gets all rigid-bodies in the list.\n     *\n     * @returns rigid-bodies list.\n     */\n    getAll() {\n        return this.map.getAll();\n    }\n}\n//# sourceMappingURL=rigid_body_set.js.map","import { RawSerializationPipeline } from \"../raw\";\nimport { VectorOps } from \"../math\";\nimport { World } from \"./world\";\n/**\n * A pipeline for serializing the physics scene.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `queryPipeline.free()`\n * once you are done using it (and all the rigid-bodies it created).\n */\nexport class SerializationPipeline {\n    /**\n     * Release the WASM memory occupied by this serialization pipeline.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n    constructor(raw) {\n        this.raw = raw || new RawSerializationPipeline();\n    }\n    /**\n     * Serialize a complete physics state into a single byte array.\n     * @param gravity - The current gravity affecting the simulation.\n     * @param integrationParameters - The integration parameters of the simulation.\n     * @param broadPhase - The broad-phase of the simulation.\n     * @param narrowPhase - The narrow-phase of the simulation.\n     * @param bodies - The rigid-bodies taking part into the simulation.\n     * @param colliders - The colliders taking part into the simulation.\n     * @param impulseJoints - The impulse joints taking part into the simulation.\n     * @param multibodyJoints - The multibody joints taking part into the simulation.\n     */\n    serializeAll(gravity, integrationParameters, islands, broadPhase, narrowPhase, bodies, colliders, impulseJoints, multibodyJoints) {\n        let rawGra = VectorOps.intoRaw(gravity);\n        const res = this.raw.serializeAll(rawGra, integrationParameters.raw, islands.raw, broadPhase.raw, narrowPhase.raw, bodies.raw, colliders.raw, impulseJoints.raw, multibodyJoints.raw);\n        rawGra.free();\n        return res;\n    }\n    /**\n     * Deserialize the complete physics state from a single byte array.\n     *\n     * @param data - The byte array to deserialize.\n     */\n    deserializeAll(data) {\n        return World.fromRaw(this.raw.deserializeAll(data));\n    }\n}\n//# sourceMappingURL=serialization_pipeline.js.map","// client/src/core/GameUI.js\n\nimport { HUD } from '../ui/hud.js';\nimport { InventoryUI } from '../ui/inventory.js';\nimport { log } from './gameCore.js';\n\n/**\n * Класс для управления пользовательским интерфейсом игры\n */\nexport class GameUI {\n    /**\n     * @param {Object} game - ссылка на основной класс игры\n     */\n    constructor(game) {\n        this.game = game;\n        \n        // Элементы DOM\n        this.loadingScreen = document.getElementById('loading-screen');\n        this.mainMenu = document.getElementById('main-menu');\n        this.gameCanvas = document.getElementById('game-canvas');\n        this.hudElement = document.getElementById('hud');\n        this.inventoryScreen = document.getElementById('inventory-screen');\n        this.loadingStatus = document.getElementById('loading-status');\n        \n        // Компоненты UI\n        this.components = {\n            hud: null,\n            inventory: null\n        };\n    }\n    \n    /**\n     * Инициализация компонентов UI\n     */\n    async initComponents() {\n        this.components = {\n            hud: this.hudElement ? new HUD(this.hudElement) : null,\n            inventory: this.inventoryScreen ? new InventoryUI(this.inventoryScreen) : null\n        };\n        \n        return true;\n    }\n    \n    /**\n     * Обновление статуса загрузки\n     * @param {string} status - текст статуса\n     */\n    updateLoadingStatus(status) {\n        if (this.loadingStatus) {\n            this.loadingStatus.textContent = status;\n        }\n        log(status);\n    }\n    \n    /**\n     * Показать экран ошибки\n     * @param {string} message - сообщение об ошибке\n     */\n    showErrorScreen(message) {\n        // Создаем экран ошибки, если он ещё не существует\n        let errorScreen = document.getElementById('error-screen');\n        if (!errorScreen) {\n            errorScreen = document.createElement('div');\n            errorScreen.id = 'error-screen';\n            errorScreen.className = 'error-overlay';\n            errorScreen.innerHTML = `\n                <div class=\"error-container\">\n                    <h2>Произошла ошибка</h2>\n                    <p id=\"error-message\">${message}</p>\n                    <button id=\"reload-button\">Перезагрузить</button>\n                </div>\n            `;\n            document.body.appendChild(errorScreen);\n            \n            // Добавляем обработчик для кнопки перезагрузки\n            const reloadButton = document.getElementById('reload-button');\n            if (reloadButton) {\n                reloadButton.addEventListener('click', () => {\n                    window.location.reload();\n                });\n            }\n            \n            // Добавляем стили для экрана ошибки\n            const style = document.createElement('style');\n            style.textContent = `\n                .error-overlay {\n                    position: fixed;\n                    top: 0;\n                    left: 0;\n                    width: 100%;\n                    height: 100%;\n                    background-color: rgba(0, 0, 0, 0.85);\n                    z-index: 9999;\n                    display: flex;\n                    justify-content: center;\n                    align-items: center;\n                }\n                .error-container {\n                    background-color: #333;\n                    padding: 20px;\n                    border: 2px solid #f44336;\n                    max-width: 80%;\n                    text-align: center;\n                }\n                .error-container h2 {\n                    color: #f44336;\n                    margin-bottom: 15px;\n                }\n                .error-container p {\n                    color: #fff;\n                    margin-bottom: 20px;\n                    font-family: monospace;\n                    white-space: pre-wrap;\n                    text-align: left;\n                }\n                #reload-button {\n                    background-color: #4CAF50;\n                    color: white;\n                    border: none;\n                    padding: 10px 20px;\n                    cursor: pointer;\n                    font-size: 16px;\n                }\n                #reload-button:hover {\n                    background-color: #45a049;\n                }\n            `;\n            document.head.appendChild(style);\n        } else {\n            // Обновляем сообщение об ошибке\n            const errorMessage = document.getElementById('error-message');\n            if (errorMessage) {\n                errorMessage.textContent = message;\n            }\n        }\n        \n        // Скрываем экран загрузки\n        if (this.loadingScreen) {\n            this.loadingScreen.classList.add('hidden');\n        }\n    }\n    \n    /**\n     * Показать главное меню\n     */\n    showMainMenu() {\n        if (this.loadingScreen) {\n            this.loadingScreen.classList.add('hidden');\n        }\n        if (this.mainMenu) {\n            this.mainMenu.classList.remove('hidden');\n        }\n        this.game.state.currentScene = 'menu';\n        log('Главное меню отображено');\n    }\n    \n    /**\n     * Скрыть главное меню\n     */\n    hideMainMenu() {\n        if (this.mainMenu) {\n            this.mainMenu.classList.add('hidden');\n        }\n    }\n    \n    /**\n     * Показать игровой экран\n     */\n    showGameScreen() {\n        if (this.gameCanvas) {\n            this.gameCanvas.classList.remove('hidden');\n        }\n        if (this.hudElement) {\n            this.hudElement.classList.remove('hidden');\n        }\n    }\n    \n    /**\n     * Обновление UI\n     */\n    update() {\n        // Обновляем HUD\n        if (this.game.world.player && this.components.hud) {\n            this.components.hud.update({\n                health: this.game.world.player.health,\n                ammo: this.game.world.player.ammo,\n                weapon: this.game.world.player.weapon\n            });\n        }\n    }\n    \n    /**\n     * Переключение инвентаря\n     */\n    toggleInventory() {\n        if (this.inventoryScreen.classList.contains('hidden')) {\n            this.showInventory();\n        } else {\n            this.hideInventory();\n        }\n    }\n    \n    /**\n     * Показать инвентарь\n     */\n    showInventory() {\n        this.inventoryScreen.classList.remove('hidden');\n        \n        if (this.components.inventory) {\n            this.components.inventory.show();\n        }\n        \n        if (this.game.input) {\n            this.game.input.disableGameControls();\n        }\n    }\n    \n    /**\n     * Скрыть инвентарь\n     */\n    hideInventory() {\n        this.inventoryScreen.classList.add('hidden');\n        \n        if (this.components.inventory) {\n            this.components.inventory.hide();\n        }\n        \n        if (this.game.input) {\n            this.game.input.enableGameControls();\n        }\n    }\n}","import { RawVector, RawRotation } from \"./raw\";\n/**\n * A 3D vector.\n */\nexport class Vector3 {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n}\nexport class VectorOps {\n    static new(x, y, z) {\n        return new Vector3(x, y, z);\n    }\n    static intoRaw(v) {\n        return new RawVector(v.x, v.y, v.z);\n    }\n    static zeros() {\n        return VectorOps.new(0.0, 0.0, 0.0);\n    }\n    // FIXME: type ram: RawVector?\n    static fromRaw(raw) {\n        if (!raw)\n            return null;\n        let res = VectorOps.new(raw.x, raw.y, raw.z);\n        raw.free();\n        return res;\n    }\n    static copy(out, input) {\n        out.x = input.x;\n        out.y = input.y;\n        out.z = input.z;\n    }\n}\n/**\n * A quaternion.\n */\nexport class Quaternion {\n    constructor(x, y, z, w) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n}\nexport class RotationOps {\n    static identity() {\n        return new Quaternion(0.0, 0.0, 0.0, 1.0);\n    }\n    static fromRaw(raw) {\n        if (!raw)\n            return null;\n        let res = new Quaternion(raw.x, raw.y, raw.z, raw.w);\n        raw.free();\n        return res;\n    }\n    static intoRaw(rot) {\n        return new RawRotation(rot.x, rot.y, rot.z, rot.w);\n    }\n    static copy(out, input) {\n        out.x = input.x;\n        out.y = input.y;\n        out.z = input.z;\n        out.w = input.w;\n    }\n}\n/**\n * A 3D symmetric-positive-definite matrix.\n */\nexport class SdpMatrix3 {\n    /**\n     * Matrix element at row 1, column 1.\n     */\n    get m11() {\n        return this.elements[0];\n    }\n    /**\n     * Matrix element at row 1, column 2.\n     */\n    get m12() {\n        return this.elements[1];\n    }\n    /**\n     * Matrix element at row 2, column 1.\n     */\n    get m21() {\n        return this.m12;\n    }\n    /**\n     * Matrix element at row 1, column 3.\n     */\n    get m13() {\n        return this.elements[2];\n    }\n    /**\n     * Matrix element at row 3, column 1.\n     */\n    get m31() {\n        return this.m13;\n    }\n    /**\n     * Matrix element at row 2, column 2.\n     */\n    get m22() {\n        return this.elements[3];\n    }\n    /**\n     * Matrix element at row 2, column 3.\n     */\n    get m23() {\n        return this.elements[4];\n    }\n    /**\n     * Matrix element at row 3, column 2.\n     */\n    get m32() {\n        return this.m23;\n    }\n    /**\n     * Matrix element at row 3, column 3.\n     */\n    get m33() {\n        return this.elements[5];\n    }\n    constructor(elements) {\n        this.elements = elements;\n    }\n}\nexport class SdpMatrix3Ops {\n    static fromRaw(raw) {\n        const sdpMatrix3 = new SdpMatrix3(raw.elements());\n        raw.free();\n        return sdpMatrix3;\n    }\n}\n// #endif\n//# sourceMappingURL=math.js.map","/**\n * Класс для управления интерфейсом инвентаря\n */\nexport class InventoryUI {\n    /**\n     * @param {HTMLElement} element - DOM элемент для отображения инвентаря\n     */\n    constructor(element) {\n        this.element = element;\n        \n        // Элементы инвентаря\n        this.gridElement = element.querySelector('.inventory-grid');\n        this.equippedElement = element.querySelector('.equipped-items');\n        \n        // Данные инвентаря\n        this.inventory = {\n            items: [],\n            maxSlots: 25 // 5x5 сетка\n        };\n        \n        // Экипированные предметы\n        this.equipped = {\n            weapon: null,\n            armor: null,\n            helmet: null\n        };\n        \n        // Инициализация\n        this.initialize();\n    }\n    \n    /**\n     * Инициализация интерфейса инвентаря\n     */\n    initialize() {\n        // Создаем слоты инвентаря\n        this.createInventorySlots();\n        \n        // Создаем слоты экипировки\n        this.createEquippedSlots();\n        \n        // Настраиваем обработчики событий перетаскивания\n        this.setupDragAndDrop();\n    }\n    \n    /**\n     * Создание слотов инвентаря\n     */\n    createInventorySlots() {\n        if (!this.gridElement) return;\n        \n        // Очищаем контейнер\n        this.gridElement.innerHTML = '';\n        \n        // Создаем сетку слотов 5x5\n        for (let i = 0; i < this.inventory.maxSlots; i++) {\n            const slot = document.createElement('div');\n            slot.className = 'inventory-slot';\n            slot.dataset.slotIndex = i;\n            \n            this.gridElement.appendChild(slot);\n        }\n    }\n    \n    /**\n     * Создание слотов экипировки\n     */\n    createEquippedSlots() {\n        if (!this.equippedElement) return;\n        \n        // Очищаем контейнер\n        this.equippedElement.innerHTML = '';\n        \n        // Создаем слоты для экипировки\n        const slots = [\n            { id: 'weapon', label: 'Оружие' },\n            { id: 'armor', label: 'Броня' },\n            { id: 'helmet', label: 'Шлем' }\n        ];\n        \n        slots.forEach(slotInfo => {\n            const slotContainer = document.createElement('div');\n            slotContainer.className = 'equipped-slot-container';\n            \n            const label = document.createElement('div');\n            label.className = 'equipped-slot-label';\n            label.textContent = slotInfo.label;\n            \n            const slot = document.createElement('div');\n            slot.className = 'equipped-slot';\n            slot.dataset.slotType = slotInfo.id;\n            \n            slotContainer.appendChild(label);\n            slotContainer.appendChild(slot);\n            \n            this.equippedElement.appendChild(slotContainer);\n        });\n    }\n    \n    /**\n     * Настройка системы перетаскивания\n     */\n    setupDragAndDrop() {\n        // Здесь будет реализация drag-and-drop\n        // Для прототипа оставим простую реализацию с кликами\n        \n        // Находим все слоты инвентаря\n        const inventorySlots = this.element.querySelectorAll('.inventory-slot');\n        \n        // Добавляем обработчики клика\n        inventorySlots.forEach(slot => {\n            slot.addEventListener('click', () => {\n                // В будущем здесь будет логика выбора предмета\n                console.log('Клик по слоту инвентаря:', slot.dataset.slotIndex);\n            });\n        });\n        \n        // Находим все слоты экипировки\n        const equippedSlots = this.element.querySelectorAll('.equipped-slot');\n        \n        // Добавляем обработчики клика\n        equippedSlots.forEach(slot => {\n            slot.addEventListener('click', () => {\n                // В будущем здесь будет логика выбора экипированного предмета\n                console.log('Клик по слоту экипировки:', slot.dataset.slotType);\n            });\n        });\n    }\n    \n    /**\n     * Обновление отображения инвентаря\n     * @param {Object} inventory - данные инвентаря\n     */\n    update(inventory) {\n        if (!inventory) return;\n        \n        // Обновляем данные\n        this.inventory = inventory;\n        \n        // Обновляем отображение\n        this.updateInventoryDisplay();\n    }\n    \n    /**\n     * Обновление отображения экипировки\n     * @param {Object} equipped - данные экипировки\n     */\n    updateEquipped(equipped) {\n        if (!equipped) return;\n        \n        // Обновляем данные\n        this.equipped = equipped;\n        \n        // Обновляем отображение\n        this.updateEquippedDisplay();\n    }\n    \n    /**\n     * Обновление отображения слотов инвентаря\n     */\n    updateInventoryDisplay() {\n        // Находим все слоты инвентаря\n        const slots = this.element.querySelectorAll('.inventory-slot');\n        \n        // Очищаем все слоты\n        slots.forEach(slot => {\n            slot.innerHTML = '';\n            slot.classList.remove('filled');\n        });\n        \n        // Заполняем слоты предметами\n        this.inventory.items.forEach((item, index) => {\n            if (index >= slots.length) return;\n            \n            const slot = slots[index];\n            \n            // Создаем элемент предмета\n            const itemElement = document.createElement('div');\n            itemElement.className = 'inventory-item';\n            itemElement.dataset.itemId = item.id;\n            \n            // Разный стиль для разных типов предметов\n            switch (item.type) {\n                case 'weapon':\n                    itemElement.classList.add('item-weapon');\n                    itemElement.textContent = 'W';\n                    break;\n                case 'medkit':\n                    itemElement.classList.add('item-medkit');\n                    itemElement.textContent = 'M';\n                    break;\n                case 'ammo':\n                    itemElement.classList.add('item-ammo');\n                    itemElement.textContent = 'A';\n                    break;\n                default:\n                    itemElement.textContent = '?';\n            }\n            \n            // Добавляем предмет в слот\n            slot.appendChild(itemElement);\n            slot.classList.add('filled');\n        });\n    }\n    \n    /**\n     * Обновление отображения экипированных предметов\n     */\n    updateEquippedDisplay() {\n        // Обновляем отображение экипированного оружия\n        const weaponSlot = this.element.querySelector('.equipped-slot[data-slot-type=\"weapon\"]');\n        if (weaponSlot) {\n            weaponSlot.innerHTML = '';\n            \n            if (this.equipped.weapon) {\n                const weaponElement = document.createElement('div');\n                weaponElement.className = 'equipped-item item-weapon';\n                weaponElement.textContent = 'W';\n                \n                weaponSlot.appendChild(weaponElement);\n            }\n        }\n        \n        // Обновляем отображение экипированной брони\n        const armorSlot = this.element.querySelector('.equipped-slot[data-slot-type=\"armor\"]');\n        if (armorSlot) {\n            armorSlot.innerHTML = '';\n            \n            if (this.equipped.armor) {\n                const armorElement = document.createElement('div');\n                armorElement.className = 'equipped-item item-armor';\n                armorElement.textContent = 'A';\n                \n                armorSlot.appendChild(armorElement);\n            }\n        }\n        \n        // Обновляем отображение экипированного шлема\n        const helmetSlot = this.element.querySelector('.equipped-slot[data-slot-type=\"helmet\"]');\n        if (helmetSlot) {\n            helmetSlot.innerHTML = '';\n            \n            if (this.equipped.helmet) {\n                const helmetElement = document.createElement('div');\n                helmetElement.className = 'equipped-item item-helmet';\n                helmetElement.textContent = 'H';\n                \n                helmetSlot.appendChild(helmetElement);\n            }\n        }\n    }\n    \n    /**\n     * Добавление стилей для предметов в инвентаре\n     */\n    addInventoryStyles() {\n        // Создаем стили для предметов\n        const style = document.createElement('style');\n        style.textContent = `\n            .inventory-item {\n                width: 90%;\n                height: 90%;\n                margin: 5%;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                color: white;\n                font-weight: bold;\n                user-select: none;\n                cursor: pointer;\n            }\n            \n            .item-weapon {\n                background-color: #FF5722;\n            }\n            \n            .item-medkit {\n                background-color: #4CAF50;\n            }\n            \n            .item-ammo {\n                background-color: #FFC107;\n            }\n            \n            .item-armor {\n                background-color: #2196F3;\n            }\n            \n            .item-helmet {\n                background-color: #673AB7;\n            }\n            \n            .equipped-slot-container {\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n            }\n            \n            .equipped-slot-label {\n                margin-bottom: 5px;\n                font-size: 14px;\n            }\n            \n            .equipped-item {\n                width: 90%;\n                height: 90%;\n                margin: 5%;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                color: white;\n                font-weight: bold;\n            }\n        `;\n        \n        document.head.appendChild(style);\n    }\n    \n    /**\n     * Показать инвентарь\n     */\n    show() {\n        // Добавляем стили для предметов при первом открытии\n        if (!document.querySelector('style[data-inventory-styles]')) {\n            this.addInventoryStyles();\n        }\n        \n        this.element.classList.remove('hidden');\n    }\n    \n    /**\n     * Скрыть инвентарь\n     */\n    hide() {\n        this.element.classList.add('hidden');\n    }\n}","import { RawPidController } from \"../raw\";\nimport { RotationOps, VectorOps } from \"../math\";\n// TODO: unify with the JointAxesMask\n/**\n * An enum representing the possible joint axes controlled by a PidController.\n * They can be ORed together, like:\n * PidAxesMask.LinX || PidAxesMask.LinY\n * to get a pid controller that only constraints the translational X and Y axes.\n *\n * Possible axes are:\n *\n * - `X`: X translation axis\n * - `Y`: Y translation axis\n * - `Z`: Z translation axis\n * - `AngX`: X angular rotation axis (3D only)\n * - `AngY`: Y angular rotation axis (3D only)\n * - `AngZ`: Z angular rotation axis\n */\nexport var PidAxesMask;\n(function (PidAxesMask) {\n    PidAxesMask[PidAxesMask[\"None\"] = 0] = \"None\";\n    PidAxesMask[PidAxesMask[\"LinX\"] = 1] = \"LinX\";\n    PidAxesMask[PidAxesMask[\"LinY\"] = 2] = \"LinY\";\n    PidAxesMask[PidAxesMask[\"LinZ\"] = 4] = \"LinZ\";\n    // #if DIM3\n    PidAxesMask[PidAxesMask[\"AngX\"] = 8] = \"AngX\";\n    PidAxesMask[PidAxesMask[\"AngY\"] = 16] = \"AngY\";\n    // #endif\n    PidAxesMask[PidAxesMask[\"AngZ\"] = 32] = \"AngZ\";\n    // #if DIM3\n    PidAxesMask[PidAxesMask[\"AllLin\"] = 7] = \"AllLin\";\n    PidAxesMask[PidAxesMask[\"AllAng\"] = 56] = \"AllAng\";\n    // #endif\n    PidAxesMask[PidAxesMask[\"All\"] = 63] = \"All\";\n})(PidAxesMask || (PidAxesMask = {}));\n/**\n * A controller for controlling dynamic bodies using the\n * Proportional-Integral-Derivative correction model.\n */\nexport class PidController {\n    constructor(params, bodies, kp, ki, kd, axes) {\n        this.params = params;\n        this.bodies = bodies;\n        this.raw = new RawPidController(kp, ki, kd, axes);\n    }\n    /** @internal */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n    setKp(kp, axes) {\n        this.raw.set_kp(kp, axes);\n    }\n    setKi(ki, axes) {\n        this.raw.set_kp(ki, axes);\n    }\n    setKd(kd, axes) {\n        this.raw.set_kp(kd, axes);\n    }\n    setAxes(axes) {\n        this.raw.set_axes_mask(axes);\n    }\n    resetIntegrals() {\n        this.raw.reset_integrals();\n    }\n    applyLinearCorrection(body, targetPosition, targetLinvel) {\n        let rawPos = VectorOps.intoRaw(targetPosition);\n        let rawVel = VectorOps.intoRaw(targetLinvel);\n        this.raw.apply_linear_correction(this.params.dt, this.bodies.raw, body.handle, rawPos, rawVel);\n        rawPos.free();\n        rawVel.free();\n    }\n    // #if DIM3\n    applyAngularCorrection(body, targetRotation, targetAngVel) {\n        let rawPos = RotationOps.intoRaw(targetRotation);\n        let rawVel = VectorOps.intoRaw(targetAngVel);\n        this.raw.apply_angular_correction(this.params.dt, this.bodies.raw, body.handle, rawPos, rawVel);\n        rawPos.free();\n        rawVel.free();\n    }\n    // #endif\n    linearCorrection(body, targetPosition, targetLinvel) {\n        let rawPos = VectorOps.intoRaw(targetPosition);\n        let rawVel = VectorOps.intoRaw(targetLinvel);\n        let correction = this.raw.linear_correction(this.params.dt, this.bodies.raw, body.handle, rawPos, rawVel);\n        rawPos.free();\n        rawVel.free();\n        return VectorOps.fromRaw(correction);\n    }\n    // #if DIM3\n    angularCorrection(body, targetRotation, targetAngVel) {\n        let rawPos = RotationOps.intoRaw(targetRotation);\n        let rawVel = VectorOps.intoRaw(targetAngVel);\n        let correction = this.raw.angular_correction(this.params.dt, this.bodies.raw, body.handle, rawPos, rawVel);\n        rawPos.free();\n        rawVel.free();\n        return VectorOps.fromRaw(correction);\n    }\n}\n//# sourceMappingURL=pid_controller.js.map","import { VectorOps, RotationOps } from \"../math\";\nimport { RawGenericJoint, RawJointAxis, RawJointType, } from \"../raw\";\n/**\n * An enum grouping all possible types of joints:\n *\n * - `Revolute`: A revolute joint that removes all degrees of freedom between the affected\n *               bodies except for the rotation along one axis.\n * - `Fixed`: A fixed joint that removes all relative degrees of freedom between the affected bodies.\n * - `Prismatic`: A prismatic joint that removes all degrees of freedom between the affected\n *                bodies except for the translation along one axis.\n * - `Spherical`: (3D only) A spherical joint that removes all relative linear degrees of freedom between the affected bodies.\n * - `Generic`: (3D only) A joint with customizable degrees of freedom, allowing any of the 6 axes to be locked.\n */\nexport var JointType;\n(function (JointType) {\n    JointType[JointType[\"Revolute\"] = 0] = \"Revolute\";\n    JointType[JointType[\"Fixed\"] = 1] = \"Fixed\";\n    JointType[JointType[\"Prismatic\"] = 2] = \"Prismatic\";\n    JointType[JointType[\"Rope\"] = 3] = \"Rope\";\n    JointType[JointType[\"Spring\"] = 4] = \"Spring\";\n    // #if DIM3\n    JointType[JointType[\"Spherical\"] = 5] = \"Spherical\";\n    JointType[JointType[\"Generic\"] = 6] = \"Generic\";\n    // #endif\n})(JointType || (JointType = {}));\nexport var MotorModel;\n(function (MotorModel) {\n    MotorModel[MotorModel[\"AccelerationBased\"] = 0] = \"AccelerationBased\";\n    MotorModel[MotorModel[\"ForceBased\"] = 1] = \"ForceBased\";\n})(MotorModel || (MotorModel = {}));\n/**\n * An enum representing the possible joint axes of a generic joint.\n * They can be ORed together, like:\n * JointAxesMask.LinX || JointAxesMask.LinY\n * to get a joint that is only free in the X and Y translational (positional) axes.\n *\n * Possible free axes are:\n *\n * - `X`: X translation axis\n * - `Y`: Y translation axis\n * - `Z`: Z translation axis\n * - `AngX`: X angular rotation axis\n * - `AngY`: Y angular rotations axis\n * - `AngZ`: Z angular rotation axis\n */\nexport var JointAxesMask;\n(function (JointAxesMask) {\n    JointAxesMask[JointAxesMask[\"LinX\"] = 1] = \"LinX\";\n    JointAxesMask[JointAxesMask[\"LinY\"] = 2] = \"LinY\";\n    JointAxesMask[JointAxesMask[\"LinZ\"] = 4] = \"LinZ\";\n    JointAxesMask[JointAxesMask[\"AngX\"] = 8] = \"AngX\";\n    JointAxesMask[JointAxesMask[\"AngY\"] = 16] = \"AngY\";\n    JointAxesMask[JointAxesMask[\"AngZ\"] = 32] = \"AngZ\";\n})(JointAxesMask || (JointAxesMask = {}));\nexport class ImpulseJoint {\n    constructor(rawSet, bodySet, handle) {\n        this.rawSet = rawSet;\n        this.bodySet = bodySet;\n        this.handle = handle;\n    }\n    static newTyped(rawSet, bodySet, handle) {\n        switch (rawSet.jointType(handle)) {\n            case RawJointType.Revolute:\n                return new RevoluteImpulseJoint(rawSet, bodySet, handle);\n            case RawJointType.Prismatic:\n                return new PrismaticImpulseJoint(rawSet, bodySet, handle);\n            case RawJointType.Fixed:\n                return new FixedImpulseJoint(rawSet, bodySet, handle);\n            case RawJointType.Spring:\n                return new SpringImpulseJoint(rawSet, bodySet, handle);\n            case RawJointType.Rope:\n                return new RopeImpulseJoint(rawSet, bodySet, handle);\n            // #if DIM3\n            case RawJointType.Spherical:\n                return new SphericalImpulseJoint(rawSet, bodySet, handle);\n            case RawJointType.Generic:\n                return new GenericImpulseJoint(rawSet, bodySet, handle);\n            // #endif\n            default:\n                return new ImpulseJoint(rawSet, bodySet, handle);\n        }\n    }\n    /** @internal */\n    finalizeDeserialization(bodySet) {\n        this.bodySet = bodySet;\n    }\n    /**\n     * Checks if this joint is still valid (i.e. that it has\n     * not been deleted from the joint set yet).\n     */\n    isValid() {\n        return this.rawSet.contains(this.handle);\n    }\n    /**\n     * The first rigid-body this joint it attached to.\n     */\n    body1() {\n        return this.bodySet.get(this.rawSet.jointBodyHandle1(this.handle));\n    }\n    /**\n     * The second rigid-body this joint is attached to.\n     */\n    body2() {\n        return this.bodySet.get(this.rawSet.jointBodyHandle2(this.handle));\n    }\n    /**\n     * The type of this joint given as a string.\n     */\n    type() {\n        return this.rawSet.jointType(this.handle);\n    }\n    // #if DIM3\n    /**\n     * The rotation quaternion that aligns this joint's first local axis to the `x` axis.\n     */\n    frameX1() {\n        return RotationOps.fromRaw(this.rawSet.jointFrameX1(this.handle));\n    }\n    // #endif\n    // #if DIM3\n    /**\n     * The rotation matrix that aligns this joint's second local axis to the `x` axis.\n     */\n    frameX2() {\n        return RotationOps.fromRaw(this.rawSet.jointFrameX2(this.handle));\n    }\n    // #endif\n    /**\n     * The position of the first anchor of this joint.\n     *\n     * The first anchor gives the position of the application point on the\n     * local frame of the first rigid-body it is attached to.\n     */\n    anchor1() {\n        return VectorOps.fromRaw(this.rawSet.jointAnchor1(this.handle));\n    }\n    /**\n     * The position of the second anchor of this joint.\n     *\n     * The second anchor gives the position of the application point on the\n     * local frame of the second rigid-body it is attached to.\n     */\n    anchor2() {\n        return VectorOps.fromRaw(this.rawSet.jointAnchor2(this.handle));\n    }\n    /**\n     * Sets the position of the first anchor of this joint.\n     *\n     * The first anchor gives the position of the application point on the\n     * local frame of the first rigid-body it is attached to.\n     */\n    setAnchor1(newPos) {\n        const rawPoint = VectorOps.intoRaw(newPos);\n        this.rawSet.jointSetAnchor1(this.handle, rawPoint);\n        rawPoint.free();\n    }\n    /**\n     * Sets the position of the second anchor of this joint.\n     *\n     * The second anchor gives the position of the application point on the\n     * local frame of the second rigid-body it is attached to.\n     */\n    setAnchor2(newPos) {\n        const rawPoint = VectorOps.intoRaw(newPos);\n        this.rawSet.jointSetAnchor2(this.handle, rawPoint);\n        rawPoint.free();\n    }\n    /**\n     * Controls whether contacts are computed between colliders attached\n     * to the rigid-bodies linked by this joint.\n     */\n    setContactsEnabled(enabled) {\n        this.rawSet.jointSetContactsEnabled(this.handle, enabled);\n    }\n    /**\n     * Indicates if contacts are enabled between colliders attached\n     * to the rigid-bodies linked by this joint.\n     */\n    contactsEnabled() {\n        return this.rawSet.jointContactsEnabled(this.handle);\n    }\n}\nexport class UnitImpulseJoint extends ImpulseJoint {\n    /**\n     * Are the limits enabled for this joint?\n     */\n    limitsEnabled() {\n        return this.rawSet.jointLimitsEnabled(this.handle, this.rawAxis());\n    }\n    /**\n     * The min limit of this joint.\n     */\n    limitsMin() {\n        return this.rawSet.jointLimitsMin(this.handle, this.rawAxis());\n    }\n    /**\n     * The max limit of this joint.\n     */\n    limitsMax() {\n        return this.rawSet.jointLimitsMax(this.handle, this.rawAxis());\n    }\n    /**\n     * Sets the limits of this joint.\n     *\n     * @param min - The minimum bound of this joint’s free coordinate.\n     * @param max - The maximum bound of this joint’s free coordinate.\n     */\n    setLimits(min, max) {\n        this.rawSet.jointSetLimits(this.handle, this.rawAxis(), min, max);\n    }\n    configureMotorModel(model) {\n        this.rawSet.jointConfigureMotorModel(this.handle, this.rawAxis(), model);\n    }\n    configureMotorVelocity(targetVel, factor) {\n        this.rawSet.jointConfigureMotorVelocity(this.handle, this.rawAxis(), targetVel, factor);\n    }\n    configureMotorPosition(targetPos, stiffness, damping) {\n        this.rawSet.jointConfigureMotorPosition(this.handle, this.rawAxis(), targetPos, stiffness, damping);\n    }\n    configureMotor(targetPos, targetVel, stiffness, damping) {\n        this.rawSet.jointConfigureMotor(this.handle, this.rawAxis(), targetPos, targetVel, stiffness, damping);\n    }\n}\nexport class FixedImpulseJoint extends ImpulseJoint {\n}\nexport class RopeImpulseJoint extends ImpulseJoint {\n}\nexport class SpringImpulseJoint extends ImpulseJoint {\n}\nexport class PrismaticImpulseJoint extends UnitImpulseJoint {\n    rawAxis() {\n        return RawJointAxis.LinX;\n    }\n}\nexport class RevoluteImpulseJoint extends UnitImpulseJoint {\n    rawAxis() {\n        return RawJointAxis.AngX;\n    }\n}\n// #if DIM3\nexport class GenericImpulseJoint extends ImpulseJoint {\n}\nexport class SphericalImpulseJoint extends ImpulseJoint {\n}\n// #endif\nexport class JointData {\n    constructor() { }\n    /**\n     * Creates a new joint descriptor that builds a Fixed joint.\n     *\n     * A fixed joint removes all the degrees of freedom between the affected bodies, ensuring their\n     * anchor and local frames coincide in world-space.\n     *\n     * @param anchor1 - Point where the joint is attached on the first rigid-body affected by this joint. Expressed in the\n     *                  local-space of the rigid-body.\n     * @param frame1 - The reference orientation of the joint wrt. the first rigid-body.\n     * @param anchor2 - Point where the joint is attached on the second rigid-body affected by this joint. Expressed in the\n     *                  local-space of the rigid-body.\n     * @param frame2 - The reference orientation of the joint wrt. the second rigid-body.\n     */\n    static fixed(anchor1, frame1, anchor2, frame2) {\n        let res = new JointData();\n        res.anchor1 = anchor1;\n        res.anchor2 = anchor2;\n        res.frame1 = frame1;\n        res.frame2 = frame2;\n        res.jointType = JointType.Fixed;\n        return res;\n    }\n    static spring(rest_length, stiffness, damping, anchor1, anchor2) {\n        let res = new JointData();\n        res.anchor1 = anchor1;\n        res.anchor2 = anchor2;\n        res.length = rest_length;\n        res.stiffness = stiffness;\n        res.damping = damping;\n        res.jointType = JointType.Spring;\n        return res;\n    }\n    static rope(length, anchor1, anchor2) {\n        let res = new JointData();\n        res.anchor1 = anchor1;\n        res.anchor2 = anchor2;\n        res.length = length;\n        res.jointType = JointType.Rope;\n        return res;\n    }\n    // #if DIM3\n    /**\n     * Create a new joint descriptor that builds generic joints.\n     *\n     * A generic joint allows customizing its degrees of freedom\n     * by supplying a mask of the joint axes that should remain locked.\n     *\n     * @param anchor1 - Point where the joint is attached on the first rigid-body affected by this joint. Expressed in the\n     *                  local-space of the rigid-body.\n     * @param anchor2 - Point where the joint is attached on the second rigid-body affected by this joint. Expressed in the\n     *                  local-space of the rigid-body.\n     * @param axis - The X axis of the joint, expressed in the local-space of the rigid-bodies it is attached to.\n     * @param axesMask - Mask representing the locked axes of the joint. You can use logical OR to select these from\n     *                   the JointAxesMask enum. For example, passing (JointAxesMask.AngX || JointAxesMask.AngY) will\n     *                   create a joint locked in the X and Y rotational axes.\n     */\n    static generic(anchor1, anchor2, axis, axesMask) {\n        let res = new JointData();\n        res.anchor1 = anchor1;\n        res.anchor2 = anchor2;\n        res.axis = axis;\n        res.axesMask = axesMask;\n        res.jointType = JointType.Generic;\n        return res;\n    }\n    /**\n     * Create a new joint descriptor that builds spherical joints.\n     *\n     * A spherical joint allows three relative rotational degrees of freedom\n     * by preventing any relative translation between the anchors of the\n     * two attached rigid-bodies.\n     *\n     * @param anchor1 - Point where the joint is attached on the first rigid-body affected by this joint. Expressed in the\n     *                  local-space of the rigid-body.\n     * @param anchor2 - Point where the joint is attached on the second rigid-body affected by this joint. Expressed in the\n     *                  local-space of the rigid-body.\n     */\n    static spherical(anchor1, anchor2) {\n        let res = new JointData();\n        res.anchor1 = anchor1;\n        res.anchor2 = anchor2;\n        res.jointType = JointType.Spherical;\n        return res;\n    }\n    /**\n     * Creates a new joint descriptor that builds a Prismatic joint.\n     *\n     * A prismatic joint removes all the degrees of freedom between the\n     * affected bodies, except for the translation along one axis.\n     *\n     * @param anchor1 - Point where the joint is attached on the first rigid-body affected by this joint. Expressed in the\n     *                  local-space of the rigid-body.\n     * @param anchor2 - Point where the joint is attached on the second rigid-body affected by this joint. Expressed in the\n     *                  local-space of the rigid-body.\n     * @param axis - Axis of the joint, expressed in the local-space of the rigid-bodies it is attached to.\n     */\n    static prismatic(anchor1, anchor2, axis) {\n        let res = new JointData();\n        res.anchor1 = anchor1;\n        res.anchor2 = anchor2;\n        res.axis = axis;\n        res.jointType = JointType.Prismatic;\n        return res;\n    }\n    /**\n     * Create a new joint descriptor that builds Revolute joints.\n     *\n     * A revolute joint removes all degrees of freedom between the affected\n     * bodies except for the rotation along one axis.\n     *\n     * @param anchor1 - Point where the joint is attached on the first rigid-body affected by this joint. Expressed in the\n     *                  local-space of the rigid-body.\n     * @param anchor2 - Point where the joint is attached on the second rigid-body affected by this joint. Expressed in the\n     *                  local-space of the rigid-body.\n     * @param axis - Axis of the joint, expressed in the local-space of the rigid-bodies it is attached to.\n     */\n    static revolute(anchor1, anchor2, axis) {\n        let res = new JointData();\n        res.anchor1 = anchor1;\n        res.anchor2 = anchor2;\n        res.axis = axis;\n        res.jointType = JointType.Revolute;\n        return res;\n    }\n    // #endif\n    intoRaw() {\n        let rawA1 = VectorOps.intoRaw(this.anchor1);\n        let rawA2 = VectorOps.intoRaw(this.anchor2);\n        let rawAx;\n        let result;\n        let limitsEnabled = false;\n        let limitsMin = 0.0;\n        let limitsMax = 0.0;\n        switch (this.jointType) {\n            case JointType.Fixed:\n                let rawFra1 = RotationOps.intoRaw(this.frame1);\n                let rawFra2 = RotationOps.intoRaw(this.frame2);\n                result = RawGenericJoint.fixed(rawA1, rawFra1, rawA2, rawFra2);\n                rawFra1.free();\n                rawFra2.free();\n                break;\n            case JointType.Spring:\n                result = RawGenericJoint.spring(this.length, this.stiffness, this.damping, rawA1, rawA2);\n                break;\n            case JointType.Rope:\n                result = RawGenericJoint.rope(this.length, rawA1, rawA2);\n                break;\n            case JointType.Prismatic:\n                rawAx = VectorOps.intoRaw(this.axis);\n                if (!!this.limitsEnabled) {\n                    limitsEnabled = true;\n                    limitsMin = this.limits[0];\n                    limitsMax = this.limits[1];\n                }\n                // #if DIM3\n                result = RawGenericJoint.prismatic(rawA1, rawA2, rawAx, limitsEnabled, limitsMin, limitsMax);\n                // #endif\n                rawAx.free();\n                break;\n            // #if DIM3\n            case JointType.Generic:\n                rawAx = VectorOps.intoRaw(this.axis);\n                // implicit type cast: axesMask is a JointAxesMask bitflag enum,\n                // we're treating it as a u8 on the Rust side\n                let rawAxesMask = this.axesMask;\n                result = RawGenericJoint.generic(rawA1, rawA2, rawAx, rawAxesMask);\n                break;\n            case JointType.Spherical:\n                result = RawGenericJoint.spherical(rawA1, rawA2);\n                break;\n            case JointType.Revolute:\n                rawAx = VectorOps.intoRaw(this.axis);\n                result = RawGenericJoint.revolute(rawA1, rawA2, rawAx);\n                rawAx.free();\n                break;\n            // #endif\n        }\n        rawA1.free();\n        rawA2.free();\n        return result;\n    }\n}\n//# sourceMappingURL=impulse_joint.js.map","export class Coarena {\n    constructor() {\n        this.fconv = new Float64Array(1);\n        this.uconv = new Uint32Array(this.fconv.buffer);\n        this.data = new Array();\n        this.size = 0;\n    }\n    set(handle, data) {\n        let i = this.index(handle);\n        while (this.data.length <= i) {\n            this.data.push(null);\n        }\n        if (this.data[i] == null)\n            this.size += 1;\n        this.data[i] = data;\n    }\n    len() {\n        return this.size;\n    }\n    delete(handle) {\n        let i = this.index(handle);\n        if (i < this.data.length) {\n            if (this.data[i] != null)\n                this.size -= 1;\n            this.data[i] = null;\n        }\n    }\n    clear() {\n        this.data = new Array();\n    }\n    get(handle) {\n        let i = this.index(handle);\n        if (i < this.data.length) {\n            return this.data[i];\n        }\n        else {\n            return null;\n        }\n    }\n    forEach(f) {\n        for (const elt of this.data) {\n            if (elt != null)\n                f(elt);\n        }\n    }\n    getAll() {\n        return this.data.filter((elt) => elt != null);\n    }\n    index(handle) {\n        /// Extracts the index part of a handle (the lower 32 bits).\n        /// This is done by first injecting the handle into an Float64Array\n        /// which is itself injected into an Uint32Array (at construction time).\n        /// The 0-th value of the Uint32Array will become the `number` integer\n        /// representation of the lower 32 bits.\n        /// Also `this.uconv[1]` then contains the generation number as a `number`,\n        /// which we don’t really need.\n        this.fconv[0] = handle;\n        return this.uconv[0];\n    }\n}\n//# sourceMappingURL=coarena.js.map","import { RawNarrowPhase } from \"../raw\";\nimport { VectorOps } from \"../math\";\n/**\n * The narrow-phase used for precise collision-detection.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `narrowPhase.free()`\n * once you are done using it.\n */\nexport class NarrowPhase {\n    /**\n     * Release the WASM memory occupied by this narrow-phase.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n    constructor(raw) {\n        this.raw = raw || new RawNarrowPhase();\n        this.tempManifold = new TempContactManifold(null);\n    }\n    /**\n     * Enumerates all the colliders potentially in contact with the given collider.\n     *\n     * @param collider1 - The second collider involved in the contact.\n     * @param f - Closure that will be called on each collider that is in contact with `collider1`.\n     */\n    contactPairsWith(collider1, f) {\n        this.raw.contact_pairs_with(collider1, f);\n    }\n    /**\n     * Enumerates all the colliders intersecting the given colliders, assuming one of them\n     * is a sensor.\n     */\n    intersectionPairsWith(collider1, f) {\n        this.raw.intersection_pairs_with(collider1, f);\n    }\n    /**\n     * Iterates through all the contact manifolds between the given pair of colliders.\n     *\n     * @param collider1 - The first collider involved in the contact.\n     * @param collider2 - The second collider involved in the contact.\n     * @param f - Closure that will be called on each contact manifold between the two colliders. If the second argument\n     *            passed to this closure is `true`, then the contact manifold data is flipped, i.e., methods like `localNormal1`\n     *            actually apply to the `collider2` and fields like `localNormal2` apply to the `collider1`.\n     */\n    contactPair(collider1, collider2, f) {\n        const rawPair = this.raw.contact_pair(collider1, collider2);\n        if (!!rawPair) {\n            const flipped = rawPair.collider1() != collider1;\n            let i;\n            for (i = 0; i < rawPair.numContactManifolds(); ++i) {\n                this.tempManifold.raw = rawPair.contactManifold(i);\n                if (!!this.tempManifold.raw) {\n                    f(this.tempManifold, flipped);\n                }\n                // SAFETY: The RawContactManifold stores a raw pointer that will be invalidated\n                //         at the next timestep. So we must be sure to free the pair here\n                //         to avoid unsoundness in the Rust code.\n                this.tempManifold.free();\n            }\n            rawPair.free();\n        }\n    }\n    /**\n     * Returns `true` if `collider1` and `collider2` intersect and at least one of them is a sensor.\n     * @param collider1 − The first collider involved in the intersection.\n     * @param collider2 − The second collider involved in the intersection.\n     */\n    intersectionPair(collider1, collider2) {\n        return this.raw.intersection_pair(collider1, collider2);\n    }\n}\nexport class TempContactManifold {\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n    constructor(raw) {\n        this.raw = raw;\n    }\n    normal() {\n        return VectorOps.fromRaw(this.raw.normal());\n    }\n    localNormal1() {\n        return VectorOps.fromRaw(this.raw.local_n1());\n    }\n    localNormal2() {\n        return VectorOps.fromRaw(this.raw.local_n2());\n    }\n    subshape1() {\n        return this.raw.subshape1();\n    }\n    subshape2() {\n        return this.raw.subshape2();\n    }\n    numContacts() {\n        return this.raw.num_contacts();\n    }\n    localContactPoint1(i) {\n        return VectorOps.fromRaw(this.raw.contact_local_p1(i));\n    }\n    localContactPoint2(i) {\n        return VectorOps.fromRaw(this.raw.contact_local_p2(i));\n    }\n    contactDist(i) {\n        return this.raw.contact_dist(i);\n    }\n    contactFid1(i) {\n        return this.raw.contact_fid1(i);\n    }\n    contactFid2(i) {\n        return this.raw.contact_fid2(i);\n    }\n    contactImpulse(i) {\n        return this.raw.contact_impulse(i);\n    }\n    // #if DIM3\n    contactTangentImpulseX(i) {\n        return this.raw.contact_tangent_impulse_x(i);\n    }\n    contactTangentImpulseY(i) {\n        return this.raw.contact_tangent_impulse_y(i);\n    }\n    // #endif\n    numSolverContacts() {\n        return this.raw.num_solver_contacts();\n    }\n    solverContactPoint(i) {\n        return VectorOps.fromRaw(this.raw.solver_contact_point(i));\n    }\n    solverContactDist(i) {\n        return this.raw.solver_contact_dist(i);\n    }\n    solverContactFriction(i) {\n        return this.raw.solver_contact_friction(i);\n    }\n    solverContactRestitution(i) {\n        return this.raw.solver_contact_restitution(i);\n    }\n    solverContactTangentVelocity(i) {\n        return VectorOps.fromRaw(this.raw.solver_contact_tangent_velocity(i));\n    }\n}\n//# sourceMappingURL=narrow_phase.js.map","import { RawJointAxis, RawJointType, } from \"../raw\";\nexport class MultibodyJoint {\n    constructor(rawSet, handle) {\n        this.rawSet = rawSet;\n        this.handle = handle;\n    }\n    static newTyped(rawSet, handle) {\n        switch (rawSet.jointType(handle)) {\n            case RawJointType.Revolute:\n                return new RevoluteMultibodyJoint(rawSet, handle);\n            case RawJointType.Prismatic:\n                return new PrismaticMultibodyJoint(rawSet, handle);\n            case RawJointType.Fixed:\n                return new FixedMultibodyJoint(rawSet, handle);\n            // #if DIM3\n            case RawJointType.Spherical:\n                return new SphericalMultibodyJoint(rawSet, handle);\n            // #endif\n            default:\n                return new MultibodyJoint(rawSet, handle);\n        }\n    }\n    /**\n     * Checks if this joint is still valid (i.e. that it has\n     * not been deleted from the joint set yet).\n     */\n    isValid() {\n        return this.rawSet.contains(this.handle);\n    }\n    // /**\n    //  * The unique integer identifier of the first rigid-body this joint it attached to.\n    //  */\n    // public bodyHandle1(): RigidBodyHandle {\n    //     return this.rawSet.jointBodyHandle1(this.handle);\n    // }\n    //\n    // /**\n    //  * The unique integer identifier of the second rigid-body this joint is attached to.\n    //  */\n    // public bodyHandle2(): RigidBodyHandle {\n    //     return this.rawSet.jointBodyHandle2(this.handle);\n    // }\n    //\n    // /**\n    //  * The type of this joint given as a string.\n    //  */\n    // public type(): JointType {\n    //     return this.rawSet.jointType(this.handle);\n    // }\n    //\n    // // #if DIM3\n    // /**\n    //  * The rotation quaternion that aligns this joint's first local axis to the `x` axis.\n    //  */\n    // public frameX1(): Rotation {\n    //     return RotationOps.fromRaw(this.rawSet.jointFrameX1(this.handle));\n    // }\n    //\n    // // #endif\n    //\n    // // #if DIM3\n    // /**\n    //  * The rotation matrix that aligns this joint's second local axis to the `x` axis.\n    //  */\n    // public frameX2(): Rotation {\n    //     return RotationOps.fromRaw(this.rawSet.jointFrameX2(this.handle));\n    // }\n    //\n    // // #endif\n    //\n    // /**\n    //  * The position of the first anchor of this joint.\n    //  *\n    //  * The first anchor gives the position of the points application point on the\n    //  * local frame of the first rigid-body it is attached to.\n    //  */\n    // public anchor1(): Vector {\n    //     return VectorOps.fromRaw(this.rawSet.jointAnchor1(this.handle));\n    // }\n    //\n    // /**\n    //  * The position of the second anchor of this joint.\n    //  *\n    //  * The second anchor gives the position of the points application point on the\n    //  * local frame of the second rigid-body it is attached to.\n    //  */\n    // public anchor2(): Vector {\n    //     return VectorOps.fromRaw(this.rawSet.jointAnchor2(this.handle));\n    // }\n    /**\n     * Controls whether contacts are computed between colliders attached\n     * to the rigid-bodies linked by this joint.\n     */\n    setContactsEnabled(enabled) {\n        this.rawSet.jointSetContactsEnabled(this.handle, enabled);\n    }\n    /**\n     * Indicates if contacts are enabled between colliders attached\n     * to the rigid-bodies linked by this joint.\n     */\n    contactsEnabled() {\n        return this.rawSet.jointContactsEnabled(this.handle);\n    }\n}\nexport class UnitMultibodyJoint extends MultibodyJoint {\n}\nexport class FixedMultibodyJoint extends MultibodyJoint {\n}\nexport class PrismaticMultibodyJoint extends UnitMultibodyJoint {\n    rawAxis() {\n        return RawJointAxis.LinX;\n    }\n}\nexport class RevoluteMultibodyJoint extends UnitMultibodyJoint {\n    rawAxis() {\n        return RawJointAxis.AngX;\n    }\n}\n// #if DIM3\nexport class SphericalMultibodyJoint extends MultibodyJoint {\n}\n// #endif\n//# sourceMappingURL=multibody_joint.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.hmd = (module) => {\n\tmodule = Object.create(module);\n\tif (!module.children) module.children = [];\n\tObject.defineProperty(module, 'exports', {\n\t\tenumerable: true,\n\t\tset: () => {\n\t\t\tthrow new Error('ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: ' + module.id);\n\t\t}\n\t});\n\treturn module;\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.v = (exports, wasmModuleId, wasmModuleHash, importsObj) => {\n\n\tvar req = fetch(__webpack_require__.p + \"\" + wasmModuleHash + \".module.wasm\");\n\tvar fallback = () => (req\n\t\t.then((x) => (x.arrayBuffer()))\n\t\t.then((bytes) => (WebAssembly.instantiate(bytes, importsObj)))\n\t\t.then((res) => (Object.assign(exports, res.instance.exports))));\n\treturn req.then((res) => {\n\t\tif (typeof WebAssembly.instantiateStreaming === \"function\") {\n\n\t\t\treturn WebAssembly.instantiateStreaming(res, importsObj)\n\t\t\t\t.then(\n\t\t\t\t\t(res) => (Object.assign(exports, res.instance.exports)),\n\t\t\t\t\t(e) => {\n\t\t\t\t\t\tif(res.headers.get(\"Content-Type\") !== \"application/wasm\") {\n\t\t\t\t\t\t\tconsole.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\t\t\t\t\t\t\treturn fallback();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t}\n\t\treturn fallback();\n\t});\n};","__webpack_require__.p = \"./\";","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(1332);\n"],"names":["webpackQueues","webpackExports","webpackError","resolveQueue","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_classCallCheck","_defineProperties","_toPropertyKey","key","_toPrimitive","toPrimitive","String","Number","log","message","window","debugLog","console","concat","GameCore","this","update","bind","fixedUpdate","events","GameEvents","state","GameState","ui","GameUI","world","GameWorld","gameTime","physicsUpdateRate","physicsAccumulator","lastFrameTime","init","_init","_callee","_context","updateLoadingStatus","initBaseComponents","loadResources","showMainMenu","t0","showErrorScreen","_initBaseComponents","_callee2","_context2","renderer","Renderer","gameCanvas","input","InputHandler","network","NetworkManager","physics","PhysicsManager","initComponents","setupEventListeners","_loadResources","_callee3","_this","_context3","setTimeout","isLoading","_startGame","_callee4","_context4","hideMainMenu","showGameScreen","isRunning","currentScene","setupScene","initialize","connect","error","performance","now","requestAnimationFrame","deltaTime","isConnected","timestamp","currentTime","clampedDeltaTime","Math","min","isReady","render","player","document","addEventListener","game","errorMessage","createElement","style","cssText","textContent","body","appendChild","QueryFilterFlags","QueryPipeline","free","raw","undefined","colliders","castRay","bodies","ray","maxToi","solid","filterFlags","filterGroups","filterExcludeCollider","filterExcludeRigidBody","filterPredicate","rawOrig","intoRaw","origin","rawDir","dir","result","fromRaw","castRayAndGetNormal","intersectionsWithRay","callback","rawInter","intersectionWithShape","shapePos","shapeRot","shape","rawPos","rawRot","rawShape","projectPoint","point","rawPoint","projectPointAndGetFeature","intersectionsWithPoint","castShape","shapeVel","targetDistance","stopAtPenetration","rawVel","intersectionsWithShape","collidersWithAabbIntersectingAabb","aabbCenter","aabbHalfExtents","rawCenter","rawHalfExtents","CoefficientCombineRule","DebugRenderBuffers","vertices","colors","DebugRenderPipeline","impulse_joints","multibody_joints","narrow_phase","wasm","__wbg_set_wasm","val","heap","Array","fill","getObject","idx","heap_next","addHeapObject","obj","handleError","args","__wbindgen_export_0","isLikeNone","x","cachedDataViewMemory0","getDataViewMemory0","buffer","detached","memory","DataView","takeObject","ret","dropObject","cachedTextDecoder","TextDecoder","module","require","ignoreBOM","fatal","decode","cachedUint8ArrayMemory0","getStringFromWasm0","ptr","len","byteLength","Uint8Array","subarray","version","deferred1_0","deferred1_1","retptr","__wbindgen_add_to_stack_pointer","r0","getInt32","r1","__wbindgen_export_1","_assertClass","instance","klass","stack_pointer","addBorrowedObject","cachedFloat32ArrayMemory0","getFloat32ArrayMemory0","Float32Array","getArrayF32FromWasm0","cachedUint32ArrayMemory0","getUint32ArrayMemory0","Uint32Array","WASM_VECTOR_LEN","passArrayF32ToWasm0","malloc","set","passArray32ToWasm0","freeze","Vertex","Edge","Face","Unknown","RawJointAxis","LinX","LinY","LinZ","AngX","AngY","AngZ","RawJointType","Revolute","Fixed","Prismatic","Rope","Spring","Spherical","Generic","RawShapeType","AccelerationBased","ForceBased","Dynamic","KinematicPositionBased","KinematicVelocityBased","Ball","Cuboid","Capsule","Segment","Polyline","Triangle","TriMesh","HeightField","Compound","ConvexPolyhedron","Cylinder","Cone","RoundCuboid","RoundTriangle","RoundCylinder","RoundCone","RoundConvexPolyhedron","HalfSpace","RawBroadPhaseFinalization","FinalizationRegistry","register","unregister","__wbg_rawbroadphase_free","RawBroadPhase","__wrap","__wbg_ptr","__destroy_into_raw","rawbroadphase_new","RawCCDSolverFinalization","__wbg_rawccdsolver_free","RawCCDSolver","rawccdsolver_new","RawCharacterCollisionFinalization","__wbg_rawcharactercollision_free","RawCharacterCollision","rawcharactercollision_new","rawcharactercollision_handle","translationDeltaApplied","rawcharactercollision_translationDeltaApplied","RawVector","translationDeltaRemaining","rawcharactercollision_translationDeltaRemaining","toi","rawcharactercollision_toi","worldWitness1","rawcharactercollision_worldWitness1","worldWitness2","rawcharactercollision_worldWitness2","worldNormal1","rawcharactercollision_worldNormal1","worldNormal2","rawcharactercollision_worldNormal2","RawColliderSetFinalization","__wbg_rawcolliderset_free","RawColliderSet","coTranslation","rawcolliderset_coTranslation","coRotation","rawcolliderset_coRotation","RawRotation","coSetTranslation","z","rawcolliderset_coSetTranslation","coSetTranslationWrtParent","rawcolliderset_coSetTranslationWrtParent","coSetRotation","w","rawcolliderset_coSetRotation","coSetRotationWrtParent","rawcolliderset_coSetRotationWrtParent","coIsSensor","rawcolliderset_coIsSensor","coShapeType","rawcolliderset_coShapeType","coHalfspaceNormal","rawcolliderset_coHalfspaceNormal","coHalfExtents","rawcolliderset_coHalfExtents","coSetHalfExtents","newHalfExtents","rawcolliderset_coSetHalfExtents","coRadius","rawcolliderset_coRadius","coSetRadius","newRadius","rawcolliderset_coSetRadius","coHalfHeight","rawcolliderset_coHalfHeight","coSetHalfHeight","newHalfheight","rawcolliderset_coSetHalfHeight","coRoundRadius","rawcolliderset_coRoundRadius","coSetRoundRadius","newBorderRadius","rawcolliderset_coSetRoundRadius","coVertices","rawcolliderset_coVertices","v1","coIndices","rawcolliderset_coIndices","coTriMeshFlags","rawcolliderset_coTriMeshFlags","coHeightFieldFlags","rawcolliderset_coHeightFieldFlags","coHeightfieldHeights","rawcolliderset_coHeightfieldHeights","coHeightfieldScale","rawcolliderset_coHeightfieldScale","coHeightfieldNRows","rawcolliderset_coHeightfieldNRows","coHeightfieldNCols","rawcolliderset_coHeightfieldNCols","coParent","rawcolliderset_coParent","r2","getFloat64","coSetEnabled","enabled","rawcolliderset_coSetEnabled","coIsEnabled","rawcolliderset_coIsEnabled","coSetContactSkin","contact_skin","rawcolliderset_coSetContactSkin","coContactSkin","rawcolliderset_coContactSkin","coFriction","rawcolliderset_coFriction","coRestitution","rawcolliderset_coRestitution","coDensity","rawcolliderset_coDensity","coMass","rawcolliderset_coMass","coVolume","rawcolliderset_coVolume","coCollisionGroups","rawcolliderset_coCollisionGroups","coSolverGroups","rawcolliderset_coSolverGroups","coActiveHooks","rawcolliderset_coActiveHooks","coActiveCollisionTypes","rawcolliderset_coActiveCollisionTypes","coActiveEvents","rawcolliderset_coActiveEvents","coContactForceEventThreshold","rawcolliderset_coContactForceEventThreshold","coContainsPoint","rawcolliderset_coContainsPoint","coCastShape","colliderVel","shape2","shape2Pos","shape2Rot","shape2Vel","target_distance","stop_at_penetration","RawShape","rawcolliderset_coCastShape","RawShapeCastHit","coCastCollider","collider1Vel","collider2handle","collider2Vel","max_toi","rawcolliderset_coCastCollider","RawColliderShapeCastHit","coIntersectsShape","shapePos2","shapeRot2","rawcolliderset_coIntersectsShape","coContactShape","prediction","rawcolliderset_coContactShape","RawShapeContact","coContactCollider","rawcolliderset_coContactCollider","coProjectPoint","rawcolliderset_coProjectPoint","RawPointProjection","coIntersectsRay","rayOrig","rayDir","rawcolliderset_coIntersectsRay","coCastRay","rawcolliderset_coCastRay","coCastRayAndGetNormal","rawcolliderset_coCastRayAndGetNormal","RawRayIntersection","coSetSensor","is_sensor","rawcolliderset_coSetSensor","coSetRestitution","restitution","rawcolliderset_coSetRestitution","coSetFriction","friction","rawcolliderset_coSetFriction","coFrictionCombineRule","rawcolliderset_coFrictionCombineRule","coSetFrictionCombineRule","rule","rawcolliderset_coSetFrictionCombineRule","coRestitutionCombineRule","rawcolliderset_coRestitutionCombineRule","coSetRestitutionCombineRule","rawcolliderset_coSetRestitutionCombineRule","coSetCollisionGroups","groups","rawcolliderset_coSetCollisionGroups","coSetSolverGroups","rawcolliderset_coSetSolverGroups","coSetActiveHooks","hooks","rawcolliderset_coSetActiveHooks","coSetActiveEvents","rawcolliderset_coSetActiveEvents","coSetActiveCollisionTypes","types","rawcolliderset_coSetActiveCollisionTypes","coSetShape","rawcolliderset_coSetShape","coSetContactForceEventThreshold","threshold","rawcolliderset_coSetContactForceEventThreshold","coSetDensity","density","rawcolliderset_coSetDensity","coSetMass","mass","rawcolliderset_coSetMass","coSetMassProperties","centerOfMass","principalAngularInertia","angularInertiaFrame","rawcolliderset_coSetMassProperties","rawcolliderset_new","rawcolliderset_len","contains","rawcolliderset_contains","createCollider","translation","rotation","massPropsMode","frictionCombineRule","restitutionCombineRule","isSensor","collisionGroups","solverGroups","activeCollisionTypes","activeHooks","activeEvents","contactForceEventThreshold","contactSkin","hasParent","parent","RawRigidBodySet","rawcolliderset_createCollider","remove","islands","wakeUp","RawIslandManager","rawcolliderset_remove","isHandleValid","forEachColliderHandle","rawcolliderset_forEachColliderHandle","RawColliderShapeCastHitFinalization","__wbg_rawcollidershapecasthit_free","colliderHandle","time_of_impact","rawcollidershapecasthit_time_of_impact","witness1","rawcollidershapecasthit_witness1","witness2","rawcollidershapecasthit_witness2","normal1","normal2","RawContactForceEventFinalization","__wbg_rawcontactforceevent_free","RawContactForceEvent","collider1","collider2","rawcontactforceevent_collider2","total_force","rawcontactforceevent_total_force","total_force_magnitude","rawcontactforceevent_total_force_magnitude","max_force_direction","rawcontactforceevent_max_force_direction","max_force_magnitude","rawcontactforceevent_max_force_magnitude","RawContactManifoldFinalization","__wbg_rawcontactmanifold_free","RawContactManifold","normal","rawcontactmanifold_normal","local_n1","rawcontactmanifold_local_n1","local_n2","rawcontactmanifold_local_n2","subshape1","rawcontactmanifold_subshape1","subshape2","rawcontactmanifold_subshape2","num_contacts","rawcontactmanifold_num_contacts","contact_local_p1","rawcontactmanifold_contact_local_p1","contact_local_p2","rawcontactmanifold_contact_local_p2","contact_dist","rawcontactmanifold_contact_dist","contact_fid1","rawcontactmanifold_contact_fid1","contact_fid2","rawcontactmanifold_contact_fid2","contact_impulse","rawcontactmanifold_contact_impulse","contact_tangent_impulse_x","rawcontactmanifold_contact_tangent_impulse_x","contact_tangent_impulse_y","rawcontactmanifold_contact_tangent_impulse_y","num_solver_contacts","rawcontactmanifold_num_solver_contacts","solver_contact_point","rawcontactmanifold_solver_contact_point","solver_contact_dist","rawcontactmanifold_solver_contact_dist","solver_contact_friction","rawcontactmanifold_solver_contact_friction","solver_contact_restitution","rawcontactmanifold_solver_contact_restitution","solver_contact_tangent_velocity","rawcontactmanifold_solver_contact_tangent_velocity","RawContactPairFinalization","__wbg_rawcontactpair_free","RawContactPair","rawcontactpair_collider1","rawcontactpair_collider2","numContactManifolds","rawcontactpair_numContactManifolds","contactManifold","rawcontactpair_contactManifold","RawDebugRenderPipelineFinalization","__wbg_rawdebugrenderpipeline_free","RawDebugRenderPipeline","rawdebugrenderpipeline_new","rawdebugrenderpipeline_vertices","rawdebugrenderpipeline_colors","RawImpulseJointSet","RawMultibodyJointSet","RawNarrowPhase","rawdebugrenderpipeline_render","RawDeserializedWorldFinalization","__wbg_rawdeserializedworld_free","RawDeserializedWorld","takeGravity","rawdeserializedworld_takeGravity","takeIntegrationParameters","rawdeserializedworld_takeIntegrationParameters","RawIntegrationParameters","takeIslandManager","rawdeserializedworld_takeIslandManager","takeBroadPhase","rawdeserializedworld_takeBroadPhase","takeNarrowPhase","rawdeserializedworld_takeNarrowPhase","takeBodies","rawdeserializedworld_takeBodies","takeColliders","rawdeserializedworld_takeColliders","takeImpulseJoints","rawdeserializedworld_takeImpulseJoints","takeMultibodyJoints","rawdeserializedworld_takeMultibodyJoints","RawDynamicRayCastVehicleControllerFinalization","__wbg_rawdynamicraycastvehiclecontroller_free","RawDynamicRayCastVehicleController","chassis","rawdynamicraycastvehiclecontroller_new","current_vehicle_speed","rawdynamicraycastvehiclecontroller_current_vehicle_speed","rawdynamicraycastvehiclecontroller_chassis","index_up_axis","rawdynamicraycastvehiclecontroller_index_up_axis","set_index_up_axis","axis","rawdynamicraycastvehiclecontroller_set_index_up_axis","index_forward_axis","rawdynamicraycastvehiclecontroller_index_forward_axis","set_index_forward_axis","rawdynamicraycastvehiclecontroller_set_index_forward_axis","add_wheel","chassis_connection_cs","direction_cs","axle_cs","suspension_rest_length","radius","rawdynamicraycastvehiclecontroller_add_wheel","num_wheels","rawdynamicraycastvehiclecontroller_num_wheels","update_vehicle","dt","queries","filter_flags","filter_groups","filter_predicate","RawQueryPipeline","rawdynamicraycastvehiclecontroller_update_vehicle","wheel_chassis_connection_point_cs","rawdynamicraycastvehiclecontroller_wheel_chassis_connection_point_cs","set_wheel_chassis_connection_point_cs","rawdynamicraycastvehiclecontroller_set_wheel_chassis_connection_point_cs","wheel_suspension_rest_length","rawdynamicraycastvehiclecontroller_wheel_suspension_rest_length","set_wheel_suspension_rest_length","rawdynamicraycastvehiclecontroller_set_wheel_suspension_rest_length","wheel_max_suspension_travel","rawdynamicraycastvehiclecontroller_wheel_max_suspension_travel","set_wheel_max_suspension_travel","rawdynamicraycastvehiclecontroller_set_wheel_max_suspension_travel","wheel_radius","rawdynamicraycastvehiclecontroller_wheel_radius","set_wheel_radius","rawdynamicraycastvehiclecontroller_set_wheel_radius","wheel_suspension_stiffness","rawdynamicraycastvehiclecontroller_wheel_suspension_stiffness","set_wheel_suspension_stiffness","rawdynamicraycastvehiclecontroller_set_wheel_suspension_stiffness","wheel_suspension_compression","rawdynamicraycastvehiclecontroller_wheel_suspension_compression","set_wheel_suspension_compression","rawdynamicraycastvehiclecontroller_set_wheel_suspension_compression","wheel_suspension_relaxation","rawdynamicraycastvehiclecontroller_wheel_suspension_relaxation","set_wheel_suspension_relaxation","rawdynamicraycastvehiclecontroller_set_wheel_suspension_relaxation","wheel_max_suspension_force","rawdynamicraycastvehiclecontroller_wheel_max_suspension_force","set_wheel_max_suspension_force","rawdynamicraycastvehiclecontroller_set_wheel_max_suspension_force","wheel_brake","rawdynamicraycastvehiclecontroller_wheel_brake","set_wheel_brake","rawdynamicraycastvehiclecontroller_set_wheel_brake","wheel_steering","rawdynamicraycastvehiclecontroller_wheel_steering","set_wheel_steering","rawdynamicraycastvehiclecontroller_set_wheel_steering","wheel_engine_force","rawdynamicraycastvehiclecontroller_wheel_engine_force","set_wheel_engine_force","rawdynamicraycastvehiclecontroller_set_wheel_engine_force","wheel_direction_cs","rawdynamicraycastvehiclecontroller_wheel_direction_cs","set_wheel_direction_cs","rawdynamicraycastvehiclecontroller_set_wheel_direction_cs","wheel_axle_cs","rawdynamicraycastvehiclecontroller_wheel_axle_cs","set_wheel_axle_cs","rawdynamicraycastvehiclecontroller_set_wheel_axle_cs","wheel_friction_slip","rawdynamicraycastvehiclecontroller_wheel_friction_slip","set_wheel_friction_slip","rawdynamicraycastvehiclecontroller_set_wheel_friction_slip","wheel_side_friction_stiffness","rawdynamicraycastvehiclecontroller_wheel_side_friction_stiffness","set_wheel_side_friction_stiffness","stiffness","rawdynamicraycastvehiclecontroller_set_wheel_side_friction_stiffness","wheel_rotation","rawdynamicraycastvehiclecontroller_wheel_rotation","wheel_forward_impulse","rawdynamicraycastvehiclecontroller_wheel_forward_impulse","wheel_side_impulse","rawdynamicraycastvehiclecontroller_wheel_side_impulse","wheel_suspension_force","rawdynamicraycastvehiclecontroller_wheel_suspension_force","wheel_contact_normal_ws","rawdynamicraycastvehiclecontroller_wheel_contact_normal_ws","wheel_contact_point_ws","rawdynamicraycastvehiclecontroller_wheel_contact_point_ws","wheel_suspension_length","rawdynamicraycastvehiclecontroller_wheel_suspension_length","wheel_hard_point_ws","rawdynamicraycastvehiclecontroller_wheel_hard_point_ws","wheel_is_in_contact","rawdynamicraycastvehiclecontroller_wheel_is_in_contact","wheel_ground_object","rawdynamicraycastvehiclecontroller_wheel_ground_object","RawEventQueueFinalization","__wbg_raweventqueue_free","RawEventQueue","autoDrain","raweventqueue_new","drainCollisionEvents","raweventqueue_drainCollisionEvents","drainContactForceEvents","raweventqueue_drainContactForceEvents","clear","raweventqueue_clear","RawGenericJointFinalization","__wbg_rawgenericjoint_free","RawGenericJoint","generic","anchor1","anchor2","lockedAxes","rawgenericjoint_generic","spring","rest_length","damping","rawgenericjoint_spring","rope","rawgenericjoint_rope","spherical","rawgenericjoint_spherical","prismatic","limitsEnabled","limitsMin","limitsMax","rawgenericjoint_prismatic","fixed","axes1","axes2","rawgenericjoint_fixed","revolute","rawgenericjoint_revolute","RawImpulseJointSetFinalization","__wbg_rawimpulsejointset_free","jointType","rawimpulsejointset_jointType","jointBodyHandle1","rawimpulsejointset_jointBodyHandle1","jointBodyHandle2","rawimpulsejointset_jointBodyHandle2","jointFrameX1","rawimpulsejointset_jointFrameX1","jointFrameX2","rawimpulsejointset_jointFrameX2","jointAnchor1","rawimpulsejointset_jointAnchor1","jointAnchor2","rawimpulsejointset_jointAnchor2","jointSetAnchor1","newPos","rawimpulsejointset_jointSetAnchor1","jointSetAnchor2","rawimpulsejointset_jointSetAnchor2","jointContactsEnabled","rawimpulsejointset_jointContactsEnabled","jointSetContactsEnabled","rawimpulsejointset_jointSetContactsEnabled","jointLimitsEnabled","rawimpulsejointset_jointLimitsEnabled","jointLimitsMin","rawimpulsejointset_jointLimitsMin","jointLimitsMax","rawimpulsejointset_jointLimitsMax","jointSetLimits","max","rawimpulsejointset_jointSetLimits","jointConfigureMotorModel","model","rawimpulsejointset_jointConfigureMotorModel","jointConfigureMotorVelocity","targetVel","factor","rawimpulsejointset_jointConfigureMotorVelocity","jointConfigureMotorPosition","targetPos","rawimpulsejointset_jointConfigureMotorPosition","jointConfigureMotor","rawimpulsejointset_jointConfigureMotor","rawimpulsejointset_new","createJoint","params","parent1","parent2","wake_up","rawimpulsejointset_createJoint","rawimpulsejointset_remove","rawimpulsejointset_len","rawimpulsejointset_contains","forEachJointHandle","rawimpulsejointset_forEachJointHandle","forEachJointAttachedToRigidBody","rawimpulsejointset_forEachJointAttachedToRigidBody","RawIntegrationParametersFinalization","__wbg_rawintegrationparameters_free","rawintegrationparameters_new","rawintegrationparameters_dt","contact_erp","rawintegrationparameters_contact_erp","normalizedAllowedLinearError","rawintegrationparameters_normalizedAllowedLinearError","normalizedPredictionDistance","numSolverIterations","rawintegrationparameters_numSolverIterations","numAdditionalFrictionIterations","rawintegrationparameters_numAdditionalFrictionIterations","numInternalPgsIterations","rawintegrationparameters_numInternalPgsIterations","minIslandSize","maxCcdSubsteps","rawintegrationparameters_maxCcdSubsteps","lengthUnit","rawintegrationparameters_lengthUnit","rawintegrationparameters_set_dt","contact_natural_frequency","rawintegrationparameters_set_contact_natural_frequency","rawintegrationparameters_set_normalizedAllowedLinearError","rawintegrationparameters_set_normalizedPredictionDistance","rawintegrationparameters_set_numSolverIterations","rawintegrationparameters_set_numAdditionalFrictionIterations","rawintegrationparameters_set_numInternalPgsIterations","rawintegrationparameters_set_minIslandSize","rawintegrationparameters_set_maxCcdSubsteps","rawintegrationparameters_set_lengthUnit","switchToStandardPgsSolver","rawintegrationparameters_switchToStandardPgsSolver","switchToSmallStepsPgsSolver","rawintegrationparameters_switchToSmallStepsPgsSolver","switchToSmallStepsPgsSolverWithoutWarmstart","rawintegrationparameters_switchToSmallStepsPgsSolverWithoutWarmstart","RawIslandManagerFinalization","__wbg_rawislandmanager_free","rawislandmanager_new","forEachActiveRigidBodyHandle","rawislandmanager_forEachActiveRigidBodyHandle","RawKinematicCharacterControllerFinalization","__wbg_rawkinematiccharactercontroller_free","RawKinematicCharacterController","offset","rawkinematiccharactercontroller_new","up","setUp","vector","rawkinematiccharactercontroller_setUp","normalNudgeFactor","rawkinematiccharactercontroller_normalNudgeFactor","setNormalNudgeFactor","rawkinematiccharactercontroller_setNormalNudgeFactor","setOffset","rawkinematiccharactercontroller_setOffset","slideEnabled","rawkinematiccharactercontroller_slideEnabled","setSlideEnabled","rawkinematiccharactercontroller_setSlideEnabled","autostepMaxHeight","rawkinematiccharactercontroller_autostepMaxHeight","autostepMinWidth","rawkinematiccharactercontroller_autostepMinWidth","autostepIncludesDynamicBodies","rawkinematiccharactercontroller_autostepIncludesDynamicBodies","autostepEnabled","rawkinematiccharactercontroller_autostepEnabled","enableAutostep","maxHeight","minWidth","includeDynamicBodies","rawkinematiccharactercontroller_enableAutostep","disableAutostep","rawkinematiccharactercontroller_disableAutostep","maxSlopeClimbAngle","rawkinematiccharactercontroller_maxSlopeClimbAngle","setMaxSlopeClimbAngle","angle","rawkinematiccharactercontroller_setMaxSlopeClimbAngle","minSlopeSlideAngle","rawkinematiccharactercontroller_minSlopeSlideAngle","setMinSlopeSlideAngle","rawkinematiccharactercontroller_setMinSlopeSlideAngle","snapToGroundDistance","rawkinematiccharactercontroller_snapToGroundDistance","enableSnapToGround","distance","rawkinematiccharactercontroller_enableSnapToGround","disableSnapToGround","rawkinematiccharactercontroller_disableSnapToGround","snapToGroundEnabled","rawkinematiccharactercontroller_snapToGroundEnabled","computeColliderMovement","collider_handle","desired_translation_delta","apply_impulses_to_dynamic_bodies","character_mass","rawkinematiccharactercontroller_computeColliderMovement","fround","computedMovement","rawkinematiccharactercontroller_computedMovement","computedGrounded","rawkinematiccharactercontroller_computedGrounded","numComputedCollisions","rawkinematiccharactercontroller_numComputedCollisions","computedCollision","collision","rawkinematiccharactercontroller_computedCollision","RawMultibodyJointSetFinalization","__wbg_rawmultibodyjointset_free","rawmultibodyjointset_jointType","rawmultibodyjointset_jointFrameX1","rawmultibodyjointset_jointFrameX2","rawmultibodyjointset_jointAnchor1","rawmultibodyjointset_jointAnchor2","rawmultibodyjointset_jointContactsEnabled","rawmultibodyjointset_jointSetContactsEnabled","rawmultibodyjointset_jointLimitsEnabled","rawmultibodyjointset_jointLimitsMin","rawmultibodyjointset_jointLimitsMax","rawmultibodyjointset_new","rawmultibodyjointset_createJoint","rawmultibodyjointset_remove","rawmultibodyjointset_contains","rawmultibodyjointset_forEachJointHandle","rawmultibodyjointset_forEachJointAttachedToRigidBody","RawNarrowPhaseFinalization","__wbg_rawnarrowphase_free","rawnarrowphase_new","contact_pairs_with","handle1","rawnarrowphase_contact_pairs_with","contact_pair","handle2","rawnarrowphase_contact_pair","intersection_pairs_with","rawnarrowphase_intersection_pairs_with","intersection_pair","rawnarrowphase_intersection_pair","RawPhysicsPipelineFinalization","__wbg_rawphysicspipeline_free","RawPhysicsPipeline","rawphysicspipeline_new","step","gravity","integrationParameters","broadPhase","narrowPhase","joints","articulations","ccd_solver","rawphysicspipeline_step","stepWithEvents","eventQueue","hookObject","hookFilterContactPair","hookFilterIntersectionPair","rawphysicspipeline_stepWithEvents","RawPidControllerFinalization","__wbg_rawpidcontroller_free","RawPidController","kp","ki","kd","axes_mask","rawpidcontroller_new","set_kp","axes","rawpidcontroller_set_kp","set_ki","rawpidcontroller_set_ki","set_kd","rawpidcontroller_set_kd","set_axes_mask","rawpidcontroller_set_axes_mask","reset_integrals","rawpidcontroller_reset_integrals","apply_linear_correction","rb_handle","target_translation","target_linvel","rawpidcontroller_apply_linear_correction","apply_angular_correction","target_rotation","target_angvel","rawpidcontroller_apply_angular_correction","linear_correction","rawpidcontroller_linear_correction","angular_correction","rawpidcontroller_angular_correction","RawPointColliderProjectionFinalization","__wbg_rawpointcolliderprojection_free","RawPointColliderProjection","rawpointcolliderprojection_colliderHandle","rawpointcolliderprojection_point","isInside","rawpointcolliderprojection_isInside","featureType","rawpointcolliderprojection_featureType","featureId","rawpointcolliderprojection_featureId","RawPointProjectionFinalization","__wbg_rawpointprojection_free","rawpointprojection_point","rawpointprojection_isInside","RawQueryPipelineFinalization","__wbg_rawquerypipeline_free","rawquerypipeline_new","rawquerypipeline_update","filter_exclude_collider","filter_exclude_rigid_body","rawquerypipeline_castRay","RawRayColliderHit","rawquerypipeline_castRayAndGetNormal","RawRayColliderIntersection","rawquerypipeline_intersectionsWithRay","rawquerypipeline_intersectionWithShape","rawquerypipeline_projectPoint","rawquerypipeline_projectPointAndGetFeature","rawquerypipeline_intersectionsWithPoint","rawquerypipeline_castShape","rawquerypipeline_intersectionsWithShape","rawquerypipeline_collidersWithAabbIntersectingAabb","RawRayColliderHitFinalization","__wbg_rawraycolliderhit_free","timeOfImpact","RawRayColliderIntersectionFinalization","__wbg_rawraycolliderintersection_free","RawRayIntersectionFinalization","__wbg_rawrayintersection_free","RawRigidBodySetFinalization","__wbg_rawrigidbodyset_free","rbTranslation","rawrigidbodyset_rbTranslation","rbRotation","rawrigidbodyset_rbRotation","rbSleep","rawrigidbodyset_rbSleep","rbIsSleeping","rawrigidbodyset_rbIsSleeping","rbIsMoving","rawrigidbodyset_rbIsMoving","rbNextTranslation","rawrigidbodyset_rbNextTranslation","rbNextRotation","rawrigidbodyset_rbNextRotation","rbSetTranslation","rawrigidbodyset_rbSetTranslation","rbSetRotation","rawrigidbodyset_rbSetRotation","rbSetLinvel","linvel","rawrigidbodyset_rbSetLinvel","rbSetAngvel","angvel","rawrigidbodyset_rbSetAngvel","rbSetNextKinematicTranslation","rawrigidbodyset_rbSetNextKinematicTranslation","rbSetNextKinematicRotation","rawrigidbodyset_rbSetNextKinematicRotation","rbRecomputeMassPropertiesFromColliders","rawrigidbodyset_rbRecomputeMassPropertiesFromColliders","rbSetAdditionalMass","rawrigidbodyset_rbSetAdditionalMass","rbSetAdditionalMassProperties","rawrigidbodyset_rbSetAdditionalMassProperties","rbLinvel","rawrigidbodyset_rbLinvel","rbAngvel","rawrigidbodyset_rbAngvel","rbLockTranslations","locked","rawrigidbodyset_rbLockTranslations","rbSetEnabledTranslations","allow_x","allow_y","allow_z","rawrigidbodyset_rbSetEnabledTranslations","rbLockRotations","rawrigidbodyset_rbLockRotations","rbSetEnabledRotations","rawrigidbodyset_rbSetEnabledRotations","rbDominanceGroup","rawrigidbodyset_rbDominanceGroup","rbSetDominanceGroup","group","rawrigidbodyset_rbSetDominanceGroup","rbEnableCcd","rawrigidbodyset_rbEnableCcd","rbSetSoftCcdPrediction","rawrigidbodyset_rbSetSoftCcdPrediction","rbMass","rawrigidbodyset_rbMass","rbInvMass","rawrigidbodyset_rbInvMass","rbEffectiveInvMass","rawrigidbodyset_rbEffectiveInvMass","rbLocalCom","rawrigidbodyset_rbLocalCom","rbWorldCom","rawrigidbodyset_rbWorldCom","rbInvPrincipalInertiaSqrt","rawrigidbodyset_rbInvPrincipalInertiaSqrt","rbPrincipalInertiaLocalFrame","rawrigidbodyset_rbPrincipalInertiaLocalFrame","rbPrincipalInertia","rawrigidbodyset_rbPrincipalInertia","rbEffectiveWorldInvInertiaSqrt","rawrigidbodyset_rbEffectiveWorldInvInertiaSqrt","RawSdpMatrix3","rbEffectiveAngularInertia","rawrigidbodyset_rbEffectiveAngularInertia","rbWakeUp","rawrigidbodyset_rbWakeUp","rbIsCcdEnabled","rawrigidbodyset_rbIsCcdEnabled","rbSoftCcdPrediction","rawrigidbodyset_rbSoftCcdPrediction","rbNumColliders","rawrigidbodyset_rbNumColliders","rbCollider","at","rawrigidbodyset_rbCollider","rbBodyType","rawrigidbodyset_rbBodyType","rbSetBodyType","status","rawrigidbodyset_rbSetBodyType","rbIsFixed","rawrigidbodyset_rbIsFixed","rbIsKinematic","rawrigidbodyset_rbIsKinematic","rbIsDynamic","rawrigidbodyset_rbIsDynamic","rbLinearDamping","rawrigidbodyset_rbLinearDamping","rbAngularDamping","rawrigidbodyset_rbAngularDamping","rbSetLinearDamping","rawrigidbodyset_rbSetLinearDamping","rbSetAngularDamping","rawrigidbodyset_rbSetAngularDamping","rbSetEnabled","rawrigidbodyset_rbSetEnabled","rbIsEnabled","rawrigidbodyset_rbIsEnabled","rbGravityScale","rawrigidbodyset_rbGravityScale","rbSetGravityScale","rawrigidbodyset_rbSetGravityScale","rbResetForces","rawrigidbodyset_rbResetForces","rbResetTorques","rawrigidbodyset_rbResetTorques","rbAddForce","force","rawrigidbodyset_rbAddForce","rbApplyImpulse","impulse","rawrigidbodyset_rbApplyImpulse","rbAddTorque","torque","rawrigidbodyset_rbAddTorque","rbApplyTorqueImpulse","torque_impulse","rawrigidbodyset_rbApplyTorqueImpulse","rbAddForceAtPoint","rawrigidbodyset_rbAddForceAtPoint","rbApplyImpulseAtPoint","rawrigidbodyset_rbApplyImpulseAtPoint","rbAdditionalSolverIterations","rawrigidbodyset_rbAdditionalSolverIterations","rbSetAdditionalSolverIterations","iters","rawrigidbodyset_rbSetAdditionalSolverIterations","rbUserData","rawrigidbodyset_rbUserData","rbSetUserData","data","rawrigidbodyset_rbSetUserData","rbUserForce","rawrigidbodyset_rbUserForce","rbUserTorque","rawrigidbodyset_rbUserTorque","rawrigidbodyset_new","createRigidBody","gravityScale","massOnly","translationEnabledX","translationEnabledY","translationEnabledZ","rotationEnabledX","rotationEnabledY","rotationEnabledZ","linearDamping","angularDamping","rb_type","canSleep","sleeping","softCcdPrediction","ccdEnabled","dominanceGroup","additional_solver_iterations","rawrigidbodyset_createRigidBody","rawrigidbodyset_remove","rawrigidbodyset_contains","forEachRigidBodyHandle","rawrigidbodyset_forEachRigidBodyHandle","propagateModifiedBodyPositionsToColliders","rawrigidbodyset_propagateModifiedBodyPositionsToColliders","RawRotationFinalization","__wbg_rawrotation_free","rawrotation_new","identity","rawrotation_identity","rawrotation_x","rawrotation_w","RawSdpMatrix3Finalization","__wbg_rawsdpmatrix3_free","elements","rawsdpmatrix3_elements","RawSerializationPipelineFinalization","__wbg_rawserializationpipeline_free","RawSerializationPipeline","rawserializationpipeline_new","serializeAll","rawserializationpipeline_serializeAll","deserializeAll","rawserializationpipeline_deserializeAll","RawShapeFinalization","__wbg_rawshape_free","cuboid","hx","hy","hz","rawshape_cuboid","roundCuboid","borderRadius","rawshape_roundCuboid","ball","rawshape_ball","halfspace","rawshape_halfspace","capsule","halfHeight","rawshape_capsule","cylinder","rawshape_cylinder","roundCylinder","rawshape_roundCylinder","cone","rawshape_cone","roundCone","rawshape_roundCone","polyline","indices","ptr0","__wbindgen_export_2","len0","ptr1","len1","rawshape_polyline","trimesh","flags","rawshape_trimesh","heightfield","nrows","ncols","heights","scale","rawshape_heightfield","segment","p1","p2","rawshape_segment","triangle","p3","rawshape_triangle","roundTriangle","rawshape_roundTriangle","convexHull","points","rawshape_convexHull","roundConvexHull","rawshape_roundConvexHull","convexMesh","rawshape_convexMesh","roundConvexMesh","rawshape_roundConvexMesh","shapePos1","shapeRot1","shapeVel1","shapeVel2","rawshape_castShape","intersectsShape","rawshape_intersectsShape","contactShape","rawshape_contactShape","containsPoint","rawshape_containsPoint","rawshape_projectPoint","intersectsRay","rawshape_intersectsRay","rawshape_castRay","rawshape_castRayAndGetNormal","RawShapeCastHitFinalization","__wbg_rawshapecasthit_free","rawshapecasthit_witness1","rawshapecasthit_normal1","rawshapecasthit_normal2","RawShapeContactFinalization","__wbg_rawshapecontact_free","point1","point2","RawVectorFinalization","__wbg_rawvector_free","zero","rawvector_zero","rawvector_new","rawvector_set_x","rawvector_set_z","xyz","rawvector_xyz","yxz","rawvector_yxz","zxy","rawvector_zxy","xzy","rawvector_xzy","yzx","rawvector_yzx","zyx","rawvector_zyx","__wbg_bind_c8359b1cba058168","arg0","arg1","arg2","arg3","__wbg_buffer_609cc3eee51ed158","__wbg_call_7cccdd69e0791ae2","__wbg_call_833bed5770ea2041","__wbg_call_b8adc8b1d0a0d8eb","arg4","__wbg_length_3b4f022188ae8db6","__wbg_length_a446193dc22c12f8","__wbg_new_a12002a7f91c75be","__wbg_newwithbyteoffsetandlength_d97e637ebe145a9a","__wbg_newwithbyteoffsetandlength_e6b7e69acd4c7354","__wbg_newwithlength_5a5efe313cfd59f1","__wbg_rawcontactforceevent_new","__wbg_rawraycolliderintersection_new","__wbg_set_10bad9bee0e9c58b","__wbg_set_65595bdd868b3009","__wbindgen_boolean_get","__wbindgen_is_function","__wbindgen_memory","__wbindgen_number_get","setFloat64","setInt32","__wbindgen_number_new","__wbindgen_object_drop_ref","__wbindgen_throw","Player","options","id","isLocalPlayer","position","direction","health","maxHealth","speed","weapon","ammo","weaponType","fireRate","recoil","inventory","items","maxSlots","isMoving","isAiming","isShooting","canShoot","lastShootTime","currentState","viewAngle","normalViewAngle","aimingViewAngle","runningViewAngle","viewDistance","normalSpeed","runningSpeed","aimingSpeed","acceleration","velocity","mesh","setupControls","createModel","addPlayer","setMouseDownCallback","button","startAiming","setMouseUpCallback","stopAiming","setRightClickCallback","tryShoot","setMouseMoveCallback","delta","handleMouseMove","_this2","Date","applyRecoil","createShot","sendPlayerShoot","recoilX","random","recoilY","abs","mousePos","getMousePosition","newMousePos","canvasRect","canvas","getBoundingClientRect","canvasCenter","left","width","top","height","mouseVec","sqrt","atan2","sin","cos","handleMovement","updateCamera","handleRunning","updateAnimationState","updateModel","wasRunning","isKeyPressed","newState","moveDir","getMovementDirection","normalizedDir","newX","newZ","canMoveX","checkCollision","canMoveZ","sendPlayerMove","newPosition","scene","rayStart","_objectSpread","rayEnd","createTemporaryBeam","updateObjectTransform","BroadPhase","RAPIER","_defineProperty","_GameCore","Game","_inherits","handleGlobalError","handlePromiseError","startGameButton","getElementById","startGame","settingsButton","closeInventoryButton","hideInventory","addKeyCallback","isInScene","toggleInventory","togglePause","vkBridge","send","event","filename","lineno","preventDefault","_event$reason","reason","CharacterCollision","KinematicCharacterController","rawCharacterCollision","_applyImpulsesToDynamicBodies","_characterMass","rawVect","applyImpulsesToDynamicBodies","setApplyImpulsesToDynamicBodies","characterMass","setCharacterMass","collider","desiredTranslationDelta","rawTranslationDelta","castClosure","out","get","socket","connected","serverUrl","mockMode","eventHandlers","disconnect","playerMove","playerShoot","playerDamage","itemPickup","npcSpawn","npcMove","gameState","mockData","players","npcs","playerId","generateMockData","handler","startMockNpcMovement","floor","properties","setInterval","npc","moveX","moveZ","itemId","itemType","Map","isInitialized","initPromise","_ref","_this$RAPIER$World","initRapier","World","_x","timestep","updateBodies","_step","_iterator","_createForOfIteratorHelper","_step$value","object","getTranslation","updatePhysics","err","rigidBodyDesc","size","RigidBodyDesc","setTranslation","RigidBodyType","colliderDesc","rigidBody","ColliderDesc","dynamic","setCanSleep","setLinearDamping","maxDistance","Ray","warn","has","removeRigidBody","DynamicRayCastVehicleController","_chassis","updateVehicle","currentVehicleSpeed","indexUpAxis","indexForwardAxis","setIndexForwardAxis","addWheel","chassisConnectionCs","directionCs","axleCs","suspensionRestLength","rawChassisConnectionCs","rawDirectionCs","rawAxleCs","numWheels","wheelChassisConnectionPointCs","setWheelChassisConnectionPointCs","rawValue","wheelSuspensionRestLength","setWheelSuspensionRestLength","wheelMaxSuspensionTravel","setWheelMaxSuspensionTravel","wheelRadius","setWheelRadius","wheelSuspensionStiffness","setWheelSuspensionStiffness","wheelSuspensionCompression","setWheelSuspensionCompression","wheelSuspensionRelaxation","setWheelSuspensionRelaxation","wheelMaxSuspensionForce","setWheelMaxSuspensionForce","wheelBrake","setWheelBrake","wheelSteering","setWheelSteering","wheelEngineForce","setWheelEngineForce","wheelDirectionCs","setWheelDirectionCs","wheelAxleCs","setWheelAxleCs","wheelFrictionSlip","setWheelFrictionSlip","wheelSideFrictionStiffness","setWheelSideFrictionStiffness","wheelRotation","wheelForwardImpulse","wheelSideImpulse","wheelSuspensionForce","wheelContactNormal","wheelContactPoint","wheelSuspensionLength","wheelHardPoint","wheelIsInContact","wheelGroundObject","ShapeContact","dist","VisionSystem","fov","rayCount","memoryEnabled","blurEdges","normalFov","aimingFov","runningFov","visibilityMask","memoryMask","visibilityShape","currentVisionMesh","cellSize","gridSize","gridResolution","ceil","memoryGrid","isRapierReady","isRapierChecked","initializationPromise","lastErrorTime","updateInterval","lastUpdateTime","errorCooldown","visibilityGroup","THREE","Group","add","initVisibilityLayers","checkRapierAvailability","_checkRapierAvailability","checkRapier","getRapierInstance","createFogOfWarLayer","createMemoryLayer","createVisionConeLayer","fogGeometry","PlaneGeometry","fogMaterial","MeshBasicMaterial","color","transparent","opacity","side","DoubleSide","depthTest","depthWrite","fogOfWarMesh","Mesh","PI","renderOrder","gridGeometry","memoryMaterial","ShaderMaterial","uniforms","colorInfluence","vertexShader","fragmentShader","memoryMesh","visibilityAttribute","attributes","count","setAttribute","BufferAttribute","initialShape","Shape","moveTo","lineTo","maskMaterial","worldSize","maskGeometry","playerPos","playerDirection","getViewDirection","currentFov","fovRadians","directionAngle","updateVisionMask","updateMemoryMap","_this3","halfFov","angles","Vector2","endPoint","hit","hasHit","impactDistance","markVisitedArea","clone","updateVisibilityShape","outerShape","holes","geometry","dispose","ShapeGeometry","halfGridSize","gridX","gridZ","dx","dz","nx","nz","material","j","FeatureType","RigidBody","rawSet","colliderSet","finalizeDeserialization","isValid","lockTranslations","lockRotations","setEnabledTranslations","enableX","enableY","enableZ","restrictTranslations","setEnabledRotations","restrictRotations","setDominanceGroup","additionalSolverIterations","setAdditionalSolverIterations","enableCcd","setSoftCcdPrediction","res","nextTranslation","nextRotation","tra","setLinvel","vel","setGravityScale","setRotation","rot","setAngvel","setNextKinematicTranslation","setNextKinematicRotation","effectiveInvMass","invMass","localCom","worldCom","invPrincipalInertiaSqrt","principalInertia","principalInertiaLocalFrame","effectiveWorldInvInertiaSqrt","effectiveAngularInertia","sleep","isCcdEnabled","numColliders","setEnabled","isEnabled","bodyType","setBodyType","isSleeping","isFixed","isKinematic","isDynamic","recomputeMassPropertiesFromColliders","setAdditionalMass","setAdditionalMassProperties","angularInertiaLocalFrame","rawCom","rawPrincipalInertia","rawInertiaFrame","setAngularDamping","resetForces","resetTorques","addForce","rawForce","applyImpulse","rawImpulse","addTorque","rawTorque","applyTorqueImpulse","torqueImpulse","rawTorqueImpulse","addForceAtPoint","applyImpulseAtPoint","userForce","userTorque","zeros","translationsEnabledX","translationsEnabledY","translationsEnabledZ","rotationsEnabledX","rotationsEnabledY","rotationsEnabledZ","kinematicPositionBased","kinematicVelocityBased","newDynamic","newKinematicPositionBased","newKinematicVelocityBased","newStatic","copy","enabledTranslations","enabledRotations","can","setSleeping","setCcdEnabled","setUserData","userData","isPaused","fogOfWarEnabled","visibilitySystemEnabled","pauseGame","resumeGame","disableGameControls","enableGameControls","classList","hudElement","mainMenu","MultibodyJointSet","map","newTyped","desc","rawParams","joint","delete","unmap","forEachJointHandleAttachedToRigidBody","getAll","ActiveCollisionTypes","MassPropsMode","Collider","_parent","_shape","ensureShapeIsCached","setSensor","setShape","setRestitution","setFriction","setFrictionCombineRule","setRestitutionCombineRule","setCollisionGroups","setSolverGroups","setContactSkin","thickness","setActiveHooks","setActiveEvents","setContactForceEventThreshold","setActiveCollisionTypes","setDensity","setMass","setMassProperties","setTranslationWrtParent","setRotationWrtParent","shapeType","halfExtents","setHalfExtents","setRadius","roundRadius","setRoundRadius","setHalfHeight","heightfieldHeights","heightfieldScale","heightfieldNRows","heightfieldNCols","volume","rawCollider1Vel","rawShape2Pos","rawShape2Rot","rawShape2Vel","rawShape2","castCollider","rawCollider2Vel","rawPos2","rawRot2","contactCollider","Density","Average","DEFAULT","NONE","b","sensor","Mass","MassProps","ImpulseJointSet","ShapeCastHit","ColliderShapeCastHit","super","entities","visionSystem","_initialize","createTestWalls","initVisionSystem","entity","_initVisionSystem","getWorld","wallMaterial","MeshStandardMaterial","roughness","metalness","createWall","depth","BoxGeometry","createObstacle","index","indexOf","splice","mouse","isDown","rightIsDown","lastMousePosition","keyCallbacks","clickCallback","rightClickCallback","mouseMoveCallback","mouseDownCallback","mouseUpCallback","gameControlsEnabled","mouseSensitivity","handleKeyDown","handleKeyUp","handleMouseDown","handleMouseUp","handleContextMenu","userSelect","code","clientX","clientY","deltaX","deltaY","sensitivity","dirX","dirZ","removeEventListener","ShapeType","HeightFieldFlags","TriMeshFlags","rawType","extents","vs","new","tri_flags","hf_flags","Heightfield","rawPos1","rawRot1","rawVel1","rawVel2","rawShape1","rawRayOrig","rawRayDir","ra","rb","rc","rawScale","PhysicsPipeline","impulseJoints","multibodyJoints","ccdSolver","rawG","filterContactPair","filterIntersectionPair","HUD","element","healthBar","querySelector","ammoCounter","weaponInfo","statusMessages","messages","messageTimer","updateHealthBar","updateAmmoCounter","updateWeaponInfo","backgroundColor","duration","text","updateStatusMessages","checkMessagesTimeout","innerHTML","msg","messageElement","className","hasRemovedMessages","filter","isExpired","clearInterval","IntegrationParameters","ActiveEvents","TempContactForceEvent","totalForce","totalForceMagnitude","maxForceDirection","maxForceMagnitude","EventQueue","_initRapier","IslandManager","ColliderSet","parentHandle","rawTra","ActiveHooks","SolverFlags","pointAt","RayIntersection","RayColliderIntersection","RayColliderHit","CCDSolver","camera","lights","models","textures","temporaryObjects","Scene","background","Color","aspect","innerWidth","innerHeight","PerspectiveCamera","lookAt","WebGLRenderer","antialias","setSize","setPixelRatio","devicePixelRatio","shadowMap","setupLights","createGround","updateProjectionMatrix","directionalLight","DirectionalLight","castShadow","shadow","mapSize","near","far","right","bottom","ambientLight","AmbientLight","groundGeometry","groundMaterial","ground","receiveShadow","start","end","LineBasicMaterial","BufferGeometry","Vector3","setFromPoints","line","Line","tempObject","endTime","removeTemporaryObject","tempObj","playerData","CylinderGeometry","playerMesh","weaponGeometry","weaponMaterial","playerPosition","cleanTemporaryObjects","quality","PCFShadowMap","PCFSoftShadowMap","itemData","SphereGeometry","itemMesh","npcData","npcMesh","PointProjection","PointColliderProjection","queryPipeline","physicsPipeline","serializationPipeline","debugRenderPipeline","characterControllers","controller","pidControllers","vehicleControllers","rawIntegrationParameters","rawIslands","rawBroadPhase","rawNarrowPhase","rawBodies","rawColliders","rawImpulseJoints","rawMultibodyJoints","rawCCDSolver","rawQueryPipeline","rawPhysicsPipeline","rawSerializationPipeline","rawDebugRenderPipeline","Set","takeSnapshot","restoreSnapshot","debugRender","updateSceneQueries","unitsPerMeter","niter","createCharacterController","removeCharacterController","createPidController","removePidController","createVehicleController","removeVehicleController","createImpulseJoint","createMultibodyJoint","getRigidBody","getCollider","getImpulseJoint","getMultibodyJoint","removeCollider","removeImpulseJoint","removeMultibodyJoint","forEachCollider","forEachRigidBody","forEachActiveRigidBody","contactPairsWith","intersectionPairsWith","contactPair","intersectionPair","RigidBodySet","rawLv","rawAv","SerializationPipeline","rawGra","loadingScreen","inventoryScreen","loadingStatus","components","hud","InventoryUI","_initComponents","errorScreen","reloadButton","location","reload","head","showInventory","show","hide","VectorOps","Quaternion","RotationOps","SdpMatrix3","m11","m12","m21","m13","m31","m22","m23","m32","m33","SdpMatrix3Ops","sdpMatrix3","gridElement","equippedElement","equipped","armor","helmet","createInventorySlots","createEquippedSlots","setupDragAndDrop","slot","dataset","slotIndex","label","slotInfo","slotContainer","slotType","querySelectorAll","updateInventoryDisplay","updateEquippedDisplay","slots","item","itemElement","weaponSlot","weaponElement","armorSlot","armorElement","helmetSlot","helmetElement","addInventoryStyles","PidAxesMask","PidController","setKp","setKi","setKd","setAxes","resetIntegrals","applyLinearCorrection","targetPosition","targetLinvel","applyAngularCorrection","targetRotation","targetAngVel","linearCorrection","correction","angularCorrection","JointType","MotorModel","JointAxesMask","ImpulseJoint","bodySet","RevoluteImpulseJoint","PrismaticImpulseJoint","FixedImpulseJoint","SpringImpulseJoint","RopeImpulseJoint","SphericalImpulseJoint","GenericImpulseJoint","body1","body2","frameX1","frameX2","setAnchor1","setAnchor2","setContactsEnabled","contactsEnabled","UnitImpulseJoint","rawAxis","setLimits","configureMotorModel","configureMotorVelocity","configureMotorPosition","configureMotor","JointData","frame1","frame2","axesMask","rawAx","rawA1","rawA2","rawFra1","rawFra2","limits","rawAxesMask","Coarena","fconv","Float64Array","uconv","elt","NarrowPhase","tempManifold","TempContactManifold","rawPair","flipped","localNormal1","localNormal2","numContacts","localContactPoint1","localContactPoint2","contactDist","contactFid1","contactFid2","contactImpulse","contactTangentImpulseX","contactTangentImpulseY","numSolverContacts","solverContactPoint","solverContactDist","solverContactFriction","solverContactRestitution","solverContactTangentVelocity","MultibodyJoint","RevoluteMultibodyJoint","PrismaticMultibodyJoint","FixedMultibodyJoint","SphericalMultibodyJoint","UnitMultibodyJoint","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","loaded","__webpack_modules__","queue","fn","hasAwait","currentDeps","outerResolve","reject","depQueues","promise","rej","deps","dep","wrapDeps","getResult","fnQueue","q","definition","hmd","children","prop","wasmModuleId","wasmModuleHash","importsObj","req","fetch","fallback","arrayBuffer","bytes","WebAssembly","instantiate","assign","instantiateStreaming","headers"],"sourceRoot":""}