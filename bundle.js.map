{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://tds-escape/./client/src/core/renderer.js","webpack://tds-escape/./client/src/core/input.js","webpack://tds-escape/./client/src/core/network.js","webpack://tds-escape/./client/src/entities/player.js","webpack://tds-escape/./client/src/ui/hud.js","webpack://tds-escape/./client/src/ui/inventory.js","webpack://tds-escape/./client/src/physics/rapier-integration.js","webpack://tds-escape/./client/src/physics/physics-manager.js","webpack://tds-escape/./client/src/physics/vision-system.js","webpack://tds-escape/./client/src/core/game.js"],"sourcesContent":["// client/src/core/renderer.js\n\n/**\n * Класс отвечающий за рендеринг игры с использованием Three.js\n */\nexport class Renderer {\n    /**\n     * @param {HTMLCanvasElement} canvas - DOM элемент canvas для рендеринга\n     */\n    constructor(canvas) {\n        this.canvas = canvas;\n        this.scene = null;\n        this.camera = null;\n        this.renderer = null;\n        this.lights = [];\n        this.models = {}; // Хранилище для загруженных моделей\n        this.textures = {}; // Хранилище для загруженных текстур\n        \n        // Элементы для системы видимости\n        this.visionSystem = null;\n        this.temporaryObjects = []; // Временные объекты (лучи, эффекты)\n    }\n\n    /**\n     * Настройка сцены, камеры и рендерера\n     */\n    setupScene() {\n        // Создание сцены\n        this.scene = new THREE.Scene();\n        this.scene.background = new THREE.Color(0x87CEEB); // Цвет неба\n        \n        // Создание камеры (перспективная, вид сверху)\n        const aspect = window.innerWidth / window.innerHeight;\n        this.camera = new THREE.PerspectiveCamera(75, aspect, 0.1, 1000);\n        this.camera.position.set(0, 30, 30); // Позиция над землей\n        this.camera.lookAt(0, 0, 0); // Направлена на игрока\n        \n        // Создание рендерера\n        this.renderer = new THREE.WebGLRenderer({\n            canvas: this.canvas,\n            antialias: true\n        });\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n        this.renderer.shadowMap.enabled = true;\n        \n        // Добавление освещения\n        this.setupLights();\n        \n        // Создание земли\n        this.createGround();\n        \n        // Инициализируем пустой объект для системы видимости\n        // Она будет инициализирована позже в Game.initVisionSystem()\n        this.visionSystem = null;\n        \n        // Обработчик изменения размера окна\n        window.addEventListener('resize', () => {\n            this.camera.aspect = window.innerWidth / window.innerHeight;\n            this.camera.updateProjectionMatrix();\n            this.renderer.setSize(window.innerWidth, window.innerHeight);\n        });\n    }\n    \n    /**\n     * Настройка освещения сцены\n     */\n    setupLights() {\n        // Основной направленный свет (имитация солнца)\n        const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n        directionalLight.position.set(10, 30, 10);\n        directionalLight.castShadow = true;\n        \n        // Настройка теней\n        directionalLight.shadow.mapSize.width = 2048;\n        directionalLight.shadow.mapSize.height = 2048;\n        directionalLight.shadow.camera.near = 0.5;\n        directionalLight.shadow.camera.far = 100;\n        directionalLight.shadow.camera.left = -50;\n        directionalLight.shadow.camera.right = 50;\n        directionalLight.shadow.camera.top = 50;\n        directionalLight.shadow.camera.bottom = -50;\n        \n        this.scene.add(directionalLight);\n        this.lights.push(directionalLight);\n        \n        // Рассеянный свет (чтобы тени не были слишком темными)\n        const ambientLight = new THREE.AmbientLight(0x505050, 0.7);\n        this.scene.add(ambientLight);\n        this.lights.push(ambientLight);\n    }\n    \n    /**\n     * Создание земли (простая поверхность для прототипа)\n     */\n    createGround() {\n        const groundGeometry = new THREE.PlaneGeometry(1000, 1000, 100, 100);\n        const groundMaterial = new THREE.MeshStandardMaterial({\n            color: 0x3e6539, // Зеленый цвет земли\n            roughness: 1,\n            metalness: 0\n        });\n        \n        const ground = new THREE.Mesh(groundGeometry, groundMaterial);\n        ground.rotation.x = -Math.PI / 2; // Разворот плоскости горизонтально\n        ground.position.y = -0.5;\n        ground.receiveShadow = true;\n        \n        this.scene.add(ground);\n    }\n    \n    /**\n     * Создание временного луча для визуализации выстрела\n     * @param {Object} start - начальная точка луча\n     * @param {Object} end - конечная точка луча\n     * @param {number} color - цвет луча\n     * @param {number} duration - длительность отображения в миллисекундах\n     */\n    createTemporaryBeam(start, end, color = 0xFF0000, duration = 100) {\n        // Создаем материал для луча\n        const material = new THREE.LineBasicMaterial({\n            color: color,\n            transparent: true,\n            opacity: 0.8\n        });\n        \n        // Создаем геометрию\n        const geometry = new THREE.BufferGeometry();\n        const points = [\n            new THREE.Vector3(start.x, start.y, start.z),\n            new THREE.Vector3(end.x, end.y, end.z)\n        ];\n        geometry.setFromPoints(points);\n        \n        // Создаем линию\n        const line = new THREE.Line(geometry, material);\n        this.scene.add(line);\n        \n        // Добавляем в список временных объектов\n        const tempObject = {\n            object: line,\n            endTime: Date.now() + duration\n        };\n        this.temporaryObjects.push(tempObject);\n        \n        // Устанавливаем таймер для удаления\n        setTimeout(() => {\n            this.removeTemporaryObject(tempObject);\n        }, duration);\n    }\n    \n    /**\n     * Удаление временного объекта\n     * @param {Object} tempObject - временный объект для удаления\n     */\n    removeTemporaryObject(tempObject) {\n        if (!tempObject || !tempObject.object) return;\n        \n        // Удаляем со сцены\n        this.scene.remove(tempObject.object);\n        \n        // Удаляем из списка\n        const index = this.temporaryObjects.indexOf(tempObject);\n        if (index !== -1) {\n            this.temporaryObjects.splice(index, 1);\n        }\n        \n        // Освобождаем ресурсы\n        if (tempObject.object.geometry) {\n            tempObject.object.geometry.dispose();\n        }\n        if (tempObject.object.material) {\n            tempObject.object.material.dispose();\n        }\n    }\n    \n    /**\n     * Очистка устаревших временных объектов\n     */\n    cleanTemporaryObjects() {\n        const now = Date.now();\n        \n        // Удаляем устаревшие объекты\n        this.temporaryObjects = this.temporaryObjects.filter(tempObj => {\n            if (tempObj.endTime <= now) {\n                this.scene.remove(tempObj.object);\n                \n                // Освобождаем ресурсы\n                if (tempObj.object.geometry) {\n                    tempObj.object.geometry.dispose();\n                }\n                if (tempObj.object.material) {\n                    tempObj.object.material.dispose();\n                }\n                \n                return false;\n            }\n            return true;\n        });\n    }\n    \n    /**\n     * Добавление игрока на сцену\n     * @param {Object} playerData - данные игрока\n     * @returns {THREE.Object3D} - объект игрока\n     */\n    addPlayer(playerData) {\n        // Создаем временную модель игрока (цилиндр)\n        const geometry = new THREE.CylinderGeometry(0.5, 0.5, 1.8, 8);\n        const material = new THREE.MeshStandardMaterial({\n            color: 0x1E90FF, // Синий цвет для игрока\n            roughness: 0.7\n        });\n        \n        const playerMesh = new THREE.Mesh(geometry, material);\n        playerMesh.position.copy(playerData.position);\n        playerMesh.castShadow = true;\n        playerMesh.receiveShadow = true;\n        \n        // Добавляем оружие (временное, упрощенное)\n        const weaponGeometry = new THREE.BoxGeometry(0.1, 0.1, 1);\n        const weaponMaterial = new THREE.MeshStandardMaterial({\n            color: 0x333333,\n            roughness: 0.5\n        });\n        \n        const weapon = new THREE.Mesh(weaponGeometry, weaponMaterial);\n        weapon.position.set(0.5, 0, 0.5); // Позиция относительно игрока\n        playerMesh.add(weapon);\n        \n        this.scene.add(playerMesh);\n        \n        return playerMesh;\n    }\n    \n    /**\n     * Обновление камеры для следования за игроком\n     * @param {Object} playerPosition - текущая позиция игрока\n     */\n    updateCamera(playerPosition) {\n        if (!this.camera) return;\n        \n        // Устанавливаем позицию камеры над игроком\n        this.camera.position.x = playerPosition.x;\n        this.camera.position.z = playerPosition.z + 30; // Немного сзади\n        \n        // Направляем камеру на игрока\n        this.camera.lookAt(playerPosition.x, playerPosition.y, playerPosition.z);\n    }\n    \n    /**\n     * Обновление трансформации объекта\n     * @param {THREE.Object3D} object - объект для обновления\n     * @param {Object} position - новая позиция\n     * @param {Object} rotation - новое вращение\n     */\n    updateObjectTransform(object, position, rotation) {\n        if (!object) return;\n        \n        // Обновляем позицию\n        if (position) {\n            object.position.x = position.x;\n            object.position.y = position.y;\n            object.position.z = position.z;\n        }\n        \n        // Обновляем вращение\n        if (rotation) {\n            object.rotation.y = rotation.y;\n        }\n    }\n    \n    /**\n     * Рендеринг сцены с учетом игрока\n     * @param {Object} player - объект игрока для системы видимости\n     */\n    render(player) {\n        if (!this.renderer || !this.scene || !this.camera) return;\n        \n        // Обновляем систему видимости, если она инициализирована и есть игрок\n        if (this.visionSystem && player) {\n            this.visionSystem.update();\n        }\n        \n        // Очищаем устаревшие временные объекты\n        this.cleanTemporaryObjects();\n        \n        // Рендерим сцену\n        this.renderer.render(this.scene, this.camera);\n    }\n    \n    /**\n     * Установка качества графики\n     * @param {string} quality - уровень качества ('low', 'medium', 'high')\n     */\n    setQuality(quality) {\n        if (!this.renderer) return;\n        \n        switch (quality) {\n            case 'low':\n                this.renderer.setPixelRatio(1);\n                this.renderer.shadowMap.enabled = false;\n                break;\n            case 'medium':\n                this.renderer.setPixelRatio(window.devicePixelRatio);\n                this.renderer.shadowMap.enabled = true;\n                this.renderer.shadowMap.type = THREE.PCFShadowMap;\n                break;\n            case 'high':\n                this.renderer.setPixelRatio(window.devicePixelRatio);\n                this.renderer.shadowMap.enabled = true;\n                this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n                break;\n        }\n    }\n    \n    /**\n     * Добавление предмета на сцену\n     * @param {Object} itemData - данные предмета\n     * @returns {THREE.Object3D} - объект предмета\n     */\n    addItem(itemData) {\n        // Создаем упрощенную модель предмета (в зависимости от типа)\n        let geometry, material;\n        \n        switch (itemData.type) {\n            case 'weapon':\n                geometry = new THREE.BoxGeometry(0.8, 0.3, 0.2);\n                material = new THREE.MeshStandardMaterial({ color: 0xFF5722 });\n                break;\n            case 'medkit':\n                geometry = new THREE.BoxGeometry(0.5, 0.3, 0.5);\n                material = new THREE.MeshStandardMaterial({ color: 0x4CAF50 });\n                break;\n            case 'ammo':\n                geometry = new THREE.BoxGeometry(0.3, 0.3, 0.3);\n                material = new THREE.MeshStandardMaterial({ color: 0xFFC107 });\n                break;\n            default:\n                geometry = new THREE.SphereGeometry(0.3, 8, 8);\n                material = new THREE.MeshStandardMaterial({ color: 0xCCCCCC });\n        }\n        \n        // Создаем меш\n        const itemMesh = new THREE.Mesh(geometry, material);\n        itemMesh.position.copy(itemData.position);\n        itemMesh.position.y = 0.2; // Чуть выше земли\n        itemMesh.castShadow = true;\n        itemMesh.receiveShadow = true;\n        \n        // Добавляем на сцену\n        this.scene.add(itemMesh);\n        \n        return itemMesh;\n    }\n    \n    /**\n     * Добавление NPC на сцену\n     * @param {Object} npcData - данные NPC\n     * @returns {THREE.Object3D} - объект NPC\n     */\n    addNPC(npcData) {\n        // Создаем модель NPC (цилиндр)\n        const geometry = new THREE.CylinderGeometry(0.5, 0.5, 1.8, 8);\n        const material = new THREE.MeshStandardMaterial({\n            color: npcData.type === 'enemy' ? 0xFF0000 : 0x00FF00,\n            roughness: 0.7\n        });\n        \n        const npcMesh = new THREE.Mesh(geometry, material);\n        npcMesh.position.copy(npcData.position);\n        npcMesh.castShadow = true;\n        npcMesh.receiveShadow = true;\n        \n        this.scene.add(npcMesh);\n        \n        return npcMesh;\n    }\n}","// client/src/core/input.js\n\n/**\n * Класс обработки пользовательского ввода\n */\nexport class InputHandler {\n    constructor() {\n        // Состояние клавиш\n        this.keys = {};\n        \n        // Состояние мыши\n        this.mouse = {\n            position: { x: 0, y: 0 },\n            isDown: false,\n            rightIsDown: false\n        };\n        \n        // Последнее положение мыши для расчета дельты\n        this.lastMousePosition = { x: 0, y: 0 };\n        \n        // Колбэки для клавиш\n        this.keyCallbacks = {};\n        \n        // Колбэки для мыши\n        this.clickCallback = null;\n        this.rightClickCallback = null;\n        this.mouseMoveCallback = null;\n        this.mouseDownCallback = null;\n        this.mouseUpCallback = null;\n        \n        // Флаг активных игровых управлений\n        this.gameControlsEnabled = true;\n        \n        // Настройки ввода\n        this.mouseSensitivity = 1.0;\n        \n        // Привязка методов к контексту\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.handleKeyUp = this.handleKeyUp.bind(this);\n        this.handleMouseMove = this.handleMouseMove.bind(this);\n        this.handleMouseDown = this.handleMouseDown.bind(this);\n        this.handleMouseUp = this.handleMouseUp.bind(this);\n        this.handleContextMenu = this.handleContextMenu.bind(this);\n        \n        // Инициализация обработчиков событий\n        this.init();\n    }\n    \n    /**\n     * Инициализация обработчиков событий\n     */\n    init() {\n        // Добавление обработчиков событий клавиатуры\n        window.addEventListener('keydown', this.handleKeyDown);\n        window.addEventListener('keyup', this.handleKeyUp);\n        \n        // Добавление обработчиков событий мыши\n        window.addEventListener('mousemove', this.handleMouseMove);\n        window.addEventListener('mousedown', this.handleMouseDown);\n        window.addEventListener('mouseup', this.handleMouseUp);\n        window.addEventListener('contextmenu', this.handleContextMenu);\n        \n        // Подавление стандартных действий браузера\n        document.body.style.userSelect = 'none';\n    }\n    \n    /**\n     * Обработчик нажатия клавиши\n     * @param {KeyboardEvent} event - событие нажатия клавиши\n     */\n    handleKeyDown(event) {\n        // Запоминаем состояние клавиши\n        this.keys[event.code] = true;\n        \n        // Вызываем колбэк, если он установлен\n        if (this.keyCallbacks[event.code] && this.gameControlsEnabled) {\n            this.keyCallbacks[event.code]();\n        }\n    }\n    \n    /**\n     * Обработчик отпускания клавиши\n     * @param {KeyboardEvent} event - событие отпускания клавиши\n     */\n    handleKeyUp(event) {\n        // Запоминаем состояние клавиши\n        this.keys[event.code] = false;\n    }\n    \n    /**\n     * Обработчик движения мыши\n     * @param {MouseEvent} event - событие движения мыши\n     */\n    handleMouseMove(event) {\n        // Обновляем позицию мыши\n        this.mouse.position.x = event.clientX;\n        this.mouse.position.y = event.clientY;\n        \n        // Вычисляем delta движения с учетом чувствительности\n        const deltaX = (this.mouse.position.x - this.lastMousePosition.x) * this.mouseSensitivity;\n        const deltaY = (this.mouse.position.y - this.lastMousePosition.y) * this.mouseSensitivity;\n        \n        // Обновляем последнюю позицию\n        this.lastMousePosition.x = this.mouse.position.x;\n        this.lastMousePosition.y = this.mouse.position.y;\n        \n        // Вызываем колбэк движения, если он установлен\n        if (this.mouseMoveCallback && this.gameControlsEnabled) {\n            this.mouseMoveCallback(this.mouse.position, { x: deltaX, y: deltaY });\n        }\n    }\n    \n    /**\n     * Обработчик нажатия кнопки мыши\n     * @param {MouseEvent} event - событие нажатия кнопки мыши\n     */\n    handleMouseDown(event) {\n        if (event.button === 0) {\n            // Левая кнопка мыши\n            this.mouse.isDown = true;\n            \n            // Вызываем общий колбэк нажатия\n            if (this.mouseDownCallback && this.gameControlsEnabled) {\n                this.mouseDownCallback(0, this.mouse.position);\n            }\n            \n            // Вызываем колбэк левого клика\n            if (this.clickCallback && this.gameControlsEnabled) {\n                this.clickCallback(this.mouse.position);\n            }\n        } else if (event.button === 2) {\n            // Правая кнопка мыши\n            this.mouse.rightIsDown = true;\n            \n            // Вызываем общий колбэк нажатия\n            if (this.mouseDownCallback && this.gameControlsEnabled) {\n                this.mouseDownCallback(2, this.mouse.position);\n            }\n            \n            // Вызываем колбэк правого клика\n            if (this.rightClickCallback && this.gameControlsEnabled) {\n                this.rightClickCallback(this.mouse.position);\n            }\n        }\n    }\n    \n    /**\n     * Обработчик отпускания кнопки мыши\n     * @param {MouseEvent} event - событие отпускания кнопки мыши\n     */\n    handleMouseUp(event) {\n        if (event.button === 0) {\n            this.mouse.isDown = false;\n            \n            // Вызываем колбэк отпускания\n            if (this.mouseUpCallback && this.gameControlsEnabled) {\n                this.mouseUpCallback(0);\n            }\n        } else if (event.button === 2) {\n            this.mouse.rightIsDown = false;\n            \n            // Вызываем колбэк отпускания\n            if (this.mouseUpCallback && this.gameControlsEnabled) {\n                this.mouseUpCallback(2);\n            }\n        }\n    }\n    \n    /**\n     * Обработчик контекстного меню (правый клик)\n     * @param {MouseEvent} event - событие контекстного меню\n     */\n    handleContextMenu(event) {\n        // Предотвращаем появление стандартного контекстного меню\n        event.preventDefault();\n    }\n    \n    /**\n     * Проверка, нажата ли указанная клавиша\n     * @param {string} code - код клавиши\n     * @returns {boolean} - состояние клавиши\n     */\n    isKeyPressed(code) {\n        return this.gameControlsEnabled && this.keys[code] === true;\n    }\n    \n    /**\n     * Проверка, нажата ли левая кнопка мыши\n     * @returns {boolean} - состояние левой кнопки мыши\n     */\n    isMouseDown() {\n        return this.gameControlsEnabled && this.mouse.isDown;\n    }\n    \n    /**\n     * Проверка, нажата ли правая кнопка мыши\n     * @returns {boolean} - состояние правой кнопки мыши\n     */\n    isRightMouseDown() {\n        return this.gameControlsEnabled && this.mouse.rightIsDown;\n    }\n    \n    /**\n     * Получение текущей позиции мыши\n     * @returns {Object} - координаты мыши {x, y}\n     */\n    getMousePosition() {\n        return { ...this.mouse.position };\n    }\n    \n    /**\n     * Установка чувствительности мыши\n     * @param {number} sensitivity - чувствительность мыши\n     */\n    setMouseSensitivity(sensitivity) {\n        this.mouseSensitivity = sensitivity;\n    }\n    \n    /**\n     * Добавление колбэка для клавиши\n     * @param {string} code - код клавиши\n     * @param {Function} callback - функция обратного вызова\n     */\n    addKeyCallback(code, callback) {\n        this.keyCallbacks[code] = callback;\n    }\n    \n    /**\n     * Удаление колбэка для клавиши\n     * @param {string} code - код клавиши\n     */\n    removeKeyCallback(code) {\n        delete this.keyCallbacks[code];\n    }\n    \n    /**\n     * Установка колбэка для клика мыши\n     * @param {Function} callback - функция обратного вызова\n     */\n    setClickCallback(callback) {\n        this.clickCallback = callback;\n    }\n    \n    /**\n     * Установка колбэка для правого клика мыши\n     * @param {Function} callback - функция обратного вызова\n     */\n    setRightClickCallback(callback) {\n        this.rightClickCallback = callback;\n    }\n    \n    /**\n     * Установка колбэка для движения мыши\n     * @param {Function} callback - функция обратного вызова\n     */\n    setMouseMoveCallback(callback) {\n        this.mouseMoveCallback = callback;\n    }\n    \n    /**\n     * Установка колбэка для нажатия кнопки мыши\n     * @param {Function} callback - функция обратного вызова (button, position)\n     */\n    setMouseDownCallback(callback) {\n        this.mouseDownCallback = callback;\n    }\n    \n    /**\n     * Установка колбэка для отпускания кнопки мыши\n     * @param {Function} callback - функция обратного вызова (button)\n     */\n    setMouseUpCallback(callback) {\n        this.mouseUpCallback = callback;\n    }\n    \n    /**\n     * Отключение управления игрой (для меню, инвентаря и т.д.)\n     */\n    disableGameControls() {\n        this.gameControlsEnabled = false;\n    }\n    \n    /**\n     * Включение управления игрой\n     */\n    enableGameControls() {\n        this.gameControlsEnabled = true;\n    }\n    \n    /**\n     * Получение направления движения на основе нажатых клавиш\n     * @returns {Object} - вектор движения {x, z}\n     */\n    getMovementDirection() {\n        if (!this.gameControlsEnabled) {\n            return { x: 0, z: 0 };\n        }\n        \n        let dirX = 0;\n        let dirZ = 0;\n        \n        // Вперед/назад (WASD)\n        if (this.isKeyPressed('KeyW') || this.isKeyPressed('ArrowUp')) {\n            dirZ = -1;\n        } else if (this.isKeyPressed('KeyS') || this.isKeyPressed('ArrowDown')) {\n            dirZ = 1;\n        }\n        \n        // Влево/вправо (WASD)\n        if (this.isKeyPressed('KeyA') || this.isKeyPressed('ArrowLeft')) {\n            dirX = -1;\n        } else if (this.isKeyPressed('KeyD') || this.isKeyPressed('ArrowRight')) {\n            dirX = 1;\n        }\n        \n        return { x: dirX, z: dirZ };\n    }\n    \n    /**\n     * Очистка всех колбэков\n     */\n    clearCallbacks() {\n        this.keyCallbacks = {};\n        this.clickCallback = null;\n        this.rightClickCallback = null;\n        this.mouseMoveCallback = null;\n        this.mouseDownCallback = null;\n        this.mouseUpCallback = null;\n    }\n    \n    /**\n     * Уничтожение обработчика ввода и удаление обработчиков событий\n     */\n    destroy() {\n        window.removeEventListener('keydown', this.handleKeyDown);\n        window.removeEventListener('keyup', this.handleKeyUp);\n        window.removeEventListener('mousemove', this.handleMouseMove);\n        window.removeEventListener('mousedown', this.handleMouseDown);\n        window.removeEventListener('mouseup', this.handleMouseUp);\n        window.removeEventListener('contextmenu', this.handleContextMenu);\n        \n        document.body.style.userSelect = '';\n    }\n}","/**\n * Класс для управления сетевым соединением игры\n * Для прототипа будет имитировать серверное соединение\n */\nexport class NetworkManager {\n    constructor() {\n        this.socket = null;\n        this.connected = false;\n        this.serverUrl = 'wss://your-server-url.com'; // Изменить на реальный URL при деплое\n        this.mockMode = true; // Для прототипа используем мок-режим\n        \n        // Колбэки для событий\n        this.eventHandlers = {\n            connect: [],\n            disconnect: [],\n            error: [],\n            message: [],\n            playerMove: [],\n            playerShoot: [],\n            playerDamage: [],\n            itemPickup: [],\n            npcSpawn: [],\n            npcMove: [],\n            gameState: []\n        };\n        \n        // Данные для мок-режима\n        this.mockData = {\n            players: {},\n            npcs: {},\n            items: {}\n        };\n        \n        // ID игрока (для локальной игры будет фиксированным)\n        this.playerId = 'local_player';\n    }\n    \n    /**\n     * Подключение к серверу\n     * @returns {Promise} - промис подключения\n     */\n    connect() {\n        return new Promise((resolve) => {\n            // В режиме прототипа имитируем подключение\n            console.log('Запущен режим прототипа (без сервера)');\n            this.connected = true;\n            \n            // Генерируем тестовые данные\n            this.generateMockData();\n            \n            // Имитируем время загрузки\n            setTimeout(() => {\n                // Вызываем обработчики подключения\n                this.eventHandlers.connect.forEach(handler => handler());\n                \n                // Имитация движения NPC\n                this.startMockNpcMovement();\n                \n                resolve();\n            }, 500);\n        });\n    }\n    \n    /**\n     * Генерация тестовых данных для мок-режима\n     */\n    generateMockData() {\n        // Генерируем предметы на карте\n        for (let i = 0; i < 15; i++) {\n            const id = `item_${i}`;\n            const x = (Math.random() - 0.5) * 80;\n            const z = (Math.random() - 0.5) * 80;\n            \n            // Случайный тип предмета\n            const types = ['weapon', 'medkit', 'ammo'];\n            const type = types[Math.floor(Math.random() * types.length)];\n            \n            this.mockData.items[id] = {\n                id,\n                type,\n                position: { x, y: 0, z },\n                properties: {}\n            };\n        }\n        \n        // Генерируем NPC\n        for (let i = 0; i < 5; i++) {\n            const id = `npc_${i}`;\n            const x = (Math.random() - 0.5) * 80;\n            const z = (Math.random() - 0.5) * 80;\n            \n            this.mockData.npcs[id] = {\n                id,\n                type: 'enemy',\n                position: { x, y: 0, z },\n                health: 100,\n                state: 'patrol'\n            };\n        }\n    }\n    \n    /**\n     * Запуск имитации движения NPC\n     */\n    startMockNpcMovement() {\n        setInterval(() => {\n            // Для каждого NPC\n            Object.keys(this.mockData.npcs).forEach(id => {\n                const npc = this.mockData.npcs[id];\n                \n                // Случайное перемещение\n                const moveX = (Math.random() - 0.5) * 2;\n                const moveZ = (Math.random() - 0.5) * 2;\n                \n                npc.position.x += moveX;\n                npc.position.z += moveZ;\n                \n                // Проверка границ карты\n                npc.position.x = Math.max(-45, Math.min(45, npc.position.x));\n                npc.position.z = Math.max(-45, Math.min(45, npc.position.z));\n                \n                // Вызываем обработчики перемещения NPC\n                this.eventHandlers.npcMove.forEach(handler => handler({\n                    id,\n                    position: npc.position\n                }));\n            });\n        }, 1000); // Обновляем каждую секунду\n    }\n    \n    /**\n     * Регистрация обработчика события\n     * @param {string} event - название события\n     * @param {Function} handler - функция-обработчик\n     */\n    on(event, handler) {\n        if (this.eventHandlers[event]) {\n            this.eventHandlers[event].push(handler);\n        }\n    }\n    \n    /**\n     * Отправка информации о перемещении игрока\n     * @param {Object} position - новая позиция\n     * @param {Object} rotation - новое вращение\n     */\n    sendPlayerMove(position, rotation) {\n        if (!this.connected) return;\n        \n        // В мок-режиме просто сохраняем данные\n        if (this.mockMode) {\n            this.mockData.players[this.playerId] = {\n                ...this.mockData.players[this.playerId],\n                position,\n                rotation\n            };\n        }\n    }\n    \n    /**\n     * Отправка информации о выстреле игрока\n     * @param {Object} position - позиция выстрела\n     * @param {Object} direction - направление выстрела\n     * @param {string} weapon - используемое оружие\n     */\n    sendPlayerShoot(position, direction, weapon) {\n        if (!this.connected) return;\n        \n        console.log('Выстрел игрока:', { position, direction, weapon });\n        \n        // В реальной игре здесь была бы отправка данных на сервер\n    }\n    \n    /**\n     * Отправка информации о подборе предмета\n     * @param {string} itemId - ID поднятого предмета\n     * @param {string} itemType - тип предмета\n     */\n    sendItemPickup(itemId, itemType) {\n        if (!this.connected) return;\n        \n        console.log('Подбор предмета:', { itemId, itemType });\n        \n        // В мок-режиме удаляем предмет из данных\n        if (this.mockMode) {\n            delete this.mockData.items[itemId];\n        }\n    }\n}","// client/src/entities/player.js\n\n/**\n * Класс игрока, управляющий поведением и состоянием персонажа\n */\nexport class Player {\n    /**\n     * @param {Object} options - настройки игрока\n     * @param {Object} options.position - начальная позиция\n     * @param {Object} options.renderer - ссылка на рендерер\n     * @param {Object} options.input - ссылка на обработчик ввода\n     * @param {Object} options.game - ссылка на игровой объект\n     */\n    constructor(options) {\n        // Базовые параметры\n        this.id = options.id || 'local_player';\n        this.isLocalPlayer = options.isLocalPlayer !== undefined ? options.isLocalPlayer : true;\n        \n        // Позиция и вращение\n        this.position = options.position || { x: 0, y: 0, z: 0 };\n        this.rotation = options.rotation || { x: 0, y: 0, z: 0 };\n        this.direction = { x: 0, z: -1 }; // Направление взгляда (по умолчанию вперед)\n        \n        // Характеристики\n        this.health = options.health || 100;\n        this.maxHealth = options.maxHealth || 100;\n        this.speed = options.speed || 5; // базовая скорость движения\n        this.weapon = options.weapon || 'pistol';\n        this.ammo = options.ammo || 30;\n        this.weaponType = 'single'; // 'single' или 'auto'\n        this.fireRate = 500; // задержка между выстрелами в мс (для одиночного оружия)\n        this.recoil = { x: 0.05, y: 0.05 }; // сила отдачи\n        \n        // Инвентарь\n        this.inventory = options.inventory || {\n            items: [],\n            maxSlots: 25 // 5x5 сетка\n        };\n        \n        // Состояния\n        this.isMoving = false;\n        this.isRunning = false;\n        this.isAiming = false;\n        this.isShooting = false;\n        this.canShoot = true; // флаг возможности стрельбы\n        this.lastShootTime = 0;\n        this.currentState = 'idle'; // idle, walk, run, aim, shoot\n        \n        // Параметры обзора\n        this.viewAngle = 90; // начальный угол обзора в градусах\n        this.normalViewAngle = 90;\n        this.aimingViewAngle = 45;\n        this.runningViewAngle = 70; // угол обзора при беге\n        this.viewDistance = 50; // дальность видимости\n        \n        // Параметры движения\n        this.normalSpeed = 5;\n        this.runningSpeed = 7.5; // скорость бега (+50%)\n        this.aimingSpeed = 1.5; // скорость при прицеливании (-70%)\n        this.acceleration = 10; // ускорение для плавности движения\n        this.velocity = { x: 0, z: 0 }; // текущая скорость\n        \n        // Ссылки на другие модули\n        this.renderer = options.renderer;\n        this.input = options.input;\n        this.game = options.game;\n        this.mesh = null; // будет инициализирован при создании модели\n        \n        // Если это локальный игрок, настраиваем управление\n        if (this.isLocalPlayer) {\n            this.setupControls();\n        }\n        \n        // Создаем модель игрока\n        this.createModel();\n    }\n    \n    /**\n     * Создание модели игрока\n     */\n    createModel() {\n        // Если рендерер не доступен, выходим\n        if (!this.renderer) return;\n        \n        // Создаем меш через рендерер\n        this.mesh = this.renderer.addPlayer({\n            position: this.position,\n            rotation: this.rotation,\n            isLocalPlayer: this.isLocalPlayer\n        });\n    }\n    \n    /**\n     * Настройка управления игроком\n     */\n    setupControls() {\n        if (!this.input) return;\n        \n        // Добавляем обработчик ЛКМ для прицеливания\n        this.input.setMouseDownCallback((button, position) => {\n            if (button === 0) { // Левая кнопка\n                this.startAiming();\n            }\n        });\n        \n        // Обработчик отпускания ЛКМ\n        this.input.setMouseUpCallback((button) => {\n            if (button === 0) { // Левая кнопка\n                this.stopAiming();\n            }\n        });\n        \n        // Обработчик ПКМ для стрельбы\n        this.input.setRightClickCallback(() => {\n            this.tryShoot();\n        });\n        \n        // Обработчик движения мыши для вращения\n        this.input.setMouseMoveCallback((position, delta) => {\n            this.handleMouseMove(position);\n        });\n    }\n    \n    /**\n     * Начало прицеливания\n     */\n    startAiming() {\n        this.isAiming = true;\n        this.speed = this.aimingSpeed;\n        this.viewAngle = this.aimingViewAngle;\n        console.log('Начало прицеливания');\n    }\n    \n    /**\n     * Конец прицеливания\n     */\n    stopAiming() {\n        this.isAiming = false;\n        this.speed = this.normalSpeed;\n        this.viewAngle = this.normalViewAngle;\n        console.log('Конец прицеливания');\n    }\n    \n    /**\n     * Попытка выстрела\n     */\n    tryShoot() {\n        // Можно стрелять только если игрок прицеливается\n        if (!this.isAiming || !this.canShoot || this.ammo <= 0) {\n            return;\n        }\n        \n        const currentTime = Date.now();\n        \n        // Проверяем временную задержку между выстрелами\n        if (currentTime - this.lastShootTime < this.fireRate) {\n            return;\n        }\n        \n        // Устанавливаем время последнего выстрела\n        this.lastShootTime = currentTime;\n        \n        // Уменьшаем количество патронов\n        this.ammo--;\n        \n        // Устанавливаем флаг стрельбы (для анимации)\n        this.isShooting = true;\n        setTimeout(() => {\n            this.isShooting = false;\n        }, 100);\n        \n        // Применяем отдачу\n        this.applyRecoil();\n        \n        // Создаем выстрел\n        this.createShot();\n        \n        // Для одиночного оружия добавляем задержку перед следующим выстрелом\n        if (this.weaponType === 'single') {\n            this.canShoot = false;\n            setTimeout(() => {\n                this.canShoot = true;\n            }, this.fireRate);\n        }\n        \n        // Отправляем информацию о выстреле на сервер\n        if (this.game && this.game.network) {\n            this.game.network.sendPlayerShoot(\n                this.position,\n                this.direction,\n                this.weapon\n            );\n        }\n    }\n    \n    /**\n     * Применение отдачи при стрельбе\n     */\n    applyRecoil() {\n        // Случайное смещение прицела в пределах recoil\n        const recoilX = (Math.random() - 0.5) * this.recoil.x * 2;\n        const recoilY = -Math.abs(Math.random() * this.recoil.y); // Всегда вверх\n        \n        // Получаем текущую позицию мыши\n        const mousePos = this.input.getMousePosition();\n        \n        // Симулируем движение мыши с отдачей\n        const newMousePos = {\n            x: mousePos.x + recoilX * 100, // Умножаем для заметного эффекта\n            y: mousePos.y + recoilY * 100\n        };\n        \n        // Обновляем направление игрока\n        this.handleMouseMove(newMousePos);\n    }\n    \n    /**\n     * Обработка движения мыши\n     * @param {Object} position - позиция мыши {x, y}\n     */\n    handleMouseMove(position) {\n        // Получаем размеры канваса\n        const canvasRect = this.renderer.canvas.getBoundingClientRect();\n        const canvasCenter = {\n            x: canvasRect.left + canvasRect.width / 2,\n            y: canvasRect.top + canvasRect.height / 2\n        };\n        \n        // Вычисляем вектор от центра к мыши\n        const mouseVec = {\n            x: position.x - canvasCenter.x,\n            y: position.y - canvasCenter.y\n        };\n        \n        // Нормализуем вектор\n        const length = Math.sqrt(mouseVec.x * mouseVec.x + mouseVec.y * mouseVec.y);\n        if (length > 0) {\n            mouseVec.x /= length;\n            mouseVec.y /= length;\n        }\n        \n        // Вычисляем угол поворота (в радианах)\n        const angle = Math.atan2(mouseVec.x, -mouseVec.y);\n        \n        // Устанавливаем направление игрока\n        this.rotation.y = angle;\n        this.direction = {\n            x: Math.sin(angle),\n            z: -Math.cos(angle)\n        };\n    }\n    \n    /**\n     * Обновление состояния игрока\n     * @param {number} deltaTime - прошедшее время с предыдущего кадра\n     */\n    update(deltaTime) {\n        if (!deltaTime) return;\n        \n        // Только локальный игрок может двигаться сам\n        if (this.isLocalPlayer) {\n            this.handleMovement(deltaTime);\n            \n            // Обновляем камеру для слежения за игроком\n            if (this.renderer) {\n                this.renderer.updateCamera(this.position);\n            }\n            \n            // Обновляем параметры при нажатии Shift (бег)\n            this.handleRunning();\n            \n            // Обновляем состояние анимации\n            this.updateAnimationState();\n        }\n        \n        // Обновляем модель (позицию и анимацию)\n        this.updateModel();\n    }\n    \n    /**\n     * Обработка бега (нажатие Shift)\n     */\n    handleRunning() {\n        if (!this.input) return;\n        \n        const wasRunning = this.isRunning;\n        \n        // Проверяем нажат ли Shift и не в режиме прицеливания\n        if (this.input.isKeyPressed('ShiftLeft') && !this.isAiming) {\n            if (!this.isRunning) {\n                this.isRunning = true;\n                this.speed = this.runningSpeed;\n                this.viewAngle = this.runningViewAngle;\n            }\n        } else if (this.isRunning) {\n            this.isRunning = false;\n            this.speed = this.isAiming ? this.aimingSpeed : this.normalSpeed;\n            this.viewAngle = this.isAiming ? this.aimingViewAngle : this.normalViewAngle;\n        }\n        \n        // Если состояние бега изменилось, сообщаем об этом\n        if (wasRunning !== this.isRunning) {\n            console.log(this.isRunning ? 'Начало бега' : 'Конец бега');\n        }\n    }\n    \n    /**\n     * Обновление состояния анимации\n     */\n    updateAnimationState() {\n        let newState = 'idle';\n        \n        if (this.isMoving) {\n            newState = this.isRunning ? 'run' : 'walk';\n        }\n        \n        if (this.isAiming) {\n            newState = 'aim';\n        }\n        \n        if (this.isShooting) {\n            newState = 'shoot';\n        }\n        \n        if (this.currentState !== newState) {\n            this.currentState = newState;\n            console.log(`Состояние анимации: ${this.currentState}`);\n            \n            // Здесь будет логика смены анимации\n        }\n    }\n    \n    /**\n     * Обработка движения игрока\n     * @param {number} deltaTime - прошедшее время с предыдущего кадра\n     */\n    handleMovement(deltaTime) {\n        if (!this.input) return;\n        \n        // Получаем направление движения\n        const moveDir = this.input.getMovementDirection();\n        \n        // Если вектор движения нулевой, снижаем скорость\n        if (moveDir.x === 0 && moveDir.z === 0) {\n            // Применяем трение для плавной остановки\n            this.velocity.x *= 0.9;\n            this.velocity.z *= 0.9;\n            \n            // Если скорость совсем маленькая, останавливаемся\n            if (Math.abs(this.velocity.x) < 0.01 && Math.abs(this.velocity.z) < 0.01) {\n                this.velocity.x = 0;\n                this.velocity.z = 0;\n                this.isMoving = false;\n            }\n        } else {\n            // Устанавливаем флаг движения\n            this.isMoving = true;\n            \n            // Вычисляем целевую скорость с учетом нормализации\n            const length = Math.sqrt(moveDir.x * moveDir.x + moveDir.z * moveDir.z);\n            const normalizedDir = {\n                x: moveDir.x / length,\n                z: moveDir.z / length\n            };\n            \n            const targetVel = {\n                x: normalizedDir.x * this.speed,\n                z: normalizedDir.z * this.speed\n            };\n            \n            // Плавно изменяем скорость\n            this.velocity.x += (targetVel.x - this.velocity.x) * this.acceleration * deltaTime;\n            this.velocity.z += (targetVel.z - this.velocity.z) * this.acceleration * deltaTime;\n        }\n        \n        // Вычисляем новую позицию\n        const newX = this.position.x + this.velocity.x * deltaTime;\n        const newZ = this.position.z + this.velocity.z * deltaTime;\n        \n        // Проверка столкновений (упрощенная)\n        const canMoveX = this.checkCollision({ x: newX, y: this.position.y, z: this.position.z });\n        const canMoveZ = this.checkCollision({ x: this.position.x, y: this.position.y, z: newZ });\n        \n        // Обновляем позицию\n        if (canMoveX) {\n            this.position.x = newX;\n        } else {\n            this.velocity.x = 0; // Остановка при столкновении\n        }\n        \n        if (canMoveZ) {\n            this.position.z = newZ;\n        } else {\n            this.velocity.z = 0; // Остановка при столкновении\n        }\n        \n        // Отправляем изменения на сервер, если доступно\n        if (this.game && this.game.network) {\n            this.game.network.sendPlayerMove(this.position, this.rotation);\n        }\n    }\n    \n    /**\n     * Упрощенная проверка столкновений\n     * @param {Object} newPosition - новая позиция для проверки\n     * @returns {boolean} - можно ли двигаться на новую позицию\n     */\n    checkCollision(newPosition) {\n        // Проверяем выход за границы карты\n        const mapSize = 500; // Половина размера карты (1000x1000)\n        \n        if (Math.abs(newPosition.x) > mapSize || Math.abs(newPosition.z) > mapSize) {\n            return false;\n        }\n        \n        // Здесь должна быть проверка столкновений с объектами\n        // В прототипе используем только границы карты\n        \n        return true;\n    }\n    \n    /**\n     * Создание выстрела (визуально и логически)\n     */\n    createShot() {\n        // В прототипе создаем простой луч\n        if (this.renderer && this.renderer.scene) {\n            const rayStart = { ...this.position };\n            rayStart.y += 1; // Уровень \"глаз\"\n            \n            const rayEnd = {\n                x: rayStart.x + this.direction.x * 100,\n                y: rayStart.y,\n                z: rayStart.z + this.direction.z * 100\n            };\n            \n            // Создаем временный луч для визуализации выстрела\n            this.renderer.createTemporaryBeam(rayStart, rayEnd, 0xFF0000, 100);\n            \n            console.log('Выстрел!', this.direction);\n        }\n    }\n    \n    /**\n     * Обновление модели игрока\n     */\n    updateModel() {\n        if (this.mesh && this.renderer) {\n            // Обновляем позицию меша\n            this.renderer.updateObjectTransform(this.mesh, this.position, this.rotation);\n            \n            // В будущем здесь будет управление анимациями\n        }\n    }\n    \n    /**\n     * Получение угла обзора\n     * @returns {number} - текущий угол обзора в градусах\n     */\n    getViewAngle() {\n        return this.viewAngle;\n    }\n    \n    /**\n     * Получение дальности обзора\n     * @returns {number} - текущая дальность обзора\n     */\n    getViewDistance() {\n        return this.viewDistance;\n    }\n    \n    /**\n     * Получение направления взгляда\n     * @returns {Object} - вектор направления {x, z}\n     */\n    getViewDirection() {\n        return { ...this.direction };\n    }\n}","/**\n * Класс для управления HUD (интерфейсом в игре)\n */\nexport class HUD {\n    /**\n     * @param {HTMLElement} element - DOM элемент для отображения HUD\n     */\n    constructor(element) {\n        this.element = element;\n        \n        // Элементы HUD\n        this.healthBar = element.querySelector('#health-bar .health-value');\n        this.ammoCounter = element.querySelector('#ammo-counter');\n        this.weaponInfo = element.querySelector('#weapon-info');\n        this.statusMessages = element.querySelector('#status-messages');\n        \n        // Состояние HUD\n        this.health = 100;\n        this.ammo = 0;\n        this.weapon = 'Нет';\n        this.messages = [];\n        \n        // Таймер для удаления сообщений\n        this.messageTimer = null;\n        \n        // Инициализация\n        this.initialize();\n    }\n    \n    /**\n     * Инициализация HUD\n     */\n    initialize() {\n        // Обновляем элементы с начальными значениями\n        this.updateHealthBar();\n        this.updateAmmoCounter();\n        this.updateWeaponInfo();\n    }\n    \n    /**\n     * Обновление HUD\n     * @param {Object} data - данные для обновления\n     */\n    update(data) {\n        // Обновляем только переданные данные\n        if (data.health !== undefined && data.health !== this.health) {\n            this.health = data.health;\n            this.updateHealthBar();\n        }\n        \n        if (data.ammo !== undefined && data.ammo !== this.ammo) {\n            this.ammo = data.ammo;\n            this.updateAmmoCounter();\n        }\n        \n        if (data.weapon !== undefined && data.weapon !== this.weapon) {\n            this.weapon = data.weapon;\n            this.updateWeaponInfo();\n        }\n    }\n    \n    /**\n     * Обновление полоски здоровья\n     */\n    updateHealthBar() {\n        // Обновляем ширину полоски здоровья\n        if (this.healthBar) {\n            this.healthBar.style.width = `${this.health}%`;\n            \n            // Меняем цвет в зависимости от количества здоровья\n            if (this.health > 70) {\n                this.healthBar.style.backgroundColor = '#4CAF50'; // Зеленый\n            } else if (this.health > 30) {\n                this.healthBar.style.backgroundColor = '#FFC107'; // Желтый\n            } else {\n                this.healthBar.style.backgroundColor = '#F44336'; // Красный\n            }\n        }\n    }\n    \n    /**\n     * Обновление счетчика патронов\n     */\n    updateAmmoCounter() {\n        if (this.ammoCounter) {\n            this.ammoCounter.textContent = `${this.ammo}`;\n        }\n    }\n    \n    /**\n     * Обновление информации об оружии\n     */\n    updateWeaponInfo() {\n        if (this.weaponInfo) {\n            this.weaponInfo.textContent = this.weapon;\n        }\n    }\n    \n    /**\n     * Добавление сообщения в статус\n     * @param {string} message - текст сообщения\n     * @param {number} duration - длительность показа в миллисекундах\n     */\n    addStatusMessage(message, duration = 3000) {\n        // Добавляем сообщение в список\n        this.messages.push({\n            text: message,\n            timestamp: Date.now(),\n            duration\n        });\n        \n        // Обновляем отображение сообщений\n        this.updateStatusMessages();\n        \n        // Устанавливаем таймер для удаления сообщения\n        if (this.messageTimer === null) {\n            this.messageTimer = setInterval(() => {\n                this.checkMessagesTimeout();\n            }, 1000);\n        }\n    }\n    \n    /**\n     * Обновление отображения статусных сообщений\n     */\n    updateStatusMessages() {\n        if (!this.statusMessages) return;\n        \n        // Очищаем элемент\n        this.statusMessages.innerHTML = '';\n        \n        // Добавляем сообщения\n        this.messages.forEach(msg => {\n            const messageElement = document.createElement('div');\n            messageElement.className = 'status-message';\n            messageElement.textContent = msg.text;\n            \n            this.statusMessages.appendChild(messageElement);\n        });\n    }\n    \n    /**\n     * Проверка таймаута сообщений\n     */\n    checkMessagesTimeout() {\n        const now = Date.now();\n        let hasRemovedMessages = false;\n        \n        // Удаляем устаревшие сообщения\n        this.messages = this.messages.filter(msg => {\n            const isExpired = now - msg.timestamp > msg.duration;\n            if (isExpired) {\n                hasRemovedMessages = true;\n            }\n            return !isExpired;\n        });\n        \n        // Обновляем отображение, если были удалены сообщения\n        if (hasRemovedMessages) {\n            this.updateStatusMessages();\n        }\n        \n        // Останавливаем таймер, если нет сообщений\n        if (this.messages.length === 0) {\n            clearInterval(this.messageTimer);\n            this.messageTimer = null;\n        }\n    }\n    \n    /**\n     * Показать HUD\n     */\n    show() {\n        this.element.classList.remove('hidden');\n    }\n    \n    /**\n     * Скрыть HUD\n     */\n    hide() {\n        this.element.classList.add('hidden');\n    }\n}","/**\n * Класс для управления интерфейсом инвентаря\n */\nexport class InventoryUI {\n    /**\n     * @param {HTMLElement} element - DOM элемент для отображения инвентаря\n     */\n    constructor(element) {\n        this.element = element;\n        \n        // Элементы инвентаря\n        this.gridElement = element.querySelector('.inventory-grid');\n        this.equippedElement = element.querySelector('.equipped-items');\n        \n        // Данные инвентаря\n        this.inventory = {\n            items: [],\n            maxSlots: 25 // 5x5 сетка\n        };\n        \n        // Экипированные предметы\n        this.equipped = {\n            weapon: null,\n            armor: null,\n            helmet: null\n        };\n        \n        // Инициализация\n        this.initialize();\n    }\n    \n    /**\n     * Инициализация интерфейса инвентаря\n     */\n    initialize() {\n        // Создаем слоты инвентаря\n        this.createInventorySlots();\n        \n        // Создаем слоты экипировки\n        this.createEquippedSlots();\n        \n        // Настраиваем обработчики событий перетаскивания\n        this.setupDragAndDrop();\n    }\n    \n    /**\n     * Создание слотов инвентаря\n     */\n    createInventorySlots() {\n        if (!this.gridElement) return;\n        \n        // Очищаем контейнер\n        this.gridElement.innerHTML = '';\n        \n        // Создаем сетку слотов 5x5\n        for (let i = 0; i < this.inventory.maxSlots; i++) {\n            const slot = document.createElement('div');\n            slot.className = 'inventory-slot';\n            slot.dataset.slotIndex = i;\n            \n            this.gridElement.appendChild(slot);\n        }\n    }\n    \n    /**\n     * Создание слотов экипировки\n     */\n    createEquippedSlots() {\n        if (!this.equippedElement) return;\n        \n        // Очищаем контейнер\n        this.equippedElement.innerHTML = '';\n        \n        // Создаем слоты для экипировки\n        const slots = [\n            { id: 'weapon', label: 'Оружие' },\n            { id: 'armor', label: 'Броня' },\n            { id: 'helmet', label: 'Шлем' }\n        ];\n        \n        slots.forEach(slotInfo => {\n            const slotContainer = document.createElement('div');\n            slotContainer.className = 'equipped-slot-container';\n            \n            const label = document.createElement('div');\n            label.className = 'equipped-slot-label';\n            label.textContent = slotInfo.label;\n            \n            const slot = document.createElement('div');\n            slot.className = 'equipped-slot';\n            slot.dataset.slotType = slotInfo.id;\n            \n            slotContainer.appendChild(label);\n            slotContainer.appendChild(slot);\n            \n            this.equippedElement.appendChild(slotContainer);\n        });\n    }\n    \n    /**\n     * Настройка системы перетаскивания\n     */\n    setupDragAndDrop() {\n        // Здесь будет реализация drag-and-drop\n        // Для прототипа оставим простую реализацию с кликами\n        \n        // Находим все слоты инвентаря\n        const inventorySlots = this.element.querySelectorAll('.inventory-slot');\n        \n        // Добавляем обработчики клика\n        inventorySlots.forEach(slot => {\n            slot.addEventListener('click', () => {\n                // В будущем здесь будет логика выбора предмета\n                console.log('Клик по слоту инвентаря:', slot.dataset.slotIndex);\n            });\n        });\n        \n        // Находим все слоты экипировки\n        const equippedSlots = this.element.querySelectorAll('.equipped-slot');\n        \n        // Добавляем обработчики клика\n        equippedSlots.forEach(slot => {\n            slot.addEventListener('click', () => {\n                // В будущем здесь будет логика выбора экипированного предмета\n                console.log('Клик по слоту экипировки:', slot.dataset.slotType);\n            });\n        });\n    }\n    \n    /**\n     * Обновление отображения инвентаря\n     * @param {Object} inventory - данные инвентаря\n     */\n    update(inventory) {\n        if (!inventory) return;\n        \n        // Обновляем данные\n        this.inventory = inventory;\n        \n        // Обновляем отображение\n        this.updateInventoryDisplay();\n    }\n    \n    /**\n     * Обновление отображения экипировки\n     * @param {Object} equipped - данные экипировки\n     */\n    updateEquipped(equipped) {\n        if (!equipped) return;\n        \n        // Обновляем данные\n        this.equipped = equipped;\n        \n        // Обновляем отображение\n        this.updateEquippedDisplay();\n    }\n    \n    /**\n     * Обновление отображения слотов инвентаря\n     */\n    updateInventoryDisplay() {\n        // Находим все слоты инвентаря\n        const slots = this.element.querySelectorAll('.inventory-slot');\n        \n        // Очищаем все слоты\n        slots.forEach(slot => {\n            slot.innerHTML = '';\n            slot.classList.remove('filled');\n        });\n        \n        // Заполняем слоты предметами\n        this.inventory.items.forEach((item, index) => {\n            if (index >= slots.length) return;\n            \n            const slot = slots[index];\n            \n            // Создаем элемент предмета\n            const itemElement = document.createElement('div');\n            itemElement.className = 'inventory-item';\n            itemElement.dataset.itemId = item.id;\n            \n            // Разный стиль для разных типов предметов\n            switch (item.type) {\n                case 'weapon':\n                    itemElement.classList.add('item-weapon');\n                    itemElement.textContent = 'W';\n                    break;\n                case 'medkit':\n                    itemElement.classList.add('item-medkit');\n                    itemElement.textContent = 'M';\n                    break;\n                case 'ammo':\n                    itemElement.classList.add('item-ammo');\n                    itemElement.textContent = 'A';\n                    break;\n                default:\n                    itemElement.textContent = '?';\n            }\n            \n            // Добавляем предмет в слот\n            slot.appendChild(itemElement);\n            slot.classList.add('filled');\n        });\n    }\n    \n    /**\n     * Обновление отображения экипированных предметов\n     */\n    updateEquippedDisplay() {\n        // Обновляем отображение экипированного оружия\n        const weaponSlot = this.element.querySelector('.equipped-slot[data-slot-type=\"weapon\"]');\n        if (weaponSlot) {\n            weaponSlot.innerHTML = '';\n            \n            if (this.equipped.weapon) {\n                const weaponElement = document.createElement('div');\n                weaponElement.className = 'equipped-item item-weapon';\n                weaponElement.textContent = 'W';\n                \n                weaponSlot.appendChild(weaponElement);\n            }\n        }\n        \n        // Обновляем отображение экипированной брони\n        const armorSlot = this.element.querySelector('.equipped-slot[data-slot-type=\"armor\"]');\n        if (armorSlot) {\n            armorSlot.innerHTML = '';\n            \n            if (this.equipped.armor) {\n                const armorElement = document.createElement('div');\n                armorElement.className = 'equipped-item item-armor';\n                armorElement.textContent = 'A';\n                \n                armorSlot.appendChild(armorElement);\n            }\n        }\n        \n        // Обновляем отображение экипированного шлема\n        const helmetSlot = this.element.querySelector('.equipped-slot[data-slot-type=\"helmet\"]');\n        if (helmetSlot) {\n            helmetSlot.innerHTML = '';\n            \n            if (this.equipped.helmet) {\n                const helmetElement = document.createElement('div');\n                helmetElement.className = 'equipped-item item-helmet';\n                helmetElement.textContent = 'H';\n                \n                helmetSlot.appendChild(helmetElement);\n            }\n        }\n    }\n    \n    /**\n     * Добавление стилей для предметов в инвентаре\n     */\n    addInventoryStyles() {\n        // Создаем стили для предметов\n        const style = document.createElement('style');\n        style.textContent = `\n            .inventory-item {\n                width: 90%;\n                height: 90%;\n                margin: 5%;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                color: white;\n                font-weight: bold;\n                user-select: none;\n                cursor: pointer;\n            }\n            \n            .item-weapon {\n                background-color: #FF5722;\n            }\n            \n            .item-medkit {\n                background-color: #4CAF50;\n            }\n            \n            .item-ammo {\n                background-color: #FFC107;\n            }\n            \n            .item-armor {\n                background-color: #2196F3;\n            }\n            \n            .item-helmet {\n                background-color: #673AB7;\n            }\n            \n            .equipped-slot-container {\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n            }\n            \n            .equipped-slot-label {\n                margin-bottom: 5px;\n                font-size: 14px;\n            }\n            \n            .equipped-item {\n                width: 90%;\n                height: 90%;\n                margin: 5%;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                color: white;\n                font-weight: bold;\n            }\n        `;\n        \n        document.head.appendChild(style);\n    }\n    \n    /**\n     * Показать инвентарь\n     */\n    show() {\n        // Добавляем стили для предметов при первом открытии\n        if (!document.querySelector('style[data-inventory-styles]')) {\n            this.addInventoryStyles();\n        }\n        \n        this.element.classList.remove('hidden');\n    }\n    \n    /**\n     * Скрыть инвентарь\n     */\n    hide() {\n        this.element.classList.add('hidden');\n    }\n}","/**\n * Модуль для инициализации и интеграции Rapier.js\n */\n\n/**\n * Инициализация Rapier.js\n * @returns {Promise} - промис, который разрешается, когда Rapier.js инициализирован\n */\nexport async function initRapier() {\n    console.log('Начинаем инициализацию Rapier.js...');\n    \n    // Проверяем, загружен ли уже Rapier.js\n    if (typeof RAPIER !== 'undefined') {\n        console.log('Rapier.js уже загружен из глобального объекта');\n        return RAPIER;\n    }\n    \n    try {\n        // Пытаемся загрузить из глобального пространства имен (CDN)\n        // Проверяем, доступен ли RAPIER в window\n        if (typeof window !== 'undefined' && window.RAPIER) {\n            console.log('Используем Rapier.js из window.RAPIER');\n            return window.RAPIER;\n        }\n        \n        // Если метод init существует, вызываем его\n        if (typeof RAPIER !== 'undefined' && typeof RAPIER.init === 'function') {\n            console.log('Инициализируем Rapier.js через RAPIER.init()');\n            await RAPIER.init();\n            return RAPIER;\n        }\n        \n        throw new Error('Rapier.js не найден в глобальном пространстве имен');\n    } catch (initError) {\n        console.warn('Не удалось инициализировать Rapier.js из глобального пространства:', initError);\n        \n        // Пробуем разные способы инициализации\n        try {\n            // Метод 1: Ожидаем глобальный объект RAPIER в течение определенного времени\n            console.log('Пытаемся дождаться загрузки Rapier.js...');\n            \n            const waitForRapier = new Promise((resolve, reject) => {\n                let attempts = 0;\n                const maxAttempts = 10;\n                const checkInterval = 300; // ms\n                \n                const checkRapier = () => {\n                    attempts++;\n                    if (typeof window.RAPIER !== 'undefined') {\n                        console.log(`RAPIER найден после ${attempts} попыток`);\n                        resolve(window.RAPIER);\n                        return;\n                    }\n                    \n                    if (attempts >= maxAttempts) {\n                        reject(new Error(`RAPIER не загрузился после ${maxAttempts} попыток`));\n                        return;\n                    }\n                    \n                    setTimeout(checkRapier, checkInterval);\n                };\n                \n                checkRapier();\n            });\n            \n            return await waitForRapier;\n        } catch (error) {\n            console.error('Все попытки инициализации Rapier.js завершились неудачей:', error);\n            \n            // Возвращаем заглушку для предотвращения критических ошибок\n            return createRapierStub();\n        }\n    }\n}\n\n/**\n * Создание заглушки для Rapier.js\n * @returns {Object} - заглушка с базовыми методами\n */\nfunction createRapierStub() {\n    console.warn('Создание заглушки Rapier.js. Физика НЕ будет работать корректно!');\n    \n    return {\n        World: class StubWorld {\n            constructor() {\n                console.warn('Используется заглушка World вместо настоящего Rapier.js');\n                this.bodies = [];\n                this.colliders = [];\n            }\n            \n            step() {}\n            \n            createRigidBody() {\n                return {\n                    translation: () => ({ x: 0, y: 0, z: 0 }),\n                    setTranslation: () => {}\n                };\n            }\n            \n            createCollider() {\n                return {};\n            }\n            \n            castRay() {\n                return null;\n            }\n            \n            castRayAndGetNormal() {\n                return { hasHit: false, toi: 0 };\n            }\n        },\n        RigidBodyDesc: {\n            fixed: () => ({\n                setTranslation: () => ({})\n            }),\n            dynamic: () => ({\n                setTranslation: () => ({}),\n                setCanSleep: () => ({}),\n                setLinearDamping: () => ({})\n            })\n        },\n        ColliderDesc: {\n            cuboid: () => ({}),\n            capsule: () => ({})\n        },\n        Ray: class StubRay {\n            constructor(origin, dir) {\n                this.origin = origin;\n                this.dir = dir;\n            }\n        }\n    };\n}\n\n/**\n * Проверка доступности Rapier.js\n * @returns {boolean} - результат проверки\n */\nexport function isRapierAvailable() {\n    return typeof RAPIER !== 'undefined' || \n           (typeof window !== 'undefined' && window.RAPIER);\n}\n\n/**\n * Получение экземпляра Rapier.js\n * @returns {Object|null} - объект Rapier.js или null, если он не загружен\n */\nexport function getRapier() {\n    if (typeof RAPIER !== 'undefined') {\n        return RAPIER;\n    }\n    \n    if (typeof window !== 'undefined' && window.RAPIER) {\n        return window.RAPIER;\n    }\n    \n    return null;\n}","/**\n * Менеджер физики, отвечающий за инициализацию и управление физикой игры\n * Использует Rapier.js для физических расчетов\n */\nimport { initRapier, isRapierAvailable, getRapier } from './rapier-integration.js';\n\nexport class PhysicsManager {\n    constructor() {\n        this.world = null; // Физический мир Rapier\n        this.bodies = new Map(); // Карта физических тел\n        this.colliders = new Map(); // Карта коллайдеров\n        this.isInitialized = false; // Флаг инициализации\n        this.RAPIER = null; // Ссылка на объект RAPIER\n        this.initPromise = null; // Промис инициализации\n    }\n\n    /**\n     * Инициализация физики\n     * @returns {Promise} - промис, который разрешается, когда физика инициализирована\n     */\n    async init() {\n        // Если инициализация уже началась, возвращаем существующий промис\n        if (this.initPromise) {\n            return this.initPromise;\n        }\n\n        // Создаем промис инициализации\n        this.initPromise = new Promise(async (resolve) => {\n            try {\n                console.log('PhysicsManager: начало инициализации...');\n                \n                // Инициализируем Rapier.js\n                this.RAPIER = await initRapier();\n                \n                // Проверяем, доступен ли RAPIER\n                if (!this.RAPIER && !isRapierAvailable()) {\n                    console.error('PhysicsManager: RAPIER не определен. Убедитесь, что библиотека загружена.');\n                    resolve(false);\n                    return;\n                }\n                \n                // Если RAPIER всё ещё не доступен, используем глобальный объект\n                if (!this.RAPIER) {\n                    this.RAPIER = getRapier();\n                    if (!this.RAPIER) {\n                        console.error('PhysicsManager: не удалось получить объект RAPIER.');\n                        resolve(false);\n                        return;\n                    }\n                }\n\n                // Инициализируем физический мир\n                console.log('PhysicsManager: создание физического мира...');\n                \n                // Создаем мир с гравитацией (0, -9.81, 0)\n                const gravity = { x: 0.0, y: -9.81, z: 0.0 };\n                \n                // Проверяем, правильный ли формат конструктора\n                if (typeof this.RAPIER.World === 'function') {\n                    this.world = new this.RAPIER.World(gravity);\n                } else if (typeof this.RAPIER.World?.new === 'function') {\n                    // Альтернативный синтаксис для некоторых версий\n                    this.world = this.RAPIER.World.new(gravity);\n                } else {\n                    console.error('PhysicsManager: не удалось создать физический мир. Неподдерживаемый API.');\n                    resolve(false);\n                    return;\n                }\n                \n                // Устанавливаем флаг инициализации\n                this.isInitialized = true;\n                \n                console.log('PhysicsManager: физический движок успешно инициализирован.');\n                resolve(true);\n            } catch (error) {\n                console.error('PhysicsManager: ошибка при инициализации физики:', error);\n                this.isInitialized = false;\n                resolve(false);\n            }\n        });\n\n        return this.initPromise;\n    }\n\n    /**\n     * Проверка, инициализирован ли физический движок\n     * @returns {boolean} - результат проверки\n     */\n    isReady() {\n        return this.isInitialized && this.world !== null;\n    }\n\n    /**\n     * Получение физического мира\n     * @returns {Object} - физический мир Rapier\n     */\n    getWorld() {\n        return this.world;\n    }\n\n    /**\n     * Обновление физики\n     * @param {number} deltaTime - время с последнего обновления в секундах\n     */\n    update(deltaTime) {\n        if (!this.isReady()) return;\n        \n        try {\n            // Шаг физической симуляции\n            if (typeof this.world.step === 'function') {\n                this.world.step();\n            } else if (typeof this.world.timestep === 'function') {\n                // Альтернативный метод для некоторых версий API\n                this.world.timestep(deltaTime || 1/60);\n            }\n            \n            // Обновление позиций объектов на основе физики\n            this.updateBodies();\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при обновлении физики:', error);\n        }\n    }\n\n    /**\n     * Обновление позиций объектов на основе физики\n     */\n    updateBodies() {\n        try {\n            // Для каждого физического тела обновляем позицию соответствующего 3D объекта\n            for (let [object, body] of this.bodies) {\n                if (object && object.position && body) {\n                    let position;\n                    \n                    // Получаем позицию в зависимости от API\n                    if (typeof body.translation === 'function') {\n                        position = body.translation();\n                    } else if (typeof body.getTranslation === 'function') {\n                        position = body.getTranslation();\n                    } else if (body.translation) {\n                        position = body.translation;\n                    } else {\n                        continue; // Пропускаем, если не можем получить позицию\n                    }\n                    \n                    // Обновляем позицию 3D объекта\n                    object.position.set(position.x, position.y, position.z);\n                    \n                    // Если у объекта есть метод обновления позиции, вызываем его\n                    if (typeof object.updatePhysics === 'function') {\n                        object.updatePhysics(body);\n                    }\n                }\n            }\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при обновлении позиций объектов:', error);\n        }\n    }\n\n    /**\n     * Создание статического коллайдера для препятствия\n     * @param {Object} options - параметры коллайдера\n     * @param {Object} options.position - позиция коллайдера {x, y, z}\n     * @param {Object} options.size - размеры коллайдера {x, y, z}\n     * @param {Object} options.object - связанный 3D объект (опционально)\n     * @returns {Object} - созданный коллайдер\n     */\n    createObstacle(options) {\n        if (!this.isReady()) return null;\n        \n        try {\n            const position = options.position || { x: 0, y: 0, z: 0 };\n            const size = options.size || { x: 1, y: 1, z: 1 };\n            \n            // Создаем жесткое тело\n            let rigidBodyDesc;\n            if (typeof this.RAPIER.RigidBodyDesc.fixed === 'function') {\n                rigidBodyDesc = this.RAPIER.RigidBodyDesc.fixed()\n                    .setTranslation(position.x, position.y, position.z);\n            } else {\n                // Альтернативный синтаксис\n                rigidBodyDesc = new this.RAPIER.RigidBodyDesc(this.RAPIER.RigidBodyType.Fixed);\n                rigidBodyDesc.translation = { x: position.x, y: position.y, z: position.z };\n            }\n            \n            const rigidBody = this.world.createRigidBody(rigidBodyDesc);\n            \n            // Создаем коллайдер в форме прямоугольника\n            let colliderDesc;\n            if (typeof this.RAPIER.ColliderDesc.cuboid === 'function') {\n                colliderDesc = this.RAPIER.ColliderDesc.cuboid(\n                    size.x / 2, size.y / 2, size.z / 2\n                );\n            } else {\n                // Альтернативный синтаксис\n                colliderDesc = new this.RAPIER.ColliderDesc(\n                    new this.RAPIER.Cuboid(size.x / 2, size.y / 2, size.z / 2)\n                );\n            }\n            \n            const collider = this.world.createCollider(colliderDesc, rigidBody);\n            \n            // Если передан 3D объект, сохраняем его связь с физическим телом\n            if (options.object) {\n                this.bodies.set(options.object, rigidBody);\n                this.colliders.set(options.object, collider);\n            }\n            \n            return collider;\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при создании препятствия:', error);\n            return null;\n        }\n    }\n\n    /**\n     * Создание динамического тела для игрока или NPC\n     * @param {Object} options - параметры тела\n     * @param {Object} options.position - начальная позиция {x, y, z}\n     * @param {number} options.radius - радиус коллайдера\n     * @param {number} options.height - высота коллайдера\n     * @param {Object} options.object - связанный 3D объект\n     * @returns {Object} - созданное физическое тело\n     */\n    createCharacter(options) {\n        if (!this.isReady()) return null;\n        \n        try {\n            const position = options.position || { x: 0, y: 0, z: 0 };\n            const radius = options.radius || 0.5;\n            const height = options.height || 1.8;\n            \n            // Создаем жесткое тело\n            let rigidBodyDesc;\n            if (typeof this.RAPIER.RigidBodyDesc.dynamic === 'function') {\n                rigidBodyDesc = this.RAPIER.RigidBodyDesc.dynamic()\n                    .setTranslation(position.x, position.y, position.z)\n                    .setCanSleep(false) // Тело всегда активно\n                    .setLinearDamping(0.2); // Добавляем затухание для более плавного движения\n            } else {\n                // Альтернативный синтаксис\n                rigidBodyDesc = new this.RAPIER.RigidBodyDesc(this.RAPIER.RigidBodyType.Dynamic);\n                rigidBodyDesc.translation = { x: position.x, y: position.y, z: position.z };\n                rigidBodyDesc.canSleep = false;\n                rigidBodyDesc.linearDamping = 0.2;\n            }\n            \n            const rigidBody = this.world.createRigidBody(rigidBodyDesc);\n            \n            // Создаем коллайдер в форме капсулы\n            let colliderDesc;\n            if (typeof this.RAPIER.ColliderDesc.capsule === 'function') {\n                colliderDesc = this.RAPIER.ColliderDesc.capsule(\n                    height / 2 - radius, // половина высоты без учета полусфер\n                    radius // радиус\n                );\n            } else {\n                // Альтернативный синтаксис\n                colliderDesc = new this.RAPIER.ColliderDesc(\n                    new this.RAPIER.Capsule(height / 2 - radius, radius)\n                );\n            }\n            \n            const collider = this.world.createCollider(colliderDesc, rigidBody);\n            \n            // Если передан 3D объект, сохраняем его связь с физическим телом\n            if (options.object) {\n                this.bodies.set(options.object, rigidBody);\n                this.colliders.set(options.object, collider);\n            }\n            \n            return rigidBody;\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при создании персонажа:', error);\n            return null;\n        }\n    }\n    \n    /**\n     * Выполнение рейкаста для проверки пересечения с объектами\n     * @param {Object} origin - начальная точка луча {x, y, z}\n     * @param {Object} direction - направление луча {x, y, z}\n     * @param {number} maxDistance - максимальная дистанция\n     * @returns {Object|null} - результат рейкаста или null, если нет пересечений\n     */\n    castRay(origin, direction, maxDistance = 100) {\n        if (!this.isReady()) return null;\n        \n        try {\n            // Создаем луч\n            let ray;\n            if (typeof this.RAPIER.Ray === 'function') {\n                ray = new this.RAPIER.Ray(origin, direction);\n            } else {\n                // Альтернативный синтаксис для объектных параметров\n                ray = { origin, direction };\n            }\n            \n            // Выполняем рейкаст\n            if (typeof this.world.castRay === 'function') {\n                return this.world.castRay(ray, maxDistance, true);\n            } else if (typeof this.world.castRayAndGetNormal === 'function') {\n                return this.world.castRayAndGetNormal(origin, direction, maxDistance, true);\n            } else {\n                console.warn('PhysicsManager: метод рейкаста не доступен');\n                return null;\n            }\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при выполнении рейкаста:', error);\n            return null;\n        }\n    }\n    \n    /**\n     * Создание неподвижного препятствия в виде плоскости (например, пол)\n     * @param {Object} options - параметры плоскости\n     * @param {Object} options.normal - нормаль к плоскости {x, y, z}\n     * @param {number} options.offset - смещение от начала координат\n     * @returns {Object} - созданный коллайдер\n     */\n    createGround(options = {}) {\n        if (!this.isReady()) return null;\n        \n        try {\n            const normal = options.normal || { x: 0, y: 1, z: 0 }; // По умолчанию вверх\n            const offset = options.offset || 0;\n            \n            // Создаем жесткое тело\n            let rigidBodyDesc;\n            if (typeof this.RAPIER.RigidBodyDesc.fixed === 'function') {\n                rigidBodyDesc = this.RAPIER.RigidBodyDesc.fixed();\n            } else {\n                // Альтернативный синтаксис\n                rigidBodyDesc = new this.RAPIER.RigidBodyDesc(this.RAPIER.RigidBodyType.Fixed);\n            }\n            \n            const rigidBody = this.world.createRigidBody(rigidBodyDesc);\n            \n            // Создаем коллайдер в форме плоскости\n            let colliderDesc;\n            if (typeof this.RAPIER.ColliderDesc.halfspace === 'function') {\n                colliderDesc = this.RAPIER.ColliderDesc.halfspace(normal, offset);\n            } else {\n                // Альтернативный синтаксис для Plane или HalfSpace\n                colliderDesc = new this.RAPIER.ColliderDesc(\n                    new this.RAPIER.HalfSpace(normal, offset)\n                );\n            }\n            \n            return this.world.createCollider(colliderDesc, rigidBody);\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при создании плоскости:', error);\n            return null;\n        }\n    }\n    \n    /**\n     * Удаление физического тела\n     * @param {Object} object - 3D объект, связанный с физическим телом\n     */\n    removeBody(object) {\n        try {\n            if (this.bodies.has(object)) {\n                const body = this.bodies.get(object);\n                this.world.removeRigidBody(body);\n                this.bodies.delete(object);\n            }\n            \n            if (this.colliders.has(object)) {\n                this.colliders.delete(object);\n            }\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при удалении тела:', error);\n        }\n    }\n    \n    /**\n     * Освобождение ресурсов\n     */\n    dispose() {\n        try {\n            // Очищаем все коллекции\n            this.bodies.clear();\n            this.colliders.clear();\n            \n            // Уничтожаем физический мир\n            if (this.world) {\n                // У некоторых версий Rapier.js есть метод free() для освобождения ресурсов\n                if (typeof this.world.free === 'function') {\n                    this.world.free();\n                }\n                this.world = null;\n            }\n            \n            this.isInitialized = false;\n            this.initPromise = null;\n            console.log('PhysicsManager: ресурсы освобождены');\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при освобождении ресурсов:', error);\n        }\n    }\n}","/**\n * Система визуализации конуса зрения и тумана войны в стиле Darkwood\n * Использует Rapier.js для расчета рейкастов и Three.js для отображения\n */\nexport class VisionSystem {\n    /**\n     * @param {Object} options - настройки системы визуализации\n     * @param {Object} options.scene - Three.js сцена\n     * @param {Object} options.world - Rapier.js мир физики\n     * @param {Object} options.player - игрок, для которого отображается конус зрения\n     * @param {number} options.fov - угол обзора в градусах (по умолчанию 90)\n     * @param {number} options.rayCount - количество лучей (по умолчанию 60)\n     * @param {number} options.maxDistance - максимальная дистанция обзора (по умолчанию 50)\n     * @param {boolean} options.memoryEnabled - сохранение посещенных областей (по умолчанию true)\n     * @param {boolean} options.blurEdges - размытие краев конуса зрения (по умолчанию true)\n     */\n    constructor(options) {\n        // Проверяем наличие обязательных параметров\n        if (!options.scene || !options.player) {\n            console.error('VisionSystem: не указаны обязательные параметры (scene, player)');\n            return;\n        }\n\n        this.scene = options.scene;\n        this.world = options.world;\n        this.player = options.player;\n        \n        // Настройки по умолчанию\n        this.fov = options.fov || 90; // угол обзора в градусах\n        this.rayCount = options.rayCount || 60; // количество лучей\n        this.maxDistance = options.maxDistance || 50; // максимальная дистанция обзора\n        this.memoryEnabled = options.memoryEnabled !== undefined ? options.memoryEnabled : true; // сохранение посещенных областей\n        this.blurEdges = options.blurEdges !== undefined ? options.blurEdges : true; // размытие краев конуса зрения\n        \n        // Внутренние переменные\n        this.visibilityMask = null; // маска для затемнения невидимых областей\n        this.visibilityGroup = null; // группа для всех элементов системы видимости\n        this.memoryMask = null; // маска для посещенных областей\n        this.visibilityShape = null; // форма для вырезания конуса видимости\n        this.memoryGrid = []; // сетка для отслеживания посещенных областей\n        this.cellSize = options.cellSize || 5; // размер ячейки для карты посещенных областей\n        this.gridResolution = Math.ceil(1000 / this.cellSize); // разрешение сетки для карты (1000 - размер игрового мира)\n        \n        // Флаг инициализации\n        this.isInitialized = false;\n\n        // Инициализация\n        this.init();\n    }\n    \n    /**\n     * Инициализация системы видимости\n     */\n    init() {\n        try {\n            this.initVisibilityMask();\n            \n            if (this.memoryEnabled) {\n                this.initMemoryMap();\n            }\n            \n            this.isInitialized = true;\n            console.log('VisionSystem: успешно инициализирована');\n        } catch (error) {\n            console.error('VisionSystem: ошибка при инициализации:', error);\n        }\n    }\n\n    /**\n     * Инициализация маски видимости\n     */\n    initVisibilityMask() {\n        // Создаем группу для системы видимости\n        this.visibilityGroup = new THREE.Group();\n        this.scene.add(this.visibilityGroup);\n        \n        // Создаем большой черный прямоугольник, покрывающий весь мир\n        const worldSize = 1000; // размер игрового мира\n        const maskGeometry = new THREE.PlaneGeometry(worldSize * 1.5, worldSize * 1.5);\n        const maskMaterial = new THREE.MeshBasicMaterial({\n            color: 0x000000,\n            transparent: true,\n            opacity: 0.9, // Немного увеличим непрозрачность для лучшего затемнения\n            side: THREE.DoubleSide,\n            depthTest: false, // отключаем тест глубины, чтобы маска всегда была видна\n            depthWrite: false // отключаем запись глубины\n        });\n        \n        this.visibilityMask = new THREE.Mesh(maskGeometry, maskMaterial);\n        this.visibilityMask.rotation.x = -Math.PI / 2; // поворачиваем горизонтально\n        this.visibilityMask.position.y = 0.2; // немного выше земли\n        this.visibilityMask.renderOrder = 999; // рендерим маску последней\n        this.visibilityGroup.add(this.visibilityMask);\n        \n        // Создаем форму для вырезания конуса видимости\n        this.visibilityShape = new THREE.Shape();\n        // Изначально пустая форма, будет обновляться в методе update\n    }\n    \n    /**\n     * Инициализация карты посещенных областей\n     */\n    initMemoryMap() {\n        // Создаем сетку для карты посещенных областей\n        this.memoryGrid = new Array(this.gridResolution);\n        for (let i = 0; i < this.gridResolution; i++) {\n            this.memoryGrid[i] = new Array(this.gridResolution).fill(0);\n        }\n        \n        // Создаем маску для посещенных областей (серая полупрозрачная)\n        const memoryMaskGeometry = new THREE.PlaneGeometry(1000 * 1.5, 1000 * 1.5, this.gridResolution, this.gridResolution);\n        const memoryMaskMaterial = new THREE.MeshBasicMaterial({\n            color: 0xAAAAAA,\n            transparent: true,\n            opacity: 0.5,\n            side: THREE.DoubleSide,\n            depthTest: false,\n            depthWrite: false,\n            vertexColors: true // включаем поддержку цветов вершин\n        });\n        \n        this.memoryMask = new THREE.Mesh(memoryMaskGeometry, memoryMaskMaterial);\n        this.memoryMask.rotation.x = -Math.PI / 2;\n        this.memoryMask.position.y = 0.1; // немного ниже маски видимости\n        this.memoryMask.renderOrder = 998; // рендерим перед маской видимости\n        this.visibilityGroup.add(this.memoryMask);\n        \n        // Инициализируем цвета вершин (полностью непрозрачные)\n        const colors = [];\n        const positions = memoryMaskGeometry.attributes.position.array;\n        \n        for (let i = 0; i < positions.length; i += 3) {\n            colors.push(0, 0, 0); // RGB, полностью черный = непрозрачный\n        }\n        \n        memoryMaskGeometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\n    }\n    \n    /**\n     * Обновление конуса видимости\n     */\n    update() {\n        if (!this.isInitialized || !this.player || !this.world) return;\n        \n        try {\n            // Получаем актуальные данные от игрока\n            const playerPos = this.player.position;\n            const direction = this.player.getViewDirection();\n            // Пытаемся получить текущий угол обзора, если метод существует\n            const viewAngle = typeof this.player.getViewAngle === 'function' \n                ? this.player.getViewAngle() \n                : this.fov;\n            \n            // Получаем мировую позицию игрока\n            const origin = {\n                x: playerPos.x,\n                y: playerPos.y + 1.0, // на уровне \"глаз\" игрока\n                z: playerPos.z\n            };\n            \n            // Вычисляем направление взгляда игрока в радианах\n            const directionAngle = Math.atan2(direction.x, direction.z);\n            const halfFov = (viewAngle / 2) * (Math.PI / 180); // половина угла обзора в радианах\n            \n            // Формируем список углов для выпуска лучей\n            const angles = [];\n            for (let i = 0; i < this.rayCount; i++) {\n                const angle = directionAngle - halfFov + (i / (this.rayCount - 1)) * 2 * halfFov;\n                angles.push(angle);\n            }\n            \n            // Вычисляем точки контура видимой области\n            const points = [];\n            \n            // Первая точка - позиция игрока\n            points.push(new THREE.Vector2(0, 0));\n            \n            // Выпускаем лучи и находим точки пересечения\n            angles.forEach(angle => {\n                // Для каждого угла получаем единичный вектор направления\n                const dir = {\n                    x: Math.sin(angle),\n                    y: 0,  // луч идет горизонтально\n                    z: Math.cos(angle)\n                };\n                \n                // Выполняем рейкаст\n                let endPoint;\n                \n                // Проверяем доступные методы в world\n                if (typeof this.world.castRayAndGetNormal === 'function') {\n                    // Новый способ рейкаста, рекомендуемый Rapier.js\n                    const raycastResult = this.world.castRayAndGetNormal(\n                        origin, \n                        dir, \n                        this.maxDistance, \n                        true\n                    );\n                    \n                    const hit = raycastResult.hasHit ? raycastResult : null;\n                    \n                    if (hit !== null && hit.hasHit) {\n                        // Луч столкнулся с препятствием\n                        const hitDistance = hit.toi; // дистанция до точки столкновения\n                        \n                        // Немного уменьшаем дистанцию, чтобы избежать артефактов\n                        const safeDistance = hitDistance * 0.99;\n                        \n                        // Вычисляем координаты точки пересечения\n                        endPoint = {\n                            x: origin.x + dir.x * safeDistance,\n                            z: origin.z + dir.z * safeDistance\n                        };\n                    } else {\n                        // Луч не встретил препятствий, берем максимальную дистанцию\n                        endPoint = {\n                            x: origin.x + dir.x * this.maxDistance,\n                            z: origin.z + dir.z * this.maxDistance\n                        };\n                    }\n                } else if (typeof this.world.castRay === 'function') {\n                    // Старый способ рейкаста\n                    const ray = new RAPIER.Ray(origin, dir);\n                    const hit = this.world.castRay(ray, this.maxDistance, true);\n                    \n                    if (hit !== null) {\n                        // Луч столкнулся с препятствием\n                        const hitDistance = hit.toi * this.maxDistance * 0.99;\n                        \n                        // Вычисляем координаты точки пересечения\n                        endPoint = {\n                            x: origin.x + dir.x * hitDistance,\n                            z: origin.z + dir.z * hitDistance\n                        };\n                    } else {\n                        // Луч не встретил препятствий, берем максимальную дистанцию\n                        endPoint = {\n                            x: origin.x + dir.x * this.maxDistance,\n                            z: origin.z + dir.z * this.maxDistance\n                        };\n                    }\n                } else {\n                    // Если методы рейкаста недоступны, просто берем максимальную дистанцию\n                    console.warn('VisionSystem: методы рейкаста недоступны, используем максимальную дистанцию');\n                    endPoint = {\n                        x: origin.x + dir.x * this.maxDistance,\n                        z: origin.z + dir.z * this.maxDistance\n                    };\n                }\n                \n                // Добавляем точку в список (относительно позиции игрока)\n                points.push(new THREE.Vector2(\n                    endPoint.x - origin.x,\n                    endPoint.z - origin.z\n                ));\n                \n                // Обновляем карту посещенных областей\n                if (this.memoryEnabled) {\n                    this.markVisitedArea(endPoint.x, endPoint.z);\n                }\n            });\n            \n            // Добавляем последнюю точку, чтобы замкнуть форму\n            points.push(points[1].clone());\n            \n            // Создаем форму конуса видимости\n            this.updateVisibilityShape(points);\n            \n            // Обновляем карту посещенных областей\n            if (this.memoryEnabled) {\n                this.updateMemoryMap();\n            }\n        } catch (error) {\n            console.error('VisionSystem: ошибка при обновлении:', error);\n        }\n    }\n    \n    /**\n     * Обновление формы видимости\n     * @param {Array} points - точки контура видимой области\n     */\n    updateVisibilityShape(points) {\n        // Проверяем валидность точек\n        if (!points || points.length < 3) {\n            console.warn('VisionSystem: недостаточно точек для создания формы видимости');\n            return;\n        }\n        \n        try {\n            // Создаем новую форму\n            const shape = new THREE.Shape();\n            \n            // Перемещаемся в первую точку\n            shape.moveTo(points[0].x, points[0].y);\n            \n            // Добавляем остальные точки\n            for (let i = 1; i < points.length; i++) {\n                shape.lineTo(points[i].x, points[i].y);\n            }\n            \n            // Создаем внешний контур (большой прямоугольник)\n            const worldSize = this.maxDistance * 2;\n            const outerShape = new THREE.Shape();\n            outerShape.moveTo(-worldSize, -worldSize);\n            outerShape.lineTo(worldSize, -worldSize);\n            outerShape.lineTo(worldSize, worldSize);\n            outerShape.lineTo(-worldSize, worldSize);\n            outerShape.lineTo(-worldSize, -worldSize);\n            \n            // Вырезаем конус видимости из внешнего контура\n            outerShape.holes.push(shape);\n            \n            // Обновляем геометрию маски\n            if (this.visibilityMask) {\n                // Удаляем старую геометрию\n                if (this.visibilityMask.geometry) {\n                    this.visibilityMask.geometry.dispose();\n                }\n                \n                // Создаем новую геометрию\n                this.visibilityMask.geometry = new THREE.ShapeGeometry(outerShape);\n                \n                // Перемещаем маску в позицию игрока\n                const playerPos = this.player.position;\n                this.visibilityMask.position.set(playerPos.x, 0.2, playerPos.z);\n            }\n        } catch (error) {\n            console.error('VisionSystem: ошибка при обновлении формы видимости:', error);\n        }\n    }\n    \n    /**\n     * Отметка посещенной области на карте\n     * @param {Number} x - координата X\n     * @param {Number} z - координата Z\n     */\n    markVisitedArea(x, z) {\n        // Преобразуем мировые координаты в координаты сетки\n        const gridX = Math.floor((x + 500) / this.cellSize);\n        const gridZ = Math.floor((z + 500) / this.cellSize);\n        \n        // Проверяем, что координаты находятся в пределах сетки\n        if (gridX >= 0 && gridX < this.gridResolution && gridZ >= 0 && gridZ < this.gridResolution) {\n            // Отмечаем ячейку как посещенную\n            this.memoryGrid[gridX][gridZ] = 1;\n            \n            // Отмечаем соседние ячейки для плавного перехода\n            for (let dx = -1; dx <= 1; dx++) {\n                for (let dz = -1; dz <= 1; dz++) {\n                    const nx = gridX + dx;\n                    const nz = gridZ + dz;\n                    \n                    if (nx >= 0 && nx < this.gridResolution && nz >= 0 && nz < this.gridResolution) {\n                        // Устанавливаем значение не меньше 0.7 для соседних ячеек\n                        this.memoryGrid[nx][nz] = Math.max(this.memoryGrid[nx][nz], 0.7);\n                    }\n                }\n            }\n        }\n    }\n    \n    /**\n     * Обновление карты посещенных областей\n     */\n    updateMemoryMap() {\n        if (!this.memoryEnabled || !this.memoryMask) return;\n        \n        try {\n            // Получаем текущую геометрию\n            const geometry = this.memoryMask.geometry;\n            \n            // Получаем атрибут цвета\n            let colors = geometry.attributes.color;\n            \n            // Если атрибут не существует, создаем его\n            if (!colors) {\n                const positions = geometry.attributes.position.array;\n                const colorsArray = new Float32Array(positions.length);\n                colors = new THREE.BufferAttribute(colorsArray, 3);\n                geometry.setAttribute('color', colors);\n            }\n            \n            // Обновляем цвета вершин на основе карты посещенных областей\n            const positions = geometry.attributes.position.array;\n            \n            for (let i = 0, j = 0; i < positions.length; i += 3, j++) {\n                // Получаем координаты вершины\n                const x = positions[i];\n                const z = positions[i + 2];\n                \n                // Преобразуем мировые координаты в координаты сетки\n                const gridX = Math.floor((x + 500) / this.cellSize);\n                const gridZ = Math.floor((z + 500) / this.cellSize);\n                \n                // Проверяем, что координаты находятся в пределах сетки\n                if (gridX >= 0 && gridX < this.gridResolution && gridZ >= 0 && gridZ < this.gridResolution) {\n                    // Получаем значение ячейки (0 - не посещена, 1 - посещена)\n                    const visited = this.memoryGrid[gridX][gridZ];\n                    \n                    // Устанавливаем цвет вершины\n                    colors.array[i] = visited;     // R (0-1)\n                    colors.array[i + 1] = visited; // G (0-1)\n                    colors.array[i + 2] = visited; // B (0-1)\n                }\n            }\n            \n            // Отмечаем атрибут цвета как требующий обновления\n            colors.needsUpdate = true;\n        } catch (error) {\n            console.error('VisionSystem: ошибка при обновлении карты посещенных областей:', error);\n        }\n    }\n    \n    /**\n     * Очистка ресурсов системы\n     */\n    dispose() {\n        try {\n            // Удаляем маску видимости\n            if (this.visibilityMask) {\n                if (this.visibilityMask.geometry) {\n                    this.visibilityMask.geometry.dispose();\n                }\n                if (this.visibilityMask.material) {\n                    this.visibilityMask.material.dispose();\n                }\n                this.visibilityGroup.remove(this.visibilityMask);\n            }\n            \n            // Удаляем маску посещенных областей\n            if (this.memoryMask) {\n                if (this.memoryMask.geometry) {\n                    this.memoryMask.geometry.dispose();\n                }\n                if (this.memoryMask.material) {\n                    this.memoryMask.material.dispose();\n                }\n                this.visibilityGroup.remove(this.memoryMask);\n            }\n            \n            // Удаляем группу видимости\n            if (this.visibilityGroup) {\n                this.scene.remove(this.visibilityGroup);\n            }\n            \n            // Сбрасываем переменные\n            this.visibilityMask = null;\n            this.memoryMask = null;\n            this.visibilityGroup = null;\n            this.memoryGrid = [];\n            this.isInitialized = false;\n            \n            console.log('VisionSystem: ресурсы успешно освобождены');\n        } catch (error) {\n            console.error('VisionSystem: ошибка при освобождении ресурсов:', error);\n        }\n    }\n}","// client/src/core/game.js\n\n// Импорт основных модулей\nimport { Renderer } from './renderer.js';\nimport { InputHandler } from './input.js';\nimport { NetworkManager } from './network.js';\nimport { Player } from '../entities/player.js';\nimport { HUD } from '../ui/hud.js';\nimport { InventoryUI } from '../ui/inventory.js';\nimport { PhysicsManager } from '../physics/physics-manager.js';\nimport { VisionSystem } from '../physics/vision-system.js';\n\n// Функция для логирования\nfunction log(message) {\n    if (typeof window !== 'undefined' && window.debugLog) {\n        window.debugLog('Game', message);\n    } else {\n        console.log(`[Game] ${message}`);\n    }\n}\n\n/**\n * Основной класс игры, управляющий всеми компонентами\n */\nclass Game {\n    constructor() {\n        log('Инициализация игры...');\n        \n        this.isRunning = false;\n        this.isLoading = true;\n        this.currentScene = 'loading'; // loading, menu, game\n        \n        // Элементы DOM\n        this.loadingScreen = document.getElementById('loading-screen');\n        this.mainMenu = document.getElementById('main-menu');\n        this.gameCanvas = document.getElementById('game-canvas');\n        this.hudElement = document.getElementById('hud');\n        this.inventoryScreen = document.getElementById('inventory-screen');\n        this.loadingStatus = document.getElementById('loading-status');\n        \n        // Обновляем статус загрузки\n        this.updateLoadingStatus('Инициализация игры...');\n        \n        // Отлов глобальных ошибок\n        window.addEventListener('error', this.handleGlobalError.bind(this));\n        window.addEventListener('unhandledrejection', this.handlePromiseError.bind(this));\n        \n        // Состояние игры\n        this.player = null;\n        this.entities = [];\n        \n        // Игровой таймер и физика\n        this.gameTime = 0;\n        this.physicsUpdateRate = 1/60; // 60 обновлений физики в секунду\n        this.physicsAccumulator = 0;\n        \n        // Параметры видимости\n        this.fogOfWarEnabled = true;\n        this.visibilitySystemEnabled = true;\n        \n        // Привязка контекста this к методам\n        this.update = this.update.bind(this);\n        this.fixedUpdate = this.fixedUpdate.bind(this);\n        this.startGame = this.startGame.bind(this);\n        \n        // Инициализация основных модулей с обработкой ошибок\n        this.initModules()\n            .then(() => {\n                log('Основные модули инициализированы');\n                return this.loadResources();\n            })\n            .then(() => {\n                log('Ресурсы загружены');\n                this.showMainMenu();\n            })\n            .catch(error => {\n                log(`Ошибка инициализации: ${error.message}`);\n                this.showErrorScreen(`Произошла ошибка при инициализации: ${error.message}`);\n            });\n    }\n    \n    /**\n     * Инициализация основных модулей с проверкой на ошибки\n     */\n    async initModules() {\n        try {\n            this.updateLoadingStatus('Инициализация рендерера...');\n            // Инициализация рендерера\n            this.renderer = new Renderer(this.gameCanvas);\n            \n            this.updateLoadingStatus('Инициализация обработчика ввода...');\n            // Инициализация обработчика ввода\n            this.input = new InputHandler();\n            \n            this.updateLoadingStatus('Инициализация сетевого менеджера...');\n            // Инициализация сетевого менеджера\n            this.network = new NetworkManager();\n            \n            this.updateLoadingStatus('Инициализация физического движка...');\n            // Инициализация физического движка\n            this.physics = new PhysicsManager();\n            \n            this.updateLoadingStatus('Инициализация UI компонентов...');\n            // Инициализация UI компонентов\n            this.ui = {\n                hud: new HUD(this.hudElement),\n                inventory: new InventoryUI(this.inventoryScreen)\n            };\n            \n            // Настройка обработчиков событий\n            this.setupEventListeners();\n            \n            // Запуск игрового цикла\n            this.lastFrameTime = 0;\n            \n            return true;\n        } catch (error) {\n            log(`Ошибка инициализации модулей: ${error.message}`);\n            throw error;\n        }\n    }\n    \n    /**\n     * Обновление статуса загрузки\n     * @param {string} status - текст статуса\n     */\n    updateLoadingStatus(status) {\n        if (this.loadingStatus) {\n            this.loadingStatus.textContent = status;\n        }\n        log(status);\n    }\n    \n    /**\n     * Обработка глобальных ошибок\n     * @param {ErrorEvent} event - событие ошибки\n     */\n    handleGlobalError(event) {\n        log(`Глобальная ошибка: ${event.message} в ${event.filename}:${event.lineno}`);\n        \n        // Показываем сообщение об ошибке, если игра ещё не запущена\n        if (this.currentScene === 'loading') {\n            this.showErrorScreen(`Ошибка: ${event.message}`);\n        }\n        \n        // Предотвращаем дополнительную обработку ошибки\n        event.preventDefault();\n    }\n    \n    /**\n     * Обработка необработанных ошибок промисов\n     * @param {PromiseRejectionEvent} event - событие отклонения промиса\n     */\n    handlePromiseError(event) {\n        const errorMessage = event.reason?.message || 'Неизвестная ошибка Promise';\n        log(`Необработанная ошибка Promise: ${errorMessage}`);\n        \n        // Показываем сообщение об ошибке, если игра ещё не запущена\n        if (this.currentScene === 'loading') {\n            this.showErrorScreen(`Ошибка асинхронной операции: ${errorMessage}`);\n        }\n        \n        // Предотвращаем дополнительную обработку ошибки\n        event.preventDefault();\n    }\n    \n    /**\n     * Показать экран ошибки\n     * @param {string} message - сообщение об ошибке\n     */\n    showErrorScreen(message) {\n        // Создаем экран ошибки, если он ещё не существует\n        let errorScreen = document.getElementById('error-screen');\n        if (!errorScreen) {\n            errorScreen = document.createElement('div');\n            errorScreen.id = 'error-screen';\n            errorScreen.className = 'error-overlay';\n            errorScreen.innerHTML = `\n                <div class=\"error-container\">\n                    <h2>Произошла ошибка</h2>\n                    <p id=\"error-message\">${message}</p>\n                    <button id=\"reload-button\">Перезагрузить</button>\n                </div>\n            `;\n            document.body.appendChild(errorScreen);\n            \n            // Добавляем обработчик для кнопки перезагрузки\n            const reloadButton = document.getElementById('reload-button');\n            if (reloadButton) {\n                reloadButton.addEventListener('click', () => {\n                    window.location.reload();\n                });\n            }\n            \n            // Добавляем стили для экрана ошибки\n            const style = document.createElement('style');\n            style.textContent = `\n                .error-overlay {\n                    position: fixed;\n                    top: 0;\n                    left: 0;\n                    width: 100%;\n                    height: 100%;\n                    background-color: rgba(0, 0, 0, 0.85);\n                    z-index: 9999;\n                    display: flex;\n                    justify-content: center;\n                    align-items: center;\n                }\n                .error-container {\n                    background-color: #333;\n                    padding: 20px;\n                    border: 2px solid #f44336;\n                    max-width: 80%;\n                    text-align: center;\n                }\n                .error-container h2 {\n                    color: #f44336;\n                    margin-bottom: 15px;\n                }\n                .error-container p {\n                    color: #fff;\n                    margin-bottom: 20px;\n                    font-family: monospace;\n                    white-space: pre-wrap;\n                    text-align: left;\n                }\n                #reload-button {\n                    background-color: #4CAF50;\n                    color: white;\n                    border: none;\n                    padding: 10px 20px;\n                    cursor: pointer;\n                    font-size: 16px;\n                }\n                #reload-button:hover {\n                    background-color: #45a049;\n                }\n            `;\n            document.head.appendChild(style);\n        } else {\n            // Обновляем сообщение об ошибке\n            const errorMessage = document.getElementById('error-message');\n            if (errorMessage) {\n                errorMessage.textContent = message;\n            }\n        }\n        \n        // Скрываем экран загрузки\n        if (this.loadingScreen) {\n            this.loadingScreen.classList.add('hidden');\n        }\n    }\n    \n    /**\n     * Загрузка игровых ресурсов\n     */\n    async loadResources() {\n        this.updateLoadingStatus('Инициализация физического движка...');\n        \n        try {\n            // Инициализируем физику\n            const physicsInitialized = await this.physics.init();\n            if (!physicsInitialized) {\n                throw new Error('Не удалось инициализировать физику');\n            }\n            \n            this.updateLoadingStatus('Физический движок инициализирован');\n            \n            // Здесь будет загрузка дополнительных ресурсов\n            this.updateLoadingStatus('Загрузка игровых ресурсов...');\n            \n            // Имитация загрузки (в реальной игре здесь будет загрузка assets)\n            await new Promise((resolve) => {\n                setTimeout(() => {\n                    this.isLoading = false;\n                    resolve();\n                }, 1000);\n            });\n            \n            this.updateLoadingStatus('Все ресурсы загружены успешно');\n            return true;\n        } catch (error) {\n            log(`Ошибка загрузки ресурсов: ${error.message}`);\n            throw error;\n        }\n    }\n    \n    /**\n     * Настройка обработчиков событий\n     */\n    setupEventListeners() {\n        try {\n            // Обработчики для главного меню\n            const startGameButton = document.getElementById('start-game');\n            if (startGameButton) {\n                startGameButton.addEventListener('click', this.startGame);\n            }\n            \n            const settingsButton = document.getElementById('settings');\n            if (settingsButton) {\n                settingsButton.addEventListener('click', () => {\n                    log('Настройки');\n                    // В будущем здесь будет открытие меню настроек\n                });\n            }\n            \n            // Обработчик для закрытия инвентаря\n            const closeInventoryButton = document.getElementById('close-inventory');\n            if (closeInventoryButton) {\n                closeInventoryButton.addEventListener('click', () => {\n                    this.hideInventory();\n                });\n            }\n            \n            // Обработчики клавиш\n            if (this.input) {\n                this.input.addKeyCallback('KeyI', () => {\n                    if (this.currentScene === 'game') {\n                        this.toggleInventory();\n                    }\n                });\n                \n                // Обработчик ESC для паузы\n                this.input.addKeyCallback('Escape', () => {\n                    if (this.currentScene === 'game') {\n                        this.togglePause();\n                    }\n                });\n            }\n            \n            // Интеграция с VK (если доступно)\n            if (window.vkBridge) {\n                try {\n                    window.vkBridge.send('VKWebAppInit');\n                    log('VK Bridge инициализирован');\n                } catch (e) {\n                    log(`Ошибка инициализации VK Bridge: ${e.message}`);\n                }\n            }\n            \n            // Обработчик изменения размера окна\n            window.addEventListener('resize', () => {\n                if (this.renderer) {\n                    // Перерисовываем сцену при изменении размера окна\n                    this.renderer.render(this.player);\n                }\n            });\n            \n            log('Обработчики событий настроены');\n        } catch (error) {\n            log(`Ошибка настройки обработчиков событий: ${error.message}`);\n            throw error;\n        }\n    }\n    \n    /**\n     * Показать главное меню\n     */\n    showMainMenu() {\n        if (this.loadingScreen) {\n            this.loadingScreen.classList.add('hidden');\n        }\n        if (this.mainMenu) {\n            this.mainMenu.classList.remove('hidden');\n        }\n        this.currentScene = 'menu';\n        log('Главное меню отображено');\n    }\n    \n    /**\n     * Начать игру\n     */\n    startGame() {\n        try {\n            log('Запуск игры...');\n            \n            if (this.mainMenu) {\n                this.mainMenu.classList.add('hidden');\n            }\n            if (this.gameCanvas) {\n                this.gameCanvas.classList.remove('hidden');\n            }\n            if (this.hudElement) {\n                this.hudElement.classList.remove('hidden');\n            }\n            \n            this.isRunning = true;\n            this.currentScene = 'game';\n            \n            // Инициализация сцены\n            if (this.renderer) {\n                this.renderer.setupScene();\n                log('Сцена настроена');\n            }\n            \n            // Создание тестовых стен для демонстрации системы видимости\n            this.createTestWalls();\n            \n            // Создание игрока\n            this.player = new Player({\n                position: { x: 0, y: 0, z: 0 },\n                renderer: this.renderer,\n                input: this.input,\n                game: this\n            });\n            \n            log('Игрок создан');\n            \n            // Инициализация системы видимости\n            this.initVisionSystem();\n            \n            // Подключение к серверу (в прототипе локально)\n            this.network.connect().then(() => {\n                log('Подключено к серверу (прототип)');\n            }).catch(error => {\n                log(`Ошибка подключения: ${error.message}`);\n            });\n            \n            // Запуск игрового цикла\n            this.lastFrameTime = performance.now();\n            requestAnimationFrame(this.update);\n            \n            log('Игра запущена');\n        } catch (error) {\n            log(`Ошибка при запуске игры: ${error.message}`);\n            this.showErrorScreen(`Ошибка при запуске игры: ${error.message}`);\n        }\n    }\n    \n    /**\n     * Метод для инициализации системы видимости\n     */\n    initVisionSystem() {\n        try {\n            if (!this.renderer || !this.renderer.scene || !this.player) {\n                throw new Error('Не все компоненты доступны для инициализации системы видимости');\n            }\n            \n            log('Инициализация системы видимости...');\n            \n            // Создаем систему видимости\n            const visionSystem = new VisionSystem({\n                scene: this.renderer.scene,\n                world: this.physics.getWorld(),\n                player: this.player,\n                fov: 90, // Начальный угол обзора\n                rayCount: 60, // Количество лучей\n                maxDistance: 50, // Максимальная дистанция видимости\n                memoryEnabled: true, // Запоминать посещенные области\n                blurEdges: true // Размытие краев видимости\n            });\n            \n            // Сохраняем систему видимости в рендерере\n            this.renderer.visionSystem = visionSystem;\n            \n            log('Система видимости инициализирована');\n        } catch (error) {\n            log(`Ошибка инициализации системы видимости: ${error.message}`);\n            throw error;\n        }\n    }\n    \n    /**\n     * Метод для создания тестовых стен\n     */\n    createTestWalls() {\n        try {\n            if (!this.physics || !this.physics.isReady() || !this.renderer || !this.renderer.scene) {\n                log('Физика или рендерер не готовы для создания стен');\n                return;\n            }\n            \n            log('Создание тестовых стен...');\n            \n            // Создаем материал для стен\n            const wallMaterial = new THREE.MeshStandardMaterial({\n                color: 0x808080,\n                roughness: 0.7,\n                metalness: 0.2\n            });\n            \n            // Функция для создания стены\n            const createWall = (x, z, width, depth, height = 3) => {\n                // Создаем геометрию\n                const geometry = new THREE.BoxGeometry(width, height, depth);\n                const mesh = new THREE.Mesh(geometry, wallMaterial);\n                \n                // Устанавливаем позицию\n                mesh.position.set(x, height / 2, z);\n                \n                // Добавляем на сцену\n                this.renderer.scene.add(mesh);\n                \n                // Создаем физический коллайдер\n                this.physics.createObstacle({\n                    position: { x, y: height / 2, z },\n                    size: { x: width, y: height, z: depth },\n                    object: mesh\n                });\n                \n                return mesh;\n            };\n            \n            // Создаем стены лабиринта\n            // Горизонтальные стены (границы)\n            createWall(0, -20, 40, 1);\n            createWall(-20, 0, 1, 40);\n            createWall(20, 0, 1, 40);\n            createWall(0, 20, 40, 1);\n            \n            // Внутренние стены\n            createWall(-10, -10, 1, 20);\n            createWall(10, 10, 20, 1);\n            createWall(10, -5, 1, 10);\n            createWall(-5, 5, 10, 1);\n            \n            // Препятствия\n            createWall(-15, -15, 3, 3);\n            createWall(15, -15, 3, 3);\n            createWall(15, 15, 3, 3);\n            createWall(-15, 15, 3, 3);\n            \n            log('Тестовые стены созданы');\n        } catch (error) {\n            log(`Ошибка создания тестовых стен: ${error.message}`);\n        }\n    }\n    \n    /**\n     * Переключение состояния паузы\n     */\n    togglePause() {\n        if (this.isRunning) {\n            this.pauseGame();\n        } else {\n            this.resumeGame();\n        }\n    }\n    \n    /**\n     * Остановить игру (пауза)\n     */\n    pauseGame() {\n        this.isRunning = false;\n        \n        if (this.input) {\n            this.input.disableGameControls();\n        }\n        \n        // Здесь можно добавить отображение меню паузы\n        log('Игра на паузе');\n    }\n    \n    /**\n     * Возобновить игру\n     */\n    resumeGame() {\n        this.isRunning = true;\n        \n        if (this.input) {\n            this.input.enableGameControls();\n        }\n        \n        // Скрываем меню паузы\n        log('Игра возобновлена');\n        \n        // Перезапускаем игровой цикл\n        this.lastFrameTime = performance.now();\n        requestAnimationFrame(this.update);\n    }\n    \n    /**\n     * Обновление с фиксированным шагом для физики\n     * @param {number} deltaTime - фиксированный шаг времени \n     */\n    fixedUpdate(deltaTime) {\n        try {\n            // Обновляем физику на стороне сервера (в прототипе не используется)\n            if (this.network && this.network.isConnected) {\n                // Отправка состояния на сервер\n            }\n            \n            // Обновляем состояние сущностей (NPC и др.)\n            this.entities.forEach(entity => {\n                if (entity.fixedUpdate) {\n                    entity.fixedUpdate(deltaTime);\n                }\n            });\n        } catch (error) {\n            log(`Ошибка в fixedUpdate: ${error.message}`);\n        }\n    }\n    \n    /**\n     * Обновление состояния игры\n     * @param {number} timestamp - текущий таймстамп\n     */\n    update(timestamp) {\n        if (!this.isRunning) return;\n        \n        try {\n            // Расчет дельты времени для стабильной анимации\n            const currentTime = performance.now();\n            const deltaTime = (currentTime - this.lastFrameTime) / 1000;\n            this.lastFrameTime = currentTime;\n            \n            // Ограничиваем deltaTime для предотвращения больших скачков\n            const clampedDeltaTime = Math.min(deltaTime, 0.1);\n            \n            // Увеличиваем игровое время\n            this.gameTime += clampedDeltaTime;\n            \n            // Обновление физики с фиксированным шагом\n            this.physicsAccumulator += clampedDeltaTime;\n            while (this.physicsAccumulator >= this.physicsUpdateRate) {\n                // Обновляем физический мир\n                if (this.physics && this.physics.isReady()) {\n                    this.physics.update(this.physicsUpdateRate);\n                }\n                \n                this.fixedUpdate(this.physicsUpdateRate);\n                this.physicsAccumulator -= this.physicsUpdateRate;\n            }\n            \n            // Обновление игрока\n            if (this.player) {\n                this.player.update(clampedDeltaTime);\n            }\n            \n            // Обновление других сущностей\n            this.entities.forEach(entity => {\n                if (entity.update) {\n                    entity.update(clampedDeltaTime);\n                }\n            });\n            \n            // Рендеринг сцены с передачей игрока для системы видимости\n            if (this.renderer) {\n                this.renderer.render(this.player);\n            }\n            \n            // Обновление UI\n            this.updateUI();\n            \n            // Продолжение игрового цикла\n            requestAnimationFrame(this.update);\n        } catch (error) {\n            log(`Ошибка в игровом цикле: ${error.message}`);\n            \n            // Пытаемся продолжить игровой цикл, несмотря на ошибку\n            requestAnimationFrame(this.update);\n        }\n    }\n    \n    /**\n     * Обновление пользовательского интерфейса\n     */\n    updateUI() {\n        // Обновляем HUD\n        if (this.player && this.ui.hud) {\n            this.ui.hud.update({\n                health: this.player.health,\n                ammo: this.player.ammo,\n                weapon: this.player.weapon\n            });\n        }\n    }\n    \n    /**\n     * Переключение инвентаря\n     */\n    toggleInventory() {\n        if (this.inventoryScreen.classList.contains('hidden')) {\n            this.showInventory();\n        } else {\n            this.hideInventory();\n        }\n    }\n    \n    /**\n     * Показать инвентарь\n     */\n    showInventory() {\n        this.inventoryScreen.classList.remove('hidden');\n        \n        if (this.ui.inventory) {\n            this.ui.inventory.show();\n        }\n        \n        if (this.input) {\n            this.input.disableGameControls();\n        }\n    }\n    \n    /**\n     * Скрыть инвентарь\n     */\n    hideInventory() {\n        this.inventoryScreen.classList.add('hidden');\n        \n        if (this.ui.inventory) {\n            this.ui.inventory.hide();\n        }\n        \n        if (this.input) {\n            this.input.enableGameControls();\n        }\n    }\n    \n    /**\n     * Добавление сущности в игру\n     * @param {Object} entity - сущность для добавления\n     */\n    addEntity(entity) {\n        this.entities.push(entity);\n    }\n    \n    /**\n     * Удаление сущности из игры\n     * @param {Object} entity - сущность для удаления\n     */\n    removeEntity(entity) {\n        const index = this.entities.indexOf(entity);\n        if (index !== -1) {\n            this.entities.splice(index, 1);\n        }\n    }\n    \n    /**\n     * Завершение игры\n     */\n    endGame() {\n        this.isRunning = false;\n        this.currentScene = 'menu';\n        \n        // Очистка ресурсов\n        this.entities = [];\n        \n        // Удаляем систему видимости\n        if (this.renderer && this.renderer.visionSystem) {\n            this.renderer.visionSystem.dispose();\n            this.renderer.visionSystem = null;\n        }\n        \n        // Очищаем физику\n        if (this.physics) {\n            this.physics.dispose();\n        }\n        \n        if (this.player) {\n            this.player = null;\n        }\n        \n        // Отображение главного меню\n        if (this.gameCanvas) {\n            this.gameCanvas.classList.add('hidden');\n        }\n        if (this.hudElement) {\n            this.hudElement.classList.add('hidden');\n        }\n        if (this.mainMenu) {\n            this.mainMenu.classList.remove('hidden');\n        }\n        \n        log('Игра завершена');\n    }\n}\n\n// Экспорт для доступа из других модулей\nexport { Game };\n\n// Инициализация игры при загрузке страницы\ndocument.addEventListener('DOMContentLoaded', () => {\n    try {\n        log('DOMContentLoaded: инициализация игры');\n        // Создаем игровой объект\n        window.game = new Game();\n    } catch (error) {\n        console.error('Критическая ошибка при инициализации игры:', error);\n        \n        // Показываем сообщение об ошибке\n        const errorMessage = document.createElement('div');\n        errorMessage.style.cssText = `\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            padding: 20px;\n            background-color: #f44336;\n            color: white;\n            text-align: center;\n            font-size: 18px;\n            z-index: 9999;\n        `;\n        errorMessage.textContent = `Критическая ошибка: ${error.message}`;\n        document.body.appendChild(errorMessage);\n    }\n});"],"names":["Renderer","canvas","_classCallCheck","this","scene","camera","renderer","lights","models","textures","visionSystem","temporaryObjects","key","value","_this","THREE","Scene","background","Color","aspect","window","innerWidth","innerHeight","PerspectiveCamera","position","set","lookAt","WebGLRenderer","antialias","setSize","setPixelRatio","devicePixelRatio","shadowMap","enabled","setupLights","createGround","addEventListener","updateProjectionMatrix","directionalLight","DirectionalLight","castShadow","shadow","mapSize","width","height","near","far","left","right","top","bottom","add","push","ambientLight","AmbientLight","groundGeometry","PlaneGeometry","groundMaterial","MeshStandardMaterial","color","roughness","metalness","ground","Mesh","rotation","x","Math","PI","y","receiveShadow","start","end","_this2","arguments","length","undefined","duration","material","LineBasicMaterial","transparent","opacity","geometry","BufferGeometry","points","Vector3","z","setFromPoints","line","Line","tempObject","object","endTime","Date","now","setTimeout","removeTemporaryObject","remove","index","indexOf","splice","dispose","_this3","filter","tempObj","playerData","CylinderGeometry","playerMesh","copy","weaponGeometry","BoxGeometry","weaponMaterial","weapon","playerPosition","player","update","cleanTemporaryObjects","render","quality","type","PCFShadowMap","PCFSoftShadowMap","itemData","SphereGeometry","itemMesh","npcData","npcMesh","InputHandler","keys","mouse","isDown","rightIsDown","lastMousePosition","keyCallbacks","clickCallback","rightClickCallback","mouseMoveCallback","mouseDownCallback","mouseUpCallback","gameControlsEnabled","mouseSensitivity","handleKeyDown","bind","handleKeyUp","handleMouseMove","handleMouseDown","handleMouseUp","handleContextMenu","init","document","body","style","userSelect","event","code","clientX","clientY","deltaX","deltaY","button","preventDefault","_objectSpread","sensitivity","callback","dirX","dirZ","isKeyPressed","removeEventListener","NetworkManager","socket","connected","serverUrl","mockMode","eventHandlers","connect","disconnect","error","message","playerMove","playerShoot","playerDamage","itemPickup","npcSpawn","npcMove","gameState","mockData","players","npcs","items","playerId","Promise","resolve","console","log","generateMockData","forEach","handler","startMockNpcMovement","i","id","concat","random","types","floor","properties","health","state","setInterval","Object","npc","moveX","moveZ","max","min","direction","itemId","itemType","Player","options","isLocalPlayer","maxHealth","speed","ammo","weaponType","fireRate","recoil","inventory","maxSlots","isMoving","isRunning","isAiming","isShooting","canShoot","lastShootTime","currentState","viewAngle","normalViewAngle","aimingViewAngle","runningViewAngle","viewDistance","normalSpeed","runningSpeed","aimingSpeed","acceleration","velocity","input","game","mesh","setupControls","createModel","addPlayer","setMouseDownCallback","startAiming","setMouseUpCallback","stopAiming","setRightClickCallback","tryShoot","setMouseMoveCallback","delta","currentTime","applyRecoil","createShot","network","sendPlayerShoot","recoilX","recoilY","abs","mousePos","getMousePosition","newMousePos","canvasRect","getBoundingClientRect","canvasCenter","mouseVec","sqrt","angle","atan2","sin","cos","deltaTime","handleMovement","updateCamera","handleRunning","updateAnimationState","updateModel","wasRunning","newState","moveDir","getMovementDirection","normalizedDir","targetVel","newX","newZ","canMoveX","checkCollision","canMoveZ","sendPlayerMove","newPosition","rayStart","rayEnd","createTemporaryBeam","updateObjectTransform","HUD","element","healthBar","querySelector","ammoCounter","weaponInfo","statusMessages","messages","messageTimer","initialize","updateHealthBar","updateAmmoCounter","updateWeaponInfo","data","backgroundColor","textContent","text","timestamp","updateStatusMessages","checkMessagesTimeout","innerHTML","msg","messageElement","createElement","className","appendChild","hasRemovedMessages","isExpired","clearInterval","classList","InventoryUI","gridElement","equippedElement","equipped","armor","helmet","createInventorySlots","createEquippedSlots","setupDragAndDrop","slot","dataset","slotIndex","label","slotInfo","slotContainer","slotType","querySelectorAll","updateInventoryDisplay","updateEquippedDisplay","slots","item","itemElement","weaponSlot","weaponElement","armorSlot","armorElement","helmetSlot","helmetElement","head","addInventoryStyles","_regeneratorRuntime","e","t","r","prototype","n","hasOwnProperty","o","defineProperty","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","call","h","l","f","s","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","_invoke","AsyncIterator","invoke","_typeof","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","_defineProperties","_toPropertyKey","_createClass","toPrimitive","String","_toPrimitive","asyncGeneratorStep","initRapier","_initRapier","apply","_callee","waitForRapier","_context","RAPIER","t0","warn","reject","attempts","checkRapier","t1","World","StubWorld","bodies","colliders","translation","setTranslation","hasHit","toi","RigidBodyDesc","fixed","dynamic","setCanSleep","setLinearDamping","ColliderDesc","cuboid","capsule","Ray","StubRay","origin","dir","_next","_throw","_asyncToGenerator","PhysicsManager","world","Map","isInitialized","initPromise","_init","_callee2","_context2","_ref","_this$RAPIER$World","gravity","_x","isReady","step","timestep","updateBodies","_step","_iterator","_createForOfIteratorHelper","_step$value","_slicedToArray","getTranslation","updatePhysics","err","rigidBodyDesc","size","RigidBodyType","Fixed","colliderDesc","rigidBody","createRigidBody","Cuboid","collider","createCollider","radius","Dynamic","canSleep","linearDamping","Capsule","maxDistance","ray","castRay","castRayAndGetNormal","normal","offset","halfspace","HalfSpace","has","get","removeRigidBody","clear","free","VisionSystem","fov","rayCount","memoryEnabled","blurEdges","visibilityMask","visibilityGroup","memoryMask","visibilityShape","memoryGrid","cellSize","gridResolution","ceil","initVisibilityMask","initMemoryMap","Group","maskGeometry","worldSize","maskMaterial","MeshBasicMaterial","side","DoubleSide","depthTest","depthWrite","renderOrder","Shape","Array","fill","memoryMaskGeometry","memoryMaskMaterial","vertexColors","colors","positions","attributes","array","setAttribute","Float32BufferAttribute","playerPos","getViewDirection","getViewAngle","directionAngle","halfFov","angles","Vector2","endPoint","raycastResult","hit","safeDistance","hitDistance","markVisitedArea","clone","updateVisibilityShape","updateMemoryMap","shape","moveTo","lineTo","outerShape","holes","ShapeGeometry","gridX","gridZ","dx","dz","nx","nz","colorsArray","Float32Array","BufferAttribute","j","visited","needsUpdate","debugLog","Game","isLoading","currentScene","loadingScreen","getElementById","mainMenu","gameCanvas","hudElement","inventoryScreen","loadingStatus","updateLoadingStatus","handleGlobalError","handlePromiseError","entities","gameTime","physicsUpdateRate","physicsAccumulator","fogOfWarEnabled","visibilitySystemEnabled","fixedUpdate","startGame","initModules","loadResources","showMainMenu","showErrorScreen","_initModules","physics","ui","hud","setupEventListeners","lastFrameTime","status","filename","lineno","_event$reason","errorMessage","reason","errorScreen","reloadButton","location","reload","_loadResources","startGameButton","settingsButton","closeInventoryButton","hideInventory","addKeyCallback","toggleInventory","togglePause","vkBridge","send","setupScene","createTestWalls","initVisionSystem","performance","requestAnimationFrame","getWorld","_this4","wallMaterial","createWall","depth","createObstacle","pauseGame","resumeGame","disableGameControls","enableGameControls","isConnected","entity","clampedDeltaTime","updateUI","contains","showInventory","show","hide","cssText"],"sourceRoot":""}