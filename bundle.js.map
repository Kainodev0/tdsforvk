{"version":3,"file":"bundle.js","mappings":";qrBAGO,IAAMA,EAAG,WA0BZ,SAtBA,SAAAA,EAAYC,gGAASC,CAAA,KAAAF,GACjBG,KAAKF,QAAUA,EAGfE,KAAKC,UAAYH,EAAQI,cAAc,6BACvCF,KAAKG,YAAcL,EAAQI,cAAc,iBACzCF,KAAKI,WAAaN,EAAQI,cAAc,gBACxCF,KAAKK,eAAiBP,EAAQI,cAAc,oBAG5CF,KAAKM,OAAS,IACdN,KAAKO,KAAO,EACZP,KAAKQ,OAAS,MACdR,KAAKS,SAAW,GAGhBT,KAAKU,aAAe,KAGpBV,KAAKW,YACT,IAEA,EAAAC,IAAA,aAAAC,MAGA,WAEQb,KAAKC,WAAWD,KAAKc,kBACrBd,KAAKG,aAAaH,KAAKe,oBACvBf,KAAKI,YAAYJ,KAAKgB,kBAC9B,GAEA,CAAAJ,IAAA,SAAAC,MAIA,SAAOI,QAEiBC,IAAhBD,EAAKX,QAAwBW,EAAKX,SAAWN,KAAKM,SAClDN,KAAKM,OAASW,EAAKX,OACnBN,KAAKc,wBAGSI,IAAdD,EAAKV,MAAsBU,EAAKV,OAASP,KAAKO,OAC9CP,KAAKO,KAAOU,EAAKV,KACjBP,KAAKe,0BAGWG,IAAhBD,EAAKT,QAAwBS,EAAKT,SAAWR,KAAKQ,SAClDR,KAAKQ,OAASS,EAAKT,OACnBR,KAAKgB,mBAEb,GAEA,CAAAJ,IAAA,kBAAAC,MAGA,WAESb,KAAKC,YAEVD,KAAKC,UAAUkB,MAAMC,MAAQ,GAAHC,OAAMrB,KAAKM,OAAM,KAGvCN,KAAKM,OAAS,GACdN,KAAKC,UAAUkB,MAAMG,gBAAkB,UAChCtB,KAAKM,OAAS,GACrBN,KAAKC,UAAUkB,MAAMG,gBAAkB,UAEvCtB,KAAKC,UAAUkB,MAAMG,gBAAkB,UAE/C,GAEA,CAAAV,IAAA,oBAAAC,MAGA,WACSb,KAAKG,cACVH,KAAKG,YAAYoB,YAAc,GAAHF,OAAMrB,KAAKO,MAC3C,GAEA,CAAAK,IAAA,mBAAAC,MAGA,WACSb,KAAKI,aACVJ,KAAKI,WAAWmB,YAAcvB,KAAKQ,OACvC,GAEA,CAAAI,IAAA,mBAAAC,MAKA,SAAiBW,GAA0B,IAAAC,EAAA,KAAjBC,EAAQC,UAAAC,OAAA,QAAAV,IAAAS,UAAA,GAAAA,UAAA,GAAG,IAEjC3B,KAAKS,SAASoB,KAAK,CACfC,KAAMN,EACNO,UAAWC,KAAKC,MAChBP,SAAAA,IAIJ1B,KAAKkC,uBAGqB,OAAtBlC,KAAKU,eACLV,KAAKU,aAAeyB,aAAY,WAC5BV,EAAKW,sBACT,GAAG,KAEX,GAEA,CAAAxB,IAAA,uBAAAC,MAGA,WAAuB,IAAAwB,EAAA,KACdrC,KAAKK,iBAGVL,KAAKK,eAAeiC,UAAY,GAGhCtC,KAAKS,SAAS8B,SAAQ,SAAAC,GAClB,IAAMC,EAAiBC,SAASC,cAAc,OAC9CF,EAAeG,UAAY,iBAC3BH,EAAelB,YAAciB,EAAIV,KAEjCO,EAAKhC,eAAewC,YAAYJ,EACpC,IACJ,GAEA,CAAA7B,IAAA,uBAAAC,MAGA,WACI,IAAMoB,EAAMD,KAAKC,MACba,GAAqB,EAGzB9C,KAAKS,SAAWT,KAAKS,SAASsC,QAAO,SAAAP,GACjC,IAAMQ,EAAYf,EAAMO,EAAIT,UAAYS,EAAId,SAI5C,OAHIsB,IACAF,GAAqB,IAEjBE,CACZ,IAGIF,GACA9C,KAAKkC,uBAIoB,IAAzBlC,KAAKS,SAASmB,SACdqB,cAAcjD,KAAKU,cACnBV,KAAKU,aAAe,KAE5B,GAEA,CAAAE,IAAA,OAAAC,MAGA,WACIb,KAAKF,QAAQoD,UAAUC,OAAO,SAClC,GAEA,CAAAvC,IAAA,OAAAC,MAGA,WACIb,KAAKF,QAAQoD,UAAUE,IAAI,SAC/B,oFAAC,CAhLW,qqBCAT,IAAMC,EAAW,WA4BpB,SAxBA,SAAAA,EAAYvD,gGAASC,CAAA,KAAAsD,GACjBrD,KAAKF,QAAUA,EAGfE,KAAKsD,YAAcxD,EAAQI,cAAc,mBACzCF,KAAKuD,gBAAkBzD,EAAQI,cAAc,mBAG7CF,KAAKwD,UAAY,CACbC,MAAO,GACPC,SAAU,IAId1D,KAAK2D,SAAW,CACZnD,OAAQ,KACRoD,MAAO,KACPC,OAAQ,MAIZ7D,KAAKW,YACT,KAEA,EAAAC,IAAA,aAAAC,MAGA,WAEIb,KAAK8D,uBAGL9D,KAAK+D,sBAGL/D,KAAKgE,kBACT,GAEA,CAAApD,IAAA,uBAAAC,MAGA,WACI,GAAKb,KAAKsD,YAAV,CAGAtD,KAAKsD,YAAYhB,UAAY,GAG7B,IAAK,IAAI2B,EAAI,EAAGA,EAAIjE,KAAKwD,UAAUE,SAAUO,IAAK,CAC9C,IAAMC,EAAOxB,SAASC,cAAc,OACpCuB,EAAKtB,UAAY,iBACjBsB,EAAKC,QAAQC,UAAYH,EAEzBjE,KAAKsD,YAAYT,YAAYqB,EACjC,CAZ6B,CAajC,GAEA,CAAAtD,IAAA,sBAAAC,MAGA,WAAsB,IAAAY,EAAA,KACbzB,KAAKuD,kBAGVvD,KAAKuD,gBAAgBjB,UAAY,GAGnB,CACV,CAAE+B,GAAI,SAAUC,MAAO,UACvB,CAAED,GAAI,QAASC,MAAO,SACtB,CAAED,GAAI,SAAUC,MAAO,SAGrB/B,SAAQ,SAAAgC,GACV,IAAMC,EAAgB9B,SAASC,cAAc,OAC7C6B,EAAc5B,UAAY,0BAE1B,IAAM0B,EAAQ5B,SAASC,cAAc,OACrC2B,EAAM1B,UAAY,sBAClB0B,EAAM/C,YAAcgD,EAASD,MAE7B,IAAMJ,EAAOxB,SAASC,cAAc,OACpCuB,EAAKtB,UAAY,gBACjBsB,EAAKC,QAAQM,SAAWF,EAASF,GAEjCG,EAAc3B,YAAYyB,GAC1BE,EAAc3B,YAAYqB,GAE1BzC,EAAK8B,gBAAgBV,YAAY2B,EACrC,IACJ,GAEA,CAAA5D,IAAA,mBAAAC,MAGA,WAK2Bb,KAAKF,QAAQ4E,iBAAiB,mBAGtCnC,SAAQ,SAAA2B,GACnBA,EAAKS,iBAAiB,SAAS,WAE3BC,QAAQC,IAAI,2BAA4BX,EAAKC,QAAQC,UACzD,GACJ,IAGsBpE,KAAKF,QAAQ4E,iBAAiB,kBAGtCnC,SAAQ,SAAA2B,GAClBA,EAAKS,iBAAiB,SAAS,WAE3BC,QAAQC,IAAI,4BAA6BX,EAAKC,QAAQM,SAC1D,GACJ,GACJ,GAEA,CAAA7D,IAAA,SAAAC,MAIA,SAAO2C,GACEA,IAGLxD,KAAKwD,UAAYA,EAGjBxD,KAAK8E,yBACT,GAEA,CAAAlE,IAAA,iBAAAC,MAIA,SAAe8C,GACNA,IAGL3D,KAAK2D,SAAWA,EAGhB3D,KAAK+E,wBACT,GAEA,CAAAnE,IAAA,yBAAAC,MAGA,WAEI,IAAMmE,EAAQhF,KAAKF,QAAQ4E,iBAAiB,mBAG5CM,EAAMzC,SAAQ,SAAA2B,GACVA,EAAK5B,UAAY,GACjB4B,EAAKhB,UAAUC,OAAO,SAC1B,IAGAnD,KAAKwD,UAAUC,MAAMlB,SAAQ,SAAC0C,EAAMC,GAChC,KAAIA,GAASF,EAAMpD,QAAnB,CAEA,IAAMsC,EAAOc,EAAME,GAGbC,EAAczC,SAASC,cAAc,OAK3C,OAJAwC,EAAYvC,UAAY,iBACxBuC,EAAYhB,QAAQiB,OAASH,EAAKZ,GAG1BY,EAAKI,MACT,IAAK,SACDF,EAAYjC,UAAUE,IAAI,eAC1B+B,EAAY5D,YAAc,IAC1B,MACJ,IAAK,SACD4D,EAAYjC,UAAUE,IAAI,eAC1B+B,EAAY5D,YAAc,IAC1B,MACJ,IAAK,OACD4D,EAAYjC,UAAUE,IAAI,aAC1B+B,EAAY5D,YAAc,IAC1B,MACJ,QACI4D,EAAY5D,YAAc,IAIlC2C,EAAKrB,YAAYsC,GACjBjB,EAAKhB,UAAUE,IAAI,SA7Bc,CA8BrC,GACJ,GAEA,CAAAxC,IAAA,wBAAAC,MAGA,WAEI,IAAMyE,EAAatF,KAAKF,QAAQI,cAAc,2CAC9C,GAAIoF,IACAA,EAAWhD,UAAY,GAEnBtC,KAAK2D,SAASnD,QAAQ,CACtB,IAAM+E,EAAgB7C,SAASC,cAAc,OAC7C4C,EAAc3C,UAAY,4BAC1B2C,EAAchE,YAAc,IAE5B+D,EAAWzC,YAAY0C,EAC3B,CAIJ,IAAMC,EAAYxF,KAAKF,QAAQI,cAAc,0CAC7C,GAAIsF,IACAA,EAAUlD,UAAY,GAElBtC,KAAK2D,SAASC,OAAO,CACrB,IAAM6B,EAAe/C,SAASC,cAAc,OAC5C8C,EAAa7C,UAAY,2BACzB6C,EAAalE,YAAc,IAE3BiE,EAAU3C,YAAY4C,EAC1B,CAIJ,IAAMC,EAAa1F,KAAKF,QAAQI,cAAc,2CAC9C,GAAIwF,IACAA,EAAWpD,UAAY,GAEnBtC,KAAK2D,SAASE,QAAQ,CACtB,IAAM8B,EAAgBjD,SAASC,cAAc,OAC7CgD,EAAc/C,UAAY,4BAC1B+C,EAAcpE,YAAc,IAE5BmE,EAAW7C,YAAY8C,EAC3B,CAER,GAEA,CAAA/E,IAAA,qBAAAC,MAGA,WAEI,IAAMM,EAAQuB,SAASC,cAAc,SACrCxB,EAAMI,YAAc,ogDAyDpBmB,SAASkD,KAAK/C,YAAY1B,EAC9B,GAEA,CAAAP,IAAA,OAAAC,MAGA,WAES6B,SAASxC,cAAc,iCACxBF,KAAK6F,qBAGT7F,KAAKF,QAAQoD,UAAUC,OAAO,SAClC,GAEA,CAAAvC,IAAA,OAAAC,MAGA,WACIb,KAAKF,QAAQoD,UAAUE,IAAI,SAC/B,mFAAC,CA5UmB,sPCFxB0C,EAAA,kBAAAC,CAAA,MAAAC,EAAAD,EAAA,GAAAE,EAAAC,OAAAC,UAAAC,EAAAH,EAAAI,eAAAC,EAAAJ,OAAAK,gBAAA,SAAAP,EAAAD,EAAAE,GAAAD,EAAAD,GAAAE,EAAApF,KAAA,EAAAoD,EAAA,mBAAAuC,OAAAA,OAAA,GAAAC,EAAAxC,EAAAyC,UAAA,aAAAC,EAAA1C,EAAA2C,eAAA,kBAAAC,EAAA5C,EAAA6C,aAAA,yBAAAC,EAAAf,EAAAD,EAAAE,GAAA,OAAAC,OAAAK,eAAAP,EAAAD,EAAA,CAAAlF,MAAAoF,EAAAe,YAAA,EAAAC,cAAA,EAAAC,UAAA,IAAAlB,EAAAD,EAAA,KAAAgB,EAAA,aAAAf,GAAAe,EAAA,SAAAf,EAAAD,EAAAE,GAAA,OAAAD,EAAAD,GAAAE,CAAA,WAAAkB,EAAAnB,EAAAD,EAAAE,EAAAG,GAAA,IAAAnC,EAAA8B,GAAAA,EAAAI,qBAAAiB,EAAArB,EAAAqB,EAAAX,EAAAP,OAAAmB,OAAApD,EAAAkC,WAAAQ,EAAA,IAAAW,EAAAlB,GAAA,WAAAE,EAAAG,EAAA,WAAA5F,MAAA0G,EAAAvB,EAAAC,EAAAU,KAAAF,CAAA,UAAAe,EAAAxB,EAAAD,EAAAE,GAAA,WAAAZ,KAAA,SAAAoC,IAAAzB,EAAA0B,KAAA3B,EAAAE,GAAA,OAAAD,GAAA,OAAAX,KAAA,QAAAoC,IAAAzB,EAAA,EAAAD,EAAAoB,KAAAA,EAAA,IAAAQ,EAAA,iBAAAC,EAAA,iBAAAC,EAAA,YAAAC,EAAA,YAAAC,EAAA,YAAAX,IAAA,UAAAY,IAAA,UAAAC,IAAA,KAAAC,EAAA,GAAAnB,EAAAmB,EAAAzB,GAAA,8BAAA0B,EAAAjC,OAAAkC,eAAAC,EAAAF,GAAAA,EAAAA,EAAAG,EAAA,MAAAD,GAAAA,IAAApC,GAAAG,EAAAsB,KAAAW,EAAA5B,KAAAyB,EAAAG,GAAA,IAAAE,EAAAN,EAAA9B,UAAAiB,EAAAjB,UAAAD,OAAAmB,OAAAa,GAAA,SAAAM,EAAAxC,GAAA,0BAAAzD,SAAA,SAAAwD,GAAAgB,EAAAf,EAAAD,GAAA,SAAAC,GAAA,YAAAyC,QAAA1C,EAAAC,EAAA,gBAAA0C,EAAA1C,EAAAD,GAAA,SAAA4C,EAAA1C,EAAAK,EAAArC,EAAAwC,GAAA,IAAAE,EAAAa,EAAAxB,EAAAC,GAAAD,EAAAM,GAAA,aAAAK,EAAAtB,KAAA,KAAAwB,EAAAF,EAAAc,IAAAE,EAAAd,EAAAhG,MAAA,OAAA8G,GAAA,UAAAiB,EAAAjB,IAAAvB,EAAAsB,KAAAC,EAAA,WAAA5B,EAAA8C,QAAAlB,EAAAmB,SAAAC,MAAA,SAAA/C,GAAA2C,EAAA,OAAA3C,EAAA/B,EAAAwC,EAAA,aAAAT,GAAA2C,EAAA,QAAA3C,EAAA/B,EAAAwC,EAAA,IAAAV,EAAA8C,QAAAlB,GAAAoB,MAAA,SAAA/C,GAAAa,EAAAhG,MAAAmF,EAAA/B,EAAA4C,EAAA,aAAAb,GAAA,OAAA2C,EAAA,QAAA3C,EAAA/B,EAAAwC,EAAA,IAAAA,EAAAE,EAAAc,IAAA,KAAAxB,EAAAK,EAAA,gBAAAzF,MAAA,SAAAmF,EAAAI,GAAA,SAAA4C,IAAA,WAAAjD,GAAA,SAAAA,EAAAE,GAAA0C,EAAA3C,EAAAI,EAAAL,EAAAE,EAAA,WAAAA,EAAAA,EAAAA,EAAA8C,KAAAC,EAAAA,GAAAA,GAAA,aAAAzB,EAAAxB,EAAAE,EAAAG,GAAA,IAAAE,EAAAqB,EAAA,gBAAA1D,EAAAwC,GAAA,GAAAH,IAAAuB,EAAA,MAAAoB,MAAA,mCAAA3C,IAAAwB,EAAA,cAAA7D,EAAA,MAAAwC,EAAA,OAAA5F,MAAAmF,EAAAkD,MAAA,OAAA9C,EAAA+C,OAAAlF,EAAAmC,EAAAqB,IAAAhB,IAAA,KAAAE,EAAAP,EAAAgD,SAAA,GAAAzC,EAAA,KAAAE,EAAAwC,EAAA1C,EAAAP,GAAA,GAAAS,EAAA,IAAAA,IAAAkB,EAAA,gBAAAlB,CAAA,cAAAT,EAAA+C,OAAA/C,EAAAkD,KAAAlD,EAAAmD,MAAAnD,EAAAqB,SAAA,aAAArB,EAAA+C,OAAA,IAAA7C,IAAAqB,EAAA,MAAArB,EAAAwB,EAAA1B,EAAAqB,IAAArB,EAAAoD,kBAAApD,EAAAqB,IAAA,gBAAArB,EAAA+C,QAAA/C,EAAAqD,OAAA,SAAArD,EAAAqB,KAAAnB,EAAAuB,EAAA,IAAAK,EAAAV,EAAAzB,EAAAE,EAAAG,GAAA,cAAA8B,EAAA7C,KAAA,IAAAiB,EAAAF,EAAA8C,KAAApB,EAAAF,EAAAM,EAAAT,MAAAM,EAAA,gBAAAlH,MAAAqH,EAAAT,IAAAyB,KAAA9C,EAAA8C,KAAA,WAAAhB,EAAA7C,OAAAiB,EAAAwB,EAAA1B,EAAA+C,OAAA,QAAA/C,EAAAqB,IAAAS,EAAAT,IAAA,YAAA4B,EAAAtD,EAAAE,GAAA,IAAAG,EAAAH,EAAAkD,OAAA7C,EAAAP,EAAAW,SAAAN,GAAA,GAAAE,IAAAN,EAAA,OAAAC,EAAAmD,SAAA,eAAAhD,GAAAL,EAAAW,SAAA,SAAAT,EAAAkD,OAAA,SAAAlD,EAAAwB,IAAAzB,EAAAqD,EAAAtD,EAAAE,GAAA,UAAAA,EAAAkD,SAAA,WAAA/C,IAAAH,EAAAkD,OAAA,QAAAlD,EAAAwB,IAAA,IAAAiC,UAAA,oCAAAtD,EAAA,aAAA2B,EAAA,IAAA9D,EAAAuD,EAAAlB,EAAAP,EAAAW,SAAAT,EAAAwB,KAAA,aAAAxD,EAAAoB,KAAA,OAAAY,EAAAkD,OAAA,QAAAlD,EAAAwB,IAAAxD,EAAAwD,IAAAxB,EAAAmD,SAAA,KAAArB,EAAA,IAAAtB,EAAAxC,EAAAwD,IAAA,OAAAhB,EAAAA,EAAAyC,MAAAjD,EAAAF,EAAA4D,YAAAlD,EAAA5F,MAAAoF,EAAA2D,KAAA7D,EAAA8D,QAAA,WAAA5D,EAAAkD,SAAAlD,EAAAkD,OAAA,OAAAlD,EAAAwB,IAAAzB,GAAAC,EAAAmD,SAAA,KAAArB,GAAAtB,GAAAR,EAAAkD,OAAA,QAAAlD,EAAAwB,IAAA,IAAAiC,UAAA,oCAAAzD,EAAAmD,SAAA,KAAArB,EAAA,UAAA+B,EAAA9D,GAAA,IAAAD,EAAA,CAAAgE,OAAA/D,EAAA,SAAAA,IAAAD,EAAAiE,SAAAhE,EAAA,SAAAA,IAAAD,EAAAkE,WAAAjE,EAAA,GAAAD,EAAAmE,SAAAlE,EAAA,SAAAmE,WAAAtI,KAAAkE,EAAA,UAAAqE,EAAApE,GAAA,IAAAD,EAAAC,EAAAqE,YAAA,GAAAtE,EAAAV,KAAA,gBAAAU,EAAA0B,IAAAzB,EAAAqE,WAAAtE,CAAA,UAAAuB,EAAAtB,GAAA,KAAAmE,WAAA,EAAAJ,OAAA,SAAA/D,EAAAzD,QAAAuH,EAAA,WAAAQ,OAAA,YAAAhC,EAAAvC,GAAA,GAAAA,GAAA,KAAAA,EAAA,KAAAE,EAAAF,EAAAU,GAAA,GAAAR,EAAA,OAAAA,EAAAyB,KAAA3B,GAAA,sBAAAA,EAAA6D,KAAA,OAAA7D,EAAA,IAAAwE,MAAAxE,EAAAnE,QAAA,KAAA0E,GAAA,EAAArC,EAAA,SAAA2F,IAAA,OAAAtD,EAAAP,EAAAnE,QAAA,GAAAwE,EAAAsB,KAAA3B,EAAAO,GAAA,OAAAsD,EAAA/I,MAAAkF,EAAAO,GAAAsD,EAAAV,MAAA,EAAAU,EAAA,OAAAA,EAAA/I,MAAAmF,EAAA4D,EAAAV,MAAA,EAAAU,CAAA,SAAA3F,EAAA2F,KAAA3F,CAAA,YAAAyF,UAAAd,EAAA7C,GAAA,2BAAAiC,EAAA7B,UAAA8B,EAAA3B,EAAAiC,EAAA,eAAA1H,MAAAoH,EAAAhB,cAAA,IAAAX,EAAA2B,EAAA,eAAApH,MAAAmH,EAAAf,cAAA,IAAAe,EAAAwC,YAAAzD,EAAAkB,EAAApB,EAAA,qBAAAd,EAAA0E,oBAAA,SAAAzE,GAAA,IAAAD,EAAA,mBAAAC,GAAAA,EAAA0E,YAAA,QAAA3E,IAAAA,IAAAiC,GAAA,uBAAAjC,EAAAyE,aAAAzE,EAAA4E,MAAA,EAAA5E,EAAA6E,KAAA,SAAA5E,GAAA,OAAAE,OAAA2E,eAAA3E,OAAA2E,eAAA7E,EAAAiC,IAAAjC,EAAA8E,UAAA7C,EAAAlB,EAAAf,EAAAa,EAAA,sBAAAb,EAAAG,UAAAD,OAAAmB,OAAAkB,GAAAvC,CAAA,EAAAD,EAAAgF,MAAA,SAAA/E,GAAA,OAAA8C,QAAA9C,EAAA,EAAAwC,EAAAE,EAAAvC,WAAAY,EAAA2B,EAAAvC,UAAAQ,GAAA,0BAAAZ,EAAA2C,cAAAA,EAAA3C,EAAAiF,MAAA,SAAAhF,EAAAC,EAAAG,EAAAE,EAAArC,QAAA,IAAAA,IAAAA,EAAAgH,SAAA,IAAAxE,EAAA,IAAAiC,EAAAvB,EAAAnB,EAAAC,EAAAG,EAAAE,GAAArC,GAAA,OAAA8B,EAAA0E,oBAAAxE,GAAAQ,EAAAA,EAAAmD,OAAAb,MAAA,SAAA/C,GAAA,OAAAA,EAAAkD,KAAAlD,EAAAnF,MAAA4F,EAAAmD,MAAA,KAAApB,EAAAD,GAAAxB,EAAAwB,EAAA1B,EAAA,aAAAE,EAAAwB,EAAA9B,GAAA,0BAAAM,EAAAwB,EAAA,qDAAAxC,EAAAmF,KAAA,SAAAlF,GAAA,IAAAD,EAAAG,OAAAF,GAAAC,EAAA,WAAAG,KAAAL,EAAAE,EAAApE,KAAAuE,GAAA,OAAAH,EAAAkF,UAAA,SAAAvB,IAAA,KAAA3D,EAAArE,QAAA,KAAAoE,EAAAC,EAAAmF,MAAA,GAAApF,KAAAD,EAAA,OAAA6D,EAAA/I,MAAAmF,EAAA4D,EAAAV,MAAA,EAAAU,CAAA,QAAAA,EAAAV,MAAA,EAAAU,CAAA,GAAA7D,EAAAuC,OAAAA,EAAAhB,EAAAnB,UAAA,CAAAuE,YAAApD,EAAAgD,MAAA,SAAAvE,GAAA,QAAAsF,KAAA,OAAAzB,KAAA,OAAAN,KAAA,KAAAC,MAAAvD,EAAA,KAAAkD,MAAA,OAAAE,SAAA,UAAAD,OAAA,YAAA1B,IAAAzB,EAAA,KAAAmE,WAAA5H,QAAA6H,IAAArE,EAAA,QAAAE,KAAA,WAAAA,EAAAqF,OAAA,IAAAlF,EAAAsB,KAAA,KAAAzB,KAAAsE,OAAAtE,EAAAsF,MAAA,WAAAtF,GAAAD,EAAA,EAAAwF,KAAA,gBAAAtC,MAAA,MAAAlD,EAAA,KAAAmE,WAAA,GAAAE,WAAA,aAAArE,EAAAX,KAAA,MAAAW,EAAAyB,IAAA,YAAAgE,IAAA,EAAAjC,kBAAA,SAAAzD,GAAA,QAAAmD,KAAA,MAAAnD,EAAA,IAAAE,EAAA,cAAAyF,EAAAtF,EAAAE,GAAA,OAAAG,EAAApB,KAAA,QAAAoB,EAAAgB,IAAA1B,EAAAE,EAAA2D,KAAAxD,EAAAE,IAAAL,EAAAkD,OAAA,OAAAlD,EAAAwB,IAAAzB,KAAAM,CAAA,SAAAA,EAAA,KAAA6D,WAAAvI,OAAA,EAAA0E,GAAA,IAAAA,EAAA,KAAArC,EAAA,KAAAkG,WAAA7D,GAAAG,EAAAxC,EAAAoG,WAAA,YAAApG,EAAA8F,OAAA,OAAA2B,EAAA,UAAAzH,EAAA8F,QAAA,KAAAsB,KAAA,KAAA1E,EAAAP,EAAAsB,KAAAzD,EAAA,YAAA4C,EAAAT,EAAAsB,KAAAzD,EAAA,iBAAA0C,GAAAE,EAAA,SAAAwE,KAAApH,EAAA+F,SAAA,OAAA0B,EAAAzH,EAAA+F,UAAA,WAAAqB,KAAApH,EAAAgG,WAAA,OAAAyB,EAAAzH,EAAAgG,WAAA,SAAAtD,GAAA,QAAA0E,KAAApH,EAAA+F,SAAA,OAAA0B,EAAAzH,EAAA+F,UAAA,YAAAnD,EAAA,MAAAoC,MAAA,kDAAAoC,KAAApH,EAAAgG,WAAA,OAAAyB,EAAAzH,EAAAgG,WAAA,KAAAR,OAAA,SAAAzD,EAAAD,GAAA,QAAAE,EAAA,KAAAkE,WAAAvI,OAAA,EAAAqE,GAAA,IAAAA,EAAA,KAAAK,EAAA,KAAA6D,WAAAlE,GAAA,GAAAK,EAAAyD,QAAA,KAAAsB,MAAAjF,EAAAsB,KAAApB,EAAA,oBAAA+E,KAAA/E,EAAA2D,WAAA,KAAAhG,EAAAqC,EAAA,OAAArC,IAAA,UAAA+B,GAAA,aAAAA,IAAA/B,EAAA8F,QAAAhE,GAAAA,GAAA9B,EAAAgG,aAAAhG,EAAA,UAAAwC,EAAAxC,EAAAA,EAAAoG,WAAA,UAAA5D,EAAApB,KAAAW,EAAAS,EAAAgB,IAAA1B,EAAA9B,GAAA,KAAAkF,OAAA,YAAAS,KAAA3F,EAAAgG,WAAAlC,GAAA,KAAA4D,SAAAlF,EAAA,EAAAkF,SAAA,SAAA3F,EAAAD,GAAA,aAAAC,EAAAX,KAAA,MAAAW,EAAAyB,IAAA,gBAAAzB,EAAAX,MAAA,aAAAW,EAAAX,KAAA,KAAAuE,KAAA5D,EAAAyB,IAAA,WAAAzB,EAAAX,MAAA,KAAAoG,KAAA,KAAAhE,IAAAzB,EAAAyB,IAAA,KAAA0B,OAAA,cAAAS,KAAA,kBAAA5D,EAAAX,MAAAU,IAAA,KAAA6D,KAAA7D,GAAAgC,CAAA,EAAA6D,OAAA,SAAA5F,GAAA,QAAAD,EAAA,KAAAoE,WAAAvI,OAAA,EAAAmE,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAAkE,WAAApE,GAAA,GAAAE,EAAAgE,aAAAjE,EAAA,YAAA2F,SAAA1F,EAAAoE,WAAApE,EAAAiE,UAAAE,EAAAnE,GAAA8B,CAAA,kBAAA/B,GAAA,QAAAD,EAAA,KAAAoE,WAAAvI,OAAA,EAAAmE,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAAkE,WAAApE,GAAA,GAAAE,EAAA8D,SAAA/D,EAAA,KAAAI,EAAAH,EAAAoE,WAAA,aAAAjE,EAAAf,KAAA,KAAAiB,EAAAF,EAAAqB,IAAA2C,EAAAnE,EAAA,QAAAK,CAAA,QAAA2C,MAAA,0BAAA4C,cAAA,SAAA9F,EAAAE,EAAAG,GAAA,YAAAgD,SAAA,CAAA1C,SAAA4B,EAAAvC,GAAA4D,WAAA1D,EAAA4D,QAAAzD,GAAA,cAAA+C,SAAA,KAAA1B,IAAAzB,GAAA+B,CAAA,GAAAhC,CAAA,UAAA+F,EAAA1F,EAAAJ,EAAAD,EAAAE,EAAAK,EAAAG,EAAAE,GAAA,QAAA1C,EAAAmC,EAAAK,GAAAE,GAAAE,EAAA5C,EAAApD,KAAA,OAAAuF,GAAA,YAAAL,EAAAK,EAAA,CAAAnC,EAAAiF,KAAAlD,EAAAa,GAAAoE,QAAApC,QAAAhC,GAAAkC,KAAA9C,EAAAK,EAAA,UAAAyF,EAAAhG,EAAAE,GAAA,QAAAD,EAAA,EAAAA,EAAAC,EAAArE,OAAAoE,IAAA,KAAAM,EAAAL,EAAAD,GAAAM,EAAAU,WAAAV,EAAAU,aAAA,EAAAV,EAAAW,cAAA,YAAAX,IAAAA,EAAAY,UAAA,GAAAhB,OAAAK,eAAAR,EAAAiG,EAAA1F,EAAA1F,KAAA0F,EAAA,WAAA0F,EAAAhG,GAAA,IAAA/B,EAAA,SAAA+B,GAAA,aAAA4C,EAAA5C,KAAAA,EAAA,OAAAA,EAAA,IAAAD,EAAAC,EAAAQ,OAAAyF,aAAA,YAAAlG,EAAA,KAAA9B,EAAA8B,EAAA2B,KAAA1B,EAAAC,UAAA,aAAA2C,EAAA3E,GAAA,OAAAA,EAAA,UAAAyF,UAAA,uDAAAwC,OAAAlG,EAAA,CAAAmG,CAAAnG,GAAA,gBAAA4C,EAAA3E,GAAAA,EAAAA,EAAA,GAQO,IAAMmI,EAAM,WAsBf,OA9BJrG,EAYI,SAAAqG,EAAYC,IAZhB,SAAA5F,EAAAL,GAAA,KAAAK,aAAAL,GAAA,UAAAsD,UAAA,qCAYsB3J,CAAA,KAAAqM,GACdpM,KAAKqM,KAAOA,EAGZrM,KAAKsM,cAAgB5J,SAAS6J,eAAe,kBAC7CvM,KAAKwM,SAAW9J,SAAS6J,eAAe,aACxCvM,KAAKyM,WAAa/J,SAAS6J,eAAe,eAC1CvM,KAAK0M,WAAahK,SAAS6J,eAAe,OAC1CvM,KAAK2M,gBAAkBjK,SAAS6J,eAAe,oBAC/CvM,KAAK4M,cAAgBlK,SAAS6J,eAAe,kBAG7CvM,KAAK6M,WAAa,CACdC,IAAK,KACLtJ,UAAW,KAEnB,EA5BJyC,EA8BI,EAAArF,IAAA,iBAAAC,OA9BJuF,EA8BIN,IAAA8E,MAGA,SAAAmC,IAAA,OAAAjH,IAAAqB,MAAA,SAAA6F,GAAA,cAAAA,EAAA3B,KAAA2B,EAAApD,MAAA,OAIM,OAHF5J,KAAK6M,WAAa,CACdC,IAAK9M,KAAK0M,WAAa,IAAI7M,EAAIG,KAAK0M,YAAc,KAClDlJ,UAAWxD,KAAK2M,gBAAkB,IAAItJ,EAAYrD,KAAK2M,iBAAmB,MAC5EK,EAAAvD,OAAA,UAEK,GAAI,wBAAAuD,EAAAxB,OAAA,GAAAuB,EAAA,SATfE,EA9BJ,eAAAjH,EAAA,KAAAD,EAAApE,UAAA,WAAAsJ,SAAA,SAAAhF,EAAAK,GAAA,IAAAG,EAAAL,EAAA8G,MAAAlH,EAAAD,GAAA,SAAAoH,EAAA/G,GAAA0F,EAAArF,EAAAR,EAAAK,EAAA6G,EAAAC,EAAA,OAAAhH,EAAA,UAAAgH,EAAAhH,GAAA0F,EAAArF,EAAAR,EAAAK,EAAA6G,EAAAC,EAAA,QAAAhH,EAAA,CAAA+G,OAAA,OAwCK,WAPmB,OAAAF,EAAAC,MAAC,KAADvL,UAAA,IASpB,CAAAf,IAAA,sBAAAC,MAIA,SAAoBwM,GACZrN,KAAK4M,gBACL5M,KAAK4M,cAAcrL,YAAc8L,GAErCxI,GAAIwI,EACR,GAEA,CAAAzM,IAAA,kBAAAC,MAIA,SAAgBW,GAEZ,IAAI8L,EAAc5K,SAAS6J,eAAe,gBAC1C,GAAKe,EAmEE,CAEH,IAAMC,EAAe7K,SAAS6J,eAAe,iBACzCgB,IACAA,EAAahM,YAAcC,EAEnC,KAzEkB,EACd8L,EAAc5K,SAASC,cAAc,QACzB0B,GAAK,eACjBiJ,EAAY1K,UAAY,gBACxB0K,EAAYhL,UAAY,6IAAHjB,OAGWG,EAAO,qHAIvCkB,SAAS8K,KAAK3K,YAAYyK,GAG1B,IAAMG,EAAe/K,SAAS6J,eAAe,iBACzCkB,GACAA,EAAa9I,iBAAiB,SAAS,WACnC+I,OAAOC,SAASC,QACpB,IAIJ,IAAMzM,EAAQuB,SAASC,cAAc,SACrCxB,EAAMI,YAAc,u+CA2CpBmB,SAASkD,KAAK/C,YAAY1B,EAC9B,CASInB,KAAKsM,eACLtM,KAAKsM,cAAcpJ,UAAUE,IAAI,SAEzC,GAEA,CAAAxC,IAAA,eAAAC,MAGA,WACQb,KAAKsM,eACLtM,KAAKsM,cAAcpJ,UAAUE,IAAI,UAEjCpD,KAAKwM,UACLxM,KAAKwM,SAAStJ,UAAUC,OAAO,UAEnCnD,KAAKqM,KAAKwB,MAAMC,aAAe,OAC/BjJ,GAAI,0BACR,GAEA,CAAAjE,IAAA,eAAAC,MAGA,WACQb,KAAKwM,UACLxM,KAAKwM,SAAStJ,UAAUE,IAAI,SAEpC,GAEA,CAAAxC,IAAA,iBAAAC,MAGA,WACQb,KAAKyM,YACLzM,KAAKyM,WAAWvJ,UAAUC,OAAO,UAEjCnD,KAAK0M,YACL1M,KAAK0M,WAAWxJ,UAAUC,OAAO,SAEzC,GAEA,CAAAvC,IAAA,SAAAC,MAGA,WAEQb,KAAKqM,KAAK0B,MAAMC,QAAUhO,KAAK6M,WAAWC,KAC1C9M,KAAK6M,WAAWC,IAAImB,OAAO,CACvB3N,OAAQN,KAAKqM,KAAK0B,MAAMC,OAAO1N,OAC/BC,KAAMP,KAAKqM,KAAK0B,MAAMC,OAAOzN,KAC7BC,OAAQR,KAAKqM,KAAK0B,MAAMC,OAAOxN,QAG3C,GAEA,CAAAI,IAAA,kBAAAC,MAGA,WACQb,KAAK2M,gBAAgBzJ,UAAUgL,SAAS,UACxClO,KAAKmO,gBAELnO,KAAKoO,eAEb,GAEA,CAAAxN,IAAA,gBAAAC,MAGA,WACIb,KAAK2M,gBAAgBzJ,UAAUC,OAAO,UAElCnD,KAAK6M,WAAWrJ,WAChBxD,KAAK6M,WAAWrJ,UAAU6K,OAG1BrO,KAAKqM,KAAKiC,OACVtO,KAAKqM,KAAKiC,MAAMC,qBAExB,GAEA,CAAA3N,IAAA,gBAAAC,MAGA,WACIb,KAAK2M,gBAAgBzJ,UAAUE,IAAI,UAE/BpD,KAAK6M,WAAWrJ,WAChBxD,KAAK6M,WAAWrJ,UAAUgL,OAG1BxO,KAAKqM,KAAKiC,OACVtO,KAAKqM,KAAKiC,MAAMG,oBAExB,IArOJxI,GAAA8F,EAAAhG,EAAAI,UAAAF,GAAAC,OAAAK,eAAAR,EAAA,aAAAmB,UAAA,IAAAnB,EAAA,IAAAA,EAAAE,EAAAG,EA8BI6G,CAuMC,CA7Nc,i2CCJZ,IAAMyB,EAAM,WAwEf,SAhEA,SAAAA,EAAYC,gGAAS5O,CAAA,KAAA2O,GAEjB1O,KAAKqE,GAAKsK,EAAQtK,IAAM,eACxBrE,KAAK4O,mBAA0C1N,IAA1ByN,EAAQC,eAA8BD,EAAQC,cAGnE5O,KAAK6O,SAAWF,EAAQE,UAAY,CAAEC,EAAG,EAAG/G,EAAG,EAAGgH,EAAG,GACrD/O,KAAKgP,SAAWL,EAAQK,UAAY,CAAEF,EAAG,EAAG/G,EAAG,EAAGgH,EAAG,GACrD/O,KAAKiP,UAAY,CAAEH,EAAG,EAAGC,GAAI,GAG7B/O,KAAKM,OAASqO,EAAQrO,QAAU,IAChCN,KAAKkP,UAAYP,EAAQO,WAAa,IACtClP,KAAKmP,MAAQR,EAAQQ,OAAS,EAC9BnP,KAAKQ,OAASmO,EAAQnO,QAAU,SAChCR,KAAKO,KAAOoO,EAAQpO,MAAQ,GAC5BP,KAAKoP,WAAa,SAClBpP,KAAKqP,SAAW,IAChBrP,KAAKsP,OAAS,CAAER,EAAG,IAAM/G,EAAG,KAG5B/H,KAAKwD,UAAYmL,EAAQnL,WAAa,CAClCC,MAAO,GACPC,SAAU,IAId1D,KAAKuP,UAAW,EAChBvP,KAAKwP,WAAY,EACjBxP,KAAKyP,UAAW,EAChBzP,KAAK0P,YAAa,EAClB1P,KAAK2P,UAAW,EAChB3P,KAAK4P,cAAgB,EACrB5P,KAAK6P,aAAe,OAGpB7P,KAAK8P,UAAY,GACjB9P,KAAK+P,gBAAkB,GACvB/P,KAAKgQ,gBAAkB,GACvBhQ,KAAKiQ,iBAAmB,GACxBjQ,KAAKkQ,aAAe,GAGpBlQ,KAAKmQ,YAAc,EACnBnQ,KAAKoQ,aAAe,IACpBpQ,KAAKqQ,YAAc,IACnBrQ,KAAKsQ,aAAe,GACpBtQ,KAAKuQ,SAAW,CAAEzB,EAAG,EAAGC,EAAG,GAG3B/O,KAAKwQ,SAAW7B,EAAQ6B,SACxBxQ,KAAKsO,MAAQK,EAAQL,MACrBtO,KAAKqM,KAAOsC,EAAQtC,KACpBrM,KAAKyQ,KAAO,KAGRzQ,KAAK4O,eACL5O,KAAK0Q,gBAIT1Q,KAAK2Q,aACT,KAEA,EAAA/P,IAAA,cAAAC,MAGA,WAESb,KAAKwQ,WAGVxQ,KAAKyQ,KAAOzQ,KAAKwQ,SAASI,UAAU,CAChC/B,SAAU7O,KAAK6O,SACfG,SAAUhP,KAAKgP,SACfJ,cAAe5O,KAAK4O,gBAE5B,GAEA,CAAAhO,IAAA,gBAAAC,MAGA,WAAgB,IAAAY,EAAA,KACPzB,KAAKsO,QAGVtO,KAAKsO,MAAMuC,sBAAqB,SAACC,EAAQjC,GACtB,IAAXiC,GACArP,EAAKsP,aAEb,IAGA/Q,KAAKsO,MAAM0C,oBAAmB,SAACF,GACZ,IAAXA,GACArP,EAAKwP,YAEb,IAGAjR,KAAKsO,MAAM4C,uBAAsB,WAC7BzP,EAAK0P,UACT,IAGAnR,KAAKsO,MAAM8C,sBAAqB,SAACvC,EAAUwC,GACvC5P,EAAK6P,gBAAgBzC,EACzB,IACJ,GAEA,CAAAjO,IAAA,cAAAC,MAGA,WACIb,KAAKyP,UAAW,EAChBzP,KAAKmP,MAAQnP,KAAKqQ,YAClBrQ,KAAK8P,UAAY9P,KAAKgQ,gBACtBpL,QAAQC,IAAI,sBAChB,GAEA,CAAAjE,IAAA,aAAAC,MAGA,WACIb,KAAKyP,UAAW,EAChBzP,KAAKmP,MAAQnP,KAAKmQ,YAClBnQ,KAAK8P,UAAY9P,KAAK+P,gBACtBnL,QAAQC,IAAI,qBAChB,GAEA,CAAAjE,IAAA,WAAAC,MAGA,WAAW,IAAAwB,EAAA,KAEP,GAAKrC,KAAKyP,UAAazP,KAAK2P,YAAY3P,KAAKO,MAAQ,GAArD,CAIA,IAAMgR,EAAcvP,KAAKC,MAGrBsP,EAAcvR,KAAK4P,cAAgB5P,KAAKqP,WAK5CrP,KAAK4P,cAAgB2B,EAGrBvR,KAAKO,OAGLP,KAAK0P,YAAa,EAClB8B,YAAW,WACPnP,EAAKqN,YAAa,CACtB,GAAG,KAGH1P,KAAKyR,cAGLzR,KAAK0R,aAGmB,WAApB1R,KAAKoP,aACLpP,KAAK2P,UAAW,EAChB6B,YAAW,WACPnP,EAAKsN,UAAW,CACpB,GAAG3P,KAAKqP,WAIRrP,KAAKqM,MAAQrM,KAAKqM,KAAKsF,SACvB3R,KAAKqM,KAAKsF,QAAQC,gBACd5R,KAAK6O,SACL7O,KAAKiP,UACLjP,KAAKQ,QAxCb,CA2CJ,GAEA,CAAAI,IAAA,cAAAC,MAGA,WAEI,IAAMgR,GAAWC,KAAKC,SAAW,IAAO/R,KAAKsP,OAAOR,EAAI,EAClDkD,GAAWF,KAAKG,IAAIH,KAAKC,SAAW/R,KAAKsP,OAAOvH,GAGhDmK,EAAWlS,KAAKsO,MAAM6D,mBAGtBC,EAAc,CAChBtD,EAAGoD,EAASpD,EAAc,IAAV+C,EAChB9J,EAAGmK,EAASnK,EAAc,IAAViK,GAIpBhS,KAAKsR,gBAAgBc,EACzB,GAEA,CAAAxR,IAAA,kBAAAC,MAIA,SAAgBgO,GAEZ,IAAMwD,EAAarS,KAAKwQ,SAAS8B,OAAOC,wBAClCC,EACCH,EAAWI,KAAOJ,EAAWjR,MAAQ,EADtCoR,EAECH,EAAWK,IAAML,EAAWM,OAAS,EAItCC,EAAW,CACb9D,EAAGD,EAASC,EAAI0D,EAChBzK,EAAG8G,EAAS9G,EAAIyK,GAId5Q,EAASkQ,KAAKe,KAAKD,EAAS9D,EAAI8D,EAAS9D,EAAI8D,EAAS7K,EAAI6K,EAAS7K,GACrEnG,EAAS,IACTgR,EAAS9D,GAAKlN,EACdgR,EAAS7K,GAAKnG,GAIlB,IAAMkR,EAAQhB,KAAKiB,MAAMH,EAAS9D,GAAI8D,EAAS7K,GAG/C/H,KAAKgP,SAASjH,EAAI+K,EAClB9S,KAAKiP,UAAY,CACbH,EAAGgD,KAAKkB,IAAIF,GACZ/D,GAAI+C,KAAKmB,IAAIH,GAErB,GAEA,CAAAlS,IAAA,SAAAC,MAIA,SAAOqS,GACEA,IAGDlT,KAAK4O,gBACL5O,KAAKmT,eAAeD,GAGhBlT,KAAKwQ,UACLxQ,KAAKwQ,SAAS4C,aAAapT,KAAK6O,UAIpC7O,KAAKqT,gBAGLrT,KAAKsT,wBAITtT,KAAKuT,cACT,GAEA,CAAA3S,IAAA,gBAAAC,MAGA,WACI,GAAKb,KAAKsO,MAAV,CAEA,IAAMkF,EAAaxT,KAAKwP,UAGpBxP,KAAKsO,MAAMmF,aAAa,eAAiBzT,KAAKyP,SACzCzP,KAAKwP,YACNxP,KAAKwP,WAAY,EACjBxP,KAAKmP,MAAQnP,KAAKoQ,aAClBpQ,KAAK8P,UAAY9P,KAAKiQ,kBAEnBjQ,KAAKwP,YACZxP,KAAKwP,WAAY,EACjBxP,KAAKmP,MAAQnP,KAAKyP,SAAWzP,KAAKqQ,YAAcrQ,KAAKmQ,YACrDnQ,KAAK8P,UAAY9P,KAAKyP,SAAWzP,KAAKgQ,gBAAkBhQ,KAAK+P,iBAI7DyD,IAAexT,KAAKwP,WACpB5K,QAAQC,IAAI7E,KAAKwP,UAAY,cAAgB,aAnB1B,CAqB3B,GAEA,CAAA5O,IAAA,uBAAAC,MAGA,WACI,IAAI6S,EAAW,OAEX1T,KAAKuP,WACLmE,EAAW1T,KAAKwP,UAAY,MAAQ,QAGpCxP,KAAKyP,WACLiE,EAAW,OAGX1T,KAAK0P,aACLgE,EAAW,SAGX1T,KAAK6P,eAAiB6D,IACtB1T,KAAK6P,aAAe6D,EACpB9O,QAAQC,IAAI,uBAADxD,OAAwBrB,KAAK6P,eAIhD,GAEA,CAAAjP,IAAA,iBAAAC,MAIA,SAAeqS,GACX,GAAKlT,KAAKsO,MAAV,CAGA,IAAMqF,EAAU3T,KAAKsO,MAAMsF,uBAG3B,GAAkB,IAAdD,EAAQ7E,GAAyB,IAAd6E,EAAQ5E,EAE3B/O,KAAKuQ,SAASzB,GAAK,GACnB9O,KAAKuQ,SAASxB,GAAK,GAGf+C,KAAKG,IAAIjS,KAAKuQ,SAASzB,GAAK,KAAQgD,KAAKG,IAAIjS,KAAKuQ,SAASxB,GAAK,MAChE/O,KAAKuQ,SAASzB,EAAI,EAClB9O,KAAKuQ,SAASxB,EAAI,EAClB/O,KAAKuP,UAAW,OAEjB,CAEHvP,KAAKuP,UAAW,EAGhB,IAAM3N,EAASkQ,KAAKe,KAAKc,EAAQ7E,EAAI6E,EAAQ7E,EAAI6E,EAAQ5E,EAAI4E,EAAQ5E,GAC/D8E,EAAgB,CAClB/E,EAAG6E,EAAQ7E,EAAIlN,EACfmN,EAAG4E,EAAQ5E,EAAInN,GAGbkS,EAAY,CACdhF,EAAG+E,EAAc/E,EAAI9O,KAAKmP,MAC1BJ,EAAG8E,EAAc9E,EAAI/O,KAAKmP,OAI9BnP,KAAKuQ,SAASzB,IAAMgF,EAAUhF,EAAI9O,KAAKuQ,SAASzB,GAAK9O,KAAKsQ,aAAe4C,EACzElT,KAAKuQ,SAASxB,IAAM+E,EAAU/E,EAAI/O,KAAKuQ,SAASxB,GAAK/O,KAAKsQ,aAAe4C,CAC7E,CAGA,IAAMa,EAAO/T,KAAK6O,SAASC,EAAI9O,KAAKuQ,SAASzB,EAAIoE,EAC3Cc,EAAOhU,KAAK6O,SAASE,EAAI/O,KAAKuQ,SAASxB,EAAImE,EAG3Ce,EAAWjU,KAAKkU,eAAe,CAAEpF,EAAGiF,EAAMhM,EAAG/H,KAAK6O,SAAS9G,EAAGgH,EAAG/O,KAAK6O,SAASE,IAC/EoF,EAAWnU,KAAKkU,eAAe,CAAEpF,EAAG9O,KAAK6O,SAASC,EAAG/G,EAAG/H,KAAK6O,SAAS9G,EAAGgH,EAAGiF,IAG9EC,EACAjU,KAAK6O,SAASC,EAAIiF,EAElB/T,KAAKuQ,SAASzB,EAAI,EAGlBqF,EACAnU,KAAK6O,SAASE,EAAIiF,EAElBhU,KAAKuQ,SAASxB,EAAI,EAIlB/O,KAAKqM,MAAQrM,KAAKqM,KAAKsF,SACvB3R,KAAKqM,KAAKsF,QAAQyC,eAAepU,KAAK6O,SAAU7O,KAAKgP,SA7DlC,CA+D3B,GAEA,CAAApO,IAAA,iBAAAC,MAKA,SAAewT,GAIX,QAAIvC,KAAKG,IAAIoC,EAAYvF,GAFT,KAEyBgD,KAAKG,IAAIoC,EAAYtF,GAF9C,IAUpB,GAEA,CAAAnO,IAAA,aAAAC,MAGA,WAEI,GAAIb,KAAKwQ,UAAYxQ,KAAKwQ,SAAS8D,MAAO,CACtC,IAAMC,EAAQC,EAAA,GAAQxU,KAAK6O,UAC3B0F,EAASxM,GAAK,EAEd,IAAM0M,EAAS,CACX3F,EAAGyF,EAASzF,EAAuB,IAAnB9O,KAAKiP,UAAUH,EAC/B/G,EAAGwM,EAASxM,EACZgH,EAAGwF,EAASxF,EAAuB,IAAnB/O,KAAKiP,UAAUF,GAInC/O,KAAKwQ,SAASkE,oBAAoBH,EAAUE,EAAQ,SAAU,KAE9D7P,QAAQC,IAAI,WAAY7E,KAAKiP,UACjC,CACJ,GAEA,CAAArO,IAAA,cAAAC,MAGA,WACQb,KAAKyQ,MAAQzQ,KAAKwQ,UAElBxQ,KAAKwQ,SAASmE,sBAAsB3U,KAAKyQ,KAAMzQ,KAAK6O,SAAU7O,KAAKgP,SAI3E,GAEA,CAAApO,IAAA,eAAAC,MAIA,WACI,OAAOb,KAAK8P,SAChB,GAEA,CAAAlP,IAAA,kBAAAC,MAIA,WACI,OAAOb,KAAKkQ,YAChB,GAEA,CAAAtP,IAAA,mBAAAC,MAIA,WACI,OAAA2T,EAAA,GAAYxU,KAAKiP,UACrB,mFAAC,CAxdc,sPCJnBnJ,EAAA,kBAAAC,CAAA,MAAAC,EAAAD,EAAA,GAAAE,EAAAC,OAAAC,UAAAC,EAAAH,EAAAI,eAAAC,EAAAJ,OAAAK,gBAAA,SAAAP,EAAAD,EAAAE,GAAAD,EAAAD,GAAAE,EAAApF,KAAA,EAAAoD,EAAA,mBAAAuC,OAAAA,OAAA,GAAAC,EAAAxC,EAAAyC,UAAA,aAAAC,EAAA1C,EAAA2C,eAAA,kBAAAC,EAAA5C,EAAA6C,aAAA,yBAAAC,EAAAf,EAAAD,EAAAE,GAAA,OAAAC,OAAAK,eAAAP,EAAAD,EAAA,CAAAlF,MAAAoF,EAAAe,YAAA,EAAAC,cAAA,EAAAC,UAAA,IAAAlB,EAAAD,EAAA,KAAAgB,EAAA,aAAAf,GAAAe,EAAA,SAAAf,EAAAD,EAAAE,GAAA,OAAAD,EAAAD,GAAAE,CAAA,WAAAkB,EAAAnB,EAAAD,EAAAE,EAAAG,GAAA,IAAAnC,EAAA8B,GAAAA,EAAAI,qBAAAiB,EAAArB,EAAAqB,EAAAX,EAAAP,OAAAmB,OAAApD,EAAAkC,WAAAQ,EAAA,IAAAW,EAAAlB,GAAA,WAAAE,EAAAG,EAAA,WAAA5F,MAAA0G,EAAAvB,EAAAC,EAAAU,KAAAF,CAAA,UAAAe,EAAAxB,EAAAD,EAAAE,GAAA,WAAAZ,KAAA,SAAAoC,IAAAzB,EAAA0B,KAAA3B,EAAAE,GAAA,OAAAD,GAAA,OAAAX,KAAA,QAAAoC,IAAAzB,EAAA,EAAAD,EAAAoB,KAAAA,EAAA,IAAAQ,EAAA,iBAAAC,EAAA,iBAAAC,EAAA,YAAAC,EAAA,YAAAC,EAAA,YAAAX,IAAA,UAAAY,IAAA,UAAAC,IAAA,KAAAC,EAAA,GAAAnB,EAAAmB,EAAAzB,GAAA,8BAAA0B,EAAAjC,OAAAkC,eAAAC,EAAAF,GAAAA,EAAAA,EAAAG,EAAA,MAAAD,GAAAA,IAAApC,GAAAG,EAAAsB,KAAAW,EAAA5B,KAAAyB,EAAAG,GAAA,IAAAE,EAAAN,EAAA9B,UAAAiB,EAAAjB,UAAAD,OAAAmB,OAAAa,GAAA,SAAAM,EAAAxC,GAAA,0BAAAzD,SAAA,SAAAwD,GAAAgB,EAAAf,EAAAD,GAAA,SAAAC,GAAA,YAAAyC,QAAA1C,EAAAC,EAAA,gBAAA0C,EAAA1C,EAAAD,GAAA,SAAA4C,EAAA1C,EAAAK,EAAArC,EAAAwC,GAAA,IAAAE,EAAAa,EAAAxB,EAAAC,GAAAD,EAAAM,GAAA,aAAAK,EAAAtB,KAAA,KAAAwB,EAAAF,EAAAc,IAAAE,EAAAd,EAAAhG,MAAA,OAAA8G,GAAA,UAAAiB,EAAAjB,IAAAvB,EAAAsB,KAAAC,EAAA,WAAA5B,EAAA8C,QAAAlB,EAAAmB,SAAAC,MAAA,SAAA/C,GAAA2C,EAAA,OAAA3C,EAAA/B,EAAAwC,EAAA,aAAAT,GAAA2C,EAAA,QAAA3C,EAAA/B,EAAAwC,EAAA,IAAAV,EAAA8C,QAAAlB,GAAAoB,MAAA,SAAA/C,GAAAa,EAAAhG,MAAAmF,EAAA/B,EAAA4C,EAAA,aAAAb,GAAA,OAAA2C,EAAA,QAAA3C,EAAA/B,EAAAwC,EAAA,IAAAA,EAAAE,EAAAc,IAAA,KAAAxB,EAAAK,EAAA,gBAAAzF,MAAA,SAAAmF,EAAAI,GAAA,SAAA4C,IAAA,WAAAjD,GAAA,SAAAA,EAAAE,GAAA0C,EAAA3C,EAAAI,EAAAL,EAAAE,EAAA,WAAAA,EAAAA,EAAAA,EAAA8C,KAAAC,EAAAA,GAAAA,GAAA,aAAAzB,EAAAxB,EAAAE,EAAAG,GAAA,IAAAE,EAAAqB,EAAA,gBAAA1D,EAAAwC,GAAA,GAAAH,IAAAuB,EAAA,MAAAoB,MAAA,mCAAA3C,IAAAwB,EAAA,cAAA7D,EAAA,MAAAwC,EAAA,OAAA5F,MAAAmF,EAAAkD,MAAA,OAAA9C,EAAA+C,OAAAlF,EAAAmC,EAAAqB,IAAAhB,IAAA,KAAAE,EAAAP,EAAAgD,SAAA,GAAAzC,EAAA,KAAAE,EAAAwC,EAAA1C,EAAAP,GAAA,GAAAS,EAAA,IAAAA,IAAAkB,EAAA,gBAAAlB,CAAA,cAAAT,EAAA+C,OAAA/C,EAAAkD,KAAAlD,EAAAmD,MAAAnD,EAAAqB,SAAA,aAAArB,EAAA+C,OAAA,IAAA7C,IAAAqB,EAAA,MAAArB,EAAAwB,EAAA1B,EAAAqB,IAAArB,EAAAoD,kBAAApD,EAAAqB,IAAA,gBAAArB,EAAA+C,QAAA/C,EAAAqD,OAAA,SAAArD,EAAAqB,KAAAnB,EAAAuB,EAAA,IAAAK,EAAAV,EAAAzB,EAAAE,EAAAG,GAAA,cAAA8B,EAAA7C,KAAA,IAAAiB,EAAAF,EAAA8C,KAAApB,EAAAF,EAAAM,EAAAT,MAAAM,EAAA,gBAAAlH,MAAAqH,EAAAT,IAAAyB,KAAA9C,EAAA8C,KAAA,WAAAhB,EAAA7C,OAAAiB,EAAAwB,EAAA1B,EAAA+C,OAAA,QAAA/C,EAAAqB,IAAAS,EAAAT,IAAA,YAAA4B,EAAAtD,EAAAE,GAAA,IAAAG,EAAAH,EAAAkD,OAAA7C,EAAAP,EAAAW,SAAAN,GAAA,GAAAE,IAAAN,EAAA,OAAAC,EAAAmD,SAAA,eAAAhD,GAAAL,EAAAW,SAAA,SAAAT,EAAAkD,OAAA,SAAAlD,EAAAwB,IAAAzB,EAAAqD,EAAAtD,EAAAE,GAAA,UAAAA,EAAAkD,SAAA,WAAA/C,IAAAH,EAAAkD,OAAA,QAAAlD,EAAAwB,IAAA,IAAAiC,UAAA,oCAAAtD,EAAA,aAAA2B,EAAA,IAAA9D,EAAAuD,EAAAlB,EAAAP,EAAAW,SAAAT,EAAAwB,KAAA,aAAAxD,EAAAoB,KAAA,OAAAY,EAAAkD,OAAA,QAAAlD,EAAAwB,IAAAxD,EAAAwD,IAAAxB,EAAAmD,SAAA,KAAArB,EAAA,IAAAtB,EAAAxC,EAAAwD,IAAA,OAAAhB,EAAAA,EAAAyC,MAAAjD,EAAAF,EAAA4D,YAAAlD,EAAA5F,MAAAoF,EAAA2D,KAAA7D,EAAA8D,QAAA,WAAA5D,EAAAkD,SAAAlD,EAAAkD,OAAA,OAAAlD,EAAAwB,IAAAzB,GAAAC,EAAAmD,SAAA,KAAArB,GAAAtB,GAAAR,EAAAkD,OAAA,QAAAlD,EAAAwB,IAAA,IAAAiC,UAAA,oCAAAzD,EAAAmD,SAAA,KAAArB,EAAA,UAAA+B,EAAA9D,GAAA,IAAAD,EAAA,CAAAgE,OAAA/D,EAAA,SAAAA,IAAAD,EAAAiE,SAAAhE,EAAA,SAAAA,IAAAD,EAAAkE,WAAAjE,EAAA,GAAAD,EAAAmE,SAAAlE,EAAA,SAAAmE,WAAAtI,KAAAkE,EAAA,UAAAqE,EAAApE,GAAA,IAAAD,EAAAC,EAAAqE,YAAA,GAAAtE,EAAAV,KAAA,gBAAAU,EAAA0B,IAAAzB,EAAAqE,WAAAtE,CAAA,UAAAuB,EAAAtB,GAAA,KAAAmE,WAAA,EAAAJ,OAAA,SAAA/D,EAAAzD,QAAAuH,EAAA,WAAAQ,OAAA,YAAAhC,EAAAvC,GAAA,GAAAA,GAAA,KAAAA,EAAA,KAAAE,EAAAF,EAAAU,GAAA,GAAAR,EAAA,OAAAA,EAAAyB,KAAA3B,GAAA,sBAAAA,EAAA6D,KAAA,OAAA7D,EAAA,IAAAwE,MAAAxE,EAAAnE,QAAA,KAAA0E,GAAA,EAAArC,EAAA,SAAA2F,IAAA,OAAAtD,EAAAP,EAAAnE,QAAA,GAAAwE,EAAAsB,KAAA3B,EAAAO,GAAA,OAAAsD,EAAA/I,MAAAkF,EAAAO,GAAAsD,EAAAV,MAAA,EAAAU,EAAA,OAAAA,EAAA/I,MAAAmF,EAAA4D,EAAAV,MAAA,EAAAU,CAAA,SAAA3F,EAAA2F,KAAA3F,CAAA,YAAAyF,UAAAd,EAAA7C,GAAA,2BAAAiC,EAAA7B,UAAA8B,EAAA3B,EAAAiC,EAAA,eAAA1H,MAAAoH,EAAAhB,cAAA,IAAAX,EAAA2B,EAAA,eAAApH,MAAAmH,EAAAf,cAAA,IAAAe,EAAAwC,YAAAzD,EAAAkB,EAAApB,EAAA,qBAAAd,EAAA0E,oBAAA,SAAAzE,GAAA,IAAAD,EAAA,mBAAAC,GAAAA,EAAA0E,YAAA,QAAA3E,IAAAA,IAAAiC,GAAA,uBAAAjC,EAAAyE,aAAAzE,EAAA4E,MAAA,EAAA5E,EAAA6E,KAAA,SAAA5E,GAAA,OAAAE,OAAA2E,eAAA3E,OAAA2E,eAAA7E,EAAAiC,IAAAjC,EAAA8E,UAAA7C,EAAAlB,EAAAf,EAAAa,EAAA,sBAAAb,EAAAG,UAAAD,OAAAmB,OAAAkB,GAAAvC,CAAA,EAAAD,EAAAgF,MAAA,SAAA/E,GAAA,OAAA8C,QAAA9C,EAAA,EAAAwC,EAAAE,EAAAvC,WAAAY,EAAA2B,EAAAvC,UAAAQ,GAAA,0BAAAZ,EAAA2C,cAAAA,EAAA3C,EAAAiF,MAAA,SAAAhF,EAAAC,EAAAG,EAAAE,EAAArC,QAAA,IAAAA,IAAAA,EAAAgH,SAAA,IAAAxE,EAAA,IAAAiC,EAAAvB,EAAAnB,EAAAC,EAAAG,EAAAE,GAAArC,GAAA,OAAA8B,EAAA0E,oBAAAxE,GAAAQ,EAAAA,EAAAmD,OAAAb,MAAA,SAAA/C,GAAA,OAAAA,EAAAkD,KAAAlD,EAAAnF,MAAA4F,EAAAmD,MAAA,KAAApB,EAAAD,GAAAxB,EAAAwB,EAAA1B,EAAA,aAAAE,EAAAwB,EAAA9B,GAAA,0BAAAM,EAAAwB,EAAA,qDAAAxC,EAAAmF,KAAA,SAAAlF,GAAA,IAAAD,EAAAG,OAAAF,GAAAC,EAAA,WAAAG,KAAAL,EAAAE,EAAApE,KAAAuE,GAAA,OAAAH,EAAAkF,UAAA,SAAAvB,IAAA,KAAA3D,EAAArE,QAAA,KAAAoE,EAAAC,EAAAmF,MAAA,GAAApF,KAAAD,EAAA,OAAA6D,EAAA/I,MAAAmF,EAAA4D,EAAAV,MAAA,EAAAU,CAAA,QAAAA,EAAAV,MAAA,EAAAU,CAAA,GAAA7D,EAAAuC,OAAAA,EAAAhB,EAAAnB,UAAA,CAAAuE,YAAApD,EAAAgD,MAAA,SAAAvE,GAAA,QAAAsF,KAAA,OAAAzB,KAAA,OAAAN,KAAA,KAAAC,MAAAvD,EAAA,KAAAkD,MAAA,OAAAE,SAAA,UAAAD,OAAA,YAAA1B,IAAAzB,EAAA,KAAAmE,WAAA5H,QAAA6H,IAAArE,EAAA,QAAAE,KAAA,WAAAA,EAAAqF,OAAA,IAAAlF,EAAAsB,KAAA,KAAAzB,KAAAsE,OAAAtE,EAAAsF,MAAA,WAAAtF,GAAAD,EAAA,EAAAwF,KAAA,gBAAAtC,MAAA,MAAAlD,EAAA,KAAAmE,WAAA,GAAAE,WAAA,aAAArE,EAAAX,KAAA,MAAAW,EAAAyB,IAAA,YAAAgE,IAAA,EAAAjC,kBAAA,SAAAzD,GAAA,QAAAmD,KAAA,MAAAnD,EAAA,IAAAE,EAAA,cAAAyF,EAAAtF,EAAAE,GAAA,OAAAG,EAAApB,KAAA,QAAAoB,EAAAgB,IAAA1B,EAAAE,EAAA2D,KAAAxD,EAAAE,IAAAL,EAAAkD,OAAA,OAAAlD,EAAAwB,IAAAzB,KAAAM,CAAA,SAAAA,EAAA,KAAA6D,WAAAvI,OAAA,EAAA0E,GAAA,IAAAA,EAAA,KAAArC,EAAA,KAAAkG,WAAA7D,GAAAG,EAAAxC,EAAAoG,WAAA,YAAApG,EAAA8F,OAAA,OAAA2B,EAAA,UAAAzH,EAAA8F,QAAA,KAAAsB,KAAA,KAAA1E,EAAAP,EAAAsB,KAAAzD,EAAA,YAAA4C,EAAAT,EAAAsB,KAAAzD,EAAA,iBAAA0C,GAAAE,EAAA,SAAAwE,KAAApH,EAAA+F,SAAA,OAAA0B,EAAAzH,EAAA+F,UAAA,WAAAqB,KAAApH,EAAAgG,WAAA,OAAAyB,EAAAzH,EAAAgG,WAAA,SAAAtD,GAAA,QAAA0E,KAAApH,EAAA+F,SAAA,OAAA0B,EAAAzH,EAAA+F,UAAA,YAAAnD,EAAA,MAAAoC,MAAA,kDAAAoC,KAAApH,EAAAgG,WAAA,OAAAyB,EAAAzH,EAAAgG,WAAA,KAAAR,OAAA,SAAAzD,EAAAD,GAAA,QAAAE,EAAA,KAAAkE,WAAAvI,OAAA,EAAAqE,GAAA,IAAAA,EAAA,KAAAK,EAAA,KAAA6D,WAAAlE,GAAA,GAAAK,EAAAyD,QAAA,KAAAsB,MAAAjF,EAAAsB,KAAApB,EAAA,oBAAA+E,KAAA/E,EAAA2D,WAAA,KAAAhG,EAAAqC,EAAA,OAAArC,IAAA,UAAA+B,GAAA,aAAAA,IAAA/B,EAAA8F,QAAAhE,GAAAA,GAAA9B,EAAAgG,aAAAhG,EAAA,UAAAwC,EAAAxC,EAAAA,EAAAoG,WAAA,UAAA5D,EAAApB,KAAAW,EAAAS,EAAAgB,IAAA1B,EAAA9B,GAAA,KAAAkF,OAAA,YAAAS,KAAA3F,EAAAgG,WAAAlC,GAAA,KAAA4D,SAAAlF,EAAA,EAAAkF,SAAA,SAAA3F,EAAAD,GAAA,aAAAC,EAAAX,KAAA,MAAAW,EAAAyB,IAAA,gBAAAzB,EAAAX,MAAA,aAAAW,EAAAX,KAAA,KAAAuE,KAAA5D,EAAAyB,IAAA,WAAAzB,EAAAX,MAAA,KAAAoG,KAAA,KAAAhE,IAAAzB,EAAAyB,IAAA,KAAA0B,OAAA,cAAAS,KAAA,kBAAA5D,EAAAX,MAAAU,IAAA,KAAA6D,KAAA7D,GAAAgC,CAAA,EAAA6D,OAAA,SAAA5F,GAAA,QAAAD,EAAA,KAAAoE,WAAAvI,OAAA,EAAAmE,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAAkE,WAAApE,GAAA,GAAAE,EAAAgE,aAAAjE,EAAA,YAAA2F,SAAA1F,EAAAoE,WAAApE,EAAAiE,UAAAE,EAAAnE,GAAA8B,CAAA,kBAAA/B,GAAA,QAAAD,EAAA,KAAAoE,WAAAvI,OAAA,EAAAmE,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAAkE,WAAApE,GAAA,GAAAE,EAAA8D,SAAA/D,EAAA,KAAAI,EAAAH,EAAAoE,WAAA,aAAAjE,EAAAf,KAAA,KAAAiB,EAAAF,EAAAqB,IAAA2C,EAAAnE,EAAA,QAAAK,CAAA,QAAA2C,MAAA,0BAAA4C,cAAA,SAAA9F,EAAAE,EAAAG,GAAA,YAAAgD,SAAA,CAAA1C,SAAA4B,EAAAvC,GAAA4D,WAAA1D,EAAA4D,QAAAzD,GAAA,cAAA+C,SAAA,KAAA1B,IAAAzB,GAAA+B,CAAA,GAAAhC,CAAA,UAAA+F,EAAA1F,EAAAJ,EAAAD,EAAAE,EAAAK,EAAAG,EAAAE,GAAA,QAAA1C,EAAAmC,EAAAK,GAAAE,GAAAE,EAAA5C,EAAApD,KAAA,OAAAuF,GAAA,YAAAL,EAAAK,EAAA,CAAAnC,EAAAiF,KAAAlD,EAAAa,GAAAoE,QAAApC,QAAAhC,GAAAkC,KAAA9C,EAAAK,EAAA,UAAAsO,EAAAxO,GAAA,sBAAAJ,EAAA,KAAAD,EAAApE,UAAA,WAAAsJ,SAAA,SAAAhF,EAAAK,GAAA,IAAAG,EAAAL,EAAA8G,MAAAlH,EAAAD,GAAA,SAAAoH,EAAA/G,GAAA0F,EAAArF,EAAAR,EAAAK,EAAA6G,EAAAC,EAAA,OAAAhH,EAAA,UAAAgH,EAAAhH,GAAA0F,EAAArF,EAAAR,EAAAK,EAAA6G,EAAAC,EAAA,QAAAhH,EAAA,CAAA+G,OAAA,gBAAApB,EAAAhG,EAAAE,GAAA,QAAAD,EAAA,EAAAA,EAAAC,EAAArE,OAAAoE,IAAA,KAAAM,EAAAL,EAAAD,GAAAM,EAAAU,WAAAV,EAAAU,aAAA,EAAAV,EAAAW,cAAA,YAAAX,IAAAA,EAAAY,UAAA,GAAAhB,OAAAK,eAAAR,EAAAiG,EAAA1F,EAAA1F,KAAA0F,EAAA,WAAA0F,EAAAhG,GAAA,IAAA/B,EAAA,SAAA+B,GAAA,aAAA4C,EAAA5C,KAAAA,EAAA,OAAAA,EAAA,IAAAD,EAAAC,EAAAQ,OAAAyF,aAAA,YAAAlG,EAAA,KAAA9B,EAAA8B,EAAA2B,KAAA1B,EAAAC,UAAA,aAAA2C,EAAA3E,GAAA,OAAAA,EAAA,UAAAyF,UAAA,uDAAAwC,OAAAlG,EAAA,CAAAmG,CAAAnG,GAAA,gBAAA4C,EAAA3E,GAAAA,EAAAA,EAAA,GAGO,IAAM4Q,EAAY,WAsErB,OAzEJ9O,EAeI,SAAA8O,EAAYlG,GAER,GAjBR,SAAAlI,EAAAL,GAAA,KAAAK,aAAAL,GAAA,UAAAsD,UAAA,qCAeyB3J,CAAA,KAAA8U,GAEZlG,EAAQ2F,OAAU3F,EAAQX,OAA/B,CAKAhO,KAAKsU,MAAQ3F,EAAQ2F,MACrBtU,KAAK+N,MAAQY,EAAQZ,MACrB/N,KAAKgO,OAASW,EAAQX,OAGtBhO,KAAK8U,SAAsB5T,IAAhByN,EAAQmG,IAAoBnG,EAAQmG,IAAM,GACrD9U,KAAK+U,SAAWpG,EAAQoG,UAAY,GACpC/U,KAAKgV,YAAcrG,EAAQqG,aAAe,GAC1ChV,KAAKiV,mBAA0C/T,IAA1ByN,EAAQsG,eAA8BtG,EAAQsG,cACnEjV,KAAKkV,eAAkChU,IAAtByN,EAAQuG,WAA0BvG,EAAQuG,UAG3DlV,KAAKmV,UAAY,GACjBnV,KAAKoV,UAAY,GACjBpV,KAAKqV,WAAa,GAGlBrV,KAAKsV,eAAiB,KACtBtV,KAAKuV,WAAa,KAClBvV,KAAKwV,gBAAkB,KACvBxV,KAAKyV,kBAAoB,KAGzBzV,KAAK0V,SAAW/G,EAAQ+G,UAAY,EACpC1V,KAAK2V,SAAW,IAChB3V,KAAK4V,eAAiB9D,KAAK+D,KAAK7V,KAAK2V,SAAW3V,KAAK0V,UACrD1V,KAAK8V,WAAa,IAAIC,MAAM/V,KAAK4V,gBAGjC5V,KAAKgW,eAAgB,EACrBhW,KAAKiW,eAAgB,EACrBjW,KAAKkW,iBAAkB,EACvBlW,KAAKmW,sBAAwB,KAC7BnW,KAAKoW,cAAgB,EACrBpW,KAAKqW,eAAiB1H,EAAQ0H,gBAAkB,EAChDrW,KAAKsW,eAAiB,EACtBtW,KAAKuW,cAAgB,IAGrB,IAAK,IAAItS,EAAI,EAAGA,EAAIjE,KAAK4V,eAAgB3R,IACrCjE,KAAK8V,WAAW7R,GAAK,IAAI8R,MAAM/V,KAAK4V,gBAAgBY,KAAK,GAI7DxW,KAAKyW,gBAAkB,IAAIC,MAAMC,MACjC3W,KAAKsU,MAAMlR,IAAIpD,KAAKyW,iBAGpBzW,KAAK4W,MAlDL,MAFIhS,QAAQiS,MAAM,kEAqDtB,EAvEJ5Q,EAyEI,EAAArF,IAAA,OAAAC,OAAAiW,EAAAlC,EAAA9O,IAAA8E,MAIA,SAAAmM,IAAA,IAAAtV,EAAA,YAAAqE,IAAAqB,MAAA,SAAA6P,GAAA,cAAAA,EAAA3L,KAAA2L,EAAApN,MAAA,WACQ5J,KAAKmW,sBAAuB,CAAFa,EAAApN,KAAA,eAAAoN,EAAAvN,OAAA,SACnBzJ,KAAKmW,uBAAqB,OAoBlC,OAjBHnW,KAAKmW,sBAAwB,IAAIlL,QAAO,eAAAgM,EAAArC,EAAA9O,IAAA8E,MAAC,SAAAmC,EAAOlE,GAAO,OAAA/C,IAAAqB,MAAA,SAAA6F,GAAA,cAAAA,EAAA3B,KAAA2B,EAAApD,MAAA,OAO/C,OAP+CoD,EAAA3B,KAAA,EAE/CzG,QAAQC,IAAI,yCAGZpD,EAAKyV,uBAELlK,EAAApD,KAAA,EACMnI,EAAK0V,0BAAyB,OAEpC1V,EAAKuU,eAAgB,EACrBpR,QAAQC,IAAI,0CACZgE,GAAQ,GAAMmE,EAAApD,KAAA,iBAAAoD,EAAA3B,KAAA,GAAA2B,EAAAoK,GAAApK,EAAA,SAEdpI,QAAQiS,MAAM,0CAAyC7J,EAAAoK,IACvDvO,GAAQ,GAAO,yBAAAmE,EAAAxB,OAAA,GAAAuB,EAAA,mBAEtB,gBAAAsK,GAAA,OAAAJ,EAAA/J,MAAA,KAAAvL,UAAA,EAjBuC,IAiBrCqV,EAAAvN,OAAA,SAEIzJ,KAAKmW,uBAAqB,wBAAAa,EAAAxL,OAAA,GAAAuL,EAAA,UACpC,WAzBS,OAAAD,EAAA5J,MAAC,KAADvL,UAAA,IA2BV,CAAAf,IAAA,0BAAAC,OAAAyW,EAAA1C,EAAA9O,IAAA8E,MAIA,SAAA2M,IAAA,IAAAlV,EAAA,YAAAyD,IAAAqB,MAAA,SAAAqQ,GAAA,cAAAA,EAAAnM,KAAAmM,EAAA5N,MAAA,WAEQ5J,KAAKkW,gBAAiB,CAAFsB,EAAA5N,KAAA,eAAA4N,EAAA/N,OAAA,SACbzJ,KAAKiW,eAAa,cAAAuB,EAAA/N,OAAA,SAGtB,IAAIwB,SAAQ,SAACpC,GAEhB,IAAM4O,EAAc,WAGhB,OADepV,EAAKqV,qBAEhB9S,QAAQC,IAAI,iCACZxC,EAAK4T,eAAgB,EACrB5T,EAAK6T,iBAAkB,OACvBrN,GAAQ,KAKPxG,EAAK0L,OAMwB,mBAAvB1L,EAAK0L,MAAM4J,SACwB,mBAAnCtV,EAAK0L,MAAM6J,yBANlBpG,WAAWiG,EAAa,MAOxB7S,QAAQC,IAAI,6DACZxC,EAAK4T,eAAgB,EACrB5T,EAAK6T,iBAAkB,OACvBrN,GAAQ,GAMhB,EAGA4O,GACJ,KAAE,wBAAAD,EAAAhM,OAAA,GAAA+L,EAAA,UACL,WA1C4B,OAAAD,EAAApK,MAAC,KAADvL,UAAA,IA4C7B,CAAAf,IAAA,oBAAAC,MAIA,WACI,MAAsB,oBAAXgX,OACAA,OAGW,oBAAXnK,QAA0BA,OAAOmK,OACjCnK,OAAOmK,OAGX,IACX,GAEA,CAAAjX,IAAA,uBAAAC,MAGA,WAEIb,KAAK8X,sBAGL9X,KAAK+X,oBAGL/X,KAAKgY,uBACT,GAEA,CAAApX,IAAA,sBAAAC,MAGA,WAEI,IAAMoX,EAAc,IAAIvB,MAAMwB,cAA8B,IAAhBlY,KAAK2V,SAAgC,IAAhB3V,KAAK2V,UAChEwC,EAAc,IAAIzB,MAAM0B,kBAAkB,CAC5CC,MAAO,EACPC,aAAa,EACbC,QAAS,IACTC,KAAM9B,MAAM+B,WACZC,WAAW,EACXC,YAAY,IAGhB3Y,KAAK4Y,aAAe,IAAIlC,MAAMmC,KAAKZ,EAAaE,GAChDnY,KAAK4Y,aAAa5J,SAASF,GAAKgD,KAAKgH,GAAK,EAC1C9Y,KAAK4Y,aAAa/J,SAAS9G,EAAI,GAC/B/H,KAAK4Y,aAAaG,YAAc,IAChC/Y,KAAKyW,gBAAgBrT,IAAIpD,KAAK4Y,aAClC,GAEA,CAAAhY,IAAA,oBAAAC,MAGA,WAEI,IAAMmY,EAAe,IAAItC,MAAMwB,cACX,IAAhBlY,KAAK2V,SACW,IAAhB3V,KAAK2V,SACL3V,KAAK4V,eACL5V,KAAK4V,gBAIHqD,EAAiB,IAAIvC,MAAMwC,eAAe,CAC5CC,SAAU,CACNZ,QAAS,CAAE1X,MAAO,IAClBuY,eAAgB,CAAEvY,MAAO,KAE7BwY,aAAc,wUAUdC,eAAgB,4eAahBhB,aAAa,EACbE,KAAM9B,MAAM+B,WACZC,WAAW,EACXC,YAAY,IAGhB3Y,KAAKuZ,WAAa,IAAI7C,MAAMmC,KAAKG,EAAcC,GAC/CjZ,KAAKuZ,WAAWvK,SAASF,GAAKgD,KAAKgH,GAAK,EACxC9Y,KAAKuZ,WAAW1K,SAAS9G,EAAI,GAC7B/H,KAAKuZ,WAAWR,YAAc,IAC9B/Y,KAAKyW,gBAAgBrT,IAAIpD,KAAKuZ,YAI9B,IADA,IAAMC,EAAsB,IAAIC,aAAaT,EAAaU,WAAW7K,SAAS8K,OACrE1V,EAAI,EAAGA,EAAIuV,EAAoB5X,OAAQqC,IAC5CuV,EAAoBvV,GAAK,EAG7B+U,EAAaY,aAAa,aAAc,IAAIlD,MAAMmD,gBAAgBL,EAAqB,GAC3F,GAEA,CAAA5Y,IAAA,wBAAAC,MAGA,WAEI,IAAMiZ,EAAe,IAAIpD,MAAMqD,MAC/BD,EAAaE,OAAO,EAAG,GACvBF,EAAaG,OAAO,EAAG,GACvBH,EAAaG,QAAQ,EAAG,GACxBH,EAAaG,OAAO,EAAG,GAGvB,IAAMC,EAAe,IAAIxD,MAAM0B,kBAAkB,CAC7CC,MAAO,EACPG,KAAM9B,MAAM+B,WACZH,aAAa,EACbC,QAAS,GACTG,WAAW,EACXC,YAAY,IAIVwB,EAA4B,IAAhBna,KAAK2V,SACjByE,EAAe,IAAI1D,MAAMwB,cAAciC,EAAWA,GACxDna,KAAKsV,eAAiB,IAAIoB,MAAMmC,KAAKuB,EAAcF,GACnDla,KAAKsV,eAAetG,SAASF,GAAKgD,KAAKgH,GAAK,EAC5C9Y,KAAKsV,eAAezG,SAAS9G,EAAI,GACjC/H,KAAKsV,eAAeyD,YAAc,IAClC/Y,KAAKyW,gBAAgBrT,IAAIpD,KAAKsV,eAClC,GAEA,CAAA1U,IAAA,UAAAC,MAIA,WACI,OAAOb,KAAKgW,eAAiBhW,KAAKiW,iBAAmBjW,KAAK+N,KAC9D,GAEA,CAAAnN,IAAA,SAAAC,MAGA,WAEI,GAAKb,KAAKgW,cAKV,GAAKhW,KAAKiW,eAMV,GAAKjW,KAAKgO,QAAWhO,KAAK+N,MAA1B,CAKA,IAAM9L,EAAMD,KAAKC,MACjB,KAAIjC,KAAKqW,eAAiB,GAAKpU,EAAMjC,KAAKsW,eAAiBtW,KAAKqW,gBAAhE,CAGArW,KAAKsW,eAAiBrU,EAEtB,IAEI,IAAMoY,EAAYra,KAAKgO,OAAOa,SAC1ByL,EAAkB,CAAExL,EAAG,EAAGC,GAAI,GAGU,mBAAjC/O,KAAKgO,OAAOuM,mBACnBD,EAAkBta,KAAKgO,OAAOuM,oBAIlC,IAAIC,EAAaxa,KAAKmV,UAClBnV,KAAKgO,OAAOyB,SACZ+K,EAAaxa,KAAKoV,UACXpV,KAAKgO,OAAOwB,YACnBgL,EAAaxa,KAAKqV,YAGtB,IAAMoF,EAAcD,EAAa1I,KAAKgH,GAAM,IAGtC4B,EAAiB5I,KAAKiB,MAAMuH,EAAgBxL,EAAGwL,EAAgBvL,GAGrE/O,KAAK2a,iBAAiBN,EAAWK,EAAgBD,GAG7Cza,KAAKiV,eACLjV,KAAK4a,gBAAgBP,EAAWK,EAAgBD,EAExD,CAAE,MAAO5D,GAEL,IAAM5U,EAAMD,KAAKC,MACbA,EAAMjC,KAAKoW,cAAgBpW,KAAKuW,gBAChC3R,QAAQiS,MAAM,uCAAwCA,GACtD7W,KAAKoW,cAAgBnU,EAE7B,CAxCA,CANA,OAPIjC,KAAKmX,yBAsDb,GAEA,CAAAvW,IAAA,mBAAAC,MAMA,SAAiBwZ,EAAWK,EAAgBD,GAAY,IAAAI,EAAA,KAEpD,GAAK7a,KAAKiW,eAAkBjW,KAAK+N,OAK5BsM,QAAgCnZ,IAAnBwZ,QAA+CxZ,IAAfuZ,EAIlD,IAEI,IAAM5C,EAAS7X,KAAK0X,oBACpB,IAAKG,EAED,YADAjT,QAAQkW,KAAK,oEAgBjB,IAXA,IAAMC,EAAUN,EAAa,EAGvBO,EAAS,CACXlM,EAAGuL,EAAUvL,EACb/G,EAAGsS,EAAUtS,EAAI,EACjBgH,EAAGsL,EAAUtL,GAIXkM,EAAS,GACNhX,EAAI,EAAGA,EAAIjE,KAAK+U,SAAU9Q,IAAK,CACpC,IAAM6O,EAAQ4H,EAAiBK,EAAW9W,GAAKjE,KAAK+U,SAAW,GAAM0F,EACrEQ,EAAOpZ,KAAKiR,EAChB,CAGA,IAAMoI,EAAS,GAGfA,EAAOrZ,KAAK,IAAI6U,MAAMyE,QAAQ,EAAG,IAGjCF,EAAO1Y,SAAQ,SAAAuQ,GAEX,IAOIsI,EAPEC,EAAM,CACRvM,EAAGgD,KAAKkB,IAAIF,GACZ/K,EAAG,EACHgH,EAAG+C,KAAKmB,IAAIH,IAMhB,IAEI,IAAIwI,EACJ,GAA0B,mBAAfzD,EAAO0D,IACdD,EAAM,IAAIzD,EAAO0D,IAAIP,EAAQK,OAC1B,KAAIxD,EAAO0D,IAYd,OARAH,EAAW,CACPtM,EAAGkM,EAAOlM,EAAIuM,EAAIvM,EAAI+L,EAAK7F,YAC3BjG,EAAGiM,EAAOjM,EAAIsM,EAAItM,EAAI8L,EAAK7F,kBAE/BkG,EAAOrZ,KAAK,IAAI6U,MAAMyE,QAClBC,EAAStM,EAAIkM,EAAOlM,EACpBsM,EAASrM,EAAIiM,EAAOjM,IATxBuM,EAAMzD,EAAO0D,IAAG,IAAKP,EAAQK,EAYjC,CAGA,IAAIG,EAAM,KACV,GAAkC,mBAAvBX,EAAK9M,MAAM4J,QAClB6D,EAAMX,EAAK9M,MAAM4J,QAAQ2D,EAAKT,EAAK7F,aAAa,QAC7C,GAA8C,mBAAnC6F,EAAK9M,MAAM6J,oBAAoC,CAC7D,IAAM6D,EAASZ,EAAK9M,MAAM6J,oBAAoBoD,EAAQK,EAAKR,EAAK7F,aAAa,GAC7EwG,EAAMC,EAAOC,OAASD,EAAS,IACnC,CAEA,GAAID,EAAK,CAEL,IACMG,GAD6B,mBAAZH,EAAII,IAAqBJ,EAAII,MAAQJ,EAAII,KAC/Bf,EAAK7F,YAAc,IAGpDoG,EAAW,CACPtM,EAAGkM,EAAOlM,EAAIuM,EAAIvM,EAAI6M,EACtB5M,EAAGiM,EAAOjM,EAAIsM,EAAItM,EAAI4M,EAE9B,MAEIP,EAAW,CACPtM,EAAGkM,EAAOlM,EAAIuM,EAAIvM,EAAI+L,EAAK7F,YAC3BjG,EAAGiM,EAAOjM,EAAIsM,EAAItM,EAAI8L,EAAK7F,YAGvC,CAAE,MAAO6B,GACLjS,QAAQiS,MAAM,gDAAiDA,GAE/DuE,EAAW,CACPtM,EAAGkM,EAAOlM,EAAIuM,EAAIvM,EAAI+L,EAAK7F,YAC3BjG,EAAGiM,EAAOjM,EAAIsM,EAAItM,EAAI8L,EAAK7F,YAEnC,CAGAkG,EAAOrZ,KAAK,IAAI6U,MAAMyE,QAClBC,EAAStM,EAAIkM,EAAOlM,EACpBsM,EAASrM,EAAIiM,EAAOjM,IAIpB8L,EAAK5F,eACL4F,EAAKgB,gBAAgBT,EAAStM,EAAGsM,EAASrM,EAElD,IAGImM,EAAOtZ,OAAS,GAChBsZ,EAAOrZ,KAAKqZ,EAAO,GAAGY,SAI1B9b,KAAK+b,sBAAsBb,EAAQb,EACvC,CAAE,MAAOxD,GACLjS,QAAQiS,MAAM,uDAAwDA,EAC1E,CACJ,GAEA,CAAAjW,IAAA,wBAAAC,MAKA,SAAsBqa,EAAQb,GAE1B,IAAKa,GAAUA,EAAOtZ,OAAS,EAC3BgD,QAAQkW,KAAK,sEAIjB,IAEI,IAAMkB,EAAQ,IAAItF,MAAMqD,MACxBiC,EAAMhC,OAAOkB,EAAO,GAAGpM,EAAGoM,EAAO,GAAGnT,GAEpC,IAAK,IAAI9D,EAAI,EAAGA,EAAIiX,EAAOtZ,OAAQqC,IAC/B+X,EAAM/B,OAAOiB,EAAOjX,GAAG6K,EAAGoM,EAAOjX,GAAG8D,GAIxC,IAAMoS,EAA+B,EAAnBna,KAAKgV,YACjBiH,EAAa,IAAIvF,MAAMqD,MAC7BkC,EAAWjC,QAAQG,GAAYA,GAC/B8B,EAAWhC,OAAOE,GAAYA,GAC9B8B,EAAWhC,OAAOE,EAAWA,GAC7B8B,EAAWhC,QAAQE,EAAWA,GAC9B8B,EAAWhC,QAAQE,GAAYA,GAG/B8B,EAAWC,MAAMra,KAAKma,GAGlBhc,KAAKsV,iBAEDtV,KAAKsV,eAAe6G,UACpBnc,KAAKsV,eAAe6G,SAASC,UAIjCpc,KAAKsV,eAAe6G,SAAW,IAAIzF,MAAM2F,cAAcJ,GAGvDjc,KAAKsV,eAAezG,SAASyN,IAAIjC,EAAUvL,EAAG,GAAKuL,EAAUtL,GAErE,CAAE,MAAO8H,GACLjS,QAAQiS,MAAM,uDAAwDA,EAC1E,CACJ,GAEA,CAAAjW,IAAA,kBAAAC,MAKA,SAAgBiO,EAAGC,GAEf,IAAMwN,EAAevc,KAAK2V,SAAW,EAC/B6G,EAAQ1K,KAAK2K,OAAO3N,EAAIyN,GAAgBvc,KAAK0V,UAC7CgH,EAAQ5K,KAAK2K,OAAO1N,EAAIwN,GAAgBvc,KAAK0V,UAGnD,GAAI8G,GAAS,GAAKA,EAAQxc,KAAK4V,gBAC3B8G,GAAS,GAAKA,EAAQ1c,KAAK4V,eAAgB,CAG3C5V,KAAK8V,WAAW0G,GAAOE,GAAS,EAKhC,IAFA,IAESC,GAFM,EAEQA,GAFR,EAEsBA,IACjC,IAAK,IAAIC,GAHE,EAGYA,GAHZ,EAG0BA,IAAM,CACvC,IAAMC,EAAKL,EAAQG,EACbG,EAAKJ,EAAQE,EAEfC,GAAM,GAAKA,EAAK7c,KAAK4V,gBACrBkH,GAAM,GAAKA,EAAK9c,KAAK4V,iBAGrB5V,KAAK8V,WAAW+G,GAAIC,GAAMhL,KAAKiL,IAAI/c,KAAK8V,WAAW+G,GAAIC,GAAK,IAEpE,CAER,CACJ,GAEA,CAAAlc,IAAA,kBAAAC,MAMA,SAAgBwZ,EAAWK,EAAgBD,GACvC,GAAKza,KAAKiV,eAAkBjV,KAAKuZ,WAEjC,IAEQvZ,KAAK4Y,cAAgB5Y,KAAK4Y,aAAaoE,QAiB/C,CAAE,MAAOnG,GACLjS,QAAQiS,MAAM,oDAAqDA,EACvE,CACJ,GAEA,CAAAjW,IAAA,SAAAC,MAIA,SAAOiU,GACH9U,KAAK8U,IAAMA,CACf,GAEA,CAAAlU,IAAA,iBAAAC,MAIA,SAAeoc,GACXjd,KAAKgV,YAAciI,CACvB,GAEA,CAAArc,IAAA,cAAAC,MAIA,SAAY8Y,GACR3Z,KAAK+U,SAAW4E,CACpB,GAEA,CAAA/Y,IAAA,cAAAC,MAGA,WACI,GAAKb,KAAKiV,cAAV,CAGA,IAAK,IAAIhR,EAAI,EAAGA,EAAIjE,KAAK4V,eAAgB3R,IACrC,IAAK,IAAIiZ,EAAI,EAAGA,EAAIld,KAAK4V,eAAgBsH,IACrCld,KAAK8V,WAAW7R,GAAGiZ,GAAK,EAIhCtY,QAAQC,IAAI,qCATmB,CAUnC,GAEA,CAAAjE,IAAA,UAAAC,MAGD,WACC,IAEQb,KAAKsV,iBACDtV,KAAKsV,eAAe6G,UACpBnc,KAAKsV,eAAe6G,SAASC,UAE7Bpc,KAAKsV,eAAe0H,UACpBhd,KAAKsV,eAAe0H,SAASZ,UAEjCpc,KAAKyW,gBAAgBtT,OAAOnD,KAAKsV,iBAIjCtV,KAAKuZ,aACDvZ,KAAKuZ,WAAW4C,UAChBnc,KAAKuZ,WAAW4C,SAASC,UAEzBpc,KAAKuZ,WAAWyD,UAChBhd,KAAKuZ,WAAWyD,SAASZ,UAE7Bpc,KAAKyW,gBAAgBtT,OAAOnD,KAAKuZ,aAIjCvZ,KAAK4Y,eACD5Y,KAAK4Y,aAAauD,UAClBnc,KAAK4Y,aAAauD,SAASC,UAE3Bpc,KAAK4Y,aAAaoE,UAClBhd,KAAK4Y,aAAaoE,SAASZ,UAE/Bpc,KAAKyW,gBAAgBtT,OAAOnD,KAAK4Y,eAIjC5Y,KAAKyW,iBACLzW,KAAKsU,MAAMnR,OAAOnD,KAAKyW,iBAI3BzW,KAAKsV,eAAiB,KACtBtV,KAAKuZ,WAAa,KAClBvZ,KAAK4Y,aAAe,KACpB5Y,KAAKyW,gBAAkB,KACvBzW,KAAK8V,WAAa,GAClB9V,KAAKgW,eAAgB,EACrBhW,KAAKiW,eAAgB,EACrBjW,KAAKkW,iBAAkB,EACvBlW,KAAKmW,sBAAwB,KAE7BvR,QAAQC,IAAI,4CAChB,CAAE,MAAOgS,GACLjS,QAAQiS,MAAM,kDAAmDA,EACrE,CACJ,IA1tBA5Q,GAAA8F,EAAAhG,EAAAI,UAAAF,GAAAC,OAAAK,eAAAR,EAAA,aAAAmB,UAAA,IAAAnB,EAAA,IAAAA,EAAAE,EAwGIqR,EA/BAR,CAipBH,CAvtBwB,sPCHzBhR,EAAA,kBAAAC,CAAA,MAAAC,EAAAD,EAAA,GAAAE,EAAAC,OAAAC,UAAAC,EAAAH,EAAAI,eAAAC,EAAAJ,OAAAK,gBAAA,SAAAP,EAAAD,EAAAE,GAAAD,EAAAD,GAAAE,EAAApF,KAAA,EAAAoD,EAAA,mBAAAuC,OAAAA,OAAA,GAAAC,EAAAxC,EAAAyC,UAAA,aAAAC,EAAA1C,EAAA2C,eAAA,kBAAAC,EAAA5C,EAAA6C,aAAA,yBAAAC,EAAAf,EAAAD,EAAAE,GAAA,OAAAC,OAAAK,eAAAP,EAAAD,EAAA,CAAAlF,MAAAoF,EAAAe,YAAA,EAAAC,cAAA,EAAAC,UAAA,IAAAlB,EAAAD,EAAA,KAAAgB,EAAA,aAAAf,GAAAe,EAAA,SAAAf,EAAAD,EAAAE,GAAA,OAAAD,EAAAD,GAAAE,CAAA,WAAAkB,EAAAnB,EAAAD,EAAAE,EAAAG,GAAA,IAAAnC,EAAA8B,GAAAA,EAAAI,qBAAAiB,EAAArB,EAAAqB,EAAAX,EAAAP,OAAAmB,OAAApD,EAAAkC,WAAAQ,EAAA,IAAAW,EAAAlB,GAAA,WAAAE,EAAAG,EAAA,WAAA5F,MAAA0G,EAAAvB,EAAAC,EAAAU,KAAAF,CAAA,UAAAe,EAAAxB,EAAAD,EAAAE,GAAA,WAAAZ,KAAA,SAAAoC,IAAAzB,EAAA0B,KAAA3B,EAAAE,GAAA,OAAAD,GAAA,OAAAX,KAAA,QAAAoC,IAAAzB,EAAA,EAAAD,EAAAoB,KAAAA,EAAA,IAAAQ,EAAA,iBAAAC,EAAA,iBAAAC,EAAA,YAAAC,EAAA,YAAAC,EAAA,YAAAX,IAAA,UAAAY,IAAA,UAAAC,IAAA,KAAAC,EAAA,GAAAnB,EAAAmB,EAAAzB,GAAA,8BAAA0B,EAAAjC,OAAAkC,eAAAC,EAAAF,GAAAA,EAAAA,EAAAG,EAAA,MAAAD,GAAAA,IAAApC,GAAAG,EAAAsB,KAAAW,EAAA5B,KAAAyB,EAAAG,GAAA,IAAAE,EAAAN,EAAA9B,UAAAiB,EAAAjB,UAAAD,OAAAmB,OAAAa,GAAA,SAAAM,EAAAxC,GAAA,0BAAAzD,SAAA,SAAAwD,GAAAgB,EAAAf,EAAAD,GAAA,SAAAC,GAAA,YAAAyC,QAAA1C,EAAAC,EAAA,gBAAA0C,EAAA1C,EAAAD,GAAA,SAAA4C,EAAA1C,EAAAK,EAAArC,EAAAwC,GAAA,IAAAE,EAAAa,EAAAxB,EAAAC,GAAAD,EAAAM,GAAA,aAAAK,EAAAtB,KAAA,KAAAwB,EAAAF,EAAAc,IAAAE,EAAAd,EAAAhG,MAAA,OAAA8G,GAAA,UAAAiB,EAAAjB,IAAAvB,EAAAsB,KAAAC,EAAA,WAAA5B,EAAA8C,QAAAlB,EAAAmB,SAAAC,MAAA,SAAA/C,GAAA2C,EAAA,OAAA3C,EAAA/B,EAAAwC,EAAA,aAAAT,GAAA2C,EAAA,QAAA3C,EAAA/B,EAAAwC,EAAA,IAAAV,EAAA8C,QAAAlB,GAAAoB,MAAA,SAAA/C,GAAAa,EAAAhG,MAAAmF,EAAA/B,EAAA4C,EAAA,aAAAb,GAAA,OAAA2C,EAAA,QAAA3C,EAAA/B,EAAAwC,EAAA,IAAAA,EAAAE,EAAAc,IAAA,KAAAxB,EAAAK,EAAA,gBAAAzF,MAAA,SAAAmF,EAAAI,GAAA,SAAA4C,IAAA,WAAAjD,GAAA,SAAAA,EAAAE,GAAA0C,EAAA3C,EAAAI,EAAAL,EAAAE,EAAA,WAAAA,EAAAA,EAAAA,EAAA8C,KAAAC,EAAAA,GAAAA,GAAA,aAAAzB,EAAAxB,EAAAE,EAAAG,GAAA,IAAAE,EAAAqB,EAAA,gBAAA1D,EAAAwC,GAAA,GAAAH,IAAAuB,EAAA,MAAAoB,MAAA,mCAAA3C,IAAAwB,EAAA,cAAA7D,EAAA,MAAAwC,EAAA,OAAA5F,MAAAmF,EAAAkD,MAAA,OAAA9C,EAAA+C,OAAAlF,EAAAmC,EAAAqB,IAAAhB,IAAA,KAAAE,EAAAP,EAAAgD,SAAA,GAAAzC,EAAA,KAAAE,EAAAwC,EAAA1C,EAAAP,GAAA,GAAAS,EAAA,IAAAA,IAAAkB,EAAA,gBAAAlB,CAAA,cAAAT,EAAA+C,OAAA/C,EAAAkD,KAAAlD,EAAAmD,MAAAnD,EAAAqB,SAAA,aAAArB,EAAA+C,OAAA,IAAA7C,IAAAqB,EAAA,MAAArB,EAAAwB,EAAA1B,EAAAqB,IAAArB,EAAAoD,kBAAApD,EAAAqB,IAAA,gBAAArB,EAAA+C,QAAA/C,EAAAqD,OAAA,SAAArD,EAAAqB,KAAAnB,EAAAuB,EAAA,IAAAK,EAAAV,EAAAzB,EAAAE,EAAAG,GAAA,cAAA8B,EAAA7C,KAAA,IAAAiB,EAAAF,EAAA8C,KAAApB,EAAAF,EAAAM,EAAAT,MAAAM,EAAA,gBAAAlH,MAAAqH,EAAAT,IAAAyB,KAAA9C,EAAA8C,KAAA,WAAAhB,EAAA7C,OAAAiB,EAAAwB,EAAA1B,EAAA+C,OAAA,QAAA/C,EAAAqB,IAAAS,EAAAT,IAAA,YAAA4B,EAAAtD,EAAAE,GAAA,IAAAG,EAAAH,EAAAkD,OAAA7C,EAAAP,EAAAW,SAAAN,GAAA,GAAAE,IAAAN,EAAA,OAAAC,EAAAmD,SAAA,eAAAhD,GAAAL,EAAAW,SAAA,SAAAT,EAAAkD,OAAA,SAAAlD,EAAAwB,IAAAzB,EAAAqD,EAAAtD,EAAAE,GAAA,UAAAA,EAAAkD,SAAA,WAAA/C,IAAAH,EAAAkD,OAAA,QAAAlD,EAAAwB,IAAA,IAAAiC,UAAA,oCAAAtD,EAAA,aAAA2B,EAAA,IAAA9D,EAAAuD,EAAAlB,EAAAP,EAAAW,SAAAT,EAAAwB,KAAA,aAAAxD,EAAAoB,KAAA,OAAAY,EAAAkD,OAAA,QAAAlD,EAAAwB,IAAAxD,EAAAwD,IAAAxB,EAAAmD,SAAA,KAAArB,EAAA,IAAAtB,EAAAxC,EAAAwD,IAAA,OAAAhB,EAAAA,EAAAyC,MAAAjD,EAAAF,EAAA4D,YAAAlD,EAAA5F,MAAAoF,EAAA2D,KAAA7D,EAAA8D,QAAA,WAAA5D,EAAAkD,SAAAlD,EAAAkD,OAAA,OAAAlD,EAAAwB,IAAAzB,GAAAC,EAAAmD,SAAA,KAAArB,GAAAtB,GAAAR,EAAAkD,OAAA,QAAAlD,EAAAwB,IAAA,IAAAiC,UAAA,oCAAAzD,EAAAmD,SAAA,KAAArB,EAAA,UAAA+B,EAAA9D,GAAA,IAAAD,EAAA,CAAAgE,OAAA/D,EAAA,SAAAA,IAAAD,EAAAiE,SAAAhE,EAAA,SAAAA,IAAAD,EAAAkE,WAAAjE,EAAA,GAAAD,EAAAmE,SAAAlE,EAAA,SAAAmE,WAAAtI,KAAAkE,EAAA,UAAAqE,EAAApE,GAAA,IAAAD,EAAAC,EAAAqE,YAAA,GAAAtE,EAAAV,KAAA,gBAAAU,EAAA0B,IAAAzB,EAAAqE,WAAAtE,CAAA,UAAAuB,EAAAtB,GAAA,KAAAmE,WAAA,EAAAJ,OAAA,SAAA/D,EAAAzD,QAAAuH,EAAA,WAAAQ,OAAA,YAAAhC,EAAAvC,GAAA,GAAAA,GAAA,KAAAA,EAAA,KAAAE,EAAAF,EAAAU,GAAA,GAAAR,EAAA,OAAAA,EAAAyB,KAAA3B,GAAA,sBAAAA,EAAA6D,KAAA,OAAA7D,EAAA,IAAAwE,MAAAxE,EAAAnE,QAAA,KAAA0E,GAAA,EAAArC,EAAA,SAAA2F,IAAA,OAAAtD,EAAAP,EAAAnE,QAAA,GAAAwE,EAAAsB,KAAA3B,EAAAO,GAAA,OAAAsD,EAAA/I,MAAAkF,EAAAO,GAAAsD,EAAAV,MAAA,EAAAU,EAAA,OAAAA,EAAA/I,MAAAmF,EAAA4D,EAAAV,MAAA,EAAAU,CAAA,SAAA3F,EAAA2F,KAAA3F,CAAA,YAAAyF,UAAAd,EAAA7C,GAAA,2BAAAiC,EAAA7B,UAAA8B,EAAA3B,EAAAiC,EAAA,eAAA1H,MAAAoH,EAAAhB,cAAA,IAAAX,EAAA2B,EAAA,eAAApH,MAAAmH,EAAAf,cAAA,IAAAe,EAAAwC,YAAAzD,EAAAkB,EAAApB,EAAA,qBAAAd,EAAA0E,oBAAA,SAAAzE,GAAA,IAAAD,EAAA,mBAAAC,GAAAA,EAAA0E,YAAA,QAAA3E,IAAAA,IAAAiC,GAAA,uBAAAjC,EAAAyE,aAAAzE,EAAA4E,MAAA,EAAA5E,EAAA6E,KAAA,SAAA5E,GAAA,OAAAE,OAAA2E,eAAA3E,OAAA2E,eAAA7E,EAAAiC,IAAAjC,EAAA8E,UAAA7C,EAAAlB,EAAAf,EAAAa,EAAA,sBAAAb,EAAAG,UAAAD,OAAAmB,OAAAkB,GAAAvC,CAAA,EAAAD,EAAAgF,MAAA,SAAA/E,GAAA,OAAA8C,QAAA9C,EAAA,EAAAwC,EAAAE,EAAAvC,WAAAY,EAAA2B,EAAAvC,UAAAQ,GAAA,0BAAAZ,EAAA2C,cAAAA,EAAA3C,EAAAiF,MAAA,SAAAhF,EAAAC,EAAAG,EAAAE,EAAArC,QAAA,IAAAA,IAAAA,EAAAgH,SAAA,IAAAxE,EAAA,IAAAiC,EAAAvB,EAAAnB,EAAAC,EAAAG,EAAAE,GAAArC,GAAA,OAAA8B,EAAA0E,oBAAAxE,GAAAQ,EAAAA,EAAAmD,OAAAb,MAAA,SAAA/C,GAAA,OAAAA,EAAAkD,KAAAlD,EAAAnF,MAAA4F,EAAAmD,MAAA,KAAApB,EAAAD,GAAAxB,EAAAwB,EAAA1B,EAAA,aAAAE,EAAAwB,EAAA9B,GAAA,0BAAAM,EAAAwB,EAAA,qDAAAxC,EAAAmF,KAAA,SAAAlF,GAAA,IAAAD,EAAAG,OAAAF,GAAAC,EAAA,WAAAG,KAAAL,EAAAE,EAAApE,KAAAuE,GAAA,OAAAH,EAAAkF,UAAA,SAAAvB,IAAA,KAAA3D,EAAArE,QAAA,KAAAoE,EAAAC,EAAAmF,MAAA,GAAApF,KAAAD,EAAA,OAAA6D,EAAA/I,MAAAmF,EAAA4D,EAAAV,MAAA,EAAAU,CAAA,QAAAA,EAAAV,MAAA,EAAAU,CAAA,GAAA7D,EAAAuC,OAAAA,EAAAhB,EAAAnB,UAAA,CAAAuE,YAAApD,EAAAgD,MAAA,SAAAvE,GAAA,QAAAsF,KAAA,OAAAzB,KAAA,OAAAN,KAAA,KAAAC,MAAAvD,EAAA,KAAAkD,MAAA,OAAAE,SAAA,UAAAD,OAAA,YAAA1B,IAAAzB,EAAA,KAAAmE,WAAA5H,QAAA6H,IAAArE,EAAA,QAAAE,KAAA,WAAAA,EAAAqF,OAAA,IAAAlF,EAAAsB,KAAA,KAAAzB,KAAAsE,OAAAtE,EAAAsF,MAAA,WAAAtF,GAAAD,EAAA,EAAAwF,KAAA,gBAAAtC,MAAA,MAAAlD,EAAA,KAAAmE,WAAA,GAAAE,WAAA,aAAArE,EAAAX,KAAA,MAAAW,EAAAyB,IAAA,YAAAgE,IAAA,EAAAjC,kBAAA,SAAAzD,GAAA,QAAAmD,KAAA,MAAAnD,EAAA,IAAAE,EAAA,cAAAyF,EAAAtF,EAAAE,GAAA,OAAAG,EAAApB,KAAA,QAAAoB,EAAAgB,IAAA1B,EAAAE,EAAA2D,KAAAxD,EAAAE,IAAAL,EAAAkD,OAAA,OAAAlD,EAAAwB,IAAAzB,KAAAM,CAAA,SAAAA,EAAA,KAAA6D,WAAAvI,OAAA,EAAA0E,GAAA,IAAAA,EAAA,KAAArC,EAAA,KAAAkG,WAAA7D,GAAAG,EAAAxC,EAAAoG,WAAA,YAAApG,EAAA8F,OAAA,OAAA2B,EAAA,UAAAzH,EAAA8F,QAAA,KAAAsB,KAAA,KAAA1E,EAAAP,EAAAsB,KAAAzD,EAAA,YAAA4C,EAAAT,EAAAsB,KAAAzD,EAAA,iBAAA0C,GAAAE,EAAA,SAAAwE,KAAApH,EAAA+F,SAAA,OAAA0B,EAAAzH,EAAA+F,UAAA,WAAAqB,KAAApH,EAAAgG,WAAA,OAAAyB,EAAAzH,EAAAgG,WAAA,SAAAtD,GAAA,QAAA0E,KAAApH,EAAA+F,SAAA,OAAA0B,EAAAzH,EAAA+F,UAAA,YAAAnD,EAAA,MAAAoC,MAAA,kDAAAoC,KAAApH,EAAAgG,WAAA,OAAAyB,EAAAzH,EAAAgG,WAAA,KAAAR,OAAA,SAAAzD,EAAAD,GAAA,QAAAE,EAAA,KAAAkE,WAAAvI,OAAA,EAAAqE,GAAA,IAAAA,EAAA,KAAAK,EAAA,KAAA6D,WAAAlE,GAAA,GAAAK,EAAAyD,QAAA,KAAAsB,MAAAjF,EAAAsB,KAAApB,EAAA,oBAAA+E,KAAA/E,EAAA2D,WAAA,KAAAhG,EAAAqC,EAAA,OAAArC,IAAA,UAAA+B,GAAA,aAAAA,IAAA/B,EAAA8F,QAAAhE,GAAAA,GAAA9B,EAAAgG,aAAAhG,EAAA,UAAAwC,EAAAxC,EAAAA,EAAAoG,WAAA,UAAA5D,EAAApB,KAAAW,EAAAS,EAAAgB,IAAA1B,EAAA9B,GAAA,KAAAkF,OAAA,YAAAS,KAAA3F,EAAAgG,WAAAlC,GAAA,KAAA4D,SAAAlF,EAAA,EAAAkF,SAAA,SAAA3F,EAAAD,GAAA,aAAAC,EAAAX,KAAA,MAAAW,EAAAyB,IAAA,gBAAAzB,EAAAX,MAAA,aAAAW,EAAAX,KAAA,KAAAuE,KAAA5D,EAAAyB,IAAA,WAAAzB,EAAAX,MAAA,KAAAoG,KAAA,KAAAhE,IAAAzB,EAAAyB,IAAA,KAAA0B,OAAA,cAAAS,KAAA,kBAAA5D,EAAAX,MAAAU,IAAA,KAAA6D,KAAA7D,GAAAgC,CAAA,EAAA6D,OAAA,SAAA5F,GAAA,QAAAD,EAAA,KAAAoE,WAAAvI,OAAA,EAAAmE,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAAkE,WAAApE,GAAA,GAAAE,EAAAgE,aAAAjE,EAAA,YAAA2F,SAAA1F,EAAAoE,WAAApE,EAAAiE,UAAAE,EAAAnE,GAAA8B,CAAA,kBAAA/B,GAAA,QAAAD,EAAA,KAAAoE,WAAAvI,OAAA,EAAAmE,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAAkE,WAAApE,GAAA,GAAAE,EAAA8D,SAAA/D,EAAA,KAAAI,EAAAH,EAAAoE,WAAA,aAAAjE,EAAAf,KAAA,KAAAiB,EAAAF,EAAAqB,IAAA2C,EAAAnE,EAAA,QAAAK,CAAA,QAAA2C,MAAA,0BAAA4C,cAAA,SAAA9F,EAAAE,EAAAG,GAAA,YAAAgD,SAAA,CAAA1C,SAAA4B,EAAAvC,GAAA4D,WAAA1D,EAAA4D,QAAAzD,GAAA,cAAA+C,SAAA,KAAA1B,IAAAzB,GAAA+B,CAAA,GAAAhC,CAAA,UAAA+F,EAAA1F,EAAAJ,EAAAD,EAAAE,EAAAK,EAAAG,EAAAE,GAAA,QAAA1C,EAAAmC,EAAAK,GAAAE,GAAAE,EAAA5C,EAAApD,KAAA,OAAAuF,GAAA,YAAAL,EAAAK,EAAA,CAAAnC,EAAAiF,KAAAlD,EAAAa,GAAAoE,QAAApC,QAAAhC,GAAAkC,KAAA9C,EAAAK,EAAA,UAAAsO,EAAAxO,GAAA,sBAAAJ,EAAA,KAAAD,EAAApE,UAAA,WAAAsJ,SAAA,SAAAhF,EAAAK,GAAA,IAAAG,EAAAL,EAAA8G,MAAAlH,EAAAD,GAAA,SAAAoH,EAAA/G,GAAA0F,EAAArF,EAAAR,EAAAK,EAAA6G,EAAAC,EAAA,OAAAhH,EAAA,UAAAgH,EAAAhH,GAAA0F,EAAArF,EAAAR,EAAAK,EAAA6G,EAAAC,EAAA,QAAAhH,EAAA,CAAA+G,OAAA,gBAAApB,EAAAhG,EAAAE,GAAA,QAAAD,EAAA,EAAAA,EAAAC,EAAArE,OAAAoE,IAAA,KAAAM,EAAAL,EAAAD,GAAAM,EAAAU,WAAAV,EAAAU,aAAA,EAAAV,EAAAW,cAAA,YAAAX,IAAAA,EAAAY,UAAA,GAAAhB,OAAAK,eAAAR,EAAAiG,EAAA1F,EAAA1F,KAAA0F,EAAA,WAAA0F,EAAAhG,GAAA,IAAA/B,EAAA,SAAA+B,GAAA,aAAA4C,EAAA5C,KAAAA,EAAA,OAAAA,EAAA,IAAAD,EAAAC,EAAAQ,OAAAyF,aAAA,YAAAlG,EAAA,KAAA9B,EAAA8B,EAAA2B,KAAA1B,EAAAC,UAAA,aAAA2C,EAAA3E,GAAA,OAAAA,EAAA,UAAAyF,UAAA,uDAAAwC,OAAAlG,EAAA,CAAAmG,CAAAnG,GAAA,gBAAA4C,EAAA3E,GAAAA,EAAAA,EAAA,GAQO,IAAMkZ,EAAS,WAelB,OAvBJpX,EAYI,SAAAoX,EAAY9Q,IAZhB,SAAA5F,EAAAL,GAAA,KAAAK,aAAAL,GAAA,UAAAsD,UAAA,qCAYsB3J,CAAA,KAAAod,GACdnd,KAAKqM,KAAOA,EAGZrM,KAAKgO,OAAS,KACdhO,KAAKod,SAAW,GAGhBpd,KAAKqd,aAAe,IACxB,EArBJpX,EAuBI,EAAArF,IAAA,aAAAC,OAAAyc,EAAA1I,EAAA9O,IAAA8E,MAGA,SAAAmC,IAAA,OAAAjH,IAAAqB,MAAA,SAAA6F,GAAA,cAAAA,EAAA3B,KAAA2B,EAAApD,MAAA,OAeQ,OAfRoD,EAAA3B,KAAA,EAGQrL,KAAKud,kBAGLvd,KAAKgO,OAAS,IAAIU,EAAO,CACrBG,SAAU,CAAEC,EAAG,EAAG/G,EAAG,EAAGgH,EAAG,GAC3ByB,SAAUxQ,KAAKqM,KAAKmE,SACpBlC,MAAOtO,KAAKqM,KAAKiC,MACjBjC,KAAMrM,KAAKqM,OAGfxH,GAAI,gBAEJmI,EAAApD,KAAA,EACM5J,KAAKwd,mBAAkB,cAAAxQ,EAAAvD,OAAA,UAEtB,GAAI,OAEiD,OAFjDuD,EAAA3B,KAAA,EAAA2B,EAAAoK,GAAApK,EAAA,SAEXnI,GAAI,uCAADxD,OAAwC2L,EAAAoK,GAAM5V,UAAWwL,EAAAvD,OAAA,UACrD,GAAK,yBAAAuD,EAAAxB,OAAA,GAAAuB,EAAA,kBAEnB,WAvBe,OAAAuQ,EAAApQ,MAAC,KAADvL,UAAA,IAyBhB,CAAAf,IAAA,SAAAC,MAIA,SAAOqS,GAEClT,KAAKgO,QACLhO,KAAKgO,OAAOC,OAAOiF,GAIvBlT,KAAKod,SAAS7a,SAAQ,SAAAkb,GACdA,EAAOxP,QACPwP,EAAOxP,OAAOiF,EAEtB,GACJ,GAEA,CAAAtS,IAAA,cAAAC,MAIA,SAAYqS,GAERlT,KAAKod,SAAS7a,SAAQ,SAAAkb,GACdA,EAAOC,aACPD,EAAOC,YAAYxK,EAE3B,GACJ,GAEA,CAAAtS,IAAA,mBAAAC,OAAA8c,EAAA/I,EAAA9O,IAAA8E,MAGA,SAAAmM,IAAA,IAAAsG,EAAA,OAAAvX,IAAAqB,MAAA,SAAA6P,GAAA,cAAAA,EAAA3L,KAAA2L,EAAApN,MAAA,UAAAoN,EAAA3L,KAAA,EAEarL,KAAKqM,KAAKmE,UAAaxQ,KAAKqM,KAAKmE,SAAS8D,OAAUtU,KAAKgO,OAAM,CAAAgJ,EAAApN,KAAA,cAC1D,IAAIX,MAAM,kEAAiE,OAiBrF,OAdApE,GAAI,sCAGEwY,EAAe,IAAIxI,EAAa,CAClCP,MAAOtU,KAAKqM,KAAKmE,SAAS8D,MAC1BvG,MAAO/N,KAAKqM,KAAKuR,QAAQC,WACzB7P,OAAQhO,KAAKgO,OACb8G,IAAK,GACLC,SAAU,GACVC,YAAa,GACbC,eAAe,EACfC,WAAW,IAGf8B,EAAApN,KAAA,EACMyT,EAAazG,OAAM,OAWiB,OARrCyG,EAAaS,WACdjZ,GAAI,8EAIR7E,KAAKqM,KAAKmE,SAAS6M,aAAeA,EAClCrd,KAAKqd,aAAeA,EAEpBxY,GAAI,sCAAsCmS,EAAAvN,OAAA,UACnC,GAAI,QAEqD,OAFrDuN,EAAA3L,KAAA,GAAA2L,EAAAI,GAAAJ,EAAA,SAEXnS,GAAI,2CAADxD,OAA4C2V,EAAAI,GAAM5V,UAAWwV,EAAAvN,OAAA,UACzD,GAAK,yBAAAuN,EAAAxL,OAAA,GAAAuL,EAAA,mBAEnB,WAtCqB,OAAA4G,EAAAzQ,MAAC,KAADvL,UAAA,IAwCtB,CAAAf,IAAA,kBAAAC,MAGA,WAAkB,IAAAY,EAAA,KACd,IACI,KAAKzB,KAAKqM,KAAKuR,SAAY5d,KAAKqM,KAAKuR,QAAQE,WAAc9d,KAAKqM,KAAKmE,UAAaxQ,KAAKqM,KAAKmE,SAAS8D,OAEjG,YADAzP,GAAI,mDAIRA,GAAI,6BAGJ,IAAMkZ,EAAe,IAAIrH,MAAMsH,qBAAqB,CAChD3F,MAAO,QACP4F,UAAW,GACXC,UAAW,KAITC,EAAa,SAACrP,EAAGC,EAAG3N,EAAOgd,GAAsB,IAAfzL,EAAMhR,UAAAC,OAAA,QAAAV,IAAAS,UAAA,GAAAA,UAAA,GAAG,EAEvCwa,EAAW,IAAIzF,MAAM2H,YAAYjd,EAAOuR,EAAQyL,GAChD3N,EAAO,IAAIiG,MAAMmC,KAAKsD,EAAU4B,GAetC,OAZAtN,EAAK5B,SAASyN,IAAIxN,EAAG6D,EAAS,EAAG5D,GAGjCtN,EAAK4K,KAAKmE,SAAS8D,MAAMlR,IAAIqN,GAG7BhP,EAAK4K,KAAKuR,QAAQU,eAAe,CAC7BzP,SAAU,CAAEC,EAAAA,EAAG/G,EAAG4K,EAAS,EAAG5D,EAAAA,GAC9BwP,KAAM,CAAEzP,EAAG1N,EAAO2G,EAAG4K,EAAQ5D,EAAGqP,GAChCI,OAAQ/N,IAGLA,CACX,EAIA0N,EAAW,GAAI,GAAI,GAAI,GACvBA,GAAY,GAAI,EAAG,EAAG,IACtBA,EAAW,GAAI,EAAG,EAAG,IACrBA,EAAW,EAAG,GAAI,GAAI,GAGtBA,GAAY,IAAK,GAAI,EAAG,IACxBA,EAAW,GAAI,GAAI,GAAI,GACvBA,EAAW,IAAK,EAAG,EAAG,IACtBA,GAAY,EAAG,EAAG,GAAI,GAGtBA,GAAY,IAAK,GAAI,EAAG,GACxBA,EAAW,IAAK,GAAI,EAAG,GACvBA,EAAW,GAAI,GAAI,EAAG,GACtBA,GAAY,GAAI,GAAI,EAAG,GAEvBtZ,GAAI,yBACR,CAAE,MAAOgS,GACLhS,GAAI,kCAADxD,OAAmCwV,EAAMrV,SAChD,CACJ,GAEA,CAAAZ,IAAA,YAAAC,MAIA,SAAU4c,GACNzd,KAAKod,SAASvb,KAAK4b,EACvB,GAEA,CAAA7c,IAAA,eAAAC,MAIA,SAAa4c,GACT,IAAMvY,EAAQlF,KAAKod,SAASqB,QAAQhB,IACrB,IAAXvY,GACAlF,KAAKod,SAASsB,OAAOxZ,EAAO,EAEpC,GAEA,CAAAtE,IAAA,QAAAC,MAGA,WAEIb,KAAKod,SAAW,GAGhBpd,KAAKgO,OAAS,KAGVhO,KAAKqd,eACLrd,KAAKqd,aAAajB,UAClBpc,KAAKqd,aAAe,MAGpBrd,KAAKqM,KAAKmE,UAAYxQ,KAAKqM,KAAKmE,SAAS6M,eACzCrd,KAAKqM,KAAKmE,SAAS6M,aAAe,KAE1C,IArOJpX,GAAA8F,EAAAhG,EAAAI,UAAAF,GAAAC,OAAAK,eAAAR,EAAA,aAAAmB,UAAA,IAAAnB,EAAA,IAAAA,EAAAE,EAkFI0X,EA3DAL,CA8MC,CA7NiB,qqBCFf,IAAMqB,EAAS,WAoBlB,SAhBA,SAAAA,EAAYtS,gGAAMtM,CAAA,KAAA4e,GACd3e,KAAKqM,KAAOA,EAGZrM,KAAKwP,WAAY,EACjBxP,KAAK4e,WAAY,EACjB5e,KAAK6e,UAAW,EAGhB7e,KAAK8N,aAAe,UAGpB9N,KAAK8e,iBAAkB,EACvB9e,KAAK+e,yBAA0B,CACnC,KAEA,EAAAne,IAAA,cAAAC,MAGA,WACQb,KAAKwP,UACLxP,KAAKgf,YAELhf,KAAKif,YAEb,GAEA,CAAAre,IAAA,YAAAC,MAGA,WACIb,KAAKwP,WAAY,EACjBxP,KAAK6e,UAAW,EAEZ7e,KAAKqM,KAAKiC,OACVtO,KAAKqM,KAAKiC,MAAMC,sBAIpB1J,GAAI,gBACR,GAEA,CAAAjE,IAAA,aAAAC,MAGA,WACIb,KAAKwP,WAAY,EACjBxP,KAAK6e,UAAW,EAEZ7e,KAAKqM,KAAKiC,OACVtO,KAAKqM,KAAKiC,MAAMG,qBAIpB5J,GAAI,qBAGJ7E,KAAKqM,KAAK6S,cAAgBC,YAAYld,MACtCmd,sBAAsBpf,KAAKqM,KAAK4B,OACpC,GAEA,CAAArN,IAAA,UAAAC,MAGA,WACIb,KAAKwP,WAAY,EACjBxP,KAAK8N,aAAe,OAGhB9N,KAAKqM,KAAK0B,OACV/N,KAAKqM,KAAK0B,MAAMsR,QAIhBrf,KAAKqM,KAAKuR,SACV5d,KAAKqM,KAAKuR,QAAQxB,UAIlBpc,KAAKqM,KAAKiT,KACNtf,KAAKqM,KAAKiT,GAAG7S,YACbzM,KAAKqM,KAAKiT,GAAG7S,WAAWvJ,UAAUE,IAAI,UAEtCpD,KAAKqM,KAAKiT,GAAG5S,YACb1M,KAAKqM,KAAKiT,GAAG5S,WAAWxJ,UAAUE,IAAI,UAEtCpD,KAAKqM,KAAKiT,GAAG9S,UACbxM,KAAKqM,KAAKiT,GAAG9S,SAAStJ,UAAUC,OAAO,WAI/C0B,GAAI,iBACR,GAEA,CAAAjE,IAAA,YAAAC,MAKA,SAAUyT,GACN,OAAOtU,KAAK8N,eAAiBwG,CACjC,mFAAC,CAzGiB,qqBCAf,IAAMiL,EAAU,WAgBnB,SAZA,SAAAA,EAAYlT,gGAAMtM,CAAA,KAAAwf,GACdvf,KAAKqM,KAAOA,EAGZrM,KAAKwf,kBAAoBxf,KAAKwf,kBAAkBC,KAAKzf,MACrDA,KAAK0f,mBAAqB1f,KAAK0f,mBAAmBD,KAAKzf,MAGvD0N,OAAO/I,iBAAiB,QAAS3E,KAAKwf,mBACtC9R,OAAO/I,iBAAiB,qBAAsB3E,KAAK0f,mBACvD,IAEA,EAAA9e,IAAA,sBAAAC,MAGA,WAAsB,IAAAY,EAAA,KAClB,IAEI,IAAMke,EAAkBjd,SAAS6J,eAAe,cAC5CoT,GACAA,EAAgBhb,iBAAiB,SAAS,kBAAMlD,EAAK4K,KAAKuT,WAAW,IAGzE,IAAMC,EAAiBnd,SAAS6J,eAAe,YAC3CsT,GACAA,EAAelb,iBAAiB,SAAS,WACrCE,GAAI,YAER,IAIJ,IAAMib,EAAuBpd,SAAS6J,eAAe,mBAwBrD,GAvBIuT,GACAA,EAAqBnb,iBAAiB,SAAS,WAC3ClD,EAAK4K,KAAKiT,GAAGlR,eACjB,IAIApO,KAAKqM,KAAKiC,QACVtO,KAAKqM,KAAKiC,MAAMyR,eAAe,QAAQ,WAC/Bte,EAAK4K,KAAKwB,MAAMmS,UAAU,SAC1Bve,EAAK4K,KAAKiT,GAAGW,iBAErB,IAGAjgB,KAAKqM,KAAKiC,MAAMyR,eAAe,UAAU,WACjCte,EAAK4K,KAAKwB,MAAMmS,UAAU,SAC1Bve,EAAK4K,KAAKwB,MAAMqS,aAExB,KAIAxS,OAAOyS,SACP,IACIzS,OAAOyS,SAASC,KAAK,gBACrBvb,GAAI,4BACR,CAAE,MAAOkB,GACLlB,GAAI,mCAADxD,OAAoC0E,EAAEvE,SAC7C,CAIJkM,OAAO/I,iBAAiB,UAAU,WAC1BlD,EAAK4K,KAAKmE,UAEV/O,EAAK4K,KAAKmE,SAAS6P,OAAO5e,EAAK4K,KAAK0B,MAAMC,OAElD,IAEAnJ,GAAI,gCACR,CAAE,MAAOgS,GAEL,MADAhS,GAAI,0CAADxD,OAA2CwV,EAAMrV,UAC9CqV,CACV,CACJ,GAEA,CAAAjW,IAAA,oBAAAC,MAIA,SAAkByf,GACdzb,GAAI,sBAADxD,OAAuBif,EAAM9e,QAAO,OAAAH,OAAMif,EAAMC,SAAQ,KAAAlf,OAAIif,EAAME,SAGjExgB,KAAKqM,KAAKwB,MAAMmS,UAAU,YAC1BhgB,KAAKqM,KAAKiT,GAAGmB,gBAAgB,WAADpf,OAAYif,EAAM9e,UAIlD8e,EAAMI,gBACV,GAEA,CAAA9f,IAAA,qBAAAC,MAIA,SAAmByf,GAAO,IAAAK,EAChBpT,GAA2B,QAAZoT,EAAAL,EAAMM,cAAM,IAAAD,OAAA,EAAZA,EAAcnf,UAAW,6BAC9CqD,GAAI,kCAADxD,OAAmCkM,IAGlCvN,KAAKqM,KAAKwB,MAAMmS,UAAU,YAC1BhgB,KAAKqM,KAAKiT,GAAGmB,gBAAgB,gCAADpf,OAAiCkM,IAIjE+S,EAAMI,gBACV,oFAAC,CAnHkB,qqBCFhB,IAAMG,EAAQ,WAkBjB,SAdA,SAAAA,EAAYvO,gGAAQvS,CAAA,KAAA8gB,GAChB7gB,KAAKsS,OAASA,EACdtS,KAAKsU,MAAQ,KACbtU,KAAK8gB,OAAS,KACd9gB,KAAKwQ,SAAW,KAChBxQ,KAAK+gB,OAAS,GACd/gB,KAAKghB,OAAS,CAAC,EACfhhB,KAAKihB,SAAW,CAAC,EAGjBjhB,KAAKqd,aAAe,KACpBrd,KAAKkhB,iBAAmB,EAC5B,IAEA,EAAAtgB,IAAA,aAAAC,MAGA,WAAa,IAAAY,EAAA,KAETzB,KAAKsU,MAAQ,IAAIoC,MAAMyK,MACvBnhB,KAAKsU,MAAM8M,WAAa,IAAI1K,MAAM2K,MAAM,SAGxC,IAAMC,EAAS5T,OAAO6T,WAAa7T,OAAO8T,YAC1CxhB,KAAK8gB,OAAS,IAAIpK,MAAM+K,kBAAkB,GAAIH,EAAQ,GAAK,KAC3DthB,KAAK8gB,OAAOjS,SAASyN,IAAI,EAAG,GAAI,IAChCtc,KAAK8gB,OAAOY,OAAO,EAAG,EAAG,GAGzB1hB,KAAKwQ,SAAW,IAAIkG,MAAMiL,cAAc,CACpCrP,OAAQtS,KAAKsS,OACbsP,WAAW,IAEf5hB,KAAKwQ,SAASqR,QAAQnU,OAAO6T,WAAY7T,OAAO8T,aAChDxhB,KAAKwQ,SAASsR,cAAcpU,OAAOqU,kBACnC/hB,KAAKwQ,SAASwR,UAAUC,SAAU,EAGlCjiB,KAAKkiB,cAGLliB,KAAKmiB,eAILniB,KAAKqd,aAAe,KAGpB3P,OAAO/I,iBAAiB,UAAU,WAC9BlD,EAAKqf,OAAOQ,OAAS5T,OAAO6T,WAAa7T,OAAO8T,YAChD/f,EAAKqf,OAAOsB,yBACZ3gB,EAAK+O,SAASqR,QAAQnU,OAAO6T,WAAY7T,OAAO8T,YACpD,GACJ,GAEA,CAAA5gB,IAAA,cAAAC,MAGA,WAEI,IAAMwhB,EAAmB,IAAI3L,MAAM4L,iBAAiB,SAAU,GAC9DD,EAAiBxT,SAASyN,IAAI,GAAI,GAAI,IACtC+F,EAAiBE,YAAa,EAG9BF,EAAiBG,OAAOC,QAAQrhB,MAAQ,KACxCihB,EAAiBG,OAAOC,QAAQ9P,OAAS,KACzC0P,EAAiBG,OAAO1B,OAAO4B,KAAO,GACtCL,EAAiBG,OAAO1B,OAAO6B,IAAM,IACrCN,EAAiBG,OAAO1B,OAAOrO,MAAQ,GACvC4P,EAAiBG,OAAO1B,OAAO8B,MAAQ,GACvCP,EAAiBG,OAAO1B,OAAOpO,IAAM,GACrC2P,EAAiBG,OAAO1B,OAAO+B,QAAU,GAEzC7iB,KAAKsU,MAAMlR,IAAIif,GACfriB,KAAK+gB,OAAOlf,KAAKwgB,GAGjB,IAAMS,EAAe,IAAIpM,MAAMqM,aAAa,QAAU,IACtD/iB,KAAKsU,MAAMlR,IAAI0f,GACf9iB,KAAK+gB,OAAOlf,KAAKihB,EACrB,GAEA,CAAAliB,IAAA,eAAAC,MAGA,WACI,IAAMmiB,EAAiB,IAAItM,MAAMwB,cAAc,IAAM,IAAM,IAAK,KAC1D+K,EAAiB,IAAIvM,MAAMsH,qBAAqB,CAClD3F,MAAO,QACP4F,UAAW,EACXC,UAAW,IAGTgF,EAAS,IAAIxM,MAAMmC,KAAKmK,EAAgBC,GAC9CC,EAAOlU,SAASF,GAAKgD,KAAKgH,GAAK,EAC/BoK,EAAOrU,SAAS9G,GAAK,GACrBmb,EAAOC,eAAgB,EAEvBnjB,KAAKsU,MAAMlR,IAAI8f,EACnB,GAEA,CAAAtiB,IAAA,sBAAAC,MAOA,SAAoBuiB,EAAOC,GAAuC,IAAAhhB,EAAA,KAAlCgW,EAAK1W,UAAAC,OAAA,QAAAV,IAAAS,UAAA,GAAAA,UAAA,GAAG,SAAUD,EAAQC,UAAAC,OAAA,QAAAV,IAAAS,UAAA,GAAAA,UAAA,GAAG,IAEnDqb,EAAW,IAAItG,MAAM4M,kBAAkB,CACzCjL,MAAOA,EACPC,aAAa,EACbC,QAAS,KAIP4D,EAAW,IAAIzF,MAAM6M,eACrBrI,EAAS,CACX,IAAIxE,MAAM8M,QAAQJ,EAAMtU,EAAGsU,EAAMrb,EAAGqb,EAAMrU,GAC1C,IAAI2H,MAAM8M,QAAQH,EAAIvU,EAAGuU,EAAItb,EAAGsb,EAAItU,IAExCoN,EAASsH,cAAcvI,GAGvB,IAAMwI,EAAO,IAAIhN,MAAMiN,KAAKxH,EAAUa,GACtChd,KAAKsU,MAAMlR,IAAIsgB,GAGf,IAAME,EAAa,CACfpF,OAAQkF,EACRG,QAAS7hB,KAAKC,MAAQP,GAE1B1B,KAAKkhB,iBAAiBrf,KAAK+hB,GAG3BpS,YAAW,WACPnP,EAAKyhB,sBAAsBF,EAC/B,GAAGliB,EACP,GAEA,CAAAd,IAAA,wBAAAC,MAIA,SAAsB+iB,GAClB,GAAKA,GAAeA,EAAWpF,OAA/B,CAGAxe,KAAKsU,MAAMnR,OAAOygB,EAAWpF,QAG7B,IAAMtZ,EAAQlF,KAAKkhB,iBAAiBzC,QAAQmF,IAC7B,IAAX1e,GACAlF,KAAKkhB,iBAAiBxC,OAAOxZ,EAAO,GAIpC0e,EAAWpF,OAAOrC,UAClByH,EAAWpF,OAAOrC,SAASC,UAE3BwH,EAAWpF,OAAOxB,UAClB4G,EAAWpF,OAAOxB,SAASZ,SAhBc,CAkBjD,GAEA,CAAAxb,IAAA,wBAAAC,MAGA,WAAwB,IAAAga,EAAA,KACd5Y,EAAMD,KAAKC,MAGjBjC,KAAKkhB,iBAAmBlhB,KAAKkhB,iBAAiBne,QAAO,SAAAghB,GACjD,QAAIA,EAAQF,SAAW5hB,IACnB4Y,EAAKvG,MAAMnR,OAAO4gB,EAAQvF,QAGtBuF,EAAQvF,OAAOrC,UACf4H,EAAQvF,OAAOrC,SAASC,UAExB2H,EAAQvF,OAAOxB,UACf+G,EAAQvF,OAAOxB,SAASZ,UAGrB,GAGf,GACJ,GAEA,CAAAxb,IAAA,YAAAC,MAKA,SAAUmjB,GAEN,IAAM7H,EAAW,IAAIzF,MAAMuN,iBAAiB,GAAK,GAAK,IAAK,GACrDjH,EAAW,IAAItG,MAAMsH,qBAAqB,CAC5C3F,MAAO,QACP4F,UAAW,KAGTiG,EAAa,IAAIxN,MAAMmC,KAAKsD,EAAUa,GAC5CkH,EAAWrV,SAASsV,KAAKH,EAAWnV,UACpCqV,EAAW3B,YAAa,EACxB2B,EAAWf,eAAgB,EAG3B,IAAMiB,EAAiB,IAAI1N,MAAM2H,YAAY,GAAK,GAAK,GACjDgG,EAAiB,IAAI3N,MAAMsH,qBAAqB,CAClD3F,MAAO,QACP4F,UAAW,KAGTzd,EAAS,IAAIkW,MAAMmC,KAAKuL,EAAgBC,GAM9C,OALA7jB,EAAOqO,SAASyN,IAAI,GAAK,EAAG,IAC5B4H,EAAW9gB,IAAI5C,GAEfR,KAAKsU,MAAMlR,IAAI8gB,GAERA,CACX,GAEA,CAAAtjB,IAAA,eAAAC,MAIA,SAAayjB,GACJtkB,KAAK8gB,SAGV9gB,KAAK8gB,OAAOjS,SAASC,EAAIwV,EAAexV,EACxC9O,KAAK8gB,OAAOjS,SAASE,EAAIuV,EAAevV,EAAI,GAG5C/O,KAAK8gB,OAAOY,OAAO4C,EAAexV,EAAGwV,EAAevc,EAAGuc,EAAevV,GAC1E,GAEA,CAAAnO,IAAA,wBAAAC,MAMA,SAAsB2d,EAAQ3P,EAAUG,GAC/BwP,IAGD3P,IACA2P,EAAO3P,SAASC,EAAID,EAASC,EAC7B0P,EAAO3P,SAAS9G,EAAI8G,EAAS9G,EAC7ByW,EAAO3P,SAASE,EAAIF,EAASE,GAI7BC,IACAwP,EAAOxP,SAASjH,EAAIiH,EAASjH,GAErC,GAEA,CAAAnH,IAAA,SAAAC,MAIA,SAAOmN,GACEhO,KAAKwQ,UAAaxQ,KAAKsU,OAAUtU,KAAK8gB,SAGvC9gB,KAAKqd,cAAgBrP,GACrBhO,KAAKqd,aAAapP,SAItBjO,KAAKukB,wBAGLvkB,KAAKwQ,SAAS6P,OAAOrgB,KAAKsU,MAAOtU,KAAK8gB,QAC1C,GAEA,CAAAlgB,IAAA,aAAAC,MAIA,SAAW2jB,GACP,GAAKxkB,KAAKwQ,SAEV,OAAQgU,GACJ,IAAK,MACDxkB,KAAKwQ,SAASsR,cAAc,GAC5B9hB,KAAKwQ,SAASwR,UAAUC,SAAU,EAClC,MACJ,IAAK,SACDjiB,KAAKwQ,SAASsR,cAAcpU,OAAOqU,kBACnC/hB,KAAKwQ,SAASwR,UAAUC,SAAU,EAClCjiB,KAAKwQ,SAASwR,UAAU3c,KAAOqR,MAAM+N,aACrC,MACJ,IAAK,OACDzkB,KAAKwQ,SAASsR,cAAcpU,OAAOqU,kBACnC/hB,KAAKwQ,SAASwR,UAAUC,SAAU,EAClCjiB,KAAKwQ,SAASwR,UAAU3c,KAAOqR,MAAMgO,iBAGjD,GAEA,CAAA9jB,IAAA,UAAAC,MAKA,SAAQ8jB,GAEJ,IAAIxI,EAAUa,EAEd,OAAQ2H,EAAStf,MACb,IAAK,SACD8W,EAAW,IAAIzF,MAAM2H,YAAY,GAAK,GAAK,IAC3CrB,EAAW,IAAItG,MAAMsH,qBAAqB,CAAE3F,MAAO,WACnD,MACJ,IAAK,SACD8D,EAAW,IAAIzF,MAAM2H,YAAY,GAAK,GAAK,IAC3CrB,EAAW,IAAItG,MAAMsH,qBAAqB,CAAE3F,MAAO,UACnD,MACJ,IAAK,OACD8D,EAAW,IAAIzF,MAAM2H,YAAY,GAAK,GAAK,IAC3CrB,EAAW,IAAItG,MAAMsH,qBAAqB,CAAE3F,MAAO,WACnD,MACJ,QACI8D,EAAW,IAAIzF,MAAMkO,eAAe,GAAK,EAAG,GAC5C5H,EAAW,IAAItG,MAAMsH,qBAAqB,CAAE3F,MAAO,WAI3D,IAAMwM,EAAW,IAAInO,MAAMmC,KAAKsD,EAAUa,GAS1C,OARA6H,EAAShW,SAASsV,KAAKQ,EAAS9V,UAChCgW,EAAShW,SAAS9G,EAAI,GACtB8c,EAAStC,YAAa,EACtBsC,EAAS1B,eAAgB,EAGzBnjB,KAAKsU,MAAMlR,IAAIyhB,GAERA,CACX,GAEA,CAAAjkB,IAAA,SAAAC,MAKA,SAAOikB,GAEH,IAAM3I,EAAW,IAAIzF,MAAMuN,iBAAiB,GAAK,GAAK,IAAK,GACrDjH,EAAW,IAAItG,MAAMsH,qBAAqB,CAC5C3F,MAAwB,UAAjByM,EAAQzf,KAAmB,SAAW,MAC7C4Y,UAAW,KAGT8G,EAAU,IAAIrO,MAAMmC,KAAKsD,EAAUa,GAOzC,OANA+H,EAAQlW,SAASsV,KAAKW,EAAQjW,UAC9BkW,EAAQxC,YAAa,EACrBwC,EAAQ5B,eAAgB,EAExBnjB,KAAKsU,MAAMlR,IAAI2hB,GAERA,CACX,oFAAC,CApXgB,ggCCAd,IAAMC,EAAY,WA2CrB,SA1CA,SAAAA,iGAAcjlB,CAAA,KAAAilB,GAEVhlB,KAAKkL,KAAO,CAAC,EAGblL,KAAKilB,MAAQ,CACTpW,SAAU,CAAEC,EAAG,EAAG/G,EAAG,GACrBmd,QAAQ,EACRC,aAAa,GAIjBnlB,KAAKolB,kBAAoB,CAAEtW,EAAG,EAAG/G,EAAG,GAGpC/H,KAAKqlB,aAAe,CAAC,EAGrBrlB,KAAKslB,cAAgB,KACrBtlB,KAAKulB,mBAAqB,KAC1BvlB,KAAKwlB,kBAAoB,KACzBxlB,KAAKylB,kBAAoB,KACzBzlB,KAAK0lB,gBAAkB,KAGvB1lB,KAAK2lB,qBAAsB,EAG3B3lB,KAAK4lB,iBAAmB,EAGxB5lB,KAAK6lB,cAAgB7lB,KAAK6lB,cAAcpG,KAAKzf,MAC7CA,KAAK8lB,YAAc9lB,KAAK8lB,YAAYrG,KAAKzf,MACzCA,KAAKsR,gBAAkBtR,KAAKsR,gBAAgBmO,KAAKzf,MACjDA,KAAK+lB,gBAAkB/lB,KAAK+lB,gBAAgBtG,KAAKzf,MACjDA,KAAKgmB,cAAgBhmB,KAAKgmB,cAAcvG,KAAKzf,MAC7CA,KAAKimB,kBAAoBjmB,KAAKimB,kBAAkBxG,KAAKzf,MAGrDA,KAAK4W,MACT,IAEA,EAAAhW,IAAA,OAAAC,MAGA,WAEI6M,OAAO/I,iBAAiB,UAAW3E,KAAK6lB,eACxCnY,OAAO/I,iBAAiB,QAAS3E,KAAK8lB,aAGtCpY,OAAO/I,iBAAiB,YAAa3E,KAAKsR,iBAC1C5D,OAAO/I,iBAAiB,YAAa3E,KAAK+lB,iBAC1CrY,OAAO/I,iBAAiB,UAAW3E,KAAKgmB,eACxCtY,OAAO/I,iBAAiB,cAAe3E,KAAKimB,mBAG5CvjB,SAAS8K,KAAKrM,MAAM+kB,WAAa,MACrC,GAEA,CAAAtlB,IAAA,gBAAAC,MAIA,SAAcyf,GAEVtgB,KAAKkL,KAAKoV,EAAM6F,OAAQ,EAGpBnmB,KAAKqlB,aAAa/E,EAAM6F,OAASnmB,KAAK2lB,qBACtC3lB,KAAKqlB,aAAa/E,EAAM6F,OAEhC,GAEA,CAAAvlB,IAAA,cAAAC,MAIA,SAAYyf,GAERtgB,KAAKkL,KAAKoV,EAAM6F,OAAQ,CAC5B,GAEA,CAAAvlB,IAAA,kBAAAC,MAIA,SAAgByf,GAEZtgB,KAAKilB,MAAMpW,SAASC,EAAIwR,EAAM8F,QAC9BpmB,KAAKilB,MAAMpW,SAAS9G,EAAIuY,EAAM+F,QAG9B,IAAMC,GAAUtmB,KAAKilB,MAAMpW,SAASC,EAAI9O,KAAKolB,kBAAkBtW,GAAK9O,KAAK4lB,iBACnEW,GAAUvmB,KAAKilB,MAAMpW,SAAS9G,EAAI/H,KAAKolB,kBAAkBrd,GAAK/H,KAAK4lB,iBAGzE5lB,KAAKolB,kBAAkBtW,EAAI9O,KAAKilB,MAAMpW,SAASC,EAC/C9O,KAAKolB,kBAAkBrd,EAAI/H,KAAKilB,MAAMpW,SAAS9G,EAG3C/H,KAAKwlB,mBAAqBxlB,KAAK2lB,qBAC/B3lB,KAAKwlB,kBAAkBxlB,KAAKilB,MAAMpW,SAAU,CAAEC,EAAGwX,EAAQve,EAAGwe,GAEpE,GAEA,CAAA3lB,IAAA,kBAAAC,MAIA,SAAgByf,GACS,IAAjBA,EAAMxP,QAEN9Q,KAAKilB,MAAMC,QAAS,EAGhBllB,KAAKylB,mBAAqBzlB,KAAK2lB,qBAC/B3lB,KAAKylB,kBAAkB,EAAGzlB,KAAKilB,MAAMpW,UAIrC7O,KAAKslB,eAAiBtlB,KAAK2lB,qBAC3B3lB,KAAKslB,cAActlB,KAAKilB,MAAMpW,WAEV,IAAjByR,EAAMxP,SAEb9Q,KAAKilB,MAAME,aAAc,EAGrBnlB,KAAKylB,mBAAqBzlB,KAAK2lB,qBAC/B3lB,KAAKylB,kBAAkB,EAAGzlB,KAAKilB,MAAMpW,UAIrC7O,KAAKulB,oBAAsBvlB,KAAK2lB,qBAChC3lB,KAAKulB,mBAAmBvlB,KAAKilB,MAAMpW,UAG/C,GAEA,CAAAjO,IAAA,gBAAAC,MAIA,SAAcyf,GACW,IAAjBA,EAAMxP,QACN9Q,KAAKilB,MAAMC,QAAS,EAGhBllB,KAAK0lB,iBAAmB1lB,KAAK2lB,qBAC7B3lB,KAAK0lB,gBAAgB,IAED,IAAjBpF,EAAMxP,SACb9Q,KAAKilB,MAAME,aAAc,EAGrBnlB,KAAK0lB,iBAAmB1lB,KAAK2lB,qBAC7B3lB,KAAK0lB,gBAAgB,GAGjC,GAEA,CAAA9kB,IAAA,oBAAAC,MAIA,SAAkByf,GAEdA,EAAMI,gBACV,GAEA,CAAA9f,IAAA,eAAAC,MAKA,SAAaslB,GACT,OAAOnmB,KAAK2lB,sBAA2C,IAApB3lB,KAAKkL,KAAKib,EACjD,GAEA,CAAAvlB,IAAA,cAAAC,MAIA,WACI,OAAOb,KAAK2lB,qBAAuB3lB,KAAKilB,MAAMC,MAClD,GAEA,CAAAtkB,IAAA,mBAAAC,MAIA,WACI,OAAOb,KAAK2lB,qBAAuB3lB,KAAKilB,MAAME,WAClD,GAEA,CAAAvkB,IAAA,mBAAAC,MAIA,WACI,sWAAA2T,CAAA,GAAYxU,KAAKilB,MAAMpW,SAC3B,GAEA,CAAAjO,IAAA,sBAAAC,MAIA,SAAoB2lB,GAChBxmB,KAAK4lB,iBAAmBY,CAC5B,GAEA,CAAA5lB,IAAA,iBAAAC,MAKA,SAAeslB,EAAMM,GACjBzmB,KAAKqlB,aAAac,GAAQM,CAC9B,GAEA,CAAA7lB,IAAA,oBAAAC,MAIA,SAAkBslB,UACPnmB,KAAKqlB,aAAac,EAC7B,GAEA,CAAAvlB,IAAA,mBAAAC,MAIA,SAAiB4lB,GACbzmB,KAAKslB,cAAgBmB,CACzB,GAEA,CAAA7lB,IAAA,wBAAAC,MAIA,SAAsB4lB,GAClBzmB,KAAKulB,mBAAqBkB,CAC9B,GAEA,CAAA7lB,IAAA,uBAAAC,MAIA,SAAqB4lB,GACjBzmB,KAAKwlB,kBAAoBiB,CAC7B,GAEA,CAAA7lB,IAAA,uBAAAC,MAIA,SAAqB4lB,GACjBzmB,KAAKylB,kBAAoBgB,CAC7B,GAEA,CAAA7lB,IAAA,qBAAAC,MAIA,SAAmB4lB,GACfzmB,KAAK0lB,gBAAkBe,CAC3B,GAEA,CAAA7lB,IAAA,sBAAAC,MAGA,WACIb,KAAK2lB,qBAAsB,CAC/B,GAEA,CAAA/kB,IAAA,qBAAAC,MAGA,WACIb,KAAK2lB,qBAAsB,CAC/B,GAEA,CAAA/kB,IAAA,uBAAAC,MAIA,WACI,IAAKb,KAAK2lB,oBACN,MAAO,CAAE7W,EAAG,EAAGC,EAAG,GAGtB,IAAI2X,EAAO,EACPC,EAAO,EAgBX,OAbI3mB,KAAKyT,aAAa,SAAWzT,KAAKyT,aAAa,WAC/CkT,GAAQ,GACD3mB,KAAKyT,aAAa,SAAWzT,KAAKyT,aAAa,gBACtDkT,EAAO,GAIP3mB,KAAKyT,aAAa,SAAWzT,KAAKyT,aAAa,aAC/CiT,GAAQ,GACD1mB,KAAKyT,aAAa,SAAWzT,KAAKyT,aAAa,iBACtDiT,EAAO,GAGJ,CAAE5X,EAAG4X,EAAM3X,EAAG4X,EACzB,GAEA,CAAA/lB,IAAA,iBAAAC,MAGA,WACIb,KAAKqlB,aAAe,CAAC,EACrBrlB,KAAKslB,cAAgB,KACrBtlB,KAAKulB,mBAAqB,KAC1BvlB,KAAKwlB,kBAAoB,KACzBxlB,KAAKylB,kBAAoB,KACzBzlB,KAAK0lB,gBAAkB,IAC3B,GAEA,CAAA9kB,IAAA,UAAAC,MAGA,WACI6M,OAAOkZ,oBAAoB,UAAW5mB,KAAK6lB,eAC3CnY,OAAOkZ,oBAAoB,QAAS5mB,KAAK8lB,aACzCpY,OAAOkZ,oBAAoB,YAAa5mB,KAAKsR,iBAC7C5D,OAAOkZ,oBAAoB,YAAa5mB,KAAK+lB,iBAC7CrY,OAAOkZ,oBAAoB,UAAW5mB,KAAKgmB,eAC3CtY,OAAOkZ,oBAAoB,cAAe5mB,KAAKimB,mBAE/CvjB,SAAS8K,KAAKrM,MAAM+kB,WAAa,EACrC,oFAAC,CAjVoB,22CCDlB,IAAMW,GAAc,WAiCvB,SAhCA,SAAAA,iGAAc9mB,CAAA,KAAA8mB,GACV7mB,KAAK8mB,OAAS,KACd9mB,KAAK+mB,WAAY,EACjB/mB,KAAKgnB,UAAY,4BACjBhnB,KAAKinB,UAAW,EAGhBjnB,KAAKknB,cAAgB,CACjBC,QAAS,GACTC,WAAY,GACZvQ,MAAO,GACPrV,QAAS,GACT6lB,WAAY,GACZC,YAAa,GACbC,aAAc,GACdC,WAAY,GACZC,SAAU,GACVC,QAAS,GACTC,UAAW,IAIf3nB,KAAK4nB,SAAW,CACZC,QAAS,CAAC,EACVC,KAAM,CAAC,EACPrkB,MAAO,CAAC,GAIZzD,KAAK+nB,SAAW,cACpB,KAEA,EAAAnnB,IAAA,UAAAC,MAIA,WAAU,IAAAY,EAAA,KACN,OAAO,IAAIwJ,SAAQ,SAACpC,GAEhBjE,QAAQC,IAAI,yCACZpD,EAAKslB,WAAY,EAGjBtlB,EAAKumB,mBAGLxW,YAAW,WAEP/P,EAAKylB,cAAcC,QAAQ5kB,SAAQ,SAAA0lB,GAAO,OAAIA,GAAS,IAGvDxmB,EAAKymB,uBAELrf,GACJ,GAAG,IACP,GACJ,GAEA,CAAAjI,IAAA,mBAAAC,MAGA,WAEI,IAAK,IAAIoD,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,IAAMI,EAAK,QAAHhD,OAAW4C,GACb6K,EAA4B,IAAvBgD,KAAKC,SAAW,IACrBhD,EAA4B,IAAvB+C,KAAKC,SAAW,IAGrBoW,EAAQ,CAAC,SAAU,SAAU,QAC7B9iB,EAAO8iB,EAAMrW,KAAK2K,MAAM3K,KAAKC,SAAWoW,EAAMvmB,SAEpD5B,KAAK4nB,SAASnkB,MAAMY,GAAM,CACtBA,GAAAA,EACAgB,KAAAA,EACAwJ,SAAU,CAAEC,EAAAA,EAAG/G,EAAG,EAAGgH,EAAAA,GACrBqZ,WAAY,CAAC,EAErB,CAGA,IAAK,IAAInkB,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAMI,EAAK,OAAHhD,OAAU4C,GACZ6K,EAA4B,IAAvBgD,KAAKC,SAAW,IACrBhD,EAA4B,IAAvB+C,KAAKC,SAAW,IAE3B/R,KAAK4nB,SAASE,KAAKzjB,GAAM,CACrBA,GAAAA,EACAgB,KAAM,QACNwJ,SAAU,CAAEC,EAAAA,EAAG/G,EAAG,EAAGgH,EAAAA,GACrBzO,OAAQ,IACRuN,MAAO,SAEf,CACJ,GAEA,CAAAjN,IAAA,uBAAAC,MAGA,WAAuB,IAAAwB,EAAA,KACnBF,aAAY,WAER+D,OAAOgF,KAAK7I,EAAKulB,SAASE,MAAMvlB,SAAQ,SAAA8B,GACpC,IAAMgkB,EAAMhmB,EAAKulB,SAASE,KAAKzjB,GAGzBikB,EAAgC,GAAvBxW,KAAKC,SAAW,IACzBwW,EAAgC,GAAvBzW,KAAKC,SAAW,IAE/BsW,EAAIxZ,SAASC,GAAKwZ,EAClBD,EAAIxZ,SAASE,GAAKwZ,EAGlBF,EAAIxZ,SAASC,EAAIgD,KAAKiL,KAAK,GAAIjL,KAAK0W,IAAI,GAAIH,EAAIxZ,SAASC,IACzDuZ,EAAIxZ,SAASE,EAAI+C,KAAKiL,KAAK,GAAIjL,KAAK0W,IAAI,GAAIH,EAAIxZ,SAASE,IAGzD1M,EAAK6kB,cAAcQ,QAAQnlB,SAAQ,SAAA0lB,GAAO,OAAIA,EAAQ,CAClD5jB,GAAAA,EACAwK,SAAUwZ,EAAIxZ,UAChB,GACN,GACJ,GAAG,IACP,GAEA,CAAAjO,IAAA,KAAAC,MAKA,SAAGyf,EAAO2H,GACFjoB,KAAKknB,cAAc5G,IACnBtgB,KAAKknB,cAAc5G,GAAOze,KAAKomB,EAEvC,GAEA,CAAArnB,IAAA,iBAAAC,MAKA,SAAegO,EAAUG,GAChBhP,KAAK+mB,WAGN/mB,KAAKinB,WACLjnB,KAAK4nB,SAASC,QAAQ7nB,KAAK+nB,UAASvT,GAAAA,GAAA,GAC7BxU,KAAK4nB,SAASC,QAAQ7nB,KAAK+nB,WAAS,IACvClZ,SAAAA,EACAG,SAAAA,IAGZ,GAEA,CAAApO,IAAA,kBAAAC,MAMA,SAAgBgO,EAAUI,EAAWzO,GAC5BR,KAAK+mB,WAEVniB,QAAQC,IAAI,kBAAmB,CAAEgK,SAAAA,EAAUI,UAAAA,EAAWzO,OAAAA,GAG1D,GAEA,CAAAI,IAAA,iBAAAC,MAKA,SAAeuE,EAAQqjB,GACdzoB,KAAK+mB,YAEVniB,QAAQC,IAAI,mBAAoB,CAAEO,OAAAA,EAAQqjB,SAAAA,IAGtCzoB,KAAKinB,iBACEjnB,KAAK4nB,SAASnkB,MAAM2B,GAEnC,oFAAC,CAvLsB,0PCH3BU,GAAA,kBAAAC,CAAA,MAAAC,EAAAD,EAAA,GAAAE,EAAAC,OAAAC,UAAAC,EAAAH,EAAAI,eAAAC,EAAAJ,OAAAK,gBAAA,SAAAP,EAAAD,EAAAE,GAAAD,EAAAD,GAAAE,EAAApF,KAAA,EAAAoD,EAAA,mBAAAuC,OAAAA,OAAA,GAAAC,EAAAxC,EAAAyC,UAAA,aAAAC,EAAA1C,EAAA2C,eAAA,kBAAAC,EAAA5C,EAAA6C,aAAA,yBAAAC,EAAAf,EAAAD,EAAAE,GAAA,OAAAC,OAAAK,eAAAP,EAAAD,EAAA,CAAAlF,MAAAoF,EAAAe,YAAA,EAAAC,cAAA,EAAAC,UAAA,IAAAlB,EAAAD,EAAA,KAAAgB,EAAA,aAAAf,GAAAe,EAAA,SAAAf,EAAAD,EAAAE,GAAA,OAAAD,EAAAD,GAAAE,CAAA,WAAAkB,EAAAnB,EAAAD,EAAAE,EAAAG,GAAA,IAAAnC,EAAA8B,GAAAA,EAAAI,qBAAAiB,EAAArB,EAAAqB,EAAAX,EAAAP,OAAAmB,OAAApD,EAAAkC,WAAAQ,EAAA,IAAAW,EAAAlB,GAAA,WAAAE,EAAAG,EAAA,WAAA5F,MAAA0G,EAAAvB,EAAAC,EAAAU,KAAAF,CAAA,UAAAe,EAAAxB,EAAAD,EAAAE,GAAA,WAAAZ,KAAA,SAAAoC,IAAAzB,EAAA0B,KAAA3B,EAAAE,GAAA,OAAAD,GAAA,OAAAX,KAAA,QAAAoC,IAAAzB,EAAA,EAAAD,EAAAoB,KAAAA,EAAA,IAAAQ,EAAA,iBAAAC,EAAA,iBAAAC,EAAA,YAAAC,EAAA,YAAAC,EAAA,YAAAX,IAAA,UAAAY,IAAA,UAAAC,IAAA,KAAAC,EAAA,GAAAnB,EAAAmB,EAAAzB,GAAA,8BAAA0B,EAAAjC,OAAAkC,eAAAC,EAAAF,GAAAA,EAAAA,EAAAG,EAAA,MAAAD,GAAAA,IAAApC,GAAAG,EAAAsB,KAAAW,EAAA5B,KAAAyB,EAAAG,GAAA,IAAAE,EAAAN,EAAA9B,UAAAiB,EAAAjB,UAAAD,OAAAmB,OAAAa,GAAA,SAAAM,EAAAxC,GAAA,0BAAAzD,SAAA,SAAAwD,GAAAgB,EAAAf,EAAAD,GAAA,SAAAC,GAAA,YAAAyC,QAAA1C,EAAAC,EAAA,gBAAA0C,EAAA1C,EAAAD,GAAA,SAAA4C,EAAA1C,EAAAK,EAAArC,EAAAwC,GAAA,IAAAE,EAAAa,EAAAxB,EAAAC,GAAAD,EAAAM,GAAA,aAAAK,EAAAtB,KAAA,KAAAwB,EAAAF,EAAAc,IAAAE,EAAAd,EAAAhG,MAAA,OAAA8G,GAAA,UAAAiB,GAAAjB,IAAAvB,EAAAsB,KAAAC,EAAA,WAAA5B,EAAA8C,QAAAlB,EAAAmB,SAAAC,MAAA,SAAA/C,GAAA2C,EAAA,OAAA3C,EAAA/B,EAAAwC,EAAA,aAAAT,GAAA2C,EAAA,QAAA3C,EAAA/B,EAAAwC,EAAA,IAAAV,EAAA8C,QAAAlB,GAAAoB,MAAA,SAAA/C,GAAAa,EAAAhG,MAAAmF,EAAA/B,EAAA4C,EAAA,aAAAb,GAAA,OAAA2C,EAAA,QAAA3C,EAAA/B,EAAAwC,EAAA,IAAAA,EAAAE,EAAAc,IAAA,KAAAxB,EAAAK,EAAA,gBAAAzF,MAAA,SAAAmF,EAAAI,GAAA,SAAA4C,IAAA,WAAAjD,GAAA,SAAAA,EAAAE,GAAA0C,EAAA3C,EAAAI,EAAAL,EAAAE,EAAA,WAAAA,EAAAA,EAAAA,EAAA8C,KAAAC,EAAAA,GAAAA,GAAA,aAAAzB,EAAAxB,EAAAE,EAAAG,GAAA,IAAAE,EAAAqB,EAAA,gBAAA1D,EAAAwC,GAAA,GAAAH,IAAAuB,EAAA,MAAAoB,MAAA,mCAAA3C,IAAAwB,EAAA,cAAA7D,EAAA,MAAAwC,EAAA,OAAA5F,MAAAmF,EAAAkD,MAAA,OAAA9C,EAAA+C,OAAAlF,EAAAmC,EAAAqB,IAAAhB,IAAA,KAAAE,EAAAP,EAAAgD,SAAA,GAAAzC,EAAA,KAAAE,EAAAwC,EAAA1C,EAAAP,GAAA,GAAAS,EAAA,IAAAA,IAAAkB,EAAA,gBAAAlB,CAAA,cAAAT,EAAA+C,OAAA/C,EAAAkD,KAAAlD,EAAAmD,MAAAnD,EAAAqB,SAAA,aAAArB,EAAA+C,OAAA,IAAA7C,IAAAqB,EAAA,MAAArB,EAAAwB,EAAA1B,EAAAqB,IAAArB,EAAAoD,kBAAApD,EAAAqB,IAAA,gBAAArB,EAAA+C,QAAA/C,EAAAqD,OAAA,SAAArD,EAAAqB,KAAAnB,EAAAuB,EAAA,IAAAK,EAAAV,EAAAzB,EAAAE,EAAAG,GAAA,cAAA8B,EAAA7C,KAAA,IAAAiB,EAAAF,EAAA8C,KAAApB,EAAAF,EAAAM,EAAAT,MAAAM,EAAA,gBAAAlH,MAAAqH,EAAAT,IAAAyB,KAAA9C,EAAA8C,KAAA,WAAAhB,EAAA7C,OAAAiB,EAAAwB,EAAA1B,EAAA+C,OAAA,QAAA/C,EAAAqB,IAAAS,EAAAT,IAAA,YAAA4B,EAAAtD,EAAAE,GAAA,IAAAG,EAAAH,EAAAkD,OAAA7C,EAAAP,EAAAW,SAAAN,GAAA,GAAAE,IAAAN,EAAA,OAAAC,EAAAmD,SAAA,eAAAhD,GAAAL,EAAAW,SAAA,SAAAT,EAAAkD,OAAA,SAAAlD,EAAAwB,IAAAzB,EAAAqD,EAAAtD,EAAAE,GAAA,UAAAA,EAAAkD,SAAA,WAAA/C,IAAAH,EAAAkD,OAAA,QAAAlD,EAAAwB,IAAA,IAAAiC,UAAA,oCAAAtD,EAAA,aAAA2B,EAAA,IAAA9D,EAAAuD,EAAAlB,EAAAP,EAAAW,SAAAT,EAAAwB,KAAA,aAAAxD,EAAAoB,KAAA,OAAAY,EAAAkD,OAAA,QAAAlD,EAAAwB,IAAAxD,EAAAwD,IAAAxB,EAAAmD,SAAA,KAAArB,EAAA,IAAAtB,EAAAxC,EAAAwD,IAAA,OAAAhB,EAAAA,EAAAyC,MAAAjD,EAAAF,EAAA4D,YAAAlD,EAAA5F,MAAAoF,EAAA2D,KAAA7D,EAAA8D,QAAA,WAAA5D,EAAAkD,SAAAlD,EAAAkD,OAAA,OAAAlD,EAAAwB,IAAAzB,GAAAC,EAAAmD,SAAA,KAAArB,GAAAtB,GAAAR,EAAAkD,OAAA,QAAAlD,EAAAwB,IAAA,IAAAiC,UAAA,oCAAAzD,EAAAmD,SAAA,KAAArB,EAAA,UAAA+B,EAAA9D,GAAA,IAAAD,EAAA,CAAAgE,OAAA/D,EAAA,SAAAA,IAAAD,EAAAiE,SAAAhE,EAAA,SAAAA,IAAAD,EAAAkE,WAAAjE,EAAA,GAAAD,EAAAmE,SAAAlE,EAAA,SAAAmE,WAAAtI,KAAAkE,EAAA,UAAAqE,EAAApE,GAAA,IAAAD,EAAAC,EAAAqE,YAAA,GAAAtE,EAAAV,KAAA,gBAAAU,EAAA0B,IAAAzB,EAAAqE,WAAAtE,CAAA,UAAAuB,EAAAtB,GAAA,KAAAmE,WAAA,EAAAJ,OAAA,SAAA/D,EAAAzD,QAAAuH,EAAA,WAAAQ,OAAA,YAAAhC,EAAAvC,GAAA,GAAAA,GAAA,KAAAA,EAAA,KAAAE,EAAAF,EAAAU,GAAA,GAAAR,EAAA,OAAAA,EAAAyB,KAAA3B,GAAA,sBAAAA,EAAA6D,KAAA,OAAA7D,EAAA,IAAAwE,MAAAxE,EAAAnE,QAAA,KAAA0E,GAAA,EAAArC,EAAA,SAAA2F,IAAA,OAAAtD,EAAAP,EAAAnE,QAAA,GAAAwE,EAAAsB,KAAA3B,EAAAO,GAAA,OAAAsD,EAAA/I,MAAAkF,EAAAO,GAAAsD,EAAAV,MAAA,EAAAU,EAAA,OAAAA,EAAA/I,MAAAmF,EAAA4D,EAAAV,MAAA,EAAAU,CAAA,SAAA3F,EAAA2F,KAAA3F,CAAA,YAAAyF,UAAAd,GAAA7C,GAAA,2BAAAiC,EAAA7B,UAAA8B,EAAA3B,EAAAiC,EAAA,eAAA1H,MAAAoH,EAAAhB,cAAA,IAAAX,EAAA2B,EAAA,eAAApH,MAAAmH,EAAAf,cAAA,IAAAe,EAAAwC,YAAAzD,EAAAkB,EAAApB,EAAA,qBAAAd,EAAA0E,oBAAA,SAAAzE,GAAA,IAAAD,EAAA,mBAAAC,GAAAA,EAAA0E,YAAA,QAAA3E,IAAAA,IAAAiC,GAAA,uBAAAjC,EAAAyE,aAAAzE,EAAA4E,MAAA,EAAA5E,EAAA6E,KAAA,SAAA5E,GAAA,OAAAE,OAAA2E,eAAA3E,OAAA2E,eAAA7E,EAAAiC,IAAAjC,EAAA8E,UAAA7C,EAAAlB,EAAAf,EAAAa,EAAA,sBAAAb,EAAAG,UAAAD,OAAAmB,OAAAkB,GAAAvC,CAAA,EAAAD,EAAAgF,MAAA,SAAA/E,GAAA,OAAA8C,QAAA9C,EAAA,EAAAwC,EAAAE,EAAAvC,WAAAY,EAAA2B,EAAAvC,UAAAQ,GAAA,0BAAAZ,EAAA2C,cAAAA,EAAA3C,EAAAiF,MAAA,SAAAhF,EAAAC,EAAAG,EAAAE,EAAArC,QAAA,IAAAA,IAAAA,EAAAgH,SAAA,IAAAxE,EAAA,IAAAiC,EAAAvB,EAAAnB,EAAAC,EAAAG,EAAAE,GAAArC,GAAA,OAAA8B,EAAA0E,oBAAAxE,GAAAQ,EAAAA,EAAAmD,OAAAb,MAAA,SAAA/C,GAAA,OAAAA,EAAAkD,KAAAlD,EAAAnF,MAAA4F,EAAAmD,MAAA,KAAApB,EAAAD,GAAAxB,EAAAwB,EAAA1B,EAAA,aAAAE,EAAAwB,EAAA9B,GAAA,0BAAAM,EAAAwB,EAAA,qDAAAxC,EAAAmF,KAAA,SAAAlF,GAAA,IAAAD,EAAAG,OAAAF,GAAAC,EAAA,WAAAG,KAAAL,EAAAE,EAAApE,KAAAuE,GAAA,OAAAH,EAAAkF,UAAA,SAAAvB,IAAA,KAAA3D,EAAArE,QAAA,KAAAoE,EAAAC,EAAAmF,MAAA,GAAApF,KAAAD,EAAA,OAAA6D,EAAA/I,MAAAmF,EAAA4D,EAAAV,MAAA,EAAAU,CAAA,QAAAA,EAAAV,MAAA,EAAAU,CAAA,GAAA7D,EAAAuC,OAAAA,EAAAhB,EAAAnB,UAAA,CAAAuE,YAAApD,EAAAgD,MAAA,SAAAvE,GAAA,QAAAsF,KAAA,OAAAzB,KAAA,OAAAN,KAAA,KAAAC,MAAAvD,EAAA,KAAAkD,MAAA,OAAAE,SAAA,UAAAD,OAAA,YAAA1B,IAAAzB,EAAA,KAAAmE,WAAA5H,QAAA6H,IAAArE,EAAA,QAAAE,KAAA,WAAAA,EAAAqF,OAAA,IAAAlF,EAAAsB,KAAA,KAAAzB,KAAAsE,OAAAtE,EAAAsF,MAAA,WAAAtF,GAAAD,EAAA,EAAAwF,KAAA,gBAAAtC,MAAA,MAAAlD,EAAA,KAAAmE,WAAA,GAAAE,WAAA,aAAArE,EAAAX,KAAA,MAAAW,EAAAyB,IAAA,YAAAgE,IAAA,EAAAjC,kBAAA,SAAAzD,GAAA,QAAAmD,KAAA,MAAAnD,EAAA,IAAAE,EAAA,cAAAyF,EAAAtF,EAAAE,GAAA,OAAAG,EAAApB,KAAA,QAAAoB,EAAAgB,IAAA1B,EAAAE,EAAA2D,KAAAxD,EAAAE,IAAAL,EAAAkD,OAAA,OAAAlD,EAAAwB,IAAAzB,KAAAM,CAAA,SAAAA,EAAA,KAAA6D,WAAAvI,OAAA,EAAA0E,GAAA,IAAAA,EAAA,KAAArC,EAAA,KAAAkG,WAAA7D,GAAAG,EAAAxC,EAAAoG,WAAA,YAAApG,EAAA8F,OAAA,OAAA2B,EAAA,UAAAzH,EAAA8F,QAAA,KAAAsB,KAAA,KAAA1E,EAAAP,EAAAsB,KAAAzD,EAAA,YAAA4C,EAAAT,EAAAsB,KAAAzD,EAAA,iBAAA0C,GAAAE,EAAA,SAAAwE,KAAApH,EAAA+F,SAAA,OAAA0B,EAAAzH,EAAA+F,UAAA,WAAAqB,KAAApH,EAAAgG,WAAA,OAAAyB,EAAAzH,EAAAgG,WAAA,SAAAtD,GAAA,QAAA0E,KAAApH,EAAA+F,SAAA,OAAA0B,EAAAzH,EAAA+F,UAAA,YAAAnD,EAAA,MAAAoC,MAAA,kDAAAoC,KAAApH,EAAAgG,WAAA,OAAAyB,EAAAzH,EAAAgG,WAAA,KAAAR,OAAA,SAAAzD,EAAAD,GAAA,QAAAE,EAAA,KAAAkE,WAAAvI,OAAA,EAAAqE,GAAA,IAAAA,EAAA,KAAAK,EAAA,KAAA6D,WAAAlE,GAAA,GAAAK,EAAAyD,QAAA,KAAAsB,MAAAjF,EAAAsB,KAAApB,EAAA,oBAAA+E,KAAA/E,EAAA2D,WAAA,KAAAhG,EAAAqC,EAAA,OAAArC,IAAA,UAAA+B,GAAA,aAAAA,IAAA/B,EAAA8F,QAAAhE,GAAAA,GAAA9B,EAAAgG,aAAAhG,EAAA,UAAAwC,EAAAxC,EAAAA,EAAAoG,WAAA,UAAA5D,EAAApB,KAAAW,EAAAS,EAAAgB,IAAA1B,EAAA9B,GAAA,KAAAkF,OAAA,YAAAS,KAAA3F,EAAAgG,WAAAlC,GAAA,KAAA4D,SAAAlF,EAAA,EAAAkF,SAAA,SAAA3F,EAAAD,GAAA,aAAAC,EAAAX,KAAA,MAAAW,EAAAyB,IAAA,gBAAAzB,EAAAX,MAAA,aAAAW,EAAAX,KAAA,KAAAuE,KAAA5D,EAAAyB,IAAA,WAAAzB,EAAAX,MAAA,KAAAoG,KAAA,KAAAhE,IAAAzB,EAAAyB,IAAA,KAAA0B,OAAA,cAAAS,KAAA,kBAAA5D,EAAAX,MAAAU,IAAA,KAAA6D,KAAA7D,GAAAgC,CAAA,EAAA6D,OAAA,SAAA5F,GAAA,QAAAD,EAAA,KAAAoE,WAAAvI,OAAA,EAAAmE,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAAkE,WAAApE,GAAA,GAAAE,EAAAgE,aAAAjE,EAAA,YAAA2F,SAAA1F,EAAAoE,WAAApE,EAAAiE,UAAAE,EAAAnE,GAAA8B,CAAA,kBAAA/B,GAAA,QAAAD,EAAA,KAAAoE,WAAAvI,OAAA,EAAAmE,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAAkE,WAAApE,GAAA,GAAAE,EAAA8D,SAAA/D,EAAA,KAAAI,EAAAH,EAAAoE,WAAA,aAAAjE,EAAAf,KAAA,KAAAiB,EAAAF,EAAAqB,IAAA2C,EAAAnE,EAAA,QAAAK,CAAA,QAAA2C,MAAA,0BAAA4C,cAAA,SAAA9F,EAAAE,EAAAG,GAAA,YAAAgD,SAAA,CAAA1C,SAAA4B,EAAAvC,GAAA4D,WAAA1D,EAAA4D,QAAAzD,GAAA,cAAA+C,SAAA,KAAA1B,IAAAzB,GAAA+B,CAAA,GAAAhC,CAAA,UAAAhG,GAAA0G,EAAAL,GAAA,KAAAK,aAAAL,GAAA,UAAAsD,UAAA,8CAAAqC,GAAAhG,EAAAE,GAAA,QAAAD,EAAA,EAAAA,EAAAC,EAAArE,OAAAoE,IAAA,KAAAM,EAAAL,EAAAD,GAAAM,EAAAU,WAAAV,EAAAU,aAAA,EAAAV,EAAAW,cAAA,YAAAX,IAAAA,EAAAY,UAAA,GAAAhB,OAAAK,eAAAR,EAAAiG,GAAA1F,EAAA1F,KAAA0F,EAAA,WAAAoiB,GAAA3iB,EAAAE,EAAAD,GAAA,OAAAC,GAAA8F,GAAAhG,EAAAI,UAAAF,GAAAD,GAAA+F,GAAAhG,EAAAC,GAAAE,OAAAK,eAAAR,EAAA,aAAAmB,UAAA,IAAAnB,CAAA,UAAAiG,GAAAhG,GAAA,IAAA/B,EAAA,SAAA+B,GAAA,aAAA4C,GAAA5C,KAAAA,EAAA,OAAAA,EAAA,IAAAD,EAAAC,EAAAQ,OAAAyF,aAAA,YAAAlG,EAAA,KAAA9B,EAAA8B,EAAA2B,KAAA1B,EAAAC,UAAA,aAAA2C,GAAA3E,GAAA,OAAAA,EAAA,UAAAyF,UAAA,uDAAAwC,OAAAlG,EAAA,CAAAmG,CAAAnG,GAAA,gBAAA4C,GAAA3E,GAAAA,EAAAA,EAAA,YAAA6H,GAAA1F,EAAAJ,EAAAD,EAAAE,EAAAK,EAAAG,EAAAE,GAAA,QAAA1C,EAAAmC,EAAAK,GAAAE,GAAAE,EAAA5C,EAAApD,KAAA,OAAAuF,GAAA,YAAAL,EAAAK,EAAA,CAAAnC,EAAAiF,KAAAlD,EAAAa,GAAAoE,QAAApC,QAAAhC,GAAAkC,KAAA9C,EAAAK,EAAA,UAAAsO,GAAAxO,GAAA,sBAAAJ,EAAA,KAAAD,EAAApE,UAAA,WAAAsJ,SAAA,SAAAhF,EAAAK,GAAA,IAAAG,EAAAL,EAAA8G,MAAAlH,EAAAD,GAAA,SAAAoH,EAAA/G,GAAA0F,GAAArF,EAAAR,EAAAK,EAAA6G,EAAAC,EAAA,OAAAhH,EAAA,UAAAgH,EAAAhH,GAAA0F,GAAArF,EAAAR,EAAAK,EAAA6G,EAAAC,EAAA,QAAAhH,EAAA,CAAA+G,OAAA,OAUO,SAAewb,KAAU,OAAAC,GAAA1b,MAAC,KAADvL,UAAA,CAyEhC,SAAAinB,KAFC,OAEDA,GAAAhU,GAAA9O,KAAA8E,MAzEO,SAAAmC,IAAA,IAAA8b,EAAA,OAAA/iB,KAAAqB,MAAA,SAAA6F,GAAA,cAAAA,EAAA3B,KAAA2B,EAAApD,MAAA,OAGH,GAFAhF,QAAQC,IAAI,uCAGU,oBAAX6I,SAA0BA,OAAOob,cAAa,CAAA9b,EAAApD,KAAA,SACA,OAArDhF,QAAQC,IAAI,yCAAyCmI,EAAA3B,KAAA,EAAA2B,EAAApD,KAAA,EAE5B8D,OAAOob,cAAcC,aAAY,OACM,OADtDF,EAAM7b,EAAA1D,KACZ1E,QAAQC,IAAI,gDAAgDmI,EAAAvD,OAAA,SACrDof,GAAM,QAEqD,MAFrD7b,EAAA3B,KAAA,GAAA2B,EAAAoK,GAAApK,EAAA,SAEbpI,QAAQiS,MAAM,4CAA2C7J,EAAAoK,IAASpK,EAAAoK,GAAA,WAOpD,oBAAXS,OAAsB,CAAA7K,EAAApD,KAAA,aAEzBiO,OAAOmR,aAAc,CAAFhc,EAAApD,KAAA,SAC0B,OAA7ChF,QAAQC,IAAI,iCAAiCmI,EAAAvD,OAAA,SACtCoO,QAAM,WAIU,mBAAhBA,OAAOjB,KAAmB,CAAA5J,EAAApD,KAAA,SAE+B,OAF/BoD,EAAA3B,KAAA,GAE7BzG,QAAQC,IAAI,gDAAgDmI,EAAApD,KAAA,GACtDiO,OAAOjB,OAAM,QAE8B,OADjDiB,OAAOmR,cAAe,EACtBpkB,QAAQC,IAAI,qCAAqCmI,EAAAvD,OAAA,SAC1CoO,QAAM,QAE+C,MAF/C7K,EAAA3B,KAAA,GAAA2B,EAAAic,GAAAjc,EAAA,UAEbpI,QAAQiS,MAAM,sCAAqC7J,EAAAic,IAASjc,EAAAic,GAAA,QAAAjc,EAAApD,KAAA,iBAMrC,OAD3BhF,QAAQC,IAAI,iDACZgT,OAAOmR,cAAe,EAAKhc,EAAAvD,OAAA,SACpBoO,QAAM,WAAA7K,EAAA3B,KAAA,GAMK,oBAAXqC,SAA0BA,OAAOmK,OAAM,CAAA7K,EAAApD,KAAA,YAEZ,mBAAvB8D,OAAOmK,OAAOjB,MAAwBlJ,OAAOmK,OAAOmR,aAAY,CAAAhc,EAAApD,KAAA,SACd,OAAzDhF,QAAQC,IAAI,6CAA6CmI,EAAApD,KAAA,GACnD8D,OAAOmK,OAAOjB,OAAM,QAC1BlJ,OAAOmK,OAAOmR,cAAe,EAC7BpkB,QAAQC,IAAI,yCAAyCmI,EAAApD,KAAA,iBAErDhF,QAAQC,IAAI,iDACZ6I,OAAOmK,OAAOmR,cAAe,EAAK,eAAAhc,EAAAvD,OAAA,SAE/BiE,OAAOmK,QAAM,QAKxB,OAFAjT,QAAQC,IAAI,wEAEZmI,EAAApD,KAAA,GACasf,GAtEC,KAsEsC,eAAAlc,EAAAvD,OAAA,SAAAuD,EAAA1D,MAAA,QAIpD,OAJoD0D,EAAA3B,KAAA,GAAA2B,EAAAmc,GAAAnc,EAAA,UAEpDpI,QAAQiS,MAAM,yCAA0C7J,EAAAmc,GAAM3nB,SAE9DwL,EAAAvD,OAAA,UAqGJ7E,QAAQkW,KAAK,oEAEN,CACHkO,cAAc,EACdI,MAAK,WAKA,OAAAV,IAJD,SAAAW,IAActpB,GAAA,KAAAspB,GACVzkB,QAAQkW,KAAK,2DACb9a,KAAKspB,OAAS,GACdtpB,KAAKupB,UAAY,EACrB,GAAC,EAAA3oB,IAAA,OAAAC,MAED,WACI+D,QAAQC,IAAI,mCAChB,GAAC,CAAAjE,IAAA,kBAAAC,MAED,WACI,MAAO,CACH2oB,YAAa,WAAF,MAAS,CAAE1a,EAAG,EAAG/G,EAAG,EAAGgH,EAAG,EAAG,EACxC0a,eAAgB,WAAO,EAE/B,GAAC,CAAA7oB,IAAA,iBAAAC,MAED,WACI,MAAO,CAAC,CACZ,GAAC,CAAAD,IAAA,UAAAC,MAED,WACI,OAAO,IACX,GAAC,CAAAD,IAAA,sBAAAC,MAED,WACI,MAAO,CAAE6a,QAAQ,EAAOE,IAAK,EACjC,IAAC,CA5BA,GA8BL8N,cAAe,CACXC,MAAO,WAAF,MAAS,CACVF,eAAgB,WAAF,MAAS,CAAC,CAAC,EAC5B,EACDG,QAAS,WAAF,MAAS,CACZH,eAAgB,WAAF,MAAS,CAAC,CAAC,EACzBI,YAAa,WAAF,MAAS,CAAC,CAAC,EACtBC,iBAAkB,WAAF,MAAS,CAAC,CAAC,EAC9B,GAELC,aAAc,CACVC,OAAQ,WAAF,MAAS,CAAC,CAAC,EACjBC,QAAS,WAAF,MAAS,CAAC,CAAC,GAEtB1O,IAAGmN,IACC,SAAAwB,EAAYlP,EAAQK,GAAKtb,GAAA,KAAAmqB,GACrBlqB,KAAKgb,OAASA,EACdhb,KAAKqb,IAAMA,CACf,OAxJqB,yBAAArO,EAAAxB,OAAA,GAAAuB,EAAA,oCAEhCG,MAAA,KAAAvL,UAAA,UAOcunB,GAAwB7R,GAAA,OAAA8S,GAAAjd,MAAC,KAADvL,UAAA,CAsFvC,SAAAwoB,KAFC,OAEDA,GAAAvV,GAAA9O,KAAA8E,MAtFA,SAAAmM,EAAwCqT,GAAW,OAAAtkB,KAAAqB,MAAA,SAAA6P,GAAA,cAAAA,EAAA3L,KAAA2L,EAAApN,MAAA,cAAAoN,EAAAvN,OAAA,SACxC,IAAIwB,SAAQ,SAACpC,EAASwhB,GACzB,IAAIC,EAAW,EAGTC,EAAYvoB,KAAKC,MAEjBwV,EAAc,WAKhB,GAJA6S,IACoBtoB,KAAKC,MAGPsoB,EAAYH,EAC1BC,EAAO,IAAIphB,MAAM,0CAAD5H,OAA2C+oB,EAAW,cAK1E,GAAsB,oBAAX1c,QAA0BA,OAAOob,cACxCpb,OAAOob,cAAcC,aAChBhgB,MAAK,SAAA8f,GACFjkB,QAAQC,IAAI,uCACZgE,EAAQggB,EACZ,IAAE,OACK,SAAAhS,GACHjS,QAAQiS,MAAM,uCAAwCA,GAGtDrF,WAAWiG,EAxBL,IAyBV,QAXR,CAgBA,GAAsB,oBAAXI,OACP,MAA2B,mBAAhBA,OAAOjB,MAAwBiB,OAAOmR,cAY7CpkB,QAAQC,IAAI,kCAADxD,OAAmCipB,EAAQ,MACtDzS,OAAOmR,cAAe,OACtBngB,EAAQgP,UAbRjT,QAAQC,IAAI,+CAADxD,OAAgDipB,EAAQ,WACnEzS,OAAOjB,OAAO7N,MAAK,WACfnE,QAAQC,IAAI,kCACZgT,OAAOmR,cAAe,EACtBngB,EAAQgP,OACZ,IAAE,OAAO,SAAAhB,GACLjS,QAAQiS,MAAM,+BAAgCA,GAC9CwT,EAAOxT,EACX,KAWR,GAAsB,oBAAXnJ,QAA0BA,OAAOmK,OACxC,MAAkC,mBAAvBnK,OAAOmK,OAAOjB,MAAwBlJ,OAAOmK,OAAOmR,cAY3DpkB,QAAQC,IAAI,yCAADxD,OAA0CipB,EAAQ,MAC7D5c,OAAOmK,OAAOmR,cAAe,OAC7BngB,EAAQ6E,OAAOmK,UAbfjT,QAAQC,IAAI,sDAADxD,OAAuDipB,EAAQ,WAC1E5c,OAAOmK,OAAOjB,OAAO7N,MAAK,WACtBnE,QAAQC,IAAI,yCACZ6I,OAAOmK,OAAOmR,cAAe,EAC7BngB,EAAQ6E,OAAOmK,OACnB,IAAE,OAAO,SAAAhB,GACLjS,QAAQiS,MAAM,sCAAuCA,GACrDwT,EAAOxT,EACX,KAUJyT,GAxEY,IAyEZ1lB,QAAQkW,KAAK,8BAADzZ,OAzEA,GAyE0C,2DAG1DmQ,WAAWiG,EA3EO,IA2BlB,CAiDJ,EAEAA,GACJ,KAAE,wBAAAT,EAAAxL,OAAA,GAAAuL,EAAA,MACL7J,MAAA,KAAAvL,UAAA,iwCC5KDmE,GAAA,kBAAAC,CAAA,MAAAC,EAAAD,EAAA,GAAAE,EAAAC,OAAAC,UAAAC,EAAAH,EAAAI,eAAAC,EAAAJ,OAAAK,gBAAA,SAAAP,EAAAD,EAAAE,GAAAD,EAAAD,GAAAE,EAAApF,KAAA,EAAAoD,EAAA,mBAAAuC,OAAAA,OAAA,GAAAC,EAAAxC,EAAAyC,UAAA,aAAAC,EAAA1C,EAAA2C,eAAA,kBAAAC,EAAA5C,EAAA6C,aAAA,yBAAAC,EAAAf,EAAAD,EAAAE,GAAA,OAAAC,OAAAK,eAAAP,EAAAD,EAAA,CAAAlF,MAAAoF,EAAAe,YAAA,EAAAC,cAAA,EAAAC,UAAA,IAAAlB,EAAAD,EAAA,KAAAgB,EAAA,aAAAf,GAAAe,EAAA,SAAAf,EAAAD,EAAAE,GAAA,OAAAD,EAAAD,GAAAE,CAAA,WAAAkB,EAAAnB,EAAAD,EAAAE,EAAAG,GAAA,IAAAnC,EAAA8B,GAAAA,EAAAI,qBAAAiB,EAAArB,EAAAqB,EAAAX,EAAAP,OAAAmB,OAAApD,EAAAkC,WAAAQ,EAAA,IAAAW,EAAAlB,GAAA,WAAAE,EAAAG,EAAA,WAAA5F,MAAA0G,EAAAvB,EAAAC,EAAAU,KAAAF,CAAA,UAAAe,EAAAxB,EAAAD,EAAAE,GAAA,WAAAZ,KAAA,SAAAoC,IAAAzB,EAAA0B,KAAA3B,EAAAE,GAAA,OAAAD,GAAA,OAAAX,KAAA,QAAAoC,IAAAzB,EAAA,EAAAD,EAAAoB,KAAAA,EAAA,IAAAQ,EAAA,iBAAAC,EAAA,iBAAAC,EAAA,YAAAC,EAAA,YAAAC,EAAA,YAAAX,IAAA,UAAAY,IAAA,UAAAC,IAAA,KAAAC,EAAA,GAAAnB,EAAAmB,EAAAzB,GAAA,8BAAA0B,EAAAjC,OAAAkC,eAAAC,EAAAF,GAAAA,EAAAA,EAAAG,EAAA,MAAAD,GAAAA,IAAApC,GAAAG,EAAAsB,KAAAW,EAAA5B,KAAAyB,EAAAG,GAAA,IAAAE,EAAAN,EAAA9B,UAAAiB,EAAAjB,UAAAD,OAAAmB,OAAAa,GAAA,SAAAM,EAAAxC,GAAA,0BAAAzD,SAAA,SAAAwD,GAAAgB,EAAAf,EAAAD,GAAA,SAAAC,GAAA,YAAAyC,QAAA1C,EAAAC,EAAA,gBAAA0C,EAAA1C,EAAAD,GAAA,SAAA4C,EAAA1C,EAAAK,EAAArC,EAAAwC,GAAA,IAAAE,EAAAa,EAAAxB,EAAAC,GAAAD,EAAAM,GAAA,aAAAK,EAAAtB,KAAA,KAAAwB,EAAAF,EAAAc,IAAAE,EAAAd,EAAAhG,MAAA,OAAA8G,GAAA,UAAAiB,GAAAjB,IAAAvB,EAAAsB,KAAAC,EAAA,WAAA5B,EAAA8C,QAAAlB,EAAAmB,SAAAC,MAAA,SAAA/C,GAAA2C,EAAA,OAAA3C,EAAA/B,EAAAwC,EAAA,aAAAT,GAAA2C,EAAA,QAAA3C,EAAA/B,EAAAwC,EAAA,IAAAV,EAAA8C,QAAAlB,GAAAoB,MAAA,SAAA/C,GAAAa,EAAAhG,MAAAmF,EAAA/B,EAAA4C,EAAA,aAAAb,GAAA,OAAA2C,EAAA,QAAA3C,EAAA/B,EAAAwC,EAAA,IAAAA,EAAAE,EAAAc,IAAA,KAAAxB,EAAAK,EAAA,gBAAAzF,MAAA,SAAAmF,EAAAI,GAAA,SAAA4C,IAAA,WAAAjD,GAAA,SAAAA,EAAAE,GAAA0C,EAAA3C,EAAAI,EAAAL,EAAAE,EAAA,WAAAA,EAAAA,EAAAA,EAAA8C,KAAAC,EAAAA,GAAAA,GAAA,aAAAzB,EAAAxB,EAAAE,EAAAG,GAAA,IAAAE,EAAAqB,EAAA,gBAAA1D,EAAAwC,GAAA,GAAAH,IAAAuB,EAAA,MAAAoB,MAAA,mCAAA3C,IAAAwB,EAAA,cAAA7D,EAAA,MAAAwC,EAAA,OAAA5F,MAAAmF,EAAAkD,MAAA,OAAA9C,EAAA+C,OAAAlF,EAAAmC,EAAAqB,IAAAhB,IAAA,KAAAE,EAAAP,EAAAgD,SAAA,GAAAzC,EAAA,KAAAE,EAAAwC,EAAA1C,EAAAP,GAAA,GAAAS,EAAA,IAAAA,IAAAkB,EAAA,gBAAAlB,CAAA,cAAAT,EAAA+C,OAAA/C,EAAAkD,KAAAlD,EAAAmD,MAAAnD,EAAAqB,SAAA,aAAArB,EAAA+C,OAAA,IAAA7C,IAAAqB,EAAA,MAAArB,EAAAwB,EAAA1B,EAAAqB,IAAArB,EAAAoD,kBAAApD,EAAAqB,IAAA,gBAAArB,EAAA+C,QAAA/C,EAAAqD,OAAA,SAAArD,EAAAqB,KAAAnB,EAAAuB,EAAA,IAAAK,EAAAV,EAAAzB,EAAAE,EAAAG,GAAA,cAAA8B,EAAA7C,KAAA,IAAAiB,EAAAF,EAAA8C,KAAApB,EAAAF,EAAAM,EAAAT,MAAAM,EAAA,gBAAAlH,MAAAqH,EAAAT,IAAAyB,KAAA9C,EAAA8C,KAAA,WAAAhB,EAAA7C,OAAAiB,EAAAwB,EAAA1B,EAAA+C,OAAA,QAAA/C,EAAAqB,IAAAS,EAAAT,IAAA,YAAA4B,EAAAtD,EAAAE,GAAA,IAAAG,EAAAH,EAAAkD,OAAA7C,EAAAP,EAAAW,SAAAN,GAAA,GAAAE,IAAAN,EAAA,OAAAC,EAAAmD,SAAA,eAAAhD,GAAAL,EAAAW,SAAA,SAAAT,EAAAkD,OAAA,SAAAlD,EAAAwB,IAAAzB,EAAAqD,EAAAtD,EAAAE,GAAA,UAAAA,EAAAkD,SAAA,WAAA/C,IAAAH,EAAAkD,OAAA,QAAAlD,EAAAwB,IAAA,IAAAiC,UAAA,oCAAAtD,EAAA,aAAA2B,EAAA,IAAA9D,EAAAuD,EAAAlB,EAAAP,EAAAW,SAAAT,EAAAwB,KAAA,aAAAxD,EAAAoB,KAAA,OAAAY,EAAAkD,OAAA,QAAAlD,EAAAwB,IAAAxD,EAAAwD,IAAAxB,EAAAmD,SAAA,KAAArB,EAAA,IAAAtB,EAAAxC,EAAAwD,IAAA,OAAAhB,EAAAA,EAAAyC,MAAAjD,EAAAF,EAAA4D,YAAAlD,EAAA5F,MAAAoF,EAAA2D,KAAA7D,EAAA8D,QAAA,WAAA5D,EAAAkD,SAAAlD,EAAAkD,OAAA,OAAAlD,EAAAwB,IAAAzB,GAAAC,EAAAmD,SAAA,KAAArB,GAAAtB,GAAAR,EAAAkD,OAAA,QAAAlD,EAAAwB,IAAA,IAAAiC,UAAA,oCAAAzD,EAAAmD,SAAA,KAAArB,EAAA,UAAA+B,EAAA9D,GAAA,IAAAD,EAAA,CAAAgE,OAAA/D,EAAA,SAAAA,IAAAD,EAAAiE,SAAAhE,EAAA,SAAAA,IAAAD,EAAAkE,WAAAjE,EAAA,GAAAD,EAAAmE,SAAAlE,EAAA,SAAAmE,WAAAtI,KAAAkE,EAAA,UAAAqE,EAAApE,GAAA,IAAAD,EAAAC,EAAAqE,YAAA,GAAAtE,EAAAV,KAAA,gBAAAU,EAAA0B,IAAAzB,EAAAqE,WAAAtE,CAAA,UAAAuB,EAAAtB,GAAA,KAAAmE,WAAA,EAAAJ,OAAA,SAAA/D,EAAAzD,QAAAuH,EAAA,WAAAQ,OAAA,YAAAhC,EAAAvC,GAAA,GAAAA,GAAA,KAAAA,EAAA,KAAAE,EAAAF,EAAAU,GAAA,GAAAR,EAAA,OAAAA,EAAAyB,KAAA3B,GAAA,sBAAAA,EAAA6D,KAAA,OAAA7D,EAAA,IAAAwE,MAAAxE,EAAAnE,QAAA,KAAA0E,GAAA,EAAArC,EAAA,SAAA2F,IAAA,OAAAtD,EAAAP,EAAAnE,QAAA,GAAAwE,EAAAsB,KAAA3B,EAAAO,GAAA,OAAAsD,EAAA/I,MAAAkF,EAAAO,GAAAsD,EAAAV,MAAA,EAAAU,EAAA,OAAAA,EAAA/I,MAAAmF,EAAA4D,EAAAV,MAAA,EAAAU,CAAA,SAAA3F,EAAA2F,KAAA3F,CAAA,YAAAyF,UAAAd,GAAA7C,GAAA,2BAAAiC,EAAA7B,UAAA8B,EAAA3B,EAAAiC,EAAA,eAAA1H,MAAAoH,EAAAhB,cAAA,IAAAX,EAAA2B,EAAA,eAAApH,MAAAmH,EAAAf,cAAA,IAAAe,EAAAwC,YAAAzD,EAAAkB,EAAApB,EAAA,qBAAAd,EAAA0E,oBAAA,SAAAzE,GAAA,IAAAD,EAAA,mBAAAC,GAAAA,EAAA0E,YAAA,QAAA3E,IAAAA,IAAAiC,GAAA,uBAAAjC,EAAAyE,aAAAzE,EAAA4E,MAAA,EAAA5E,EAAA6E,KAAA,SAAA5E,GAAA,OAAAE,OAAA2E,eAAA3E,OAAA2E,eAAA7E,EAAAiC,IAAAjC,EAAA8E,UAAA7C,EAAAlB,EAAAf,EAAAa,EAAA,sBAAAb,EAAAG,UAAAD,OAAAmB,OAAAkB,GAAAvC,CAAA,EAAAD,EAAAgF,MAAA,SAAA/E,GAAA,OAAA8C,QAAA9C,EAAA,EAAAwC,EAAAE,EAAAvC,WAAAY,EAAA2B,EAAAvC,UAAAQ,GAAA,0BAAAZ,EAAA2C,cAAAA,EAAA3C,EAAAiF,MAAA,SAAAhF,EAAAC,EAAAG,EAAAE,EAAArC,QAAA,IAAAA,IAAAA,EAAAgH,SAAA,IAAAxE,EAAA,IAAAiC,EAAAvB,EAAAnB,EAAAC,EAAAG,EAAAE,GAAArC,GAAA,OAAA8B,EAAA0E,oBAAAxE,GAAAQ,EAAAA,EAAAmD,OAAAb,MAAA,SAAA/C,GAAA,OAAAA,EAAAkD,KAAAlD,EAAAnF,MAAA4F,EAAAmD,MAAA,KAAApB,EAAAD,GAAAxB,EAAAwB,EAAA1B,EAAA,aAAAE,EAAAwB,EAAA9B,GAAA,0BAAAM,EAAAwB,EAAA,qDAAAxC,EAAAmF,KAAA,SAAAlF,GAAA,IAAAD,EAAAG,OAAAF,GAAAC,EAAA,WAAAG,KAAAL,EAAAE,EAAApE,KAAAuE,GAAA,OAAAH,EAAAkF,UAAA,SAAAvB,IAAA,KAAA3D,EAAArE,QAAA,KAAAoE,EAAAC,EAAAmF,MAAA,GAAApF,KAAAD,EAAA,OAAA6D,EAAA/I,MAAAmF,EAAA4D,EAAAV,MAAA,EAAAU,CAAA,QAAAA,EAAAV,MAAA,EAAAU,CAAA,GAAA7D,EAAAuC,OAAAA,EAAAhB,EAAAnB,UAAA,CAAAuE,YAAApD,EAAAgD,MAAA,SAAAvE,GAAA,QAAAsF,KAAA,OAAAzB,KAAA,OAAAN,KAAA,KAAAC,MAAAvD,EAAA,KAAAkD,MAAA,OAAAE,SAAA,UAAAD,OAAA,YAAA1B,IAAAzB,EAAA,KAAAmE,WAAA5H,QAAA6H,IAAArE,EAAA,QAAAE,KAAA,WAAAA,EAAAqF,OAAA,IAAAlF,EAAAsB,KAAA,KAAAzB,KAAAsE,OAAAtE,EAAAsF,MAAA,WAAAtF,GAAAD,EAAA,EAAAwF,KAAA,gBAAAtC,MAAA,MAAAlD,EAAA,KAAAmE,WAAA,GAAAE,WAAA,aAAArE,EAAAX,KAAA,MAAAW,EAAAyB,IAAA,YAAAgE,IAAA,EAAAjC,kBAAA,SAAAzD,GAAA,QAAAmD,KAAA,MAAAnD,EAAA,IAAAE,EAAA,cAAAyF,EAAAtF,EAAAE,GAAA,OAAAG,EAAApB,KAAA,QAAAoB,EAAAgB,IAAA1B,EAAAE,EAAA2D,KAAAxD,EAAAE,IAAAL,EAAAkD,OAAA,OAAAlD,EAAAwB,IAAAzB,KAAAM,CAAA,SAAAA,EAAA,KAAA6D,WAAAvI,OAAA,EAAA0E,GAAA,IAAAA,EAAA,KAAArC,EAAA,KAAAkG,WAAA7D,GAAAG,EAAAxC,EAAAoG,WAAA,YAAApG,EAAA8F,OAAA,OAAA2B,EAAA,UAAAzH,EAAA8F,QAAA,KAAAsB,KAAA,KAAA1E,EAAAP,EAAAsB,KAAAzD,EAAA,YAAA4C,EAAAT,EAAAsB,KAAAzD,EAAA,iBAAA0C,GAAAE,EAAA,SAAAwE,KAAApH,EAAA+F,SAAA,OAAA0B,EAAAzH,EAAA+F,UAAA,WAAAqB,KAAApH,EAAAgG,WAAA,OAAAyB,EAAAzH,EAAAgG,WAAA,SAAAtD,GAAA,QAAA0E,KAAApH,EAAA+F,SAAA,OAAA0B,EAAAzH,EAAA+F,UAAA,YAAAnD,EAAA,MAAAoC,MAAA,kDAAAoC,KAAApH,EAAAgG,WAAA,OAAAyB,EAAAzH,EAAAgG,WAAA,KAAAR,OAAA,SAAAzD,EAAAD,GAAA,QAAAE,EAAA,KAAAkE,WAAAvI,OAAA,EAAAqE,GAAA,IAAAA,EAAA,KAAAK,EAAA,KAAA6D,WAAAlE,GAAA,GAAAK,EAAAyD,QAAA,KAAAsB,MAAAjF,EAAAsB,KAAApB,EAAA,oBAAA+E,KAAA/E,EAAA2D,WAAA,KAAAhG,EAAAqC,EAAA,OAAArC,IAAA,UAAA+B,GAAA,aAAAA,IAAA/B,EAAA8F,QAAAhE,GAAAA,GAAA9B,EAAAgG,aAAAhG,EAAA,UAAAwC,EAAAxC,EAAAA,EAAAoG,WAAA,UAAA5D,EAAApB,KAAAW,EAAAS,EAAAgB,IAAA1B,EAAA9B,GAAA,KAAAkF,OAAA,YAAAS,KAAA3F,EAAAgG,WAAAlC,GAAA,KAAA4D,SAAAlF,EAAA,EAAAkF,SAAA,SAAA3F,EAAAD,GAAA,aAAAC,EAAAX,KAAA,MAAAW,EAAAyB,IAAA,gBAAAzB,EAAAX,MAAA,aAAAW,EAAAX,KAAA,KAAAuE,KAAA5D,EAAAyB,IAAA,WAAAzB,EAAAX,MAAA,KAAAoG,KAAA,KAAAhE,IAAAzB,EAAAyB,IAAA,KAAA0B,OAAA,cAAAS,KAAA,kBAAA5D,EAAAX,MAAAU,IAAA,KAAA6D,KAAA7D,GAAAgC,CAAA,EAAA6D,OAAA,SAAA5F,GAAA,QAAAD,EAAA,KAAAoE,WAAAvI,OAAA,EAAAmE,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAAkE,WAAApE,GAAA,GAAAE,EAAAgE,aAAAjE,EAAA,YAAA2F,SAAA1F,EAAAoE,WAAApE,EAAAiE,UAAAE,EAAAnE,GAAA8B,CAAA,kBAAA/B,GAAA,QAAAD,EAAA,KAAAoE,WAAAvI,OAAA,EAAAmE,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAAkE,WAAApE,GAAA,GAAAE,EAAA8D,SAAA/D,EAAA,KAAAI,EAAAH,EAAAoE,WAAA,aAAAjE,EAAAf,KAAA,KAAAiB,EAAAF,EAAAqB,IAAA2C,EAAAnE,EAAA,QAAAK,CAAA,QAAA2C,MAAA,0BAAA4C,cAAA,SAAA9F,EAAAE,EAAAG,GAAA,YAAAgD,SAAA,CAAA1C,SAAA4B,EAAAvC,GAAA4D,WAAA1D,EAAA4D,QAAAzD,GAAA,cAAA+C,SAAA,KAAA1B,IAAAzB,GAAA+B,CAAA,GAAAhC,CAAA,UAAA+F,GAAA1F,EAAAJ,EAAAD,EAAAE,EAAAK,EAAAG,EAAAE,GAAA,QAAA1C,EAAAmC,EAAAK,GAAAE,GAAAE,EAAA5C,EAAApD,KAAA,OAAAuF,GAAA,YAAAL,EAAAK,EAAA,CAAAnC,EAAAiF,KAAAlD,EAAAa,GAAAoE,QAAApC,QAAAhC,GAAAkC,KAAA9C,EAAAK,EAAA,UAAAsO,GAAAxO,GAAA,sBAAAJ,EAAA,KAAAD,EAAApE,UAAA,WAAAsJ,SAAA,SAAAhF,EAAAK,GAAA,IAAAG,EAAAL,EAAA8G,MAAAlH,EAAAD,GAAA,SAAAoH,EAAA/G,GAAA0F,GAAArF,EAAAR,EAAAK,EAAA6G,EAAAC,EAAA,OAAAhH,EAAA,UAAAgH,EAAAhH,GAAA0F,GAAArF,EAAAR,EAAAK,EAAA6G,EAAAC,EAAA,QAAAhH,EAAA,CAAA+G,OAAA,gBAAApB,GAAAhG,EAAAE,GAAA,QAAAD,EAAA,EAAAA,EAAAC,EAAArE,OAAAoE,IAAA,KAAAM,EAAAL,EAAAD,GAAAM,EAAAU,WAAAV,EAAAU,aAAA,EAAAV,EAAAW,cAAA,YAAAX,IAAAA,EAAAY,UAAA,GAAAhB,OAAAK,eAAAR,EAAAiG,GAAA1F,EAAA1F,KAAA0F,EAAA,WAAA0F,GAAAhG,GAAA,IAAA/B,EAAA,SAAA+B,GAAA,aAAA4C,GAAA5C,KAAAA,EAAA,OAAAA,EAAA,IAAAD,EAAAC,EAAAQ,OAAAyF,aAAA,YAAAlG,EAAA,KAAA9B,EAAA8B,EAAA2B,KAAA1B,EAAAC,UAAA,aAAA2C,GAAA3E,GAAA,OAAAA,EAAA,UAAAyF,UAAA,uDAAAwC,OAAAlG,EAAA,CAAAmG,CAAAnG,GAAA,gBAAA4C,GAAA3E,GAAAA,EAAAA,EAAA,GAKO,IAAMumB,GAAc,WAUvB,OAfJzkB,EAMI,SAAAykB,KANJ,SAAA/jB,EAAAL,GAAA,KAAAK,aAAAL,GAAA,UAAAsD,UAAA,qCAMkB3J,CAAA,KAAAyqB,GACVxqB,KAAK+N,MAAQ,KACb/N,KAAKspB,OAAS,IAAImB,IAClBzqB,KAAKupB,UAAY,IAAIkB,IACrBzqB,KAAKgW,eAAgB,EACrBhW,KAAK6X,OAAS,KACd7X,KAAK0qB,YAAc,IACvB,EAbJzkB,EAeI,EAAArF,IAAA,OAAAC,OAAAiW,EAAAlC,GAAA9O,KAAA8E,MAIA,SAAAmM,IAAA,IAAAtV,EAAA,YAAAqE,KAAAqB,MAAA,SAAA6P,GAAA,cAAAA,EAAA3L,KAAA2L,EAAApN,MAAA,WAEQ5J,KAAK0qB,YAAa,CAAF1T,EAAApN,KAAA,eAAAoN,EAAAvN,OAAA,SACTzJ,KAAK0qB,aAAW,OAwDxB,OApDH1qB,KAAK0qB,YAAc,IAAIzf,QAAO,eAAAgM,EAAArC,GAAA9O,KAAA8E,MAAC,SAAAmC,EAAOlE,GAAO,IAAA8hB,EAAAC,EAAA,OAAA9kB,KAAAqB,MAAA,SAAA6F,GAAA,cAAAA,EAAA3B,KAAA2B,EAAApD,MAAA,OAIrC,OAJqCoD,EAAA3B,KAAA,EAErCzG,QAAQC,IAAI,2CAEZmI,EAAApD,KAAA,EACoB+e,KAAY,OAArB,GAAXlnB,EAAKoW,OAAM7K,EAAA1D,KAGN7H,EAAKoW,SDgNA,oBAAXnK,QAA0BA,OAAOob,cACjCpb,OAAOob,cAAc7S,gBAIN,oBAAX4B,QAA0BA,OAAOmR,cACtB,oBAAXtb,QAA0BA,OAAOmK,QAAUnK,OAAOmK,OAAOmR,cCtNpB,CAAAhc,EAAApD,KAAA,QAErB,OADfhF,QAAQiS,MAAM,6EACdhO,GAAQ,GAAOmE,EAAAvD,OAAA,oBAKdhI,EAAKoW,OAAQ,CAAF7K,EAAApD,KAAA,SACc,GAA1BnI,EAAKoW,ODuNC,oBAAXnK,QAA0BA,OAAOob,cACjCpb,OAAOob,cAAc+B,YAIV,oBAAXhT,QAA0BA,OAAOmR,aACjCnR,OAGW,oBAAXnK,QAA0BA,OAAOmK,QAAUnK,OAAOmK,OAAOmR,aACzDtb,OAAOmK,OAGX,KCnOcpW,EAAKoW,OAAQ,CAAF7K,EAAApD,KAAA,SAEG,OADfhF,QAAQiS,MAAM,sDACdhO,GAAQ,GAAOmE,EAAAvD,OAAA,kBAWvB,GALA7E,QAAQC,IAAI,gDAGN+lB,EAAU,CAAE9b,EAAG,EAAK/G,GAAI,KAAMgH,EAAG,GAGN,mBAAtBtN,EAAKoW,OAAOuR,MAAoB,CAAApc,EAAApD,KAAA,SACvCnI,EAAKsM,MAAQ,IAAItM,EAAKoW,OAAOuR,MAAMwB,GAAS5d,EAAApD,KAAA,oBACH,mBAAV,QAAxB+gB,EAAOlpB,EAAKoW,OAAOuR,aAAK,IAAAuB,OAAA,EAAjBA,EAAA,KAAqC,CAAA3d,EAAApD,KAAA,SAEnDnI,EAAKsM,MAAQtM,EAAKoW,OAAOuR,MAAK,IAAKwB,GAAS5d,EAAApD,KAAA,iBAG7B,OADfhF,QAAQiS,MAAM,4EACdhO,GAAQ,GAAOmE,EAAAvD,OAAA,kBAKnBhI,EAAKuU,eAAgB,EAErBpR,QAAQC,IAAI,8DACZgE,GAAQ,GAAMmE,EAAApD,KAAA,iBAAAoD,EAAA3B,KAAA,GAAA2B,EAAAoK,GAAApK,EAAA,SAEdpI,QAAQiS,MAAM,mDAAkD7J,EAAAoK,IAChE3V,EAAKuU,eAAgB,EACrBnN,GAAQ,GAAO,yBAAAmE,EAAAxB,OAAA,GAAAuB,EAAA,mBAEtB,gBAAAsK,GAAA,OAAAJ,EAAA/J,MAAA,KAAAvL,UAAA,EApD6B,IAoD3BqV,EAAAvN,OAAA,SAEIzJ,KAAK0qB,aAAW,wBAAA1T,EAAAxL,OAAA,GAAAuL,EAAA,UAC1B,WA9DS,OAAAD,EAAA5J,MAAC,KAADvL,UAAA,IAgEV,CAAAf,IAAA,UAAAC,MAIA,WACI,OAAOb,KAAKgW,eAAgC,OAAfhW,KAAK+N,KACtC,GAEA,CAAAnN,IAAA,WAAAC,MAIA,WACI,OAAOb,KAAK+N,KAChB,GAEA,CAAAnN,IAAA,SAAAC,MAIA,SAAOqS,GACH,GAAKlT,KAAK8d,UAEV,IAEmC,mBAApB9d,KAAK+N,MAAM+c,KAClB9qB,KAAK+N,MAAM+c,OAC2B,mBAAxB9qB,KAAK+N,MAAMgd,UAEzB/qB,KAAK+N,MAAMgd,SAAS7X,GAAa,EAAE,IAIvClT,KAAKgrB,cACT,CAAE,MAAOnU,GACLjS,QAAQiS,MAAM,gDAAiDA,EACnE,CACJ,GAEA,CAAAjW,IAAA,eAAAC,MAGA,WACI,IACI,IACsCoqB,EADtCC,gmBAAAC,CAC2BnrB,KAAKspB,QAAM,IAAtC,IAAA4B,EAAApjB,MAAAmjB,EAAAC,EAAA9kB,KAAA8C,MAAwC,KAAAkiB,EAAAC,GAAAJ,EAAApqB,MAAA,GAA9B2d,EAAM4M,EAAA,GAAE5d,EAAI4d,EAAA,GAClB,GAAI5M,GAAUA,EAAO3P,UAAYrB,EAAM,CACnC,IAAIqB,OAAQ,EAGZ,GAAgC,mBAArBrB,EAAKgc,YACZ3a,EAAWrB,EAAKgc,mBACb,GAAmC,mBAAxBhc,EAAK8d,eACnBzc,EAAWrB,EAAK8d,qBACb,KAAI9d,EAAKgc,YAGZ,SAFA3a,EAAWrB,EAAKgc,WAGpB,CAGAhL,EAAO3P,SAASyN,IAAIzN,EAASC,EAAGD,EAAS9G,EAAG8G,EAASE,GAGjB,mBAAzByP,EAAO+M,eACd/M,EAAO+M,cAAc/d,EAE7B,CACJ,CAAC,OAAAge,GAAAN,EAAAnlB,EAAAylB,EAAA,SAAAN,EAAArjB,GAAA,CACL,CAAE,MAAOgP,GACLjS,QAAQiS,MAAM,0DAA2DA,EAC7E,CACJ,GAEA,CAAAjW,IAAA,iBAAAC,MAQA,SAAe8N,GACX,IAAK3O,KAAK8d,UAAW,OAAO,KAE5B,IACI,IAII2N,EAJE5c,EAAWF,EAAQE,UAAY,CAAEC,EAAG,EAAG/G,EAAG,EAAGgH,EAAG,GAChDwP,EAAO5P,EAAQ4P,MAAQ,CAAEzP,EAAG,EAAG/G,EAAG,EAAGgH,EAAG,GAIC,mBAApC/O,KAAK6X,OAAO6R,cAAcC,MACjC8B,EAAgBzrB,KAAK6X,OAAO6R,cAAcC,QACrCF,eAAe5a,EAASC,EAAGD,EAAS9G,EAAG8G,EAASE,IAGrD0c,EAAgB,IAAIzrB,KAAK6X,OAAO6R,cAAc1pB,KAAK6X,OAAO6T,cAAcC,QAC1DnC,YAAc,CAAE1a,EAAGD,EAASC,EAAG/G,EAAG8G,EAAS9G,EAAGgH,EAAGF,EAASE,GAG5E,IAGI6c,EAHEC,EAAY7rB,KAAK+N,MAAM+d,gBAAgBL,GAKzCG,EAD2C,mBAApC5rB,KAAK6X,OAAOkS,aAAaC,OACjBhqB,KAAK6X,OAAOkS,aAAaC,OACpCzL,EAAKzP,EAAI,EAAGyP,EAAKxW,EAAI,EAAGwW,EAAKxP,EAAI,GAItB,IAAI/O,KAAK6X,OAAOkS,aAC3B,IAAI/pB,KAAK6X,OAAOkU,OAAOxN,EAAKzP,EAAI,EAAGyP,EAAKxW,EAAI,EAAGwW,EAAKxP,EAAI,IAIhE,IAAMid,EAAWhsB,KAAK+N,MAAMke,eAAeL,EAAcC,GAQzD,OALIld,EAAQ6P,SACRxe,KAAKspB,OAAOhN,IAAI3N,EAAQ6P,OAAQqN,GAChC7rB,KAAKupB,UAAUjN,IAAI3N,EAAQ6P,OAAQwN,IAGhCA,CACX,CAAE,MAAOnV,GAEL,OADAjS,QAAQiS,MAAM,mDAAoDA,GAC3D,IACX,CACJ,GAEA,CAAAjW,IAAA,kBAAAC,MASA,SAAgB8N,GACZ,IAAK3O,KAAK8d,UAAW,OAAO,KAE5B,IACI,IAKI2N,EALE5c,EAAWF,EAAQE,UAAY,CAAEC,EAAG,EAAG/G,EAAG,EAAGgH,EAAG,GAChDmd,EAASvd,EAAQud,QAAU,GAC3BvZ,EAAShE,EAAQgE,QAAU,IAIgB,mBAAtC3S,KAAK6X,OAAO6R,cAAcE,QACjC6B,EAAgBzrB,KAAK6X,OAAO6R,cAAcE,UACrCH,eAAe5a,EAASC,EAAGD,EAAS9G,EAAG8G,EAASE,GAChD8a,aAAY,GACZC,iBAAiB,MAGtB2B,EAAgB,IAAIzrB,KAAK6X,OAAO6R,cAAc1pB,KAAK6X,OAAO6T,cAAcS,UAC1D3C,YAAc,CAAE1a,EAAGD,EAASC,EAAG/G,EAAG8G,EAAS9G,EAAGgH,EAAGF,EAASE,GACxE0c,EAAcW,UAAW,EACzBX,EAAcY,cAAgB,IAGlC,IAGIT,EAHEC,EAAY7rB,KAAK+N,MAAM+d,gBAAgBL,GAKzCG,EAD4C,mBAArC5rB,KAAK6X,OAAOkS,aAAaE,QACjBjqB,KAAK6X,OAAOkS,aAAaE,QACpCtX,EAAS,EAAIuZ,EACbA,GAIW,IAAIlsB,KAAK6X,OAAOkS,aAC3B,IAAI/pB,KAAK6X,OAAOyU,QAAQ3Z,EAAS,EAAIuZ,EAAQA,IAIrD,IAAMF,EAAWhsB,KAAK+N,MAAMke,eAAeL,EAAcC,GAQzD,OALIld,EAAQ6P,SACRxe,KAAKspB,OAAOhN,IAAI3N,EAAQ6P,OAAQqN,GAChC7rB,KAAKupB,UAAUjN,IAAI3N,EAAQ6P,OAAQwN,IAGhCH,CACX,CAAE,MAAOhV,GAEL,OADAjS,QAAQiS,MAAM,iDAAkDA,GACzD,IACX,CACJ,GAEA,CAAAjW,IAAA,UAAAC,MAOA,SAAQma,EAAQ/L,GAA8B,IAAnB+F,EAAWrT,UAAAC,OAAA,QAAAV,IAAAS,UAAA,GAAAA,UAAA,GAAG,IACrC,IAAK3B,KAAK8d,UAAW,OAAO,KAE5B,IAEI,IAAIxC,EASJ,OAPIA,EAD2B,mBAApBtb,KAAK6X,OAAO0D,IACb,IAAIvb,KAAK6X,OAAO0D,IAAIP,EAAQ/L,GAG5B,CAAE+L,OAAAA,EAAQ/L,UAAAA,GAIc,mBAAvBjP,KAAK+N,MAAM4J,QACX3X,KAAK+N,MAAM4J,QAAQ2D,EAAKtG,GAAa,GACK,mBAAnChV,KAAK+N,MAAM6J,oBAClB5X,KAAK+N,MAAM6J,oBAAoBoD,EAAQ/L,EAAW+F,GAAa,IAEtEpQ,QAAQkW,KAAK,8CACN,KAEf,CAAE,MAAOjE,GAEL,OADAjS,QAAQiS,MAAM,kDAAmDA,GAC1D,IACX,CACJ,GAEA,CAAAjW,IAAA,eAAAC,MAOA,WAA2B,IAAd8N,EAAOhN,UAAAC,OAAA,QAAAV,IAAAS,UAAA,GAAAA,UAAA,GAAG,CAAC,EACpB,IAAK3B,KAAK8d,UAAW,OAAO,KAE5B,IACI,IAII2N,EAJEc,EAAS5d,EAAQ4d,QAAU,CAAEzd,EAAG,EAAG/G,EAAG,EAAGgH,EAAG,GAC5Cyd,EAAS7d,EAAQ6d,QAAU,EAK7Bf,EAD2C,mBAApCzrB,KAAK6X,OAAO6R,cAAcC,MACjB3pB,KAAK6X,OAAO6R,cAAcC,QAG1B,IAAI3pB,KAAK6X,OAAO6R,cAAc1pB,KAAK6X,OAAO6T,cAAcC,OAG5E,IAGIC,EAHEC,EAAY7rB,KAAK+N,MAAM+d,gBAAgBL,GAa7C,OARIG,EAD8C,mBAAvC5rB,KAAK6X,OAAOkS,aAAa0C,UACjBzsB,KAAK6X,OAAOkS,aAAa0C,UAAUF,EAAQC,GAG3C,IAAIxsB,KAAK6X,OAAOkS,aAC3B,IAAI/pB,KAAK6X,OAAO6U,UAAUH,EAAQC,IAInCxsB,KAAK+N,MAAMke,eAAeL,EAAcC,EACnD,CAAE,MAAOhV,GAEL,OADAjS,QAAQiS,MAAM,iDAAkDA,GACzD,IACX,CACJ,GAEA,CAAAjW,IAAA,aAAAC,MAIA,SAAW2d,GACP,IACI,GAAIxe,KAAKspB,OAAOqD,IAAInO,GAAS,CACzB,IAAMhR,EAAOxN,KAAKspB,OAAOsD,IAAIpO,GAC7Bxe,KAAK+N,MAAM8e,gBAAgBrf,GAC3BxN,KAAKspB,OAAM,OAAQ9K,EACvB,CAEIxe,KAAKupB,UAAUoD,IAAInO,IACnBxe,KAAKupB,UAAS,OAAQ/K,EAE9B,CAAE,MAAO3H,GACLjS,QAAQiS,MAAM,4CAA6CA,EAC/D,CACJ,GAEA,CAAAjW,IAAA,UAAAC,MAGA,WACI,IAEIb,KAAKspB,OAAOjK,QACZrf,KAAKupB,UAAUlK,QAGXrf,KAAK+N,QAE0B,mBAApB/N,KAAK+N,MAAM+e,MAClB9sB,KAAK+N,MAAM+e,OAEf9sB,KAAK+N,MAAQ,MAGjB/N,KAAKgW,eAAgB,EACrBhW,KAAK0qB,YAAc,KACnB9lB,QAAQC,IAAI,sCAChB,CAAE,MAAOgS,GACLjS,QAAQiS,MAAM,oDAAqDA,EACvE,CACJ,IA9YJ5Q,GAAA8F,GAAAhG,EAAAI,UAAAF,GAAAC,OAAAK,eAAAR,EAAA,aAAAmB,UAAA,IAAAnB,EAAA,IAAAA,EAAAE,EAeI6Q,CA+XC,CAzYsB,0PCL3BhR,GAAA,kBAAAC,CAAA,MAAAC,EAAAD,EAAA,GAAAE,EAAAC,OAAAC,UAAAC,EAAAH,EAAAI,eAAAC,EAAAJ,OAAAK,gBAAA,SAAAP,EAAAD,EAAAE,GAAAD,EAAAD,GAAAE,EAAApF,KAAA,EAAAoD,EAAA,mBAAAuC,OAAAA,OAAA,GAAAC,EAAAxC,EAAAyC,UAAA,aAAAC,EAAA1C,EAAA2C,eAAA,kBAAAC,EAAA5C,EAAA6C,aAAA,yBAAAC,EAAAf,EAAAD,EAAAE,GAAA,OAAAC,OAAAK,eAAAP,EAAAD,EAAA,CAAAlF,MAAAoF,EAAAe,YAAA,EAAAC,cAAA,EAAAC,UAAA,IAAAlB,EAAAD,EAAA,KAAAgB,EAAA,aAAAf,GAAAe,EAAA,SAAAf,EAAAD,EAAAE,GAAA,OAAAD,EAAAD,GAAAE,CAAA,WAAAkB,EAAAnB,EAAAD,EAAAE,EAAAG,GAAA,IAAAnC,EAAA8B,GAAAA,EAAAI,qBAAAiB,EAAArB,EAAAqB,EAAAX,EAAAP,OAAAmB,OAAApD,EAAAkC,WAAAQ,EAAA,IAAAW,EAAAlB,GAAA,WAAAE,EAAAG,EAAA,WAAA5F,MAAA0G,EAAAvB,EAAAC,EAAAU,KAAAF,CAAA,UAAAe,EAAAxB,EAAAD,EAAAE,GAAA,WAAAZ,KAAA,SAAAoC,IAAAzB,EAAA0B,KAAA3B,EAAAE,GAAA,OAAAD,GAAA,OAAAX,KAAA,QAAAoC,IAAAzB,EAAA,EAAAD,EAAAoB,KAAAA,EAAA,IAAAQ,EAAA,iBAAAC,EAAA,iBAAAC,EAAA,YAAAC,EAAA,YAAAC,EAAA,YAAAX,IAAA,UAAAY,IAAA,UAAAC,IAAA,KAAAC,EAAA,GAAAnB,EAAAmB,EAAAzB,GAAA,8BAAA0B,EAAAjC,OAAAkC,eAAAC,EAAAF,GAAAA,EAAAA,EAAAG,EAAA,MAAAD,GAAAA,IAAApC,GAAAG,EAAAsB,KAAAW,EAAA5B,KAAAyB,EAAAG,GAAA,IAAAE,EAAAN,EAAA9B,UAAAiB,EAAAjB,UAAAD,OAAAmB,OAAAa,GAAA,SAAAM,EAAAxC,GAAA,0BAAAzD,SAAA,SAAAwD,GAAAgB,EAAAf,EAAAD,GAAA,SAAAC,GAAA,YAAAyC,QAAA1C,EAAAC,EAAA,gBAAA0C,EAAA1C,EAAAD,GAAA,SAAA4C,EAAA1C,EAAAK,EAAArC,EAAAwC,GAAA,IAAAE,EAAAa,EAAAxB,EAAAC,GAAAD,EAAAM,GAAA,aAAAK,EAAAtB,KAAA,KAAAwB,EAAAF,EAAAc,IAAAE,EAAAd,EAAAhG,MAAA,OAAA8G,GAAA,UAAAiB,GAAAjB,IAAAvB,EAAAsB,KAAAC,EAAA,WAAA5B,EAAA8C,QAAAlB,EAAAmB,SAAAC,MAAA,SAAA/C,GAAA2C,EAAA,OAAA3C,EAAA/B,EAAAwC,EAAA,aAAAT,GAAA2C,EAAA,QAAA3C,EAAA/B,EAAAwC,EAAA,IAAAV,EAAA8C,QAAAlB,GAAAoB,MAAA,SAAA/C,GAAAa,EAAAhG,MAAAmF,EAAA/B,EAAA4C,EAAA,aAAAb,GAAA,OAAA2C,EAAA,QAAA3C,EAAA/B,EAAAwC,EAAA,IAAAA,EAAAE,EAAAc,IAAA,KAAAxB,EAAAK,EAAA,gBAAAzF,MAAA,SAAAmF,EAAAI,GAAA,SAAA4C,IAAA,WAAAjD,GAAA,SAAAA,EAAAE,GAAA0C,EAAA3C,EAAAI,EAAAL,EAAAE,EAAA,WAAAA,EAAAA,EAAAA,EAAA8C,KAAAC,EAAAA,GAAAA,GAAA,aAAAzB,EAAAxB,EAAAE,EAAAG,GAAA,IAAAE,EAAAqB,EAAA,gBAAA1D,EAAAwC,GAAA,GAAAH,IAAAuB,EAAA,MAAAoB,MAAA,mCAAA3C,IAAAwB,EAAA,cAAA7D,EAAA,MAAAwC,EAAA,OAAA5F,MAAAmF,EAAAkD,MAAA,OAAA9C,EAAA+C,OAAAlF,EAAAmC,EAAAqB,IAAAhB,IAAA,KAAAE,EAAAP,EAAAgD,SAAA,GAAAzC,EAAA,KAAAE,EAAAwC,EAAA1C,EAAAP,GAAA,GAAAS,EAAA,IAAAA,IAAAkB,EAAA,gBAAAlB,CAAA,cAAAT,EAAA+C,OAAA/C,EAAAkD,KAAAlD,EAAAmD,MAAAnD,EAAAqB,SAAA,aAAArB,EAAA+C,OAAA,IAAA7C,IAAAqB,EAAA,MAAArB,EAAAwB,EAAA1B,EAAAqB,IAAArB,EAAAoD,kBAAApD,EAAAqB,IAAA,gBAAArB,EAAA+C,QAAA/C,EAAAqD,OAAA,SAAArD,EAAAqB,KAAAnB,EAAAuB,EAAA,IAAAK,EAAAV,EAAAzB,EAAAE,EAAAG,GAAA,cAAA8B,EAAA7C,KAAA,IAAAiB,EAAAF,EAAA8C,KAAApB,EAAAF,EAAAM,EAAAT,MAAAM,EAAA,gBAAAlH,MAAAqH,EAAAT,IAAAyB,KAAA9C,EAAA8C,KAAA,WAAAhB,EAAA7C,OAAAiB,EAAAwB,EAAA1B,EAAA+C,OAAA,QAAA/C,EAAAqB,IAAAS,EAAAT,IAAA,YAAA4B,EAAAtD,EAAAE,GAAA,IAAAG,EAAAH,EAAAkD,OAAA7C,EAAAP,EAAAW,SAAAN,GAAA,GAAAE,IAAAN,EAAA,OAAAC,EAAAmD,SAAA,eAAAhD,GAAAL,EAAAW,SAAA,SAAAT,EAAAkD,OAAA,SAAAlD,EAAAwB,IAAAzB,EAAAqD,EAAAtD,EAAAE,GAAA,UAAAA,EAAAkD,SAAA,WAAA/C,IAAAH,EAAAkD,OAAA,QAAAlD,EAAAwB,IAAA,IAAAiC,UAAA,oCAAAtD,EAAA,aAAA2B,EAAA,IAAA9D,EAAAuD,EAAAlB,EAAAP,EAAAW,SAAAT,EAAAwB,KAAA,aAAAxD,EAAAoB,KAAA,OAAAY,EAAAkD,OAAA,QAAAlD,EAAAwB,IAAAxD,EAAAwD,IAAAxB,EAAAmD,SAAA,KAAArB,EAAA,IAAAtB,EAAAxC,EAAAwD,IAAA,OAAAhB,EAAAA,EAAAyC,MAAAjD,EAAAF,EAAA4D,YAAAlD,EAAA5F,MAAAoF,EAAA2D,KAAA7D,EAAA8D,QAAA,WAAA5D,EAAAkD,SAAAlD,EAAAkD,OAAA,OAAAlD,EAAAwB,IAAAzB,GAAAC,EAAAmD,SAAA,KAAArB,GAAAtB,GAAAR,EAAAkD,OAAA,QAAAlD,EAAAwB,IAAA,IAAAiC,UAAA,oCAAAzD,EAAAmD,SAAA,KAAArB,EAAA,UAAA+B,EAAA9D,GAAA,IAAAD,EAAA,CAAAgE,OAAA/D,EAAA,SAAAA,IAAAD,EAAAiE,SAAAhE,EAAA,SAAAA,IAAAD,EAAAkE,WAAAjE,EAAA,GAAAD,EAAAmE,SAAAlE,EAAA,SAAAmE,WAAAtI,KAAAkE,EAAA,UAAAqE,EAAApE,GAAA,IAAAD,EAAAC,EAAAqE,YAAA,GAAAtE,EAAAV,KAAA,gBAAAU,EAAA0B,IAAAzB,EAAAqE,WAAAtE,CAAA,UAAAuB,EAAAtB,GAAA,KAAAmE,WAAA,EAAAJ,OAAA,SAAA/D,EAAAzD,QAAAuH,EAAA,WAAAQ,OAAA,YAAAhC,EAAAvC,GAAA,GAAAA,GAAA,KAAAA,EAAA,KAAAE,EAAAF,EAAAU,GAAA,GAAAR,EAAA,OAAAA,EAAAyB,KAAA3B,GAAA,sBAAAA,EAAA6D,KAAA,OAAA7D,EAAA,IAAAwE,MAAAxE,EAAAnE,QAAA,KAAA0E,GAAA,EAAArC,EAAA,SAAA2F,IAAA,OAAAtD,EAAAP,EAAAnE,QAAA,GAAAwE,EAAAsB,KAAA3B,EAAAO,GAAA,OAAAsD,EAAA/I,MAAAkF,EAAAO,GAAAsD,EAAAV,MAAA,EAAAU,EAAA,OAAAA,EAAA/I,MAAAmF,EAAA4D,EAAAV,MAAA,EAAAU,CAAA,SAAA3F,EAAA2F,KAAA3F,CAAA,YAAAyF,UAAAd,GAAA7C,GAAA,2BAAAiC,EAAA7B,UAAA8B,EAAA3B,EAAAiC,EAAA,eAAA1H,MAAAoH,EAAAhB,cAAA,IAAAX,EAAA2B,EAAA,eAAApH,MAAAmH,EAAAf,cAAA,IAAAe,EAAAwC,YAAAzD,EAAAkB,EAAApB,EAAA,qBAAAd,EAAA0E,oBAAA,SAAAzE,GAAA,IAAAD,EAAA,mBAAAC,GAAAA,EAAA0E,YAAA,QAAA3E,IAAAA,IAAAiC,GAAA,uBAAAjC,EAAAyE,aAAAzE,EAAA4E,MAAA,EAAA5E,EAAA6E,KAAA,SAAA5E,GAAA,OAAAE,OAAA2E,eAAA3E,OAAA2E,eAAA7E,EAAAiC,IAAAjC,EAAA8E,UAAA7C,EAAAlB,EAAAf,EAAAa,EAAA,sBAAAb,EAAAG,UAAAD,OAAAmB,OAAAkB,GAAAvC,CAAA,EAAAD,EAAAgF,MAAA,SAAA/E,GAAA,OAAA8C,QAAA9C,EAAA,EAAAwC,EAAAE,EAAAvC,WAAAY,EAAA2B,EAAAvC,UAAAQ,GAAA,0BAAAZ,EAAA2C,cAAAA,EAAA3C,EAAAiF,MAAA,SAAAhF,EAAAC,EAAAG,EAAAE,EAAArC,QAAA,IAAAA,IAAAA,EAAAgH,SAAA,IAAAxE,EAAA,IAAAiC,EAAAvB,EAAAnB,EAAAC,EAAAG,EAAAE,GAAArC,GAAA,OAAA8B,EAAA0E,oBAAAxE,GAAAQ,EAAAA,EAAAmD,OAAAb,MAAA,SAAA/C,GAAA,OAAAA,EAAAkD,KAAAlD,EAAAnF,MAAA4F,EAAAmD,MAAA,KAAApB,EAAAD,GAAAxB,EAAAwB,EAAA1B,EAAA,aAAAE,EAAAwB,EAAA9B,GAAA,0BAAAM,EAAAwB,EAAA,qDAAAxC,EAAAmF,KAAA,SAAAlF,GAAA,IAAAD,EAAAG,OAAAF,GAAAC,EAAA,WAAAG,KAAAL,EAAAE,EAAApE,KAAAuE,GAAA,OAAAH,EAAAkF,UAAA,SAAAvB,IAAA,KAAA3D,EAAArE,QAAA,KAAAoE,EAAAC,EAAAmF,MAAA,GAAApF,KAAAD,EAAA,OAAA6D,EAAA/I,MAAAmF,EAAA4D,EAAAV,MAAA,EAAAU,CAAA,QAAAA,EAAAV,MAAA,EAAAU,CAAA,GAAA7D,EAAAuC,OAAAA,EAAAhB,EAAAnB,UAAA,CAAAuE,YAAApD,EAAAgD,MAAA,SAAAvE,GAAA,QAAAsF,KAAA,OAAAzB,KAAA,OAAAN,KAAA,KAAAC,MAAAvD,EAAA,KAAAkD,MAAA,OAAAE,SAAA,UAAAD,OAAA,YAAA1B,IAAAzB,EAAA,KAAAmE,WAAA5H,QAAA6H,IAAArE,EAAA,QAAAE,KAAA,WAAAA,EAAAqF,OAAA,IAAAlF,EAAAsB,KAAA,KAAAzB,KAAAsE,OAAAtE,EAAAsF,MAAA,WAAAtF,GAAAD,EAAA,EAAAwF,KAAA,gBAAAtC,MAAA,MAAAlD,EAAA,KAAAmE,WAAA,GAAAE,WAAA,aAAArE,EAAAX,KAAA,MAAAW,EAAAyB,IAAA,YAAAgE,IAAA,EAAAjC,kBAAA,SAAAzD,GAAA,QAAAmD,KAAA,MAAAnD,EAAA,IAAAE,EAAA,cAAAyF,EAAAtF,EAAAE,GAAA,OAAAG,EAAApB,KAAA,QAAAoB,EAAAgB,IAAA1B,EAAAE,EAAA2D,KAAAxD,EAAAE,IAAAL,EAAAkD,OAAA,OAAAlD,EAAAwB,IAAAzB,KAAAM,CAAA,SAAAA,EAAA,KAAA6D,WAAAvI,OAAA,EAAA0E,GAAA,IAAAA,EAAA,KAAArC,EAAA,KAAAkG,WAAA7D,GAAAG,EAAAxC,EAAAoG,WAAA,YAAApG,EAAA8F,OAAA,OAAA2B,EAAA,UAAAzH,EAAA8F,QAAA,KAAAsB,KAAA,KAAA1E,EAAAP,EAAAsB,KAAAzD,EAAA,YAAA4C,EAAAT,EAAAsB,KAAAzD,EAAA,iBAAA0C,GAAAE,EAAA,SAAAwE,KAAApH,EAAA+F,SAAA,OAAA0B,EAAAzH,EAAA+F,UAAA,WAAAqB,KAAApH,EAAAgG,WAAA,OAAAyB,EAAAzH,EAAAgG,WAAA,SAAAtD,GAAA,QAAA0E,KAAApH,EAAA+F,SAAA,OAAA0B,EAAAzH,EAAA+F,UAAA,YAAAnD,EAAA,MAAAoC,MAAA,kDAAAoC,KAAApH,EAAAgG,WAAA,OAAAyB,EAAAzH,EAAAgG,WAAA,KAAAR,OAAA,SAAAzD,EAAAD,GAAA,QAAAE,EAAA,KAAAkE,WAAAvI,OAAA,EAAAqE,GAAA,IAAAA,EAAA,KAAAK,EAAA,KAAA6D,WAAAlE,GAAA,GAAAK,EAAAyD,QAAA,KAAAsB,MAAAjF,EAAAsB,KAAApB,EAAA,oBAAA+E,KAAA/E,EAAA2D,WAAA,KAAAhG,EAAAqC,EAAA,OAAArC,IAAA,UAAA+B,GAAA,aAAAA,IAAA/B,EAAA8F,QAAAhE,GAAAA,GAAA9B,EAAAgG,aAAAhG,EAAA,UAAAwC,EAAAxC,EAAAA,EAAAoG,WAAA,UAAA5D,EAAApB,KAAAW,EAAAS,EAAAgB,IAAA1B,EAAA9B,GAAA,KAAAkF,OAAA,YAAAS,KAAA3F,EAAAgG,WAAAlC,GAAA,KAAA4D,SAAAlF,EAAA,EAAAkF,SAAA,SAAA3F,EAAAD,GAAA,aAAAC,EAAAX,KAAA,MAAAW,EAAAyB,IAAA,gBAAAzB,EAAAX,MAAA,aAAAW,EAAAX,KAAA,KAAAuE,KAAA5D,EAAAyB,IAAA,WAAAzB,EAAAX,MAAA,KAAAoG,KAAA,KAAAhE,IAAAzB,EAAAyB,IAAA,KAAA0B,OAAA,cAAAS,KAAA,kBAAA5D,EAAAX,MAAAU,IAAA,KAAA6D,KAAA7D,GAAAgC,CAAA,EAAA6D,OAAA,SAAA5F,GAAA,QAAAD,EAAA,KAAAoE,WAAAvI,OAAA,EAAAmE,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAAkE,WAAApE,GAAA,GAAAE,EAAAgE,aAAAjE,EAAA,YAAA2F,SAAA1F,EAAAoE,WAAApE,EAAAiE,UAAAE,EAAAnE,GAAA8B,CAAA,kBAAA/B,GAAA,QAAAD,EAAA,KAAAoE,WAAAvI,OAAA,EAAAmE,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAAkE,WAAApE,GAAA,GAAAE,EAAA8D,SAAA/D,EAAA,KAAAI,EAAAH,EAAAoE,WAAA,aAAAjE,EAAAf,KAAA,KAAAiB,EAAAF,EAAAqB,IAAA2C,EAAAnE,EAAA,QAAAK,CAAA,QAAA2C,MAAA,0BAAA4C,cAAA,SAAA9F,EAAAE,EAAAG,GAAA,YAAAgD,SAAA,CAAA1C,SAAA4B,EAAAvC,GAAA4D,WAAA1D,EAAA4D,QAAAzD,GAAA,cAAA+C,SAAA,KAAA1B,IAAAzB,GAAA+B,CAAA,GAAAhC,CAAA,UAAA+F,GAAA1F,EAAAJ,EAAAD,EAAAE,EAAAK,EAAAG,EAAAE,GAAA,QAAA1C,EAAAmC,EAAAK,GAAAE,GAAAE,EAAA5C,EAAApD,KAAA,OAAAuF,GAAA,YAAAL,EAAAK,EAAA,CAAAnC,EAAAiF,KAAAlD,EAAAa,GAAAoE,QAAApC,QAAAhC,GAAAkC,KAAA9C,EAAAK,EAAA,UAAAsO,GAAAxO,GAAA,sBAAAJ,EAAA,KAAAD,EAAApE,UAAA,WAAAsJ,SAAA,SAAAhF,EAAAK,GAAA,IAAAG,EAAAL,EAAA8G,MAAAlH,EAAAD,GAAA,SAAAoH,EAAA/G,GAAA0F,GAAArF,EAAAR,EAAAK,EAAA6G,EAAAC,EAAA,OAAAhH,EAAA,UAAAgH,EAAAhH,GAAA0F,GAAArF,EAAAR,EAAAK,EAAA6G,EAAAC,EAAA,QAAAhH,EAAA,CAAA+G,OAAA,gBAAApB,GAAAhG,EAAAE,GAAA,QAAAD,EAAA,EAAAA,EAAAC,EAAArE,OAAAoE,IAAA,KAAAM,EAAAL,EAAAD,GAAAM,EAAAU,WAAAV,EAAAU,aAAA,EAAAV,EAAAW,cAAA,YAAAX,IAAAA,EAAAY,UAAA,GAAAhB,OAAAK,eAAAR,EAAAiG,GAAA1F,EAAA1F,KAAA0F,EAAA,WAAA0F,GAAAhG,GAAA,IAAA/B,EAAA,SAAA+B,GAAA,aAAA4C,GAAA5C,KAAAA,EAAA,OAAAA,EAAA,IAAAD,EAAAC,EAAAQ,OAAAyF,aAAA,YAAAlG,EAAA,KAAA9B,EAAA8B,EAAA2B,KAAA1B,EAAAC,UAAA,aAAA2C,GAAA3E,GAAA,OAAAA,EAAA,UAAAyF,UAAA,uDAAAwC,OAAAlG,EAAA,CAAAmG,CAAAnG,GAAA,gBAAA4C,GAAA3E,GAAAA,EAAAA,EAAA,GAWO,SAASY,GAAIrD,GACM,oBAAXkM,QAA0BA,OAAOqf,SACxCrf,OAAOqf,SAAS,OAAQvrB,GAExBoD,QAAQC,IAAI,UAADxD,OAAWG,GAE9B,CAKO,IAAMwrB,GAAQ,WAwBjB,OA9CJjnB,EAuBI,SAAAinB,KAvBJ,SAAAvmB,EAAAL,GAAA,KAAAK,aAAAL,GAAA,UAAAsD,UAAA,qCAuBkB3J,CAAA,KAAAitB,GACVnoB,GAAI,yBAGJ7E,KAAKiO,OAASjO,KAAKiO,OAAOwR,KAAKzf,MAC/BA,KAAK0d,YAAc1d,KAAK0d,YAAY+B,KAAKzf,MAGzCA,KAAKitB,OAAS,IAAI1N,EAAWvf,MAC7BA,KAAK6N,MAAQ,IAAI8Q,EAAU3e,MAC3BA,KAAKsf,GAAK,IAAIlT,EAAOpM,MACrBA,KAAK+N,MAAQ,IAAIoP,EAAUnd,MAG3BA,KAAKktB,SAAW,EAChBltB,KAAKmtB,kBAAoB,EAAE,GAC3BntB,KAAKotB,mBAAqB,EAC1BptB,KAAKkf,cAAgB,EAGrBlf,KAAK4W,MACT,EA5CJ3Q,EA8CI,EAAArF,IAAA,OAAAC,OAAAiW,EAAAlC,GAAA9O,KAAA8E,MAGA,SAAAmC,IAAA,OAAAjH,KAAAqB,MAAA,SAAA6F,GAAA,cAAAA,EAAA3B,KAAA2B,EAAApD,MAAA,OAIQ,OAJRoD,EAAA3B,KAAA,EAEQrL,KAAKsf,GAAG+N,oBAAoB,gCAE5BrgB,EAAApD,KAAA,EACM5J,KAAKstB,qBAAoB,OAG/B,OAFAzoB,GAAI,wCAEJmI,EAAApD,KAAA,EACM5J,KAAKutB,gBAAe,OAC1B1oB,GAAI,qBAGJ7E,KAAKsf,GAAGkO,eAAexgB,EAAApD,KAAA,iBAAAoD,EAAA3B,KAAA,GAAA2B,EAAAoK,GAAApK,EAAA,SAEvBnI,GAAI,yBAADxD,OAA0B2L,EAAAoK,GAAM5V,UACnCxB,KAAKsf,GAAGmB,gBAAgB,uCAADpf,OAAwC2L,EAAAoK,GAAM5V,UAAW,yBAAAwL,EAAAxB,OAAA,GAAAuB,EAAA,mBAEvF,WAlBS,OAAA+J,EAAA5J,MAAC,KAADvL,UAAA,IAoBV,CAAAf,IAAA,qBAAAC,OAAA4sB,EAAA7Y,GAAA9O,KAAA8E,MAGA,SAAAmM,IAAA,OAAAjR,KAAAqB,MAAA,SAAA6P,GAAA,cAAAA,EAAA3L,KAAA2L,EAAApN,MAAA,OAmBQ,OAnBRoN,EAAA3L,KAAA,EAEQrL,KAAKsf,GAAG+N,oBAAoB,8BAE5BrtB,KAAKwQ,SAAW,IAAIqQ,EAAS7gB,KAAKsf,GAAG7S,YAErCzM,KAAKsf,GAAG+N,oBAAoB,sCAE5BrtB,KAAKsO,MAAQ,IAAI0W,EAEjBhlB,KAAKsf,GAAG+N,oBAAoB,uCAE5BrtB,KAAK2R,QAAU,IAAIkV,GAEnB7mB,KAAKsf,GAAG+N,oBAAoB,uCAE5BrtB,KAAK4d,QAAU,IAAI4M,GAEnBxqB,KAAKsf,GAAG+N,oBAAoB,mCAC5BrW,EAAApN,KAAA,GACM5J,KAAKsf,GAAGoO,iBAAgB,QAGI,OAAlC1tB,KAAKitB,OAAOU,sBAAsB3W,EAAAvN,OAAA,UAE3B,GAAI,QAE+C,MAF/CuN,EAAA3L,KAAA,GAAA2L,EAAAI,GAAAJ,EAAA,SAEXnS,GAAI,qCAADxD,OAAsC2V,EAAAI,GAAM5V,UAAWwV,EAAAI,GAAA,yBAAAJ,EAAAxL,OAAA,GAAAuL,EAAA,mBAGjE,WA9BuB,OAAA0W,EAAAvgB,MAAC,KAADvL,UAAA,IAgCxB,CAAAf,IAAA,gBAAAC,OAAA+sB,EAAAhZ,GAAA9O,KAAA8E,MAGA,SAAA2M,IAAA,IAAA9V,EAAA,YAAAqE,KAAAqB,MAAA,SAAAqQ,GAAA,cAAAA,EAAAnM,KAAAmM,EAAA5N,MAAA,OACuE,OAAnE5J,KAAKsf,GAAG+N,oBAAoB,uCAAuC7V,EAAAnM,KAAA,EAAAmM,EAAA5N,KAAA,EAI9B5J,KAAK4d,QAAQhH,OAAM,OAA5B,GAAAY,EAAAlO,KACC,CAAFkO,EAAA5N,KAAA,cACb,IAAIX,MAAM,sCAAqC,OAQzD,OALAjJ,KAAKsf,GAAG+N,oBAAoB,qCAG5BrtB,KAAKsf,GAAG+N,oBAAoB,gCAE5B7V,EAAA5N,KAAA,GACM,IAAIqB,SAAQ,SAACpC,GACf2I,YAAW,WACP/P,EAAKoM,MAAM+Q,WAAY,EACvB/V,GACJ,GAAG,IACP,IAAE,QAE2D,OAA7D7I,KAAKsf,GAAG+N,oBAAoB,iCAAiC7V,EAAA/N,OAAA,UACtD,GAAI,QAEuC,MAFvC+N,EAAAnM,KAAA,GAAAmM,EAAAJ,GAAAI,EAAA,SAEX3S,GAAI,6BAADxD,OAA8BmW,EAAAJ,GAAM5V,UAAWgW,EAAAJ,GAAA,yBAAAI,EAAAhM,OAAA,GAAA+L,EAAA,mBAGzD,WA7BkB,OAAAqW,EAAA1gB,MAAC,KAADvL,UAAA,IA+BnB,CAAAf,IAAA,YAAAC,OAAAgtB,EAAAjZ,GAAA9O,KAAA8E,MAGA,SAAAkjB,IAAA,OAAAhoB,KAAAqB,MAAA,SAAA4mB,GAAA,cAAAA,EAAA1iB,KAAA0iB,EAAAnkB,MAAA,OAgBQ,OAhBRmkB,EAAA1iB,KAAA,EAEQxG,GAAI,kBAEJ7E,KAAKsf,GAAG0O,eACRhuB,KAAKsf,GAAG2O,iBAERjuB,KAAK6N,MAAM2B,WAAY,EACvBxP,KAAK6N,MAAMC,aAAe,OAGtB9N,KAAKwQ,WACLxQ,KAAKwQ,SAAS0d,aACdrpB,GAAI,oBAGRkpB,EAAAnkB,KAAA,EACM5J,KAAK+N,MAAMpN,aAAY,OAG7BX,KAAK2R,QAAQwV,UAAUpe,MAAK,WACxBlE,GAAI,kCACR,IAAE,OAAO,SAAAgS,GACLhS,GAAI,uBAADxD,OAAwBwV,EAAMrV,SACrC,IAGAxB,KAAKkf,cAAgBC,YAAYld,MACjCmd,sBAAsBpf,KAAKiO,QAE3BpJ,GAAI,iBAAiBkpB,EAAAnkB,KAAA,iBAAAmkB,EAAA1iB,KAAA,GAAA0iB,EAAA3W,GAAA2W,EAAA,SAErBlpB,GAAI,4BAADxD,OAA6B0sB,EAAA3W,GAAM5V,UACtCxB,KAAKsf,GAAGmB,gBAAgB,4BAADpf,OAA6B0sB,EAAA3W,GAAM5V,UAAW,yBAAAusB,EAAAviB,OAAA,GAAAsiB,EAAA,mBAE5E,WAnCc,OAAAD,EAAA3gB,MAAC,KAADvL,UAAA,IAqCf,CAAAf,IAAA,cAAAC,MAIA,SAAYqS,GACR,IAEQlT,KAAK2R,SAAW3R,KAAK2R,QAAQwc,YAKjCnuB,KAAK+N,MAAM2P,YAAYxK,EAC3B,CAAE,MAAO2D,GACLhS,GAAI,yBAADxD,OAA0BwV,EAAMrV,SACvC,CACJ,GAEA,CAAAZ,IAAA,SAAAC,MAIA,SAAOkB,GACH,GAAK/B,KAAK6N,MAAM2B,UAEhB,IAEI,IAAM+B,EAAc4N,YAAYld,MAC1BiR,GAAa3B,EAAcvR,KAAKkf,eAAiB,IACvDlf,KAAKkf,cAAgB3N,EAGrB,IAAM6c,EAAmBtc,KAAK0W,IAAItV,EAAW,IAO7C,IAJAlT,KAAKktB,UAAYkB,EAGjBpuB,KAAKotB,oBAAsBgB,EACpBpuB,KAAKotB,oBAAsBptB,KAAKmtB,mBAE/BntB,KAAK4d,SAAW5d,KAAK4d,QAAQE,WAC7B9d,KAAK4d,QAAQ3P,OAAOjO,KAAKmtB,mBAG7BntB,KAAK0d,YAAY1d,KAAKmtB,mBACtBntB,KAAKotB,oBAAsBptB,KAAKmtB,kBAIpCntB,KAAK+N,MAAME,OAAOmgB,GAGdpuB,KAAKwQ,UACLxQ,KAAKwQ,SAAS6P,OAAOrgB,KAAK+N,MAAMC,QAIpChO,KAAKsf,GAAGrR,SAGRmR,sBAAsBpf,KAAKiO,OAC/B,CAAE,MAAO4I,GACLhS,GAAI,2BAADxD,OAA4BwV,EAAMrV,UAGrC4d,sBAAsBpf,KAAKiO,OAC/B,CACJ,IAtPJhI,GAAA8F,GAAAhG,EAAAI,UAAAF,GAAAC,OAAAK,eAAAR,EAAA,aAAAmB,UAAA,IAAAnB,EAAA,IAAAA,EAAAE,EA0II4nB,EAlCAD,EAnCAH,EAvBA3W,CAwMC,CAhOgB,GAoOrBpU,SAASiC,iBAAiB,oBAAoB,WAC1C,IACIE,GAAI,wCAEJ6I,OAAOrB,KAAO,IAAI2gB,EACtB,CAAE,MAAOnW,GACLjS,QAAQiS,MAAM,6CAA8CA,GAG5D,IAAMtJ,EAAe7K,SAASC,cAAc,OAC5C4K,EAAapM,MAAMktB,QAAU,0SAY7B9gB,EAAahM,YAAc,uBAAHF,OAA0BwV,EAAMrV,SACxDkB,SAAS8K,KAAK3K,YAAY0K,EAC9B,CACJ","sources":["webpack://tds-escape/./client/src/ui/hud.js","webpack://tds-escape/./client/src/ui/inventory.js","webpack://tds-escape/./client/src/core/gameUI.js","webpack://tds-escape/./client/src/entities/player.js","webpack://tds-escape/./client/src/physics/vision-system.js","webpack://tds-escape/./client/src/core/gameWorld.js","webpack://tds-escape/./client/src/core/gameState.js","webpack://tds-escape/./client/src/core/gameEvents.js","webpack://tds-escape/./client/src/core/renderer.js","webpack://tds-escape/./client/src/core/input.js","webpack://tds-escape/./client/src/core/network.js","webpack://tds-escape/./client/src/physics/rapier-integration.js","webpack://tds-escape/./client/src/physics/physics-manager.js","webpack://tds-escape/./client/src/core/gameCore.js"],"sourcesContent":["/**\n * Класс для управления HUD (интерфейсом в игре)\n */\nexport class HUD {\n    /**\n     * @param {HTMLElement} element - DOM элемент для отображения HUD\n     */\n    constructor(element) {\n        this.element = element;\n        \n        // Элементы HUD\n        this.healthBar = element.querySelector('#health-bar .health-value');\n        this.ammoCounter = element.querySelector('#ammo-counter');\n        this.weaponInfo = element.querySelector('#weapon-info');\n        this.statusMessages = element.querySelector('#status-messages');\n        \n        // Состояние HUD\n        this.health = 100;\n        this.ammo = 0;\n        this.weapon = 'Нет';\n        this.messages = [];\n        \n        // Таймер для удаления сообщений\n        this.messageTimer = null;\n        \n        // Инициализация\n        this.initialize();\n    }\n    \n    /**\n     * Инициализация HUD\n     */\n    initialize() {\n        // Обновляем элементы с начальными значениями, если они существуют\n        if (this.healthBar) this.updateHealthBar();\n        if (this.ammoCounter) this.updateAmmoCounter();\n        if (this.weaponInfo) this.updateWeaponInfo();\n    }\n    \n    /**\n     * Обновление HUD\n     * @param {Object} data - данные для обновления\n     */\n    update(data) {\n        // Обновляем только переданные данные\n        if (data.health !== undefined && data.health !== this.health) {\n            this.health = data.health;\n            this.updateHealthBar();\n        }\n        \n        if (data.ammo !== undefined && data.ammo !== this.ammo) {\n            this.ammo = data.ammo;\n            this.updateAmmoCounter();\n        }\n        \n        if (data.weapon !== undefined && data.weapon !== this.weapon) {\n            this.weapon = data.weapon;\n            this.updateWeaponInfo();\n        }\n    }\n    \n    /**\n     * Обновление полоски здоровья\n     */\n    updateHealthBar() {\n        // Обновляем ширину полоски здоровья\n        if (!this.healthBar) return;\n        \n        this.healthBar.style.width = `${this.health}%`;\n        \n        // Меняем цвет в зависимости от количества здоровья\n        if (this.health > 70) {\n            this.healthBar.style.backgroundColor = '#4CAF50'; // Зеленый\n        } else if (this.health > 30) {\n            this.healthBar.style.backgroundColor = '#FFC107'; // Желтый\n        } else {\n            this.healthBar.style.backgroundColor = '#F44336'; // Красный\n        }\n    }\n    \n    /**\n     * Обновление счетчика патронов\n     */\n    updateAmmoCounter() {\n        if (!this.ammoCounter) return;\n        this.ammoCounter.textContent = `${this.ammo}`;\n    }\n    \n    /**\n     * Обновление информации об оружии\n     */\n    updateWeaponInfo() {\n        if (!this.weaponInfo) return;\n        this.weaponInfo.textContent = this.weapon;\n    }\n    \n    /**\n     * Добавление сообщения в статус\n     * @param {string} message - текст сообщения\n     * @param {number} duration - длительность показа в миллисекундах\n     */\n    addStatusMessage(message, duration = 3000) {\n        // Добавляем сообщение в список\n        this.messages.push({\n            text: message,\n            timestamp: Date.now(),\n            duration\n        });\n        \n        // Обновляем отображение сообщений\n        this.updateStatusMessages();\n        \n        // Устанавливаем таймер для удаления сообщения\n        if (this.messageTimer === null) {\n            this.messageTimer = setInterval(() => {\n                this.checkMessagesTimeout();\n            }, 1000);\n        }\n    }\n    \n    /**\n     * Обновление отображения статусных сообщений\n     */\n    updateStatusMessages() {\n        if (!this.statusMessages) return;\n        \n        // Очищаем элемент\n        this.statusMessages.innerHTML = '';\n        \n        // Добавляем сообщения\n        this.messages.forEach(msg => {\n            const messageElement = document.createElement('div');\n            messageElement.className = 'status-message';\n            messageElement.textContent = msg.text;\n            \n            this.statusMessages.appendChild(messageElement);\n        });\n    }\n    \n    /**\n     * Проверка таймаута сообщений\n     */\n    checkMessagesTimeout() {\n        const now = Date.now();\n        let hasRemovedMessages = false;\n        \n        // Удаляем устаревшие сообщения\n        this.messages = this.messages.filter(msg => {\n            const isExpired = now - msg.timestamp > msg.duration;\n            if (isExpired) {\n                hasRemovedMessages = true;\n            }\n            return !isExpired;\n        });\n        \n        // Обновляем отображение, если были удалены сообщения\n        if (hasRemovedMessages) {\n            this.updateStatusMessages();\n        }\n        \n        // Останавливаем таймер, если нет сообщений\n        if (this.messages.length === 0) {\n            clearInterval(this.messageTimer);\n            this.messageTimer = null;\n        }\n    }\n    \n    /**\n     * Показать HUD\n     */\n    show() {\n        this.element.classList.remove('hidden');\n    }\n    \n    /**\n     * Скрыть HUD\n     */\n    hide() {\n        this.element.classList.add('hidden');\n    }\n}","/**\n * Класс для управления интерфейсом инвентаря\n */\nexport class InventoryUI {\n    /**\n     * @param {HTMLElement} element - DOM элемент для отображения инвентаря\n     */\n    constructor(element) {\n        this.element = element;\n        \n        // Элементы инвентаря\n        this.gridElement = element.querySelector('.inventory-grid');\n        this.equippedElement = element.querySelector('.equipped-items');\n        \n        // Данные инвентаря\n        this.inventory = {\n            items: [],\n            maxSlots: 25 // 5x5 сетка\n        };\n        \n        // Экипированные предметы\n        this.equipped = {\n            weapon: null,\n            armor: null,\n            helmet: null\n        };\n        \n        // Инициализация\n        this.initialize();\n    }\n    \n    /**\n     * Инициализация интерфейса инвентаря\n     */\n    initialize() {\n        // Создаем слоты инвентаря\n        this.createInventorySlots();\n        \n        // Создаем слоты экипировки\n        this.createEquippedSlots();\n        \n        // Настраиваем обработчики событий перетаскивания\n        this.setupDragAndDrop();\n    }\n    \n    /**\n     * Создание слотов инвентаря\n     */\n    createInventorySlots() {\n        if (!this.gridElement) return;\n        \n        // Очищаем контейнер\n        this.gridElement.innerHTML = '';\n        \n        // Создаем сетку слотов 5x5\n        for (let i = 0; i < this.inventory.maxSlots; i++) {\n            const slot = document.createElement('div');\n            slot.className = 'inventory-slot';\n            slot.dataset.slotIndex = i;\n            \n            this.gridElement.appendChild(slot);\n        }\n    }\n    \n    /**\n     * Создание слотов экипировки\n     */\n    createEquippedSlots() {\n        if (!this.equippedElement) return;\n        \n        // Очищаем контейнер\n        this.equippedElement.innerHTML = '';\n        \n        // Создаем слоты для экипировки\n        const slots = [\n            { id: 'weapon', label: 'Оружие' },\n            { id: 'armor', label: 'Броня' },\n            { id: 'helmet', label: 'Шлем' }\n        ];\n        \n        slots.forEach(slotInfo => {\n            const slotContainer = document.createElement('div');\n            slotContainer.className = 'equipped-slot-container';\n            \n            const label = document.createElement('div');\n            label.className = 'equipped-slot-label';\n            label.textContent = slotInfo.label;\n            \n            const slot = document.createElement('div');\n            slot.className = 'equipped-slot';\n            slot.dataset.slotType = slotInfo.id;\n            \n            slotContainer.appendChild(label);\n            slotContainer.appendChild(slot);\n            \n            this.equippedElement.appendChild(slotContainer);\n        });\n    }\n    \n    /**\n     * Настройка системы перетаскивания\n     */\n    setupDragAndDrop() {\n        // Здесь будет реализация drag-and-drop\n        // Для прототипа оставим простую реализацию с кликами\n        \n        // Находим все слоты инвентаря\n        const inventorySlots = this.element.querySelectorAll('.inventory-slot');\n        \n        // Добавляем обработчики клика\n        inventorySlots.forEach(slot => {\n            slot.addEventListener('click', () => {\n                // В будущем здесь будет логика выбора предмета\n                console.log('Клик по слоту инвентаря:', slot.dataset.slotIndex);\n            });\n        });\n        \n        // Находим все слоты экипировки\n        const equippedSlots = this.element.querySelectorAll('.equipped-slot');\n        \n        // Добавляем обработчики клика\n        equippedSlots.forEach(slot => {\n            slot.addEventListener('click', () => {\n                // В будущем здесь будет логика выбора экипированного предмета\n                console.log('Клик по слоту экипировки:', slot.dataset.slotType);\n            });\n        });\n    }\n    \n    /**\n     * Обновление отображения инвентаря\n     * @param {Object} inventory - данные инвентаря\n     */\n    update(inventory) {\n        if (!inventory) return;\n        \n        // Обновляем данные\n        this.inventory = inventory;\n        \n        // Обновляем отображение\n        this.updateInventoryDisplay();\n    }\n    \n    /**\n     * Обновление отображения экипировки\n     * @param {Object} equipped - данные экипировки\n     */\n    updateEquipped(equipped) {\n        if (!equipped) return;\n        \n        // Обновляем данные\n        this.equipped = equipped;\n        \n        // Обновляем отображение\n        this.updateEquippedDisplay();\n    }\n    \n    /**\n     * Обновление отображения слотов инвентаря\n     */\n    updateInventoryDisplay() {\n        // Находим все слоты инвентаря\n        const slots = this.element.querySelectorAll('.inventory-slot');\n        \n        // Очищаем все слоты\n        slots.forEach(slot => {\n            slot.innerHTML = '';\n            slot.classList.remove('filled');\n        });\n        \n        // Заполняем слоты предметами\n        this.inventory.items.forEach((item, index) => {\n            if (index >= slots.length) return;\n            \n            const slot = slots[index];\n            \n            // Создаем элемент предмета\n            const itemElement = document.createElement('div');\n            itemElement.className = 'inventory-item';\n            itemElement.dataset.itemId = item.id;\n            \n            // Разный стиль для разных типов предметов\n            switch (item.type) {\n                case 'weapon':\n                    itemElement.classList.add('item-weapon');\n                    itemElement.textContent = 'W';\n                    break;\n                case 'medkit':\n                    itemElement.classList.add('item-medkit');\n                    itemElement.textContent = 'M';\n                    break;\n                case 'ammo':\n                    itemElement.classList.add('item-ammo');\n                    itemElement.textContent = 'A';\n                    break;\n                default:\n                    itemElement.textContent = '?';\n            }\n            \n            // Добавляем предмет в слот\n            slot.appendChild(itemElement);\n            slot.classList.add('filled');\n        });\n    }\n    \n    /**\n     * Обновление отображения экипированных предметов\n     */\n    updateEquippedDisplay() {\n        // Обновляем отображение экипированного оружия\n        const weaponSlot = this.element.querySelector('.equipped-slot[data-slot-type=\"weapon\"]');\n        if (weaponSlot) {\n            weaponSlot.innerHTML = '';\n            \n            if (this.equipped.weapon) {\n                const weaponElement = document.createElement('div');\n                weaponElement.className = 'equipped-item item-weapon';\n                weaponElement.textContent = 'W';\n                \n                weaponSlot.appendChild(weaponElement);\n            }\n        }\n        \n        // Обновляем отображение экипированной брони\n        const armorSlot = this.element.querySelector('.equipped-slot[data-slot-type=\"armor\"]');\n        if (armorSlot) {\n            armorSlot.innerHTML = '';\n            \n            if (this.equipped.armor) {\n                const armorElement = document.createElement('div');\n                armorElement.className = 'equipped-item item-armor';\n                armorElement.textContent = 'A';\n                \n                armorSlot.appendChild(armorElement);\n            }\n        }\n        \n        // Обновляем отображение экипированного шлема\n        const helmetSlot = this.element.querySelector('.equipped-slot[data-slot-type=\"helmet\"]');\n        if (helmetSlot) {\n            helmetSlot.innerHTML = '';\n            \n            if (this.equipped.helmet) {\n                const helmetElement = document.createElement('div');\n                helmetElement.className = 'equipped-item item-helmet';\n                helmetElement.textContent = 'H';\n                \n                helmetSlot.appendChild(helmetElement);\n            }\n        }\n    }\n    \n    /**\n     * Добавление стилей для предметов в инвентаре\n     */\n    addInventoryStyles() {\n        // Создаем стили для предметов\n        const style = document.createElement('style');\n        style.textContent = `\n            .inventory-item {\n                width: 90%;\n                height: 90%;\n                margin: 5%;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                color: white;\n                font-weight: bold;\n                user-select: none;\n                cursor: pointer;\n            }\n            \n            .item-weapon {\n                background-color: #FF5722;\n            }\n            \n            .item-medkit {\n                background-color: #4CAF50;\n            }\n            \n            .item-ammo {\n                background-color: #FFC107;\n            }\n            \n            .item-armor {\n                background-color: #2196F3;\n            }\n            \n            .item-helmet {\n                background-color: #673AB7;\n            }\n            \n            .equipped-slot-container {\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n            }\n            \n            .equipped-slot-label {\n                margin-bottom: 5px;\n                font-size: 14px;\n            }\n            \n            .equipped-item {\n                width: 90%;\n                height: 90%;\n                margin: 5%;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                color: white;\n                font-weight: bold;\n            }\n        `;\n        \n        document.head.appendChild(style);\n    }\n    \n    /**\n     * Показать инвентарь\n     */\n    show() {\n        // Добавляем стили для предметов при первом открытии\n        if (!document.querySelector('style[data-inventory-styles]')) {\n            this.addInventoryStyles();\n        }\n        \n        this.element.classList.remove('hidden');\n    }\n    \n    /**\n     * Скрыть инвентарь\n     */\n    hide() {\n        this.element.classList.add('hidden');\n    }\n}","// client/src/core/GameUI.js\n\nimport { HUD } from '../ui/hud.js';\nimport { InventoryUI } from '../ui/inventory.js';\nimport { log } from './gameCore.js';\n\n/**\n * Класс для управления пользовательским интерфейсом игры\n */\nexport class GameUI {\n    /**\n     * @param {Object} game - ссылка на основной класс игры\n     */\n    constructor(game) {\n        this.game = game;\n        \n        // Элементы DOM\n        this.loadingScreen = document.getElementById('loading-screen');\n        this.mainMenu = document.getElementById('main-menu');\n        this.gameCanvas = document.getElementById('game-canvas');\n        this.hudElement = document.getElementById('hud');\n        this.inventoryScreen = document.getElementById('inventory-screen');\n        this.loadingStatus = document.getElementById('loading-status');\n        \n        // Компоненты UI\n        this.components = {\n            hud: null,\n            inventory: null\n        };\n    }\n    \n    /**\n     * Инициализация компонентов UI\n     */\n    async initComponents() {\n        this.components = {\n            hud: this.hudElement ? new HUD(this.hudElement) : null,\n            inventory: this.inventoryScreen ? new InventoryUI(this.inventoryScreen) : null\n        };\n        \n        return true;\n    }\n    \n    /**\n     * Обновление статуса загрузки\n     * @param {string} status - текст статуса\n     */\n    updateLoadingStatus(status) {\n        if (this.loadingStatus) {\n            this.loadingStatus.textContent = status;\n        }\n        log(status);\n    }\n    \n    /**\n     * Показать экран ошибки\n     * @param {string} message - сообщение об ошибке\n     */\n    showErrorScreen(message) {\n        // Создаем экран ошибки, если он ещё не существует\n        let errorScreen = document.getElementById('error-screen');\n        if (!errorScreen) {\n            errorScreen = document.createElement('div');\n            errorScreen.id = 'error-screen';\n            errorScreen.className = 'error-overlay';\n            errorScreen.innerHTML = `\n                <div class=\"error-container\">\n                    <h2>Произошла ошибка</h2>\n                    <p id=\"error-message\">${message}</p>\n                    <button id=\"reload-button\">Перезагрузить</button>\n                </div>\n            `;\n            document.body.appendChild(errorScreen);\n            \n            // Добавляем обработчик для кнопки перезагрузки\n            const reloadButton = document.getElementById('reload-button');\n            if (reloadButton) {\n                reloadButton.addEventListener('click', () => {\n                    window.location.reload();\n                });\n            }\n            \n            // Добавляем стили для экрана ошибки\n            const style = document.createElement('style');\n            style.textContent = `\n                .error-overlay {\n                    position: fixed;\n                    top: 0;\n                    left: 0;\n                    width: 100%;\n                    height: 100%;\n                    background-color: rgba(0, 0, 0, 0.85);\n                    z-index: 9999;\n                    display: flex;\n                    justify-content: center;\n                    align-items: center;\n                }\n                .error-container {\n                    background-color: #333;\n                    padding: 20px;\n                    border: 2px solid #f44336;\n                    max-width: 80%;\n                    text-align: center;\n                }\n                .error-container h2 {\n                    color: #f44336;\n                    margin-bottom: 15px;\n                }\n                .error-container p {\n                    color: #fff;\n                    margin-bottom: 20px;\n                    font-family: monospace;\n                    white-space: pre-wrap;\n                    text-align: left;\n                }\n                #reload-button {\n                    background-color: #4CAF50;\n                    color: white;\n                    border: none;\n                    padding: 10px 20px;\n                    cursor: pointer;\n                    font-size: 16px;\n                }\n                #reload-button:hover {\n                    background-color: #45a049;\n                }\n            `;\n            document.head.appendChild(style);\n        } else {\n            // Обновляем сообщение об ошибке\n            const errorMessage = document.getElementById('error-message');\n            if (errorMessage) {\n                errorMessage.textContent = message;\n            }\n        }\n        \n        // Скрываем экран загрузки\n        if (this.loadingScreen) {\n            this.loadingScreen.classList.add('hidden');\n        }\n    }\n    \n    /**\n     * Показать главное меню\n     */\n    showMainMenu() {\n        if (this.loadingScreen) {\n            this.loadingScreen.classList.add('hidden');\n        }\n        if (this.mainMenu) {\n            this.mainMenu.classList.remove('hidden');\n        }\n        this.game.state.currentScene = 'menu';\n        log('Главное меню отображено');\n    }\n    \n    /**\n     * Скрыть главное меню\n     */\n    hideMainMenu() {\n        if (this.mainMenu) {\n            this.mainMenu.classList.add('hidden');\n        }\n    }\n    \n    /**\n     * Показать игровой экран\n     */\n    showGameScreen() {\n        if (this.gameCanvas) {\n            this.gameCanvas.classList.remove('hidden');\n        }\n        if (this.hudElement) {\n            this.hudElement.classList.remove('hidden');\n        }\n    }\n    \n    /**\n     * Обновление UI\n     */\n    update() {\n        // Обновляем HUD\n        if (this.game.world.player && this.components.hud) {\n            this.components.hud.update({\n                health: this.game.world.player.health,\n                ammo: this.game.world.player.ammo,\n                weapon: this.game.world.player.weapon\n            });\n        }\n    }\n    \n    /**\n     * Переключение инвентаря\n     */\n    toggleInventory() {\n        if (this.inventoryScreen.classList.contains('hidden')) {\n            this.showInventory();\n        } else {\n            this.hideInventory();\n        }\n    }\n    \n    /**\n     * Показать инвентарь\n     */\n    showInventory() {\n        this.inventoryScreen.classList.remove('hidden');\n        \n        if (this.components.inventory) {\n            this.components.inventory.show();\n        }\n        \n        if (this.game.input) {\n            this.game.input.disableGameControls();\n        }\n    }\n    \n    /**\n     * Скрыть инвентарь\n     */\n    hideInventory() {\n        this.inventoryScreen.classList.add('hidden');\n        \n        if (this.components.inventory) {\n            this.components.inventory.hide();\n        }\n        \n        if (this.game.input) {\n            this.game.input.enableGameControls();\n        }\n    }\n}","// client/src/entities/player.js\n\n/**\n * Класс игрока, управляющий поведением и состоянием персонажа\n */\nexport class Player {\n    /**\n     * @param {Object} options - настройки игрока\n     * @param {Object} options.position - начальная позиция\n     * @param {Object} options.renderer - ссылка на рендерер\n     * @param {Object} options.input - ссылка на обработчик ввода\n     * @param {Object} options.game - ссылка на игровой объект\n     */\n    constructor(options) {\n        // Базовые параметры\n        this.id = options.id || 'local_player';\n        this.isLocalPlayer = options.isLocalPlayer !== undefined ? options.isLocalPlayer : true;\n        \n        // Позиция и вращение\n        this.position = options.position || { x: 0, y: 0, z: 0 };\n        this.rotation = options.rotation || { x: 0, y: 0, z: 0 };\n        this.direction = { x: 0, z: -1 }; // Направление взгляда (по умолчанию вперед)\n        \n        // Характеристики\n        this.health = options.health || 100;\n        this.maxHealth = options.maxHealth || 100;\n        this.speed = options.speed || 5; // базовая скорость движения\n        this.weapon = options.weapon || 'pistol';\n        this.ammo = options.ammo || 30;\n        this.weaponType = 'single'; // 'single' или 'auto'\n        this.fireRate = 500; // задержка между выстрелами в мс (для одиночного оружия)\n        this.recoil = { x: 0.05, y: 0.05 }; // сила отдачи\n        \n        // Инвентарь\n        this.inventory = options.inventory || {\n            items: [],\n            maxSlots: 25 // 5x5 сетка\n        };\n        \n        // Состояния\n        this.isMoving = false;\n        this.isRunning = false;\n        this.isAiming = false;\n        this.isShooting = false;\n        this.canShoot = true; // флаг возможности стрельбы\n        this.lastShootTime = 0;\n        this.currentState = 'idle'; // idle, walk, run, aim, shoot\n        \n        // Параметры обзора\n        this.viewAngle = 90; // начальный угол обзора в градусах\n        this.normalViewAngle = 90;\n        this.aimingViewAngle = 45;\n        this.runningViewAngle = 70; // угол обзора при беге\n        this.viewDistance = 50; // дальность видимости\n        \n        // Параметры движения\n        this.normalSpeed = 5;\n        this.runningSpeed = 7.5; // скорость бега (+50%)\n        this.aimingSpeed = 1.5; // скорость при прицеливании (-70%)\n        this.acceleration = 10; // ускорение для плавности движения\n        this.velocity = { x: 0, z: 0 }; // текущая скорость\n        \n        // Ссылки на другие модули\n        this.renderer = options.renderer;\n        this.input = options.input;\n        this.game = options.game;\n        this.mesh = null; // будет инициализирован при создании модели\n        \n        // Если это локальный игрок, настраиваем управление\n        if (this.isLocalPlayer) {\n            this.setupControls();\n        }\n        \n        // Создаем модель игрока\n        this.createModel();\n    }\n    \n    /**\n     * Создание модели игрока\n     */\n    createModel() {\n        // Если рендерер не доступен, выходим\n        if (!this.renderer) return;\n        \n        // Создаем меш через рендерер\n        this.mesh = this.renderer.addPlayer({\n            position: this.position,\n            rotation: this.rotation,\n            isLocalPlayer: this.isLocalPlayer\n        });\n    }\n    \n    /**\n     * Настройка управления игроком\n     */\n    setupControls() {\n        if (!this.input) return;\n        \n        // Добавляем обработчик ЛКМ для прицеливания\n        this.input.setMouseDownCallback((button, position) => {\n            if (button === 0) { // Левая кнопка\n                this.startAiming();\n            }\n        });\n        \n        // Обработчик отпускания ЛКМ\n        this.input.setMouseUpCallback((button) => {\n            if (button === 0) { // Левая кнопка\n                this.stopAiming();\n            }\n        });\n        \n        // Обработчик ПКМ для стрельбы\n        this.input.setRightClickCallback(() => {\n            this.tryShoot();\n        });\n        \n        // Обработчик движения мыши для вращения\n        this.input.setMouseMoveCallback((position, delta) => {\n            this.handleMouseMove(position);\n        });\n    }\n    \n    /**\n     * Начало прицеливания\n     */\n    startAiming() {\n        this.isAiming = true;\n        this.speed = this.aimingSpeed;\n        this.viewAngle = this.aimingViewAngle;\n        console.log('Начало прицеливания');\n    }\n    \n    /**\n     * Конец прицеливания\n     */\n    stopAiming() {\n        this.isAiming = false;\n        this.speed = this.normalSpeed;\n        this.viewAngle = this.normalViewAngle;\n        console.log('Конец прицеливания');\n    }\n    \n    /**\n     * Попытка выстрела\n     */\n    tryShoot() {\n        // Можно стрелять только если игрок прицеливается\n        if (!this.isAiming || !this.canShoot || this.ammo <= 0) {\n            return;\n        }\n        \n        const currentTime = Date.now();\n        \n        // Проверяем временную задержку между выстрелами\n        if (currentTime - this.lastShootTime < this.fireRate) {\n            return;\n        }\n        \n        // Устанавливаем время последнего выстрела\n        this.lastShootTime = currentTime;\n        \n        // Уменьшаем количество патронов\n        this.ammo--;\n        \n        // Устанавливаем флаг стрельбы (для анимации)\n        this.isShooting = true;\n        setTimeout(() => {\n            this.isShooting = false;\n        }, 100);\n        \n        // Применяем отдачу\n        this.applyRecoil();\n        \n        // Создаем выстрел\n        this.createShot();\n        \n        // Для одиночного оружия добавляем задержку перед следующим выстрелом\n        if (this.weaponType === 'single') {\n            this.canShoot = false;\n            setTimeout(() => {\n                this.canShoot = true;\n            }, this.fireRate);\n        }\n        \n        // Отправляем информацию о выстреле на сервер\n        if (this.game && this.game.network) {\n            this.game.network.sendPlayerShoot(\n                this.position,\n                this.direction,\n                this.weapon\n            );\n        }\n    }\n    \n    /**\n     * Применение отдачи при стрельбе\n     */\n    applyRecoil() {\n        // Случайное смещение прицела в пределах recoil\n        const recoilX = (Math.random() - 0.5) * this.recoil.x * 2;\n        const recoilY = -Math.abs(Math.random() * this.recoil.y); // Всегда вверх\n        \n        // Получаем текущую позицию мыши\n        const mousePos = this.input.getMousePosition();\n        \n        // Симулируем движение мыши с отдачей\n        const newMousePos = {\n            x: mousePos.x + recoilX * 100, // Умножаем для заметного эффекта\n            y: mousePos.y + recoilY * 100\n        };\n        \n        // Обновляем направление игрока\n        this.handleMouseMove(newMousePos);\n    }\n    \n    /**\n     * Обработка движения мыши\n     * @param {Object} position - позиция мыши {x, y}\n     */\n    handleMouseMove(position) {\n        // Получаем размеры канваса\n        const canvasRect = this.renderer.canvas.getBoundingClientRect();\n        const canvasCenter = {\n            x: canvasRect.left + canvasRect.width / 2,\n            y: canvasRect.top + canvasRect.height / 2\n        };\n        \n        // Вычисляем вектор от центра к мыши\n        const mouseVec = {\n            x: position.x - canvasCenter.x,\n            y: position.y - canvasCenter.y\n        };\n        \n        // Нормализуем вектор\n        const length = Math.sqrt(mouseVec.x * mouseVec.x + mouseVec.y * mouseVec.y);\n        if (length > 0) {\n            mouseVec.x /= length;\n            mouseVec.y /= length;\n        }\n        \n        // Вычисляем угол поворота (в радианах)\n        const angle = Math.atan2(mouseVec.x, -mouseVec.y);\n        \n        // Устанавливаем направление игрока\n        this.rotation.y = angle;\n        this.direction = {\n            x: Math.sin(angle),\n            z: -Math.cos(angle)\n        };\n    }\n    \n    /**\n     * Обновление состояния игрока\n     * @param {number} deltaTime - прошедшее время с предыдущего кадра\n     */\n    update(deltaTime) {\n        if (!deltaTime) return;\n        \n        // Только локальный игрок может двигаться сам\n        if (this.isLocalPlayer) {\n            this.handleMovement(deltaTime);\n            \n            // Обновляем камеру для слежения за игроком\n            if (this.renderer) {\n                this.renderer.updateCamera(this.position);\n            }\n            \n            // Обновляем параметры при нажатии Shift (бег)\n            this.handleRunning();\n            \n            // Обновляем состояние анимации\n            this.updateAnimationState();\n        }\n        \n        // Обновляем модель (позицию и анимацию)\n        this.updateModel();\n    }\n    \n    /**\n     * Обработка бега (нажатие Shift)\n     */\n    handleRunning() {\n        if (!this.input) return;\n        \n        const wasRunning = this.isRunning;\n        \n        // Проверяем нажат ли Shift и не в режиме прицеливания\n        if (this.input.isKeyPressed('ShiftLeft') && !this.isAiming) {\n            if (!this.isRunning) {\n                this.isRunning = true;\n                this.speed = this.runningSpeed;\n                this.viewAngle = this.runningViewAngle;\n            }\n        } else if (this.isRunning) {\n            this.isRunning = false;\n            this.speed = this.isAiming ? this.aimingSpeed : this.normalSpeed;\n            this.viewAngle = this.isAiming ? this.aimingViewAngle : this.normalViewAngle;\n        }\n        \n        // Если состояние бега изменилось, сообщаем об этом\n        if (wasRunning !== this.isRunning) {\n            console.log(this.isRunning ? 'Начало бега' : 'Конец бега');\n        }\n    }\n    \n    /**\n     * Обновление состояния анимации\n     */\n    updateAnimationState() {\n        let newState = 'idle';\n        \n        if (this.isMoving) {\n            newState = this.isRunning ? 'run' : 'walk';\n        }\n        \n        if (this.isAiming) {\n            newState = 'aim';\n        }\n        \n        if (this.isShooting) {\n            newState = 'shoot';\n        }\n        \n        if (this.currentState !== newState) {\n            this.currentState = newState;\n            console.log(`Состояние анимации: ${this.currentState}`);\n            \n            // Здесь будет логика смены анимации\n        }\n    }\n    \n    /**\n     * Обработка движения игрока\n     * @param {number} deltaTime - прошедшее время с предыдущего кадра\n     */\n    handleMovement(deltaTime) {\n        if (!this.input) return;\n        \n        // Получаем направление движения\n        const moveDir = this.input.getMovementDirection();\n        \n        // Если вектор движения нулевой, снижаем скорость\n        if (moveDir.x === 0 && moveDir.z === 0) {\n            // Применяем трение для плавной остановки\n            this.velocity.x *= 0.9;\n            this.velocity.z *= 0.9;\n            \n            // Если скорость совсем маленькая, останавливаемся\n            if (Math.abs(this.velocity.x) < 0.01 && Math.abs(this.velocity.z) < 0.01) {\n                this.velocity.x = 0;\n                this.velocity.z = 0;\n                this.isMoving = false;\n            }\n        } else {\n            // Устанавливаем флаг движения\n            this.isMoving = true;\n            \n            // Вычисляем целевую скорость с учетом нормализации\n            const length = Math.sqrt(moveDir.x * moveDir.x + moveDir.z * moveDir.z);\n            const normalizedDir = {\n                x: moveDir.x / length,\n                z: moveDir.z / length\n            };\n            \n            const targetVel = {\n                x: normalizedDir.x * this.speed,\n                z: normalizedDir.z * this.speed\n            };\n            \n            // Плавно изменяем скорость\n            this.velocity.x += (targetVel.x - this.velocity.x) * this.acceleration * deltaTime;\n            this.velocity.z += (targetVel.z - this.velocity.z) * this.acceleration * deltaTime;\n        }\n        \n        // Вычисляем новую позицию\n        const newX = this.position.x + this.velocity.x * deltaTime;\n        const newZ = this.position.z + this.velocity.z * deltaTime;\n        \n        // Проверка столкновений (упрощенная)\n        const canMoveX = this.checkCollision({ x: newX, y: this.position.y, z: this.position.z });\n        const canMoveZ = this.checkCollision({ x: this.position.x, y: this.position.y, z: newZ });\n        \n        // Обновляем позицию\n        if (canMoveX) {\n            this.position.x = newX;\n        } else {\n            this.velocity.x = 0; // Остановка при столкновении\n        }\n        \n        if (canMoveZ) {\n            this.position.z = newZ;\n        } else {\n            this.velocity.z = 0; // Остановка при столкновении\n        }\n        \n        // Отправляем изменения на сервер, если доступно\n        if (this.game && this.game.network) {\n            this.game.network.sendPlayerMove(this.position, this.rotation);\n        }\n    }\n    \n    /**\n     * Упрощенная проверка столкновений\n     * @param {Object} newPosition - новая позиция для проверки\n     * @returns {boolean} - можно ли двигаться на новую позицию\n     */\n    checkCollision(newPosition) {\n        // Проверяем выход за границы карты\n        const mapSize = 500; // Половина размера карты (1000x1000)\n        \n        if (Math.abs(newPosition.x) > mapSize || Math.abs(newPosition.z) > mapSize) {\n            return false;\n        }\n        \n        // Здесь должна быть проверка столкновений с объектами\n        // В прототипе используем только границы карты\n        \n        return true;\n    }\n    \n    /**\n     * Создание выстрела (визуально и логически)\n     */\n    createShot() {\n        // В прототипе создаем простой луч\n        if (this.renderer && this.renderer.scene) {\n            const rayStart = { ...this.position };\n            rayStart.y += 1; // Уровень \"глаз\"\n            \n            const rayEnd = {\n                x: rayStart.x + this.direction.x * 100,\n                y: rayStart.y,\n                z: rayStart.z + this.direction.z * 100\n            };\n            \n            // Создаем временный луч для визуализации выстрела\n            this.renderer.createTemporaryBeam(rayStart, rayEnd, 0xFF0000, 100);\n            \n            console.log('Выстрел!', this.direction);\n        }\n    }\n    \n    /**\n     * Обновление модели игрока\n     */\n    updateModel() {\n        if (this.mesh && this.renderer) {\n            // Обновляем позицию меша\n            this.renderer.updateObjectTransform(this.mesh, this.position, this.rotation);\n            \n            // В будущем здесь будет управление анимациями\n        }\n    }\n    \n    /**\n     * Получение угла обзора\n     * @returns {number} - текущий угол обзора в градусах\n     */\n    getViewAngle() {\n        return this.viewAngle;\n    }\n    \n    /**\n     * Получение дальности обзора\n     * @returns {number} - текущая дальность обзора\n     */\n    getViewDistance() {\n        return this.viewDistance;\n    }\n    \n    /**\n     * Получение направления взгляда\n     * @returns {Object} - вектор направления {x, z}\n     */\n    getViewDirection() {\n        return { ...this.direction };\n    }\n}","/**\n* Система визуализации конуса зрения и тумана войны в стиле Darkwood\n* Использует Rapier.js для расчета рейкастов и Three.js для отображения\n*/\nexport class VisionSystem {\n    /**\n     * @param {Object} options - настройки системы визуализации\n     * @param {Object} options.scene - Three.js сцена\n     * @param {Object} options.world - Rapier.js мир физики\n     * @param {Object} options.player - игрок, для которого отображается конус зрения\n     * @param {number} options.fov - угол обзора в градусах (по умолчанию 90)\n     * @param {number} options.rayCount - количество лучей (по умолчанию 50)\n     * @param {number} options.maxDistance - максимальная дистанция обзора (по умолчанию 50)\n     * @param {boolean} options.memoryEnabled - сохранение посещенных областей (по умолчанию true)\n     * @param {boolean} options.blurEdges - размытие краев конуса зрения (по умолчанию true)\n     */\n    constructor(options) {\n        // Проверяем наличие обязательных параметров\n        if (!options.scene || !options.player) {\n            console.error('VisionSystem: не указаны обязательные параметры (scene, player)');\n            return;\n        }\n \n        this.scene = options.scene;\n        this.world = options.world; // Может быть undefined на момент создания\n        this.player = options.player;\n        \n        // Настройки по умолчанию\n        this.fov = options.fov !== undefined ? options.fov : 90; // угол обзора в градусах\n        this.rayCount = options.rayCount || 60; // количество лучей (было 50, оптимизировано)\n        this.maxDistance = options.maxDistance || 50; // максимальная дистанция обзора\n        this.memoryEnabled = options.memoryEnabled !== undefined ? options.memoryEnabled : true; // сохранение посещенных областей\n        this.blurEdges = options.blurEdges !== undefined ? options.blurEdges : true; // размытие краев конуса зрения\n        \n        // Константы для динамической настройки угла обзора\n        this.normalFov = 90; // нормальный угол обзора в градусах\n        this.aimingFov = 45; // угол обзора при прицеливании\n        this.runningFov = 70; // угол обзора при беге\n        \n        // Внутренние переменные\n        this.visibilityMask = null; // маска для затемнения невидимых областей\n        this.memoryMask = null; // маска для посещенных областей\n        this.visibilityShape = null; // форма для вырезания конуса видимости\n        this.currentVisionMesh = null; // текущая область конуса видимости\n        \n        // Для хранения информации о посещенных зонах\n        this.cellSize = options.cellSize || 5; // размер ячейки для карты посещенных областей\n        this.gridSize = 1000; // размер игрового мира\n        this.gridResolution = Math.ceil(this.gridSize / this.cellSize); // разрешение сетки\n        this.memoryGrid = new Array(this.gridResolution); // сетка посещенных областей\n        \n        // Флаги состояния\n        this.isInitialized = false;\n        this.isRapierReady = false;\n        this.isRapierChecked = false;\n        this.initializationPromise = null;\n        this.lastErrorTime = 0;\n        this.updateInterval = options.updateInterval || 0; // 0 = каждый кадр, иначе мс между обновлениями\n        this.lastUpdateTime = 0;\n        this.errorCooldown = 5000; // Пауза между повторными логами ошибок (мс)\n        \n        // Инициализация сетки памяти\n        for (let i = 0; i < this.gridResolution; i++) {\n            this.memoryGrid[i] = new Array(this.gridResolution).fill(0);\n        }\n        \n        // Группа для всех элементов системы видимости\n        this.visibilityGroup = new THREE.Group();\n        this.scene.add(this.visibilityGroup);\n \n        // Асинхронная инициализация\n        this.init();\n    }\n    \n    /**\n     * Асинхронная инициализация системы видимости\n     * @returns {Promise} - промис, который разрешается после инициализации\n     */\n    async init() {\n        if (this.initializationPromise) {\n            return this.initializationPromise;\n        }\n        \n        this.initializationPromise = new Promise(async (resolve) => {\n            try {\n                console.log('VisionSystem: начало инициализации...');\n                \n                // Создаем слои видимости\n                this.initVisibilityLayers();\n                \n                // Проверка доступности Rapier\n                await this.checkRapierAvailability();\n                \n                this.isInitialized = true;\n                console.log('VisionSystem: успешно инициализирована');\n                resolve(true);\n            } catch (error) {\n                console.error('VisionSystem: ошибка при инициализации:', error);\n                resolve(false);\n            }\n        });\n        \n        return this.initializationPromise;\n    }\n    \n    /**\n     * Проверка доступности библиотеки Rapier\n     * @returns {Promise} - промис, который разрешается, когда Rapier доступен\n     */\n    async checkRapierAvailability() {\n        // Если уже проверили - возвращаем результат\n        if (this.isRapierChecked) {\n            return this.isRapierReady;\n        }\n        \n        return new Promise((resolve) => {\n            // Функция для проверки доступности Rapier\n            const checkRapier = () => {\n                // Проверяем доступность Rapier у нас\n                const RAPIER = this.getRapierInstance();\n                if (RAPIER) {\n                    console.log('VisionSystem: RAPIER доступен');\n                    this.isRapierReady = true;\n                    this.isRapierChecked = true;\n                    resolve(true);\n                    return;\n                }\n                \n                // Если Rapier недоступен и мир не установлен - продолжаем проверять\n                if (!this.world) {\n                    setTimeout(checkRapier, 100);\n                    return;\n                }\n                \n                // Проверяем, есть ли у мира метод castRay или castRayAndGetNormal\n                if (typeof this.world.castRay === 'function' || \n                    typeof this.world.castRayAndGetNormal === 'function') {\n                    console.log('VisionSystem: мир физики доступен и поддерживает рейкасты');\n                    this.isRapierReady = true;\n                    this.isRapierChecked = true;\n                    resolve(true);\n                    return;\n                }\n                \n                // Продолжаем проверять, но не чаще раза в 100 мс\n                setTimeout(checkRapier, 100);\n            };\n            \n            // Начинаем проверку\n            checkRapier();\n        });\n    }\n \n    /**\n     * Получение экземпляра RAPIER из разных источников\n     * @returns {Object|null} - объект RAPIER или null, если он недоступен\n     */\n    getRapierInstance() {\n        if (typeof RAPIER !== 'undefined') {\n            return RAPIER;\n        }\n        \n        if (typeof window !== 'undefined' && window.RAPIER) {\n            return window.RAPIER;\n        }\n        \n        return null;\n    }\n \n    /**\n     * Инициализация слоев видимости\n     */\n    initVisibilityLayers() {\n        // 1. Создаем слой тумана войны (полностью закрывает карту)\n        this.createFogOfWarLayer();\n        \n        // 2. Создаем слой памяти (посещенные области в черно-белом)\n        this.createMemoryLayer();\n        \n        // 3. Создаем слой текущей видимости (конус зрения)\n        this.createVisionConeLayer();\n    }\n    \n    /**\n     * Создание слоя тумана войны\n     */\n    createFogOfWarLayer() {\n        // Создаем большой черный прямоугольник, покрывающий весь мир\n        const fogGeometry = new THREE.PlaneGeometry(this.gridSize * 1.5, this.gridSize * 1.5);\n        const fogMaterial = new THREE.MeshBasicMaterial({\n            color: 0x000000,\n            transparent: true,\n            opacity: 0.95,\n            side: THREE.DoubleSide,\n            depthTest: false,\n            depthWrite: false\n        });\n        \n        this.fogOfWarMesh = new THREE.Mesh(fogGeometry, fogMaterial);\n        this.fogOfWarMesh.rotation.x = -Math.PI / 2; // горизонтально\n        this.fogOfWarMesh.position.y = 0.3; // немного выше остальных слоев\n        this.fogOfWarMesh.renderOrder = 997; // рендерим под остальными слоями\n        this.visibilityGroup.add(this.fogOfWarMesh);\n    }\n    \n    /**\n     * Создание слоя памяти (посещенные области)\n     */\n    createMemoryLayer() {\n        // Создаем сетку для отображения посещенных областей\n        const gridGeometry = new THREE.PlaneGeometry(\n            this.gridSize * 1.5, \n            this.gridSize * 1.5,\n            this.gridResolution,\n            this.gridResolution\n        );\n        \n        // Материал для посещенных областей (чёрно-белый)\n        const memoryMaterial = new THREE.ShaderMaterial({\n            uniforms: {\n                opacity: { value: 0.7 },\n                colorInfluence: { value: 0.2 } // насколько сильно сохраняется цвет (0 = полностью ЧБ, 1 = цветной)\n            },\n            vertexShader: `\n                varying vec2 vUv;\n                varying vec3 vPosition;\n                \n                void main() {\n                    vUv = uv;\n                    vPosition = position;\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                }\n            `,\n            fragmentShader: `\n                uniform float opacity;\n                uniform float colorInfluence;\n                \n                varying vec2 vUv;\n                varying vec3 vPosition;\n                \n                void main() {\n                    // В реальной реализации здесь будет использоваться текстура с рендера сцены\n                    // Для прототипа просто делаем ЧБ эффект\n                    gl_FragColor = vec4(0.3, 0.3, 0.3, opacity);\n                }\n            `,\n            transparent: true,\n            side: THREE.DoubleSide,\n            depthTest: false,\n            depthWrite: false\n        });\n        \n        this.memoryMesh = new THREE.Mesh(gridGeometry, memoryMaterial);\n        this.memoryMesh.rotation.x = -Math.PI / 2; // горизонтально\n        this.memoryMesh.position.y = 0.2; // выше земли, но ниже тумана\n        this.memoryMesh.renderOrder = 998; // рендерим между туманом и конусом видимости\n        this.visibilityGroup.add(this.memoryMesh);\n        \n        // Создаем атрибут видимости для вершин\n        const visibilityAttribute = new Float32Array(gridGeometry.attributes.position.count);\n        for (let i = 0; i < visibilityAttribute.length; i++) {\n            visibilityAttribute[i] = 0.0; // изначально все вершины невидимы\n        }\n        \n        gridGeometry.setAttribute('visibility', new THREE.BufferAttribute(visibilityAttribute, 1));\n    }\n    \n    /**\n     * Создание слоя конуса видимости\n     */\n    createVisionConeLayer() {\n        // Создаем базовую геометрию (будет обновляться каждый кадр)\n        const initialShape = new THREE.Shape();\n        initialShape.moveTo(0, 0);\n        initialShape.lineTo(5, 5);\n        initialShape.lineTo(-5, 5);\n        initialShape.lineTo(0, 0);\n        \n        // Маска для затемнения невидимых областей\n        const maskMaterial = new THREE.MeshBasicMaterial({\n            color: 0x000000,\n            side: THREE.DoubleSide,\n            transparent: true,\n            opacity: 0.8,\n            depthTest: false,\n            depthWrite: false\n        });\n        \n        // Создаем пустую маску (будет обновляться каждый кадр)\n        const worldSize = this.gridSize * 1.5;\n        const maskGeometry = new THREE.PlaneGeometry(worldSize, worldSize);\n        this.visibilityMask = new THREE.Mesh(maskGeometry, maskMaterial);\n        this.visibilityMask.rotation.x = -Math.PI / 2; // горизонтально\n        this.visibilityMask.position.y = 0.1; // ниже всех остальных слоёв\n        this.visibilityMask.renderOrder = 999; // рендерим последним\n        this.visibilityGroup.add(this.visibilityMask);\n    }\n    \n    /**\n     * Проверка готовности системы видимости\n     * @returns {boolean} - флаг готовности\n     */\n    isReady() {\n        return this.isInitialized && this.isRapierReady && !!this.world;\n    }\n    \n    /**\n     * Обновление конуса видимости\n     */\n    update() {\n        // Если система не инициализирована, ждем\n        if (!this.isInitialized) {\n            return;\n        }\n        \n        // Если Rapier не готов, пробуем проверить его доступность\n        if (!this.isRapierReady) {\n            this.checkRapierAvailability();\n            return;\n        }\n        \n        // Если не переданы необходимые объекты, выходим\n        if (!this.player || !this.world) {\n            return;\n        }\n \n        // Проверяем, не слишком ли рано для обновления (для оптимизации)\n        const now = Date.now();\n        if (this.updateInterval > 0 && now - this.lastUpdateTime < this.updateInterval) {\n            return;\n        }\n        this.lastUpdateTime = now;\n        \n        try {\n            // Получаем актуальные данные от игрока\n            const playerPos = this.player.position;\n            let playerDirection = { x: 0, z: -1 }; // направление по умолчанию\n            \n            // Пытаемся получить текущее направление взгляда, если метод существует\n            if (typeof this.player.getViewDirection === 'function') {\n                playerDirection = this.player.getViewDirection();\n            }\n            \n            // Определяем текущий угол обзора в зависимости от состояния игрока\n            let currentFov = this.normalFov;\n            if (this.player.isAiming) {\n                currentFov = this.aimingFov;\n            } else if (this.player.isRunning) {\n                currentFov = this.runningFov;\n            }\n            // Преобразуем угол из градусов в радианы\n            const fovRadians = (currentFov * Math.PI) / 180;\n            \n            // Вычисляем направление взгляда игрока в радианах\n            const directionAngle = Math.atan2(playerDirection.x, playerDirection.z);\n            \n            // Обновляем маску видимости\n            this.updateVisionMask(playerPos, directionAngle, fovRadians);\n            \n            // Обновляем карту памяти\n            if (this.memoryEnabled) {\n                this.updateMemoryMap(playerPos, directionAngle, fovRadians);\n            }\n        } catch (error) {\n            // Ограничиваем частоту вывода ошибок в консоль\n            const now = Date.now();\n            if (now - this.lastErrorTime > this.errorCooldown) {\n                console.error('VisionSystem: ошибка при обновлении:', error);\n                this.lastErrorTime = now;\n            }\n        }\n    }\n    \n    /**\n     * Обновление маски видимости (конуса зрения)\n     * @param {Object} playerPos - позиция игрока\n     * @param {number} directionAngle - угол направления взгляда в радианах\n     * @param {number} fovRadians - угол обзора в радианах\n     */\n    updateVisionMask(playerPos, directionAngle, fovRadians) {\n        // Защитная проверка - Rapier должен быть доступен\n        if (!this.isRapierReady || !this.world) {\n            return;\n        }\n        \n        // Защитная проверка объектов\n        if (!playerPos || directionAngle === undefined || fovRadians === undefined) {\n            return;\n        }\n        \n        try {\n            // Получаем экземпляр RAPIER\n            const RAPIER = this.getRapierInstance();\n            if (!RAPIER) {\n                console.warn('VisionSystem: RAPIER не определен при обновлении маски видимости');\n                return;\n            }\n            \n            // Половина угла обзора\n            const halfFov = fovRadians / 2;\n            \n            // Определяем точку старта лучей\n            const origin = {\n                x: playerPos.x,\n                y: playerPos.y + 1.0, // на уровне \"глаз\" игрока\n                z: playerPos.z\n            };\n            \n            // Формируем список углов для выпуска лучей\n            const angles = [];\n            for (let i = 0; i < this.rayCount; i++) {\n                const angle = directionAngle - halfFov + (i / (this.rayCount - 1)) * fovRadians;\n                angles.push(angle);\n            }\n            \n            // Вычисляем точки контура видимой области\n            const points = [];\n            \n            // Добавляем первую точку - позиция игрока\n            points.push(new THREE.Vector2(0, 0));\n            \n            // Выпускаем лучи и находим точки пересечения\n            angles.forEach(angle => {\n                // Единичный вектор направления в горизонтальной плоскости\n                const dir = {\n                    x: Math.sin(angle),\n                    y: 0,\n                    z: Math.cos(angle)\n                };\n                \n                // Выполняем рейкаст\n                let endPoint;\n                \n                try {\n                    // Создаем луч Rapier (с проверкой существования конструктора)\n                    let ray;\n                    if (typeof RAPIER.Ray === 'function') {\n                        ray = new RAPIER.Ray(origin, dir);\n                    } else if (RAPIER.Ray) {\n                        ray = RAPIER.Ray.new(origin, dir);\n                    } else {\n                        // Если Ray недоступен, используем базовое значение\n                        endPoint = {\n                            x: origin.x + dir.x * this.maxDistance,\n                            z: origin.z + dir.z * this.maxDistance\n                        };\n                        points.push(new THREE.Vector2(\n                            endPoint.x - origin.x,\n                            endPoint.z - origin.z\n                        ));\n                        return; // Выход из текущей итерации forEach\n                    }\n                    \n                    // Выполняем рейкаст в физическом мире\n                    let hit = null;\n                    if (typeof this.world.castRay === 'function') {\n                        hit = this.world.castRay(ray, this.maxDistance, true);\n                    } else if (typeof this.world.castRayAndGetNormal === 'function') {\n                        const result = this.world.castRayAndGetNormal(origin, dir, this.maxDistance, true);\n                        hit = result.hasHit ? result : null;\n                    }\n                    \n                    if (hit) {\n                        // Луч столкнулся с препятствием\n                        const hitDist = typeof hit.toi === 'function' ? hit.toi() : hit.toi;\n                        const impactDistance = hitDist * this.maxDistance * 0.99;\n                        \n                        // Конечная точка чуть ближе точки столкновения\n                        endPoint = {\n                            x: origin.x + dir.x * impactDistance,\n                            z: origin.z + dir.z * impactDistance\n                        };\n                    } else {\n                        // Луч не встретил препятствий\n                        endPoint = {\n                            x: origin.x + dir.x * this.maxDistance,\n                            z: origin.z + dir.z * this.maxDistance\n                        };\n                    }\n                } catch (error) {\n                    console.error('VisionSystem: ошибка при выполнении рейкаста:', error);\n                    // В случае ошибки используем максимальную дистанцию\n                    endPoint = {\n                        x: origin.x + dir.x * this.maxDistance,\n                        z: origin.z + dir.z * this.maxDistance\n                    };\n                }\n                \n                // Добавляем точку в список\n                points.push(new THREE.Vector2(\n                    endPoint.x - origin.x,\n                    endPoint.z - origin.z\n                ));\n                \n                // Отмечаем область как посещенную\n                if (this.memoryEnabled) {\n                    this.markVisitedArea(endPoint.x, endPoint.z);\n                }\n            });\n            \n            // Добавляем последнюю точку, замыкающую форму\n            if (points.length > 1) {\n                points.push(points[1].clone());\n            }\n            \n            // Создаем форму конуса видимости\n            this.updateVisibilityShape(points, playerPos);\n        } catch (error) {\n            console.error('VisionSystem: ошибка при обновлении маски видимости:', error);\n        }\n    }\n    \n    /**\n     * Обновление формы видимости\n     * @param {Array} points - точки контура видимой области\n     * @param {Object} playerPos - позиция игрока\n     */\n    updateVisibilityShape(points, playerPos) {\n        // Проверяем валидность точек\n        if (!points || points.length < 3) {\n            console.warn('VisionSystem: недостаточно точек для создания формы видимости');\n            return;\n        }\n        \n        try {\n            // Создаем форму конуса видимости\n            const shape = new THREE.Shape();\n            shape.moveTo(points[0].x, points[0].y);\n            \n            for (let i = 1; i < points.length; i++) {\n                shape.lineTo(points[i].x, points[i].y);\n            }\n            \n            // Создаем внешний контур (большой прямоугольник)\n            const worldSize = this.maxDistance * 2;\n            const outerShape = new THREE.Shape();\n            outerShape.moveTo(-worldSize, -worldSize);\n            outerShape.lineTo(worldSize, -worldSize);\n            outerShape.lineTo(worldSize, worldSize);\n            outerShape.lineTo(-worldSize, worldSize);\n            outerShape.lineTo(-worldSize, -worldSize);\n            \n            // Вырезаем форму конуса\n            outerShape.holes.push(shape);\n            \n            // Обновляем геометрию маски\n            if (this.visibilityMask) {\n                // Удаляем старую геометрию\n                if (this.visibilityMask.geometry) {\n                    this.visibilityMask.geometry.dispose();\n                }\n                \n                // Создаем новую геометрию\n                this.visibilityMask.geometry = new THREE.ShapeGeometry(outerShape);\n                \n                // Перемещаем в позицию игрока\n                this.visibilityMask.position.set(playerPos.x, 0.1, playerPos.z);\n            }\n        } catch (error) {\n            console.error('VisionSystem: ошибка при обновлении формы видимости:', error);\n        }\n    }\n    \n    /**\n     * Отметка области как посещенной\n     * @param {number} x - координата X в мировом пространстве\n     * @param {number} z - координата Z в мировом пространстве\n     */\n    markVisitedArea(x, z) {\n        // Преобразуем мировые координаты в координаты сетки\n        const halfGridSize = this.gridSize / 2;\n        const gridX = Math.floor((x + halfGridSize) / this.cellSize);\n        const gridZ = Math.floor((z + halfGridSize) / this.cellSize);\n        \n        // Проверяем, что координаты внутри сетки\n        if (gridX >= 0 && gridX < this.gridResolution && \n            gridZ >= 0 && gridZ < this.gridResolution) {\n            \n            // Отмечаем область как посещенную\n            this.memoryGrid[gridX][gridZ] = 1;\n            \n            // Отмечаем соседние ячейки для плавного перехода\n            const radius = 1; // радиус влияния в ячейках сетки\n            \n            for (let dx = -radius; dx <= radius; dx++) {\n                for (let dz = -radius; dz <= radius; dz++) {\n                    const nx = gridX + dx;\n                    const nz = gridZ + dz;\n                    \n                    if (nx >= 0 && nx < this.gridResolution && \n                        nz >= 0 && nz < this.gridResolution) {\n                        \n                        // Устанавливаем значение не меньше 0.7 для соседних ячеек\n                        this.memoryGrid[nx][nz] = Math.max(this.memoryGrid[nx][nz], 0.7);\n                    }\n                }\n            }\n        }\n    }\n    \n    /**\n     * Обновление карты памяти\n     * @param {Object} playerPos - позиция игрока\n     * @param {number} directionAngle - угол направления взгляда\n     * @param {number} fovRadians - угол обзора в радианах\n     */\n    updateMemoryMap(playerPos, directionAngle, fovRadians) {\n        if (!this.memoryEnabled || !this.memoryMesh) return;\n        \n        try {\n            // Обновляем сетку памяти на маске тумана войны\n            if (this.fogOfWarMesh && this.fogOfWarMesh.material) {\n                // Здесь обычно используется шейдер или другой метод для \n                // обновления маски на основе сетки памяти\n                \n                // В этой реализации для простоты мы просто накладываем\n                // маску поверх тех областей, которые не посещены\n \n                // Обновляем непрозрачность маски памяти в зависимости от стейта\n                // В полной реализации здесь было бы обновление шейдера\n                \n                // Дополнительное: создание отверстий в тумане войны на основе сетки памяти\n                // Создаем геометрию для вырезания посещенных областей из тумана войны\n                // (Для прототипа не реализуем полностью)\n            }\n \n            // В полной реализации здесь было бы обновление шейдера\n            // на основе карты посещенных областей\n        } catch (error) {\n            console.error('VisionSystem: ошибка при обновлении карты памяти:', error);\n        }\n    }\n    \n    /**\n     * Изменение угла обзора\n     * @param {number} fov - новый угол обзора в градусах\n     */\n    setFov(fov) {\n        this.fov = fov;\n    }\n    \n    /**\n     * Изменение максимальной дистанции видимости\n     * @param {number} distance - новая максимальная дистанция\n     */\n    setMaxDistance(distance) {\n        this.maxDistance = distance;\n    }\n    \n    /**\n     * Изменение количества лучей\n     * @param {number} count - новое количество лучей\n     */\n    setRayCount(count) {\n        this.rayCount = count;\n    }\n    \n    /**\n     * Очистка карты памяти (сброс посещенных областей)\n     */\n    clearMemory() {\n        if (!this.memoryEnabled) return;\n        \n        // Сбрасываем сетку памяти\n        for (let i = 0; i < this.gridResolution; i++) {\n            for (let j = 0; j < this.gridResolution; j++) {\n                this.memoryGrid[i][j] = 0;\n            }\n        }\n        \n        console.log('VisionSystem: карта памяти очищена');\n    }\n    \n    /**\n    * Освобождение ресурсов системы\n    */\n   dispose() {\n    try {\n        // Удаляем маску видимости\n        if (this.visibilityMask) {\n            if (this.visibilityMask.geometry) {\n                this.visibilityMask.geometry.dispose();\n            }\n            if (this.visibilityMask.material) {\n                this.visibilityMask.material.dispose();\n            }\n            this.visibilityGroup.remove(this.visibilityMask);\n        }\n        \n        // Удаляем маску памяти\n        if (this.memoryMesh) {\n            if (this.memoryMesh.geometry) {\n                this.memoryMesh.geometry.dispose();\n            }\n            if (this.memoryMesh.material) {\n                this.memoryMesh.material.dispose();\n            }\n            this.visibilityGroup.remove(this.memoryMesh);\n        }\n        \n        // Удаляем маску тумана войны\n        if (this.fogOfWarMesh) {\n            if (this.fogOfWarMesh.geometry) {\n                this.fogOfWarMesh.geometry.dispose();\n            }\n            if (this.fogOfWarMesh.material) {\n                this.fogOfWarMesh.material.dispose();\n            }\n            this.visibilityGroup.remove(this.fogOfWarMesh);\n        }\n        \n        // Удаляем группу видимости\n        if (this.visibilityGroup) {\n            this.scene.remove(this.visibilityGroup);\n        }\n        \n        // Сбрасываем переменные\n        this.visibilityMask = null;\n        this.memoryMesh = null;\n        this.fogOfWarMesh = null;\n        this.visibilityGroup = null;\n        this.memoryGrid = [];\n        this.isInitialized = false;\n        this.isRapierReady = false;\n        this.isRapierChecked = false;\n        this.initializationPromise = null;\n        \n        console.log('VisionSystem: ресурсы успешно освобождены');\n    } catch (error) {\n        console.error('VisionSystem: ошибка при освобождении ресурсов:', error);\n    }\n}\n}","// client/src/core/GameWorld.js\n\nimport { Player } from '../entities/player.js';\nimport { VisionSystem } from '../physics/vision-system.js';\nimport { log } from './gameCore.js';\n\n/**\n * Класс для управления игровым миром и сущностями\n */\nexport class GameWorld {\n    /**\n     * @param {Object} game - ссылка на основной класс игры\n     */\n    constructor(game) {\n        this.game = game;\n        \n        // Сущности\n        this.player = null;\n        this.entities = [];\n        \n        // Системы\n        this.visionSystem = null;\n    }\n    \n    /**\n     * Инициализация игрового мира\n     */\n    async initialize() {\n        try {\n            // Создание тестовых стен\n            this.createTestWalls();\n            \n            // Создание игрока\n            this.player = new Player({\n                position: { x: 0, y: 0, z: 0 },\n                renderer: this.game.renderer,\n                input: this.game.input,\n                game: this.game\n            });\n            \n            log('Игрок создан');\n            \n            // Инициализация системы видимости\n            await this.initVisionSystem();\n            \n            return true;\n        } catch (error) {\n            log(`Ошибка инициализации игрового мира: ${error.message}`);\n            return false;\n        }\n    }\n    \n    /**\n     * Обновление игрового мира\n     * @param {number} deltaTime - время между кадрами\n     */\n    update(deltaTime) {\n        // Обновление игрока\n        if (this.player) {\n            this.player.update(deltaTime);\n        }\n        \n        // Обновление других сущностей\n        this.entities.forEach(entity => {\n            if (entity.update) {\n                entity.update(deltaTime);\n            }\n        });\n    }\n    \n    /**\n     * Фиксированное обновление для физики\n     * @param {number} deltaTime - фиксированный временной шаг\n     */\n    fixedUpdate(deltaTime) {\n        // Обновляем состояние сущностей (NPC и др.)\n        this.entities.forEach(entity => {\n            if (entity.fixedUpdate) {\n                entity.fixedUpdate(deltaTime);\n            }\n        });\n    }\n    \n    /**\n     * Метод для инициализации системы видимости\n     */\n    async initVisionSystem() {\n        try {\n            if (!this.game.renderer || !this.game.renderer.scene || !this.player) {\n                throw new Error('Не все компоненты доступны для инициализации системы видимости');\n            }\n            \n            log('Инициализация системы видимости...');\n            \n            // Создаем систему видимости\n            const visionSystem = new VisionSystem({\n                scene: this.game.renderer.scene,\n                world: this.game.physics.getWorld(),\n                player: this.player,\n                fov: 90, // Начальный угол обзора\n                rayCount: 60, // Количество лучей\n                maxDistance: 50, // Максимальная дистанция видимости\n                memoryEnabled: true, // Запоминать посещенные области\n                blurEdges: true // Размытие краев видимости\n            });\n            \n            // Дожидаемся инициализации системы видимости\n            await visionSystem.init();\n            \n            // Проверяем готовность системы\n            if (!visionSystem.isReady()) {\n                log('Система видимости не готова, но будет инициализирована позже автоматически');\n            }\n            \n            // Сохраняем систему видимости в рендерере\n            this.game.renderer.visionSystem = visionSystem;\n            this.visionSystem = visionSystem;\n            \n            log('Система видимости инициализирована');\n            return true;\n        } catch (error) {\n            log(`Ошибка инициализации системы видимости: ${error.message}`);\n            return false;\n        }\n    }\n    \n    /**\n     * Метод для создания тестовых стен\n     */\n    createTestWalls() {\n        try {\n            if (!this.game.physics || !this.game.physics.isReady() || !this.game.renderer || !this.game.renderer.scene) {\n                log('Физика или рендерер не готовы для создания стен');\n                return;\n            }\n            \n            log('Создание тестовых стен...');\n            \n            // Создаем материал для стен\n            const wallMaterial = new THREE.MeshStandardMaterial({\n                color: 0x808080,\n                roughness: 0.7,\n                metalness: 0.2\n            });\n            \n            // Функция для создания стены\n            const createWall = (x, z, width, depth, height = 3) => {\n                // Создаем геометрию\n                const geometry = new THREE.BoxGeometry(width, height, depth);\n                const mesh = new THREE.Mesh(geometry, wallMaterial);\n                \n                // Устанавливаем позицию\n                mesh.position.set(x, height / 2, z);\n                \n                // Добавляем на сцену\n                this.game.renderer.scene.add(mesh);\n                \n                // Создаем физический коллайдер\n                this.game.physics.createObstacle({\n                    position: { x, y: height / 2, z },\n                    size: { x: width, y: height, z: depth },\n                    object: mesh\n                });\n                \n                return mesh;\n            };\n            \n            // Создаем стены лабиринта\n            // Горизонтальные стены (границы)\n            createWall(0, -20, 40, 1);\n            createWall(-20, 0, 1, 40);\n            createWall(20, 0, 1, 40);\n            createWall(0, 20, 40, 1);\n            \n            // Внутренние стены\n            createWall(-10, -10, 1, 20);\n            createWall(10, 10, 20, 1);\n            createWall(10, -5, 1, 10);\n            createWall(-5, 5, 10, 1);\n            \n            // Препятствия\n            createWall(-15, -15, 3, 3);\n            createWall(15, -15, 3, 3);\n            createWall(15, 15, 3, 3);\n            createWall(-15, 15, 3, 3);\n            \n            log('Тестовые стены созданы');\n        } catch (error) {\n            log(`Ошибка создания тестовых стен: ${error.message}`);\n        }\n    }\n    \n    /**\n     * Добавление сущности в игру\n     * @param {Object} entity - сущность для добавления\n     */\n    addEntity(entity) {\n        this.entities.push(entity);\n    }\n    \n    /**\n     * Удаление сущности из игры\n     * @param {Object} entity - сущность для удаления\n     */\n    removeEntity(entity) {\n        const index = this.entities.indexOf(entity);\n        if (index !== -1) {\n            this.entities.splice(index, 1);\n        }\n    }\n    \n    /**\n     * Очистка игрового мира\n     */\n    clear() {\n        // Удаляем все сущности\n        this.entities = [];\n        \n        // Удаляем игрока\n        this.player = null;\n        \n        // Очищаем системы\n        if (this.visionSystem) {\n            this.visionSystem.dispose();\n            this.visionSystem = null;\n        }\n        \n        if (this.game.renderer && this.game.renderer.visionSystem) {\n            this.game.renderer.visionSystem = null;\n        }\n    }\n}","// client/src/core/GameState.js\n\nimport { log } from './gameCore.js';\n\n/**\n * Класс для управления состоянием игры\n */\nexport class GameState {\n    /**\n     * @param {Object} game - ссылка на основной класс игры\n     */\n    constructor(game) {\n        this.game = game;\n        \n        // Флаги состояния\n        this.isRunning = false;\n        this.isLoading = true;\n        this.isPaused = false;\n        \n        // Текущая сцена (loading, menu, game, pause)\n        this.currentScene = 'loading';\n        \n        // Настройки видимости\n        this.fogOfWarEnabled = true;\n        this.visibilitySystemEnabled = true;\n    }\n    \n    /**\n     * Переключение состояния паузы\n     */\n    togglePause() {\n        if (this.isRunning) {\n            this.pauseGame();\n        } else {\n            this.resumeGame();\n        }\n    }\n    \n    /**\n     * Остановить игру (пауза)\n     */\n    pauseGame() {\n        this.isRunning = false;\n        this.isPaused = true;\n        \n        if (this.game.input) {\n            this.game.input.disableGameControls();\n        }\n        \n        // Здесь можно добавить отображение меню паузы\n        log('Игра на паузе');\n    }\n    \n    /**\n     * Возобновить игру\n     */\n    resumeGame() {\n        this.isRunning = true;\n        this.isPaused = false;\n        \n        if (this.game.input) {\n            this.game.input.enableGameControls();\n        }\n        \n        // Скрываем меню паузы\n        log('Игра возобновлена');\n        \n        // Перезапускаем игровой цикл\n        this.game.lastFrameTime = performance.now();\n        requestAnimationFrame(this.game.update);\n    }\n    \n    /**\n     * Завершение игры\n     */\n    endGame() {\n        this.isRunning = false;\n        this.currentScene = 'menu';\n        \n        // Очистка игрового мира\n        if (this.game.world) {\n            this.game.world.clear();\n        }\n        \n        // Очищаем физику\n        if (this.game.physics) {\n            this.game.physics.dispose();\n        }\n        \n        // Отображение главного меню\n        if (this.game.ui) {\n            if (this.game.ui.gameCanvas) {\n                this.game.ui.gameCanvas.classList.add('hidden');\n            }\n            if (this.game.ui.hudElement) {\n                this.game.ui.hudElement.classList.add('hidden');\n            }\n            if (this.game.ui.mainMenu) {\n                this.game.ui.mainMenu.classList.remove('hidden');\n            }\n        }\n        \n        log('Игра завершена');\n    }\n    \n    /**\n     * Проверка, находится ли игра в указанной сцене\n     * @param {string} scene - имя сцены для проверки\n     * @returns {boolean} результат проверки\n     */\n    isInScene(scene) {\n        return this.currentScene === scene;\n    }\n}","// client/src/core/gameEvents.js\n\nimport { log } from './gameCore.js';\n\n/**\n * Класс для обработки событий в игре\n */\nexport class GameEvents {\n    /**\n     * @param {Object} game - ссылка на основной класс игры\n     */\n    constructor(game) {\n        this.game = game;\n        \n        // Привязка методов к this\n        this.handleGlobalError = this.handleGlobalError.bind(this);\n        this.handlePromiseError = this.handlePromiseError.bind(this);\n        \n        // Регистрация обработчиков глобальных ошибок\n        window.addEventListener('error', this.handleGlobalError);\n        window.addEventListener('unhandledrejection', this.handlePromiseError);\n    }\n    \n    /**\n     * Настройка обработчиков событий\n     */\n    setupEventListeners() {\n        try {\n            // Обработчики для главного меню\n            const startGameButton = document.getElementById('start-game');\n            if (startGameButton) {\n                startGameButton.addEventListener('click', () => this.game.startGame());\n            }\n            \n            const settingsButton = document.getElementById('settings');\n            if (settingsButton) {\n                settingsButton.addEventListener('click', () => {\n                    log('Настройки');\n                    // В будущем здесь будет открытие меню настроек\n                });\n            }\n            \n            // Обработчик для закрытия инвентаря\n            const closeInventoryButton = document.getElementById('close-inventory');\n            if (closeInventoryButton) {\n                closeInventoryButton.addEventListener('click', () => {\n                    this.game.ui.hideInventory();\n                });\n            }\n            \n            // Обработчики клавиш\n            if (this.game.input) {\n                this.game.input.addKeyCallback('KeyI', () => {\n                    if (this.game.state.isInScene('game')) {\n                        this.game.ui.toggleInventory();\n                    }\n                });\n                \n                // Обработчик ESC для паузы\n                this.game.input.addKeyCallback('Escape', () => {\n                    if (this.game.state.isInScene('game')) {\n                        this.game.state.togglePause();\n                    }\n                });\n            }\n            \n            // Интеграция с VK (если доступно)\n            if (window.vkBridge) {\n                try {\n                    window.vkBridge.send('VKWebAppInit');\n                    log('VK Bridge инициализирован');\n                } catch (e) {\n                    log(`Ошибка инициализации VK Bridge: ${e.message}`);\n                }\n            }\n            \n            // Обработчик изменения размера окна\n            window.addEventListener('resize', () => {\n                if (this.game.renderer) {\n                    // Перерисовываем сцену при изменении размера окна\n                    this.game.renderer.render(this.game.world.player);\n                }\n            });\n            \n            log('Обработчики событий настроены');\n        } catch (error) {\n            log(`Ошибка настройки обработчиков событий: ${error.message}`);\n            throw error;\n        }\n    }\n    \n    /**\n     * Обработка глобальных ошибок\n     * @param {ErrorEvent} event - событие ошибки\n     */\n    handleGlobalError(event) {\n        log(`Глобальная ошибка: ${event.message} в ${event.filename}:${event.lineno}`);\n        \n        // Показываем сообщение об ошибке, если игра ещё не запущена\n        if (this.game.state.isInScene('loading')) {\n            this.game.ui.showErrorScreen(`Ошибка: ${event.message}`);\n        }\n        \n        // Предотвращаем дополнительную обработку ошибки\n        event.preventDefault();\n    }\n    \n    /**\n     * Обработка необработанных ошибок промисов\n     * @param {PromiseRejectionEvent} event - событие отклонения промиса\n     */\n    handlePromiseError(event) {\n        const errorMessage = event.reason?.message || 'Неизвестная ошибка Promise';\n        log(`Необработанная ошибка Promise: ${errorMessage}`);\n        \n        // Показываем сообщение об ошибке, если игра ещё не запущена\n        if (this.game.state.isInScene('loading')) {\n            this.game.ui.showErrorScreen(`Ошибка асинхронной операции: ${errorMessage}`);\n        }\n        \n        // Предотвращаем дополнительную обработку ошибки\n        event.preventDefault();\n    }\n}","// client/src/core/renderer.js\n\n/**\n * Класс отвечающий за рендеринг игры с использованием Three.js\n */\nexport class Renderer {\n    /**\n     * @param {HTMLCanvasElement} canvas - DOM элемент canvas для рендеринга\n     */\n    constructor(canvas) {\n        this.canvas = canvas;\n        this.scene = null;\n        this.camera = null;\n        this.renderer = null;\n        this.lights = [];\n        this.models = {}; // Хранилище для загруженных моделей\n        this.textures = {}; // Хранилище для загруженных текстур\n        \n        // Элементы для системы видимости\n        this.visionSystem = null;\n        this.temporaryObjects = []; // Временные объекты (лучи, эффекты)\n    }\n\n    /**\n     * Настройка сцены, камеры и рендерера\n     */\n    setupScene() {\n        // Создание сцены\n        this.scene = new THREE.Scene();\n        this.scene.background = new THREE.Color(0x87CEEB); // Цвет неба\n        \n        // Создание камеры (перспективная, вид сверху)\n        const aspect = window.innerWidth / window.innerHeight;\n        this.camera = new THREE.PerspectiveCamera(75, aspect, 0.1, 1000);\n        this.camera.position.set(0, 30, 30); // Позиция над землей\n        this.camera.lookAt(0, 0, 0); // Направлена на игрока\n        \n        // Создание рендерера\n        this.renderer = new THREE.WebGLRenderer({\n            canvas: this.canvas,\n            antialias: true\n        });\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n        this.renderer.shadowMap.enabled = true;\n        \n        // Добавление освещения\n        this.setupLights();\n        \n        // Создание земли\n        this.createGround();\n        \n        // Инициализируем пустой объект для системы видимости\n        // Она будет инициализирована позже в Game.initVisionSystem()\n        this.visionSystem = null;\n        \n        // Обработчик изменения размера окна\n        window.addEventListener('resize', () => {\n            this.camera.aspect = window.innerWidth / window.innerHeight;\n            this.camera.updateProjectionMatrix();\n            this.renderer.setSize(window.innerWidth, window.innerHeight);\n        });\n    }\n    \n    /**\n     * Настройка освещения сцены\n     */\n    setupLights() {\n        // Основной направленный свет (имитация солнца)\n        const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n        directionalLight.position.set(10, 30, 10);\n        directionalLight.castShadow = true;\n        \n        // Настройка теней\n        directionalLight.shadow.mapSize.width = 2048;\n        directionalLight.shadow.mapSize.height = 2048;\n        directionalLight.shadow.camera.near = 0.5;\n        directionalLight.shadow.camera.far = 100;\n        directionalLight.shadow.camera.left = -50;\n        directionalLight.shadow.camera.right = 50;\n        directionalLight.shadow.camera.top = 50;\n        directionalLight.shadow.camera.bottom = -50;\n        \n        this.scene.add(directionalLight);\n        this.lights.push(directionalLight);\n        \n        // Рассеянный свет (чтобы тени не были слишком темными)\n        const ambientLight = new THREE.AmbientLight(0x505050, 0.7);\n        this.scene.add(ambientLight);\n        this.lights.push(ambientLight);\n    }\n    \n    /**\n     * Создание земли (простая поверхность для прототипа)\n     */\n    createGround() {\n        const groundGeometry = new THREE.PlaneGeometry(1000, 1000, 100, 100);\n        const groundMaterial = new THREE.MeshStandardMaterial({\n            color: 0x3e6539, // Зеленый цвет земли\n            roughness: 1,\n            metalness: 0\n        });\n        \n        const ground = new THREE.Mesh(groundGeometry, groundMaterial);\n        ground.rotation.x = -Math.PI / 2; // Разворот плоскости горизонтально\n        ground.position.y = -0.5;\n        ground.receiveShadow = true;\n        \n        this.scene.add(ground);\n    }\n    \n    /**\n     * Создание временного луча для визуализации выстрела\n     * @param {Object} start - начальная точка луча\n     * @param {Object} end - конечная точка луча\n     * @param {number} color - цвет луча\n     * @param {number} duration - длительность отображения в миллисекундах\n     */\n    createTemporaryBeam(start, end, color = 0xFF0000, duration = 100) {\n        // Создаем материал для луча\n        const material = new THREE.LineBasicMaterial({\n            color: color,\n            transparent: true,\n            opacity: 0.8\n        });\n        \n        // Создаем геометрию\n        const geometry = new THREE.BufferGeometry();\n        const points = [\n            new THREE.Vector3(start.x, start.y, start.z),\n            new THREE.Vector3(end.x, end.y, end.z)\n        ];\n        geometry.setFromPoints(points);\n        \n        // Создаем линию\n        const line = new THREE.Line(geometry, material);\n        this.scene.add(line);\n        \n        // Добавляем в список временных объектов\n        const tempObject = {\n            object: line,\n            endTime: Date.now() + duration\n        };\n        this.temporaryObjects.push(tempObject);\n        \n        // Устанавливаем таймер для удаления\n        setTimeout(() => {\n            this.removeTemporaryObject(tempObject);\n        }, duration);\n    }\n    \n    /**\n     * Удаление временного объекта\n     * @param {Object} tempObject - временный объект для удаления\n     */\n    removeTemporaryObject(tempObject) {\n        if (!tempObject || !tempObject.object) return;\n        \n        // Удаляем со сцены\n        this.scene.remove(tempObject.object);\n        \n        // Удаляем из списка\n        const index = this.temporaryObjects.indexOf(tempObject);\n        if (index !== -1) {\n            this.temporaryObjects.splice(index, 1);\n        }\n        \n        // Освобождаем ресурсы\n        if (tempObject.object.geometry) {\n            tempObject.object.geometry.dispose();\n        }\n        if (tempObject.object.material) {\n            tempObject.object.material.dispose();\n        }\n    }\n    \n    /**\n     * Очистка устаревших временных объектов\n     */\n    cleanTemporaryObjects() {\n        const now = Date.now();\n        \n        // Удаляем устаревшие объекты\n        this.temporaryObjects = this.temporaryObjects.filter(tempObj => {\n            if (tempObj.endTime <= now) {\n                this.scene.remove(tempObj.object);\n                \n                // Освобождаем ресурсы\n                if (tempObj.object.geometry) {\n                    tempObj.object.geometry.dispose();\n                }\n                if (tempObj.object.material) {\n                    tempObj.object.material.dispose();\n                }\n                \n                return false;\n            }\n            return true;\n        });\n    }\n    \n    /**\n     * Добавление игрока на сцену\n     * @param {Object} playerData - данные игрока\n     * @returns {THREE.Object3D} - объект игрока\n     */\n    addPlayer(playerData) {\n        // Создаем временную модель игрока (цилиндр)\n        const geometry = new THREE.CylinderGeometry(0.5, 0.5, 1.8, 8);\n        const material = new THREE.MeshStandardMaterial({\n            color: 0x1E90FF, // Синий цвет для игрока\n            roughness: 0.7\n        });\n        \n        const playerMesh = new THREE.Mesh(geometry, material);\n        playerMesh.position.copy(playerData.position);\n        playerMesh.castShadow = true;\n        playerMesh.receiveShadow = true;\n        \n        // Добавляем оружие (временное, упрощенное)\n        const weaponGeometry = new THREE.BoxGeometry(0.1, 0.1, 1);\n        const weaponMaterial = new THREE.MeshStandardMaterial({\n            color: 0x333333,\n            roughness: 0.5\n        });\n        \n        const weapon = new THREE.Mesh(weaponGeometry, weaponMaterial);\n        weapon.position.set(0.5, 0, 0.5); // Позиция относительно игрока\n        playerMesh.add(weapon);\n        \n        this.scene.add(playerMesh);\n        \n        return playerMesh;\n    }\n    \n    /**\n     * Обновление камеры для следования за игроком\n     * @param {Object} playerPosition - текущая позиция игрока\n     */\n    updateCamera(playerPosition) {\n        if (!this.camera) return;\n        \n        // Устанавливаем позицию камеры над игроком\n        this.camera.position.x = playerPosition.x;\n        this.camera.position.z = playerPosition.z + 30; // Немного сзади\n        \n        // Направляем камеру на игрока\n        this.camera.lookAt(playerPosition.x, playerPosition.y, playerPosition.z);\n    }\n    \n    /**\n     * Обновление трансформации объекта\n     * @param {THREE.Object3D} object - объект для обновления\n     * @param {Object} position - новая позиция\n     * @param {Object} rotation - новое вращение\n     */\n    updateObjectTransform(object, position, rotation) {\n        if (!object) return;\n        \n        // Обновляем позицию\n        if (position) {\n            object.position.x = position.x;\n            object.position.y = position.y;\n            object.position.z = position.z;\n        }\n        \n        // Обновляем вращение\n        if (rotation) {\n            object.rotation.y = rotation.y;\n        }\n    }\n    \n    /**\n     * Рендеринг сцены с учетом игрока\n     * @param {Object} player - объект игрока для системы видимости\n     */\n    render(player) {\n        if (!this.renderer || !this.scene || !this.camera) return;\n        \n        // Обновляем систему видимости, если она инициализирована и есть игрок\n        if (this.visionSystem && player) {\n            this.visionSystem.update();\n        }\n        \n        // Очищаем устаревшие временные объекты\n        this.cleanTemporaryObjects();\n        \n        // Рендерим сцену\n        this.renderer.render(this.scene, this.camera);\n    }\n    \n    /**\n     * Установка качества графики\n     * @param {string} quality - уровень качества ('low', 'medium', 'high')\n     */\n    setQuality(quality) {\n        if (!this.renderer) return;\n        \n        switch (quality) {\n            case 'low':\n                this.renderer.setPixelRatio(1);\n                this.renderer.shadowMap.enabled = false;\n                break;\n            case 'medium':\n                this.renderer.setPixelRatio(window.devicePixelRatio);\n                this.renderer.shadowMap.enabled = true;\n                this.renderer.shadowMap.type = THREE.PCFShadowMap;\n                break;\n            case 'high':\n                this.renderer.setPixelRatio(window.devicePixelRatio);\n                this.renderer.shadowMap.enabled = true;\n                this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n                break;\n        }\n    }\n    \n    /**\n     * Добавление предмета на сцену\n     * @param {Object} itemData - данные предмета\n     * @returns {THREE.Object3D} - объект предмета\n     */\n    addItem(itemData) {\n        // Создаем упрощенную модель предмета (в зависимости от типа)\n        let geometry, material;\n        \n        switch (itemData.type) {\n            case 'weapon':\n                geometry = new THREE.BoxGeometry(0.8, 0.3, 0.2);\n                material = new THREE.MeshStandardMaterial({ color: 0xFF5722 });\n                break;\n            case 'medkit':\n                geometry = new THREE.BoxGeometry(0.5, 0.3, 0.5);\n                material = new THREE.MeshStandardMaterial({ color: 0x4CAF50 });\n                break;\n            case 'ammo':\n                geometry = new THREE.BoxGeometry(0.3, 0.3, 0.3);\n                material = new THREE.MeshStandardMaterial({ color: 0xFFC107 });\n                break;\n            default:\n                geometry = new THREE.SphereGeometry(0.3, 8, 8);\n                material = new THREE.MeshStandardMaterial({ color: 0xCCCCCC });\n        }\n        \n        // Создаем меш\n        const itemMesh = new THREE.Mesh(geometry, material);\n        itemMesh.position.copy(itemData.position);\n        itemMesh.position.y = 0.2; // Чуть выше земли\n        itemMesh.castShadow = true;\n        itemMesh.receiveShadow = true;\n        \n        // Добавляем на сцену\n        this.scene.add(itemMesh);\n        \n        return itemMesh;\n    }\n    \n    /**\n     * Добавление NPC на сцену\n     * @param {Object} npcData - данные NPC\n     * @returns {THREE.Object3D} - объект NPC\n     */\n    addNPC(npcData) {\n        // Создаем модель NPC (цилиндр)\n        const geometry = new THREE.CylinderGeometry(0.5, 0.5, 1.8, 8);\n        const material = new THREE.MeshStandardMaterial({\n            color: npcData.type === 'enemy' ? 0xFF0000 : 0x00FF00,\n            roughness: 0.7\n        });\n        \n        const npcMesh = new THREE.Mesh(geometry, material);\n        npcMesh.position.copy(npcData.position);\n        npcMesh.castShadow = true;\n        npcMesh.receiveShadow = true;\n        \n        this.scene.add(npcMesh);\n        \n        return npcMesh;\n    }\n}","// client/src/core/input.js\n\n/**\n * Класс обработки пользовательского ввода\n */\nexport class InputHandler {\n    constructor() {\n        // Состояние клавиш\n        this.keys = {};\n        \n        // Состояние мыши\n        this.mouse = {\n            position: { x: 0, y: 0 },\n            isDown: false,\n            rightIsDown: false\n        };\n        \n        // Последнее положение мыши для расчета дельты\n        this.lastMousePosition = { x: 0, y: 0 };\n        \n        // Колбэки для клавиш\n        this.keyCallbacks = {};\n        \n        // Колбэки для мыши\n        this.clickCallback = null;\n        this.rightClickCallback = null;\n        this.mouseMoveCallback = null;\n        this.mouseDownCallback = null;\n        this.mouseUpCallback = null;\n        \n        // Флаг активных игровых управлений\n        this.gameControlsEnabled = true;\n        \n        // Настройки ввода\n        this.mouseSensitivity = 1.0;\n        \n        // Привязка методов к контексту\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.handleKeyUp = this.handleKeyUp.bind(this);\n        this.handleMouseMove = this.handleMouseMove.bind(this);\n        this.handleMouseDown = this.handleMouseDown.bind(this);\n        this.handleMouseUp = this.handleMouseUp.bind(this);\n        this.handleContextMenu = this.handleContextMenu.bind(this);\n        \n        // Инициализация обработчиков событий\n        this.init();\n    }\n    \n    /**\n     * Инициализация обработчиков событий\n     */\n    init() {\n        // Добавление обработчиков событий клавиатуры\n        window.addEventListener('keydown', this.handleKeyDown);\n        window.addEventListener('keyup', this.handleKeyUp);\n        \n        // Добавление обработчиков событий мыши\n        window.addEventListener('mousemove', this.handleMouseMove);\n        window.addEventListener('mousedown', this.handleMouseDown);\n        window.addEventListener('mouseup', this.handleMouseUp);\n        window.addEventListener('contextmenu', this.handleContextMenu);\n        \n        // Подавление стандартных действий браузера\n        document.body.style.userSelect = 'none';\n    }\n    \n    /**\n     * Обработчик нажатия клавиши\n     * @param {KeyboardEvent} event - событие нажатия клавиши\n     */\n    handleKeyDown(event) {\n        // Запоминаем состояние клавиши\n        this.keys[event.code] = true;\n        \n        // Вызываем колбэк, если он установлен\n        if (this.keyCallbacks[event.code] && this.gameControlsEnabled) {\n            this.keyCallbacks[event.code]();\n        }\n    }\n    \n    /**\n     * Обработчик отпускания клавиши\n     * @param {KeyboardEvent} event - событие отпускания клавиши\n     */\n    handleKeyUp(event) {\n        // Запоминаем состояние клавиши\n        this.keys[event.code] = false;\n    }\n    \n    /**\n     * Обработчик движения мыши\n     * @param {MouseEvent} event - событие движения мыши\n     */\n    handleMouseMove(event) {\n        // Обновляем позицию мыши\n        this.mouse.position.x = event.clientX;\n        this.mouse.position.y = event.clientY;\n        \n        // Вычисляем delta движения с учетом чувствительности\n        const deltaX = (this.mouse.position.x - this.lastMousePosition.x) * this.mouseSensitivity;\n        const deltaY = (this.mouse.position.y - this.lastMousePosition.y) * this.mouseSensitivity;\n        \n        // Обновляем последнюю позицию\n        this.lastMousePosition.x = this.mouse.position.x;\n        this.lastMousePosition.y = this.mouse.position.y;\n        \n        // Вызываем колбэк движения, если он установлен\n        if (this.mouseMoveCallback && this.gameControlsEnabled) {\n            this.mouseMoveCallback(this.mouse.position, { x: deltaX, y: deltaY });\n        }\n    }\n    \n    /**\n     * Обработчик нажатия кнопки мыши\n     * @param {MouseEvent} event - событие нажатия кнопки мыши\n     */\n    handleMouseDown(event) {\n        if (event.button === 0) {\n            // Левая кнопка мыши\n            this.mouse.isDown = true;\n            \n            // Вызываем общий колбэк нажатия\n            if (this.mouseDownCallback && this.gameControlsEnabled) {\n                this.mouseDownCallback(0, this.mouse.position);\n            }\n            \n            // Вызываем колбэк левого клика\n            if (this.clickCallback && this.gameControlsEnabled) {\n                this.clickCallback(this.mouse.position);\n            }\n        } else if (event.button === 2) {\n            // Правая кнопка мыши\n            this.mouse.rightIsDown = true;\n            \n            // Вызываем общий колбэк нажатия\n            if (this.mouseDownCallback && this.gameControlsEnabled) {\n                this.mouseDownCallback(2, this.mouse.position);\n            }\n            \n            // Вызываем колбэк правого клика\n            if (this.rightClickCallback && this.gameControlsEnabled) {\n                this.rightClickCallback(this.mouse.position);\n            }\n        }\n    }\n    \n    /**\n     * Обработчик отпускания кнопки мыши\n     * @param {MouseEvent} event - событие отпускания кнопки мыши\n     */\n    handleMouseUp(event) {\n        if (event.button === 0) {\n            this.mouse.isDown = false;\n            \n            // Вызываем колбэк отпускания\n            if (this.mouseUpCallback && this.gameControlsEnabled) {\n                this.mouseUpCallback(0);\n            }\n        } else if (event.button === 2) {\n            this.mouse.rightIsDown = false;\n            \n            // Вызываем колбэк отпускания\n            if (this.mouseUpCallback && this.gameControlsEnabled) {\n                this.mouseUpCallback(2);\n            }\n        }\n    }\n    \n    /**\n     * Обработчик контекстного меню (правый клик)\n     * @param {MouseEvent} event - событие контекстного меню\n     */\n    handleContextMenu(event) {\n        // Предотвращаем появление стандартного контекстного меню\n        event.preventDefault();\n    }\n    \n    /**\n     * Проверка, нажата ли указанная клавиша\n     * @param {string} code - код клавиши\n     * @returns {boolean} - состояние клавиши\n     */\n    isKeyPressed(code) {\n        return this.gameControlsEnabled && this.keys[code] === true;\n    }\n    \n    /**\n     * Проверка, нажата ли левая кнопка мыши\n     * @returns {boolean} - состояние левой кнопки мыши\n     */\n    isMouseDown() {\n        return this.gameControlsEnabled && this.mouse.isDown;\n    }\n    \n    /**\n     * Проверка, нажата ли правая кнопка мыши\n     * @returns {boolean} - состояние правой кнопки мыши\n     */\n    isRightMouseDown() {\n        return this.gameControlsEnabled && this.mouse.rightIsDown;\n    }\n    \n    /**\n     * Получение текущей позиции мыши\n     * @returns {Object} - координаты мыши {x, y}\n     */\n    getMousePosition() {\n        return { ...this.mouse.position };\n    }\n    \n    /**\n     * Установка чувствительности мыши\n     * @param {number} sensitivity - чувствительность мыши\n     */\n    setMouseSensitivity(sensitivity) {\n        this.mouseSensitivity = sensitivity;\n    }\n    \n    /**\n     * Добавление колбэка для клавиши\n     * @param {string} code - код клавиши\n     * @param {Function} callback - функция обратного вызова\n     */\n    addKeyCallback(code, callback) {\n        this.keyCallbacks[code] = callback;\n    }\n    \n    /**\n     * Удаление колбэка для клавиши\n     * @param {string} code - код клавиши\n     */\n    removeKeyCallback(code) {\n        delete this.keyCallbacks[code];\n    }\n    \n    /**\n     * Установка колбэка для клика мыши\n     * @param {Function} callback - функция обратного вызова\n     */\n    setClickCallback(callback) {\n        this.clickCallback = callback;\n    }\n    \n    /**\n     * Установка колбэка для правого клика мыши\n     * @param {Function} callback - функция обратного вызова\n     */\n    setRightClickCallback(callback) {\n        this.rightClickCallback = callback;\n    }\n    \n    /**\n     * Установка колбэка для движения мыши\n     * @param {Function} callback - функция обратного вызова\n     */\n    setMouseMoveCallback(callback) {\n        this.mouseMoveCallback = callback;\n    }\n    \n    /**\n     * Установка колбэка для нажатия кнопки мыши\n     * @param {Function} callback - функция обратного вызова (button, position)\n     */\n    setMouseDownCallback(callback) {\n        this.mouseDownCallback = callback;\n    }\n    \n    /**\n     * Установка колбэка для отпускания кнопки мыши\n     * @param {Function} callback - функция обратного вызова (button)\n     */\n    setMouseUpCallback(callback) {\n        this.mouseUpCallback = callback;\n    }\n    \n    /**\n     * Отключение управления игрой (для меню, инвентаря и т.д.)\n     */\n    disableGameControls() {\n        this.gameControlsEnabled = false;\n    }\n    \n    /**\n     * Включение управления игрой\n     */\n    enableGameControls() {\n        this.gameControlsEnabled = true;\n    }\n    \n    /**\n     * Получение направления движения на основе нажатых клавиш\n     * @returns {Object} - вектор движения {x, z}\n     */\n    getMovementDirection() {\n        if (!this.gameControlsEnabled) {\n            return { x: 0, z: 0 };\n        }\n        \n        let dirX = 0;\n        let dirZ = 0;\n        \n        // Вперед/назад (WASD)\n        if (this.isKeyPressed('KeyW') || this.isKeyPressed('ArrowUp')) {\n            dirZ = -1;\n        } else if (this.isKeyPressed('KeyS') || this.isKeyPressed('ArrowDown')) {\n            dirZ = 1;\n        }\n        \n        // Влево/вправо (WASD)\n        if (this.isKeyPressed('KeyA') || this.isKeyPressed('ArrowLeft')) {\n            dirX = -1;\n        } else if (this.isKeyPressed('KeyD') || this.isKeyPressed('ArrowRight')) {\n            dirX = 1;\n        }\n        \n        return { x: dirX, z: dirZ };\n    }\n    \n    /**\n     * Очистка всех колбэков\n     */\n    clearCallbacks() {\n        this.keyCallbacks = {};\n        this.clickCallback = null;\n        this.rightClickCallback = null;\n        this.mouseMoveCallback = null;\n        this.mouseDownCallback = null;\n        this.mouseUpCallback = null;\n    }\n    \n    /**\n     * Уничтожение обработчика ввода и удаление обработчиков событий\n     */\n    destroy() {\n        window.removeEventListener('keydown', this.handleKeyDown);\n        window.removeEventListener('keyup', this.handleKeyUp);\n        window.removeEventListener('mousemove', this.handleMouseMove);\n        window.removeEventListener('mousedown', this.handleMouseDown);\n        window.removeEventListener('mouseup', this.handleMouseUp);\n        window.removeEventListener('contextmenu', this.handleContextMenu);\n        \n        document.body.style.userSelect = '';\n    }\n}","/**\n * Класс для управления сетевым соединением игры\n * Для прототипа будет имитировать серверное соединение\n */\nexport class NetworkManager {\n    constructor() {\n        this.socket = null;\n        this.connected = false;\n        this.serverUrl = 'wss://your-server-url.com'; // Изменить на реальный URL при деплое\n        this.mockMode = true; // Для прототипа используем мок-режим\n        \n        // Колбэки для событий\n        this.eventHandlers = {\n            connect: [],\n            disconnect: [],\n            error: [],\n            message: [],\n            playerMove: [],\n            playerShoot: [],\n            playerDamage: [],\n            itemPickup: [],\n            npcSpawn: [],\n            npcMove: [],\n            gameState: []\n        };\n        \n        // Данные для мок-режима\n        this.mockData = {\n            players: {},\n            npcs: {},\n            items: {}\n        };\n        \n        // ID игрока (для локальной игры будет фиксированным)\n        this.playerId = 'local_player';\n    }\n    \n    /**\n     * Подключение к серверу\n     * @returns {Promise} - промис подключения\n     */\n    connect() {\n        return new Promise((resolve) => {\n            // В режиме прототипа имитируем подключение\n            console.log('Запущен режим прототипа (без сервера)');\n            this.connected = true;\n            \n            // Генерируем тестовые данные\n            this.generateMockData();\n            \n            // Имитируем время загрузки\n            setTimeout(() => {\n                // Вызываем обработчики подключения\n                this.eventHandlers.connect.forEach(handler => handler());\n                \n                // Имитация движения NPC\n                this.startMockNpcMovement();\n                \n                resolve();\n            }, 500);\n        });\n    }\n    \n    /**\n     * Генерация тестовых данных для мок-режима\n     */\n    generateMockData() {\n        // Генерируем предметы на карте\n        for (let i = 0; i < 15; i++) {\n            const id = `item_${i}`;\n            const x = (Math.random() - 0.5) * 80;\n            const z = (Math.random() - 0.5) * 80;\n            \n            // Случайный тип предмета\n            const types = ['weapon', 'medkit', 'ammo'];\n            const type = types[Math.floor(Math.random() * types.length)];\n            \n            this.mockData.items[id] = {\n                id,\n                type,\n                position: { x, y: 0, z },\n                properties: {}\n            };\n        }\n        \n        // Генерируем NPC\n        for (let i = 0; i < 5; i++) {\n            const id = `npc_${i}`;\n            const x = (Math.random() - 0.5) * 80;\n            const z = (Math.random() - 0.5) * 80;\n            \n            this.mockData.npcs[id] = {\n                id,\n                type: 'enemy',\n                position: { x, y: 0, z },\n                health: 100,\n                state: 'patrol'\n            };\n        }\n    }\n    \n    /**\n     * Запуск имитации движения NPC\n     */\n    startMockNpcMovement() {\n        setInterval(() => {\n            // Для каждого NPC\n            Object.keys(this.mockData.npcs).forEach(id => {\n                const npc = this.mockData.npcs[id];\n                \n                // Случайное перемещение\n                const moveX = (Math.random() - 0.5) * 2;\n                const moveZ = (Math.random() - 0.5) * 2;\n                \n                npc.position.x += moveX;\n                npc.position.z += moveZ;\n                \n                // Проверка границ карты\n                npc.position.x = Math.max(-45, Math.min(45, npc.position.x));\n                npc.position.z = Math.max(-45, Math.min(45, npc.position.z));\n                \n                // Вызываем обработчики перемещения NPC\n                this.eventHandlers.npcMove.forEach(handler => handler({\n                    id,\n                    position: npc.position\n                }));\n            });\n        }, 1000); // Обновляем каждую секунду\n    }\n    \n    /**\n     * Регистрация обработчика события\n     * @param {string} event - название события\n     * @param {Function} handler - функция-обработчик\n     */\n    on(event, handler) {\n        if (this.eventHandlers[event]) {\n            this.eventHandlers[event].push(handler);\n        }\n    }\n    \n    /**\n     * Отправка информации о перемещении игрока\n     * @param {Object} position - новая позиция\n     * @param {Object} rotation - новое вращение\n     */\n    sendPlayerMove(position, rotation) {\n        if (!this.connected) return;\n        \n        // В мок-режиме просто сохраняем данные\n        if (this.mockMode) {\n            this.mockData.players[this.playerId] = {\n                ...this.mockData.players[this.playerId],\n                position,\n                rotation\n            };\n        }\n    }\n    \n    /**\n     * Отправка информации о выстреле игрока\n     * @param {Object} position - позиция выстрела\n     * @param {Object} direction - направление выстрела\n     * @param {string} weapon - используемое оружие\n     */\n    sendPlayerShoot(position, direction, weapon) {\n        if (!this.connected) return;\n        \n        console.log('Выстрел игрока:', { position, direction, weapon });\n        \n        // В реальной игре здесь была бы отправка данных на сервер\n    }\n    \n    /**\n     * Отправка информации о подборе предмета\n     * @param {string} itemId - ID поднятого предмета\n     * @param {string} itemType - тип предмета\n     */\n    sendItemPickup(itemId, itemType) {\n        if (!this.connected) return;\n        \n        console.log('Подбор предмета:', { itemId, itemType });\n        \n        // В мок-режиме удаляем предмет из данных\n        if (this.mockMode) {\n            delete this.mockData.items[itemId];\n        }\n    }\n}","/**\n * Модуль для инициализации и интеграции Rapier.js\n */\n\n// Максимальное время ожидания инициализации RAPIER в миллисекундах\nconst MAX_WAIT_TIME = 10000;\n\n/**\n * Инициализация Rapier.js\n * @returns {Promise} - промис, который разрешается, когда Rapier.js инициализирован\n */\nexport async function initRapier() {\n    console.log('Начинаем инициализацию Rapier.js...');\n    \n    // Проверяем, доступен ли загрузчик RAPIER\n    if (typeof window !== 'undefined' && window.RAPIER_LOADER) {\n        console.log('Используем загрузчик RAPIER_LOADER...');\n        try {\n            const rapier = await window.RAPIER_LOADER.loadRapier();\n            console.log('RAPIER_LOADER успешно инициализировал Rapier');\n            return rapier;\n        } catch (error) {\n            console.error('Ошибка инициализации через RAPIER_LOADER:', error);\n            throw error;\n        }\n    }\n    \n    // Если загрузчик отсутствует, используем стандартный механизм\n    // Проверяем, загружен ли уже Rapier.js\n    if (typeof RAPIER !== 'undefined') {\n        // Проверяем, был ли RAPIER уже инициализирован\n        if (RAPIER._initialized) {\n            console.log('Rapier.js уже инициализирован');\n            return RAPIER;\n        }\n        \n        // Если RAPIER загружен, но не инициализирован, инициализируем его\n        if (typeof RAPIER.init === 'function') {\n            try {\n                console.log('Инициализируем Rapier.js через RAPIER.init()');\n                await RAPIER.init();\n                RAPIER._initialized = true;\n                console.log('Rapier.js успешно инициализирован');\n                return RAPIER;\n            } catch (error) {\n                console.error('Ошибка при инициализации Rapier.js:', error);\n                throw error;\n            }\n        } else {\n            // Если init не существует, возможно, это уже рабочий экземпляр RAPIER\n            console.log('Rapier.js уже загружен из глобального объекта');\n            RAPIER._initialized = true;\n            return RAPIER;\n        }\n    }\n    \n    try {\n        // Проверяем, доступен ли RAPIER в window\n        if (typeof window !== 'undefined' && window.RAPIER) {\n            // Если RAPIER существует в window, проверяем, нужно ли его инициализировать\n            if (typeof window.RAPIER.init === 'function' && !window.RAPIER._initialized) {\n                console.log('Инициализируем Rapier.js из window.RAPIER');\n                await window.RAPIER.init();\n                window.RAPIER._initialized = true;\n                console.log('window.RAPIER успешно инициализирован');\n            } else {\n                console.log('Используем готовый Rapier.js из window.RAPIER');\n                window.RAPIER._initialized = true;\n            }\n            return window.RAPIER;\n        }\n        \n        console.log('Rapier.js не найден в глобальном пространстве имен, ждем загрузки...');\n        \n        // Ожидаем, что RAPIER будет загружен и инициализирован с таймаутом\n        return await waitForRapierWithTimeout(MAX_WAIT_TIME);\n    } catch (error) {\n        console.error('Не удалось инициализировать Rapier.js:', error.message);\n        \n        // Возвращаем заглушку для предотвращения критических ошибок\n        return createRapierStub();\n    }\n}\n\n/**\n * Ожидание загрузки и инициализации RAPIER с таймаутом\n * @param {number} maxWaitTime - максимальное время ожидания в мс\n * @returns {Promise} - промис, который разрешается с объектом RAPIER или отклоняется по таймауту\n */\nasync function waitForRapierWithTimeout(maxWaitTime) {\n    return new Promise((resolve, reject) => {\n        let attempts = 0;\n        const maxAttempts = 20;\n        const checkInterval = 300; // ms\n        const startTime = Date.now();\n        \n        const checkRapier = () => {\n            attempts++;\n            const currentTime = Date.now();\n            \n            // Проверяем, не превышен ли таймаут\n            if (currentTime - startTime > maxWaitTime) {\n                reject(new Error(`Таймаут ожидания инициализации RAPIER (${maxWaitTime}ms)`));\n                return;\n            }\n            \n            // Проверяем доступность загрузчика\n            if (typeof window !== 'undefined' && window.RAPIER_LOADER) {\n                window.RAPIER_LOADER.loadRapier()\n                    .then(rapier => {\n                        console.log('RAPIER загружен через RAPIER_LOADER');\n                        resolve(rapier);\n                    })\n                    .catch(error => {\n                        console.error('Ошибка загрузки через RAPIER_LOADER:', error);\n                        \n                        // Продолжаем проверять стандартные методы\n                        setTimeout(checkRapier, checkInterval);\n                    });\n                return;\n            }\n            \n            // Проверяем глобальный RAPIER\n            if (typeof RAPIER !== 'undefined') {\n                if (typeof RAPIER.init === 'function' && !RAPIER._initialized) {\n                    console.log(`RAPIER найден, нужна инициализация (попытка ${attempts})`);\n                    RAPIER.init().then(() => {\n                        console.log('RAPIER успешно инициализирован');\n                        RAPIER._initialized = true;\n                        resolve(RAPIER);\n                    }).catch(error => {\n                        console.error('Ошибка инициализации RAPIER:', error);\n                        reject(error);\n                    });\n                    return;\n                } else {\n                    console.log(`RAPIER найден и готов (попытка ${attempts})`);\n                    RAPIER._initialized = true;\n                    resolve(RAPIER);\n                    return;\n                }\n            }\n            \n            // Проверяем window.RAPIER\n            if (typeof window !== 'undefined' && window.RAPIER) {\n                if (typeof window.RAPIER.init === 'function' && !window.RAPIER._initialized) {\n                    console.log(`window.RAPIER найден, нужна инициализация (попытка ${attempts})`);\n                    window.RAPIER.init().then(() => {\n                        console.log('window.RAPIER успешно инициализирован');\n                        window.RAPIER._initialized = true;\n                        resolve(window.RAPIER);\n                    }).catch(error => {\n                        console.error('Ошибка инициализации window.RAPIER:', error);\n                        reject(error);\n                    });\n                    return;\n                } else {\n                    console.log(`window.RAPIER найден и готов (попытка ${attempts})`);\n                    window.RAPIER._initialized = true;\n                    resolve(window.RAPIER);\n                    return;\n                }\n            }\n            \n            if (attempts >= maxAttempts) {\n                console.warn(`RAPIER не загрузился после ${maxAttempts} попыток, но продолжаем попытки в пределах таймаута...`);\n            }\n            \n            setTimeout(checkRapier, checkInterval);\n        };\n        \n        checkRapier();\n    });\n}\n\n/**\n * Создание заглушки для Rapier.js\n * @returns {Object} - заглушка с базовыми методами\n */\nfunction createRapierStub() {\n    console.warn('Создание заглушки Rapier.js. Физика НЕ будет работать корректно!');\n    \n    return {\n        _initialized: true,\n        World: class StubWorld {\n            constructor() {\n                console.warn('Используется заглушка World вместо настоящего Rapier.js');\n                this.bodies = [];\n                this.colliders = [];\n            }\n            \n            step() {\n                console.log('Симуляция шага физики в заглушке');\n            }\n            \n            createRigidBody() {\n                return {\n                    translation: () => ({ x: 0, y: 0, z: 0 }),\n                    setTranslation: () => {}\n                };\n            }\n            \n            createCollider() {\n                return {};\n            }\n            \n            castRay() {\n                return null;\n            }\n            \n            castRayAndGetNormal() {\n                return { hasHit: false, toi: 0 };\n            }\n        },\n        RigidBodyDesc: {\n            fixed: () => ({\n                setTranslation: () => ({})\n            }),\n            dynamic: () => ({\n                setTranslation: () => ({}),\n                setCanSleep: () => ({}),\n                setLinearDamping: () => ({})\n            })\n        },\n        ColliderDesc: {\n            cuboid: () => ({}),\n            capsule: () => ({})\n        },\n        Ray: class StubRay {\n            constructor(origin, dir) {\n                this.origin = origin;\n                this.dir = dir;\n            }\n        }\n    };\n}\n\n/**\n * Проверка доступности Rapier.js\n * @returns {boolean} - результат проверки\n */\nexport function isRapierAvailable() {\n    // Проверка через загрузчик, если он доступен\n    if (typeof window !== 'undefined' && window.RAPIER_LOADER) {\n        return window.RAPIER_LOADER.isRapierReady();\n    }\n    \n    // Стандартная проверка\n    return (typeof RAPIER !== 'undefined' && RAPIER._initialized) || \n           (typeof window !== 'undefined' && window.RAPIER && window.RAPIER._initialized);\n}\n\n/**\n * Получение экземпляра Rapier.js\n * @returns {Object|null} - объект Rapier.js или null, если он не загружен\n */\nexport function getRapier() {\n    // Получение через загрузчик, если он доступен\n    if (typeof window !== 'undefined' && window.RAPIER_LOADER) {\n        return window.RAPIER_LOADER.getRapier();\n    }\n    \n    // Стандартное получение\n    if (typeof RAPIER !== 'undefined' && RAPIER._initialized) {\n        return RAPIER;\n    }\n    \n    if (typeof window !== 'undefined' && window.RAPIER && window.RAPIER._initialized) {\n        return window.RAPIER;\n    }\n    \n    return null;\n}","/**\n * Менеджер физики, отвечающий за инициализацию и управление физикой игры\n * Использует Rapier.js для физических расчетов\n */\nimport { initRapier, isRapierAvailable, getRapier } from './rapier-integration.js';\n\nexport class PhysicsManager {\n    constructor() {\n        this.world = null; // Физический мир Rapier\n        this.bodies = new Map(); // Карта физических тел\n        this.colliders = new Map(); // Карта коллайдеров\n        this.isInitialized = false; // Флаг инициализации\n        this.RAPIER = null; // Ссылка на объект RAPIER\n        this.initPromise = null; // Промис инициализации\n    }\n\n    /**\n     * Инициализация физики\n     * @returns {Promise} - промис, который разрешается, когда физика инициализирована\n     */\n    async init() {\n        // Если инициализация уже началась, возвращаем существующий промис\n        if (this.initPromise) {\n            return this.initPromise;\n        }\n\n        // Создаем промис инициализации\n        this.initPromise = new Promise(async (resolve) => {\n            try {\n                console.log('PhysicsManager: начало инициализации...');\n                \n                // Инициализируем Rapier.js\n                this.RAPIER = await initRapier();\n                \n                // Проверяем, доступен ли RAPIER\n                if (!this.RAPIER && !isRapierAvailable()) {\n                    console.error('PhysicsManager: RAPIER не определен. Убедитесь, что библиотека загружена.');\n                    resolve(false);\n                    return;\n                }\n                \n                // Если RAPIER всё ещё не доступен, используем глобальный объект\n                if (!this.RAPIER) {\n                    this.RAPIER = getRapier();\n                    if (!this.RAPIER) {\n                        console.error('PhysicsManager: не удалось получить объект RAPIER.');\n                        resolve(false);\n                        return;\n                    }\n                }\n\n                // Инициализируем физический мир\n                console.log('PhysicsManager: создание физического мира...');\n                \n                // Создаем мир с гравитацией (0, -9.81, 0)\n                const gravity = { x: 0.0, y: -9.81, z: 0.0 };\n                \n                // Проверяем, правильный ли формат конструктора\n                if (typeof this.RAPIER.World === 'function') {\n                    this.world = new this.RAPIER.World(gravity);\n                } else if (typeof this.RAPIER.World?.new === 'function') {\n                    // Альтернативный синтаксис для некоторых версий\n                    this.world = this.RAPIER.World.new(gravity);\n                } else {\n                    console.error('PhysicsManager: не удалось создать физический мир. Неподдерживаемый API.');\n                    resolve(false);\n                    return;\n                }\n                \n                // Устанавливаем флаг инициализации\n                this.isInitialized = true;\n                \n                console.log('PhysicsManager: физический движок успешно инициализирован.');\n                resolve(true);\n            } catch (error) {\n                console.error('PhysicsManager: ошибка при инициализации физики:', error);\n                this.isInitialized = false;\n                resolve(false);\n            }\n        });\n\n        return this.initPromise;\n    }\n\n    /**\n     * Проверка, инициализирован ли физический движок\n     * @returns {boolean} - результат проверки\n     */\n    isReady() {\n        return this.isInitialized && this.world !== null;\n    }\n\n    /**\n     * Получение физического мира\n     * @returns {Object} - физический мир Rapier\n     */\n    getWorld() {\n        return this.world;\n    }\n\n    /**\n     * Обновление физики\n     * @param {number} deltaTime - время с последнего обновления в секундах\n     */\n    update(deltaTime) {\n        if (!this.isReady()) return;\n        \n        try {\n            // Шаг физической симуляции\n            if (typeof this.world.step === 'function') {\n                this.world.step();\n            } else if (typeof this.world.timestep === 'function') {\n                // Альтернативный метод для некоторых версий API\n                this.world.timestep(deltaTime || 1/60);\n            }\n            \n            // Обновление позиций объектов на основе физики\n            this.updateBodies();\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при обновлении физики:', error);\n        }\n    }\n\n    /**\n     * Обновление позиций объектов на основе физики\n     */\n    updateBodies() {\n        try {\n            // Для каждого физического тела обновляем позицию соответствующего 3D объекта\n            for (let [object, body] of this.bodies) {\n                if (object && object.position && body) {\n                    let position;\n                    \n                    // Получаем позицию в зависимости от API\n                    if (typeof body.translation === 'function') {\n                        position = body.translation();\n                    } else if (typeof body.getTranslation === 'function') {\n                        position = body.getTranslation();\n                    } else if (body.translation) {\n                        position = body.translation;\n                    } else {\n                        continue; // Пропускаем, если не можем получить позицию\n                    }\n                    \n                    // Обновляем позицию 3D объекта\n                    object.position.set(position.x, position.y, position.z);\n                    \n                    // Если у объекта есть метод обновления позиции, вызываем его\n                    if (typeof object.updatePhysics === 'function') {\n                        object.updatePhysics(body);\n                    }\n                }\n            }\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при обновлении позиций объектов:', error);\n        }\n    }\n\n    /**\n     * Создание статического коллайдера для препятствия\n     * @param {Object} options - параметры коллайдера\n     * @param {Object} options.position - позиция коллайдера {x, y, z}\n     * @param {Object} options.size - размеры коллайдера {x, y, z}\n     * @param {Object} options.object - связанный 3D объект (опционально)\n     * @returns {Object} - созданный коллайдер\n     */\n    createObstacle(options) {\n        if (!this.isReady()) return null;\n        \n        try {\n            const position = options.position || { x: 0, y: 0, z: 0 };\n            const size = options.size || { x: 1, y: 1, z: 1 };\n            \n            // Создаем жесткое тело\n            let rigidBodyDesc;\n            if (typeof this.RAPIER.RigidBodyDesc.fixed === 'function') {\n                rigidBodyDesc = this.RAPIER.RigidBodyDesc.fixed()\n                    .setTranslation(position.x, position.y, position.z);\n            } else {\n                // Альтернативный синтаксис\n                rigidBodyDesc = new this.RAPIER.RigidBodyDesc(this.RAPIER.RigidBodyType.Fixed);\n                rigidBodyDesc.translation = { x: position.x, y: position.y, z: position.z };\n            }\n            \n            const rigidBody = this.world.createRigidBody(rigidBodyDesc);\n            \n            // Создаем коллайдер в форме прямоугольника\n            let colliderDesc;\n            if (typeof this.RAPIER.ColliderDesc.cuboid === 'function') {\n                colliderDesc = this.RAPIER.ColliderDesc.cuboid(\n                    size.x / 2, size.y / 2, size.z / 2\n                );\n            } else {\n                // Альтернативный синтаксис\n                colliderDesc = new this.RAPIER.ColliderDesc(\n                    new this.RAPIER.Cuboid(size.x / 2, size.y / 2, size.z / 2)\n                );\n            }\n            \n            const collider = this.world.createCollider(colliderDesc, rigidBody);\n            \n            // Если передан 3D объект, сохраняем его связь с физическим телом\n            if (options.object) {\n                this.bodies.set(options.object, rigidBody);\n                this.colliders.set(options.object, collider);\n            }\n            \n            return collider;\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при создании препятствия:', error);\n            return null;\n        }\n    }\n\n    /**\n     * Создание динамического тела для игрока или NPC\n     * @param {Object} options - параметры тела\n     * @param {Object} options.position - начальная позиция {x, y, z}\n     * @param {number} options.radius - радиус коллайдера\n     * @param {number} options.height - высота коллайдера\n     * @param {Object} options.object - связанный 3D объект\n     * @returns {Object} - созданное физическое тело\n     */\n    createCharacter(options) {\n        if (!this.isReady()) return null;\n        \n        try {\n            const position = options.position || { x: 0, y: 0, z: 0 };\n            const radius = options.radius || 0.5;\n            const height = options.height || 1.8;\n            \n            // Создаем жесткое тело\n            let rigidBodyDesc;\n            if (typeof this.RAPIER.RigidBodyDesc.dynamic === 'function') {\n                rigidBodyDesc = this.RAPIER.RigidBodyDesc.dynamic()\n                    .setTranslation(position.x, position.y, position.z)\n                    .setCanSleep(false) // Тело всегда активно\n                    .setLinearDamping(0.2); // Добавляем затухание для более плавного движения\n            } else {\n                // Альтернативный синтаксис\n                rigidBodyDesc = new this.RAPIER.RigidBodyDesc(this.RAPIER.RigidBodyType.Dynamic);\n                rigidBodyDesc.translation = { x: position.x, y: position.y, z: position.z };\n                rigidBodyDesc.canSleep = false;\n                rigidBodyDesc.linearDamping = 0.2;\n            }\n            \n            const rigidBody = this.world.createRigidBody(rigidBodyDesc);\n            \n            // Создаем коллайдер в форме капсулы\n            let colliderDesc;\n            if (typeof this.RAPIER.ColliderDesc.capsule === 'function') {\n                colliderDesc = this.RAPIER.ColliderDesc.capsule(\n                    height / 2 - radius, // половина высоты без учета полусфер\n                    radius // радиус\n                );\n            } else {\n                // Альтернативный синтаксис\n                colliderDesc = new this.RAPIER.ColliderDesc(\n                    new this.RAPIER.Capsule(height / 2 - radius, radius)\n                );\n            }\n            \n            const collider = this.world.createCollider(colliderDesc, rigidBody);\n            \n            // Если передан 3D объект, сохраняем его связь с физическим телом\n            if (options.object) {\n                this.bodies.set(options.object, rigidBody);\n                this.colliders.set(options.object, collider);\n            }\n            \n            return rigidBody;\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при создании персонажа:', error);\n            return null;\n        }\n    }\n    \n    /**\n     * Выполнение рейкаста для проверки пересечения с объектами\n     * @param {Object} origin - начальная точка луча {x, y, z}\n     * @param {Object} direction - направление луча {x, y, z}\n     * @param {number} maxDistance - максимальная дистанция\n     * @returns {Object|null} - результат рейкаста или null, если нет пересечений\n     */\n    castRay(origin, direction, maxDistance = 100) {\n        if (!this.isReady()) return null;\n        \n        try {\n            // Создаем луч\n            let ray;\n            if (typeof this.RAPIER.Ray === 'function') {\n                ray = new this.RAPIER.Ray(origin, direction);\n            } else {\n                // Альтернативный синтаксис для объектных параметров\n                ray = { origin, direction };\n            }\n            \n            // Выполняем рейкаст\n            if (typeof this.world.castRay === 'function') {\n                return this.world.castRay(ray, maxDistance, true);\n            } else if (typeof this.world.castRayAndGetNormal === 'function') {\n                return this.world.castRayAndGetNormal(origin, direction, maxDistance, true);\n            } else {\n                console.warn('PhysicsManager: метод рейкаста не доступен');\n                return null;\n            }\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при выполнении рейкаста:', error);\n            return null;\n        }\n    }\n    \n    /**\n     * Создание неподвижного препятствия в виде плоскости (например, пол)\n     * @param {Object} options - параметры плоскости\n     * @param {Object} options.normal - нормаль к плоскости {x, y, z}\n     * @param {number} options.offset - смещение от начала координат\n     * @returns {Object} - созданный коллайдер\n     */\n    createGround(options = {}) {\n        if (!this.isReady()) return null;\n        \n        try {\n            const normal = options.normal || { x: 0, y: 1, z: 0 }; // По умолчанию вверх\n            const offset = options.offset || 0;\n            \n            // Создаем жесткое тело\n            let rigidBodyDesc;\n            if (typeof this.RAPIER.RigidBodyDesc.fixed === 'function') {\n                rigidBodyDesc = this.RAPIER.RigidBodyDesc.fixed();\n            } else {\n                // Альтернативный синтаксис\n                rigidBodyDesc = new this.RAPIER.RigidBodyDesc(this.RAPIER.RigidBodyType.Fixed);\n            }\n            \n            const rigidBody = this.world.createRigidBody(rigidBodyDesc);\n            \n            // Создаем коллайдер в форме плоскости\n            let colliderDesc;\n            if (typeof this.RAPIER.ColliderDesc.halfspace === 'function') {\n                colliderDesc = this.RAPIER.ColliderDesc.halfspace(normal, offset);\n            } else {\n                // Альтернативный синтаксис для Plane или HalfSpace\n                colliderDesc = new this.RAPIER.ColliderDesc(\n                    new this.RAPIER.HalfSpace(normal, offset)\n                );\n            }\n            \n            return this.world.createCollider(colliderDesc, rigidBody);\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при создании плоскости:', error);\n            return null;\n        }\n    }\n    \n    /**\n     * Удаление физического тела\n     * @param {Object} object - 3D объект, связанный с физическим телом\n     */\n    removeBody(object) {\n        try {\n            if (this.bodies.has(object)) {\n                const body = this.bodies.get(object);\n                this.world.removeRigidBody(body);\n                this.bodies.delete(object);\n            }\n            \n            if (this.colliders.has(object)) {\n                this.colliders.delete(object);\n            }\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при удалении тела:', error);\n        }\n    }\n    \n    /**\n     * Освобождение ресурсов\n     */\n    dispose() {\n        try {\n            // Очищаем все коллекции\n            this.bodies.clear();\n            this.colliders.clear();\n            \n            // Уничтожаем физический мир\n            if (this.world) {\n                // У некоторых версий Rapier.js есть метод free() для освобождения ресурсов\n                if (typeof this.world.free === 'function') {\n                    this.world.free();\n                }\n                this.world = null;\n            }\n            \n            this.isInitialized = false;\n            this.initPromise = null;\n            console.log('PhysicsManager: ресурсы освобождены');\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при освобождении ресурсов:', error);\n        }\n    }\n}","// client/src/core/GameCore.js\n\nimport { GameUI } from './gameUI.js';\nimport { GameWorld } from './gameWorld.js';\nimport { GameState } from './gameState.js';\nimport { GameEvents } from './gameEvents.js';\nimport { Renderer } from './renderer.js';\nimport { InputHandler } from './input.js';\nimport { NetworkManager } from './network.js';\nimport { PhysicsManager } from '../physics/physics-manager.js';\n\n// Функция для логирования\nexport function log(message) {\n    if (typeof window !== 'undefined' && window.debugLog) {\n        window.debugLog('Game', message);\n    } else {\n        console.log(`[Game] ${message}`);\n    }\n}\n\n/**\n * Основной класс игры, управляющий всеми компонентами\n */\nexport class GameCore {\n    constructor() {\n        log('Инициализация игры...');\n        \n        // Привязка контекста this к методам\n        this.update = this.update.bind(this);\n        this.fixedUpdate = this.fixedUpdate.bind(this);\n        \n        // Инициализация основных модулей\n        this.events = new GameEvents(this);\n        this.state = new GameState(this);\n        this.ui = new GameUI(this);\n        this.world = new GameWorld(this);\n        \n        // Игровой таймер и физика\n        this.gameTime = 0;\n        this.physicsUpdateRate = 1/60; // 60 обновлений физики в секунду\n        this.physicsAccumulator = 0;\n        this.lastFrameTime = 0;\n        \n        // Запуск процесса инициализации\n        this.init();\n    }\n    \n    /**\n     * Асинхронная инициализация всех компонентов игры\n     */\n    async init() {\n        try {\n            this.ui.updateLoadingStatus('Инициализация компонентов...');\n            \n            // Инициализация базовых компонентов\n            await this.initBaseComponents();\n            log('Основные компоненты инициализированы');\n            \n            // Загрузка ресурсов и настройка\n            await this.loadResources();\n            log('Ресурсы загружены');\n            \n            // Показываем главное меню\n            this.ui.showMainMenu();\n        } catch (error) {\n            log(`Ошибка инициализации: ${error.message}`);\n            this.ui.showErrorScreen(`Произошла ошибка при инициализации: ${error.message}`);\n        }\n    }\n    \n    /**\n     * Инициализация базовых компонентов игры\n     */\n    async initBaseComponents() {\n        try {\n            this.ui.updateLoadingStatus('Инициализация рендерера...');\n            // Инициализация рендерера\n            this.renderer = new Renderer(this.ui.gameCanvas);\n            \n            this.ui.updateLoadingStatus('Инициализация обработчика ввода...');\n            // Инициализация обработчика ввода\n            this.input = new InputHandler();\n            \n            this.ui.updateLoadingStatus('Инициализация сетевого менеджера...');\n            // Инициализация сетевого менеджера\n            this.network = new NetworkManager();\n            \n            this.ui.updateLoadingStatus('Инициализация физического движка...');\n            // Инициализация физического движка\n            this.physics = new PhysicsManager();\n            \n            this.ui.updateLoadingStatus('Инициализация UI компонентов...');\n            // Инициализация UI компонентов\n            await this.ui.initComponents();\n            \n            // Настройка обработчиков событий\n            this.events.setupEventListeners();\n            \n            return true;\n        } catch (error) {\n            log(`Ошибка инициализации компонентов: ${error.message}`);\n            throw error;\n        }\n    }\n    \n    /**\n     * Загрузка игровых ресурсов\n     */\n    async loadResources() {\n        this.ui.updateLoadingStatus('Инициализация физического движка...');\n        \n        try {\n            // Инициализируем физику\n            const physicsInitialized = await this.physics.init();\n            if (!physicsInitialized) {\n                throw new Error('Не удалось инициализировать физику');\n            }\n            \n            this.ui.updateLoadingStatus('Физический движок инициализирован');\n            \n            // Здесь будет загрузка дополнительных ресурсов\n            this.ui.updateLoadingStatus('Загрузка игровых ресурсов...');\n            \n            // Имитация загрузки (в реальной игре здесь будет загрузка assets)\n            await new Promise((resolve) => {\n                setTimeout(() => {\n                    this.state.isLoading = false;\n                    resolve();\n                }, 1000);\n            });\n            \n            this.ui.updateLoadingStatus('Все ресурсы загружены успешно');\n            return true;\n        } catch (error) {\n            log(`Ошибка загрузки ресурсов: ${error.message}`);\n            throw error;\n        }\n    }\n    \n    /**\n     * Начало игры\n     */\n    async startGame() {\n        try {\n            log('Запуск игры...');\n            \n            this.ui.hideMainMenu();\n            this.ui.showGameScreen();\n            \n            this.state.isRunning = true;\n            this.state.currentScene = 'game';\n            \n            // Инициализация сцены\n            if (this.renderer) {\n                this.renderer.setupScene();\n                log('Сцена настроена');\n            }\n            \n            // Создание игрового мира\n            await this.world.initialize();\n            \n            // Подключение к серверу (в прототипе локально)\n            this.network.connect().then(() => {\n                log('Подключено к серверу (прототип)');\n            }).catch(error => {\n                log(`Ошибка подключения: ${error.message}`);\n            });\n            \n            // Запуск игрового цикла\n            this.lastFrameTime = performance.now();\n            requestAnimationFrame(this.update);\n            \n            log('Игра запущена');\n        } catch (error) {\n            log(`Ошибка при запуске игры: ${error.message}`);\n            this.ui.showErrorScreen(`Ошибка при запуске игры: ${error.message}`);\n        }\n    }\n    \n    /**\n     * Обновление с фиксированным шагом для физики\n     * @param {number} deltaTime - фиксированный шаг времени \n     */\n    fixedUpdate(deltaTime) {\n        try {\n            // Обновляем физику на стороне сервера (в прототипе не используется)\n            if (this.network && this.network.isConnected) {\n                // Отправка состояния на сервер\n            }\n            \n            // Обновляем игровой мир с фиксированным шагом\n            this.world.fixedUpdate(deltaTime);\n        } catch (error) {\n            log(`Ошибка в fixedUpdate: ${error.message}`);\n        }\n    }\n    \n    /**\n     * Обновление состояния игры\n     * @param {number} timestamp - текущий таймстамп\n     */\n    update(timestamp) {\n        if (!this.state.isRunning) return;\n        \n        try {\n            // Расчет дельты времени для стабильной анимации\n            const currentTime = performance.now();\n            const deltaTime = (currentTime - this.lastFrameTime) / 1000;\n            this.lastFrameTime = currentTime;\n            \n            // Ограничиваем deltaTime для предотвращения больших скачков\n            const clampedDeltaTime = Math.min(deltaTime, 0.1);\n            \n            // Увеличиваем игровое время\n            this.gameTime += clampedDeltaTime;\n            \n            // Обновление физики с фиксированным шагом\n            this.physicsAccumulator += clampedDeltaTime;\n            while (this.physicsAccumulator >= this.physicsUpdateRate) {\n                // Обновляем физический мир\n                if (this.physics && this.physics.isReady()) {\n                    this.physics.update(this.physicsUpdateRate);\n                }\n                \n                this.fixedUpdate(this.physicsUpdateRate);\n                this.physicsAccumulator -= this.physicsUpdateRate;\n            }\n            \n            // Обновление игрового мира\n            this.world.update(clampedDeltaTime);\n            \n            // Рендеринг сцены\n            if (this.renderer) {\n                this.renderer.render(this.world.player);\n            }\n            \n            // Обновление UI\n            this.ui.update();\n            \n            // Продолжение игрового цикла\n            requestAnimationFrame(this.update);\n        } catch (error) {\n            log(`Ошибка в игровом цикле: ${error.message}`);\n            \n            // Пытаемся продолжить игровой цикл, несмотря на ошибку\n            requestAnimationFrame(this.update);\n        }\n    }\n}\n\n// Инициализация игры при загрузке страницы\ndocument.addEventListener('DOMContentLoaded', () => {\n    try {\n        log('DOMContentLoaded: инициализация игры');\n        // Создаем игровой объект\n        window.game = new GameCore();\n    } catch (error) {\n        console.error('Критическая ошибка при инициализации игры:', error);\n        \n        // Показываем сообщение об ошибке\n        const errorMessage = document.createElement('div');\n        errorMessage.style.cssText = `\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            padding: 20px;\n            background-color: #f44336;\n            color: white;\n            text-align: center;\n            font-size: 18px;\n            z-index: 9999;\n        `;\n        errorMessage.textContent = `Критическая ошибка: ${error.message}`;\n        document.body.appendChild(errorMessage);\n    }\n});"],"names":["HUD","element","_classCallCheck","this","healthBar","querySelector","ammoCounter","weaponInfo","statusMessages","health","ammo","weapon","messages","messageTimer","initialize","key","value","updateHealthBar","updateAmmoCounter","updateWeaponInfo","data","undefined","style","width","concat","backgroundColor","textContent","message","_this","duration","arguments","length","push","text","timestamp","Date","now","updateStatusMessages","setInterval","checkMessagesTimeout","_this2","innerHTML","forEach","msg","messageElement","document","createElement","className","appendChild","hasRemovedMessages","filter","isExpired","clearInterval","classList","remove","add","InventoryUI","gridElement","equippedElement","inventory","items","maxSlots","equipped","armor","helmet","createInventorySlots","createEquippedSlots","setupDragAndDrop","i","slot","dataset","slotIndex","id","label","slotInfo","slotContainer","slotType","querySelectorAll","addEventListener","console","log","updateInventoryDisplay","updateEquippedDisplay","slots","item","index","itemElement","itemId","type","weaponSlot","weaponElement","armorSlot","armorElement","helmetSlot","helmetElement","head","addInventoryStyles","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_defineProperties","_toPropertyKey","toPrimitive","String","_toPrimitive","GameUI","game","loadingScreen","getElementById","mainMenu","gameCanvas","hudElement","inventoryScreen","loadingStatus","components","hud","_callee","_context","_initComponents","apply","_next","_throw","status","errorScreen","errorMessage","body","reloadButton","window","location","reload","state","currentScene","world","player","update","contains","showInventory","hideInventory","show","input","disableGameControls","hide","enableGameControls","Player","options","isLocalPlayer","position","x","z","rotation","direction","maxHealth","speed","weaponType","fireRate","recoil","isMoving","isRunning","isAiming","isShooting","canShoot","lastShootTime","currentState","viewAngle","normalViewAngle","aimingViewAngle","runningViewAngle","viewDistance","normalSpeed","runningSpeed","aimingSpeed","acceleration","velocity","renderer","mesh","setupControls","createModel","addPlayer","setMouseDownCallback","button","startAiming","setMouseUpCallback","stopAiming","setRightClickCallback","tryShoot","setMouseMoveCallback","delta","handleMouseMove","currentTime","setTimeout","applyRecoil","createShot","network","sendPlayerShoot","recoilX","Math","random","recoilY","abs","mousePos","getMousePosition","newMousePos","canvasRect","canvas","getBoundingClientRect","canvasCenter","left","top","height","mouseVec","sqrt","angle","atan2","sin","cos","deltaTime","handleMovement","updateCamera","handleRunning","updateAnimationState","updateModel","wasRunning","isKeyPressed","newState","moveDir","getMovementDirection","normalizedDir","targetVel","newX","newZ","canMoveX","checkCollision","canMoveZ","sendPlayerMove","newPosition","scene","rayStart","_objectSpread","rayEnd","createTemporaryBeam","updateObjectTransform","_asyncToGenerator","VisionSystem","fov","rayCount","maxDistance","memoryEnabled","blurEdges","normalFov","aimingFov","runningFov","visibilityMask","memoryMask","visibilityShape","currentVisionMesh","cellSize","gridSize","gridResolution","ceil","memoryGrid","Array","isInitialized","isRapierReady","isRapierChecked","initializationPromise","lastErrorTime","updateInterval","lastUpdateTime","errorCooldown","fill","visibilityGroup","THREE","Group","init","error","_init","_callee2","_context2","_ref","initVisibilityLayers","checkRapierAvailability","t0","_x","_checkRapierAvailability","_callee3","_context3","checkRapier","getRapierInstance","castRay","castRayAndGetNormal","RAPIER","createFogOfWarLayer","createMemoryLayer","createVisionConeLayer","fogGeometry","PlaneGeometry","fogMaterial","MeshBasicMaterial","color","transparent","opacity","side","DoubleSide","depthTest","depthWrite","fogOfWarMesh","Mesh","PI","renderOrder","gridGeometry","memoryMaterial","ShaderMaterial","uniforms","colorInfluence","vertexShader","fragmentShader","memoryMesh","visibilityAttribute","Float32Array","attributes","count","setAttribute","BufferAttribute","initialShape","Shape","moveTo","lineTo","maskMaterial","worldSize","maskGeometry","playerPos","playerDirection","getViewDirection","currentFov","fovRadians","directionAngle","updateVisionMask","updateMemoryMap","_this3","warn","halfFov","origin","angles","points","Vector2","endPoint","dir","ray","Ray","hit","result","hasHit","impactDistance","toi","markVisitedArea","clone","updateVisibilityShape","shape","outerShape","holes","geometry","dispose","ShapeGeometry","set","halfGridSize","gridX","floor","gridZ","dx","dz","nx","nz","max","material","distance","j","GameWorld","entities","visionSystem","_initialize","createTestWalls","initVisionSystem","entity","fixedUpdate","_initVisionSystem","physics","getWorld","isReady","wallMaterial","MeshStandardMaterial","roughness","metalness","createWall","depth","BoxGeometry","createObstacle","size","object","indexOf","splice","GameState","isLoading","isPaused","fogOfWarEnabled","visibilitySystemEnabled","pauseGame","resumeGame","lastFrameTime","performance","requestAnimationFrame","clear","ui","GameEvents","handleGlobalError","bind","handlePromiseError","startGameButton","startGame","settingsButton","closeInventoryButton","addKeyCallback","isInScene","toggleInventory","togglePause","vkBridge","send","render","event","filename","lineno","showErrorScreen","preventDefault","_event$reason","reason","Renderer","camera","lights","models","textures","temporaryObjects","Scene","background","Color","aspect","innerWidth","innerHeight","PerspectiveCamera","lookAt","WebGLRenderer","antialias","setSize","setPixelRatio","devicePixelRatio","shadowMap","enabled","setupLights","createGround","updateProjectionMatrix","directionalLight","DirectionalLight","castShadow","shadow","mapSize","near","far","right","bottom","ambientLight","AmbientLight","groundGeometry","groundMaterial","ground","receiveShadow","start","end","LineBasicMaterial","BufferGeometry","Vector3","setFromPoints","line","Line","tempObject","endTime","removeTemporaryObject","tempObj","playerData","CylinderGeometry","playerMesh","copy","weaponGeometry","weaponMaterial","playerPosition","cleanTemporaryObjects","quality","PCFShadowMap","PCFSoftShadowMap","itemData","SphereGeometry","itemMesh","npcData","npcMesh","InputHandler","mouse","isDown","rightIsDown","lastMousePosition","keyCallbacks","clickCallback","rightClickCallback","mouseMoveCallback","mouseDownCallback","mouseUpCallback","gameControlsEnabled","mouseSensitivity","handleKeyDown","handleKeyUp","handleMouseDown","handleMouseUp","handleContextMenu","userSelect","code","clientX","clientY","deltaX","deltaY","sensitivity","callback","dirX","dirZ","removeEventListener","NetworkManager","socket","connected","serverUrl","mockMode","eventHandlers","connect","disconnect","playerMove","playerShoot","playerDamage","itemPickup","npcSpawn","npcMove","gameState","mockData","players","npcs","playerId","generateMockData","handler","startMockNpcMovement","types","properties","npc","moveX","moveZ","min","itemType","_createClass","initRapier","_initRapier","rapier","RAPIER_LOADER","loadRapier","_initialized","t1","waitForRapierWithTimeout","t2","World","StubWorld","bodies","colliders","translation","setTranslation","RigidBodyDesc","fixed","dynamic","setCanSleep","setLinearDamping","ColliderDesc","cuboid","capsule","StubRay","_waitForRapierWithTimeout","maxWaitTime","reject","attempts","startTime","PhysicsManager","Map","initPromise","_this$RAPIER$World","gravity","getRapier","step","timestep","updateBodies","_step","_iterator","_createForOfIteratorHelper","_step$value","_slicedToArray","getTranslation","updatePhysics","err","rigidBodyDesc","RigidBodyType","Fixed","colliderDesc","rigidBody","createRigidBody","Cuboid","collider","createCollider","radius","Dynamic","canSleep","linearDamping","Capsule","normal","offset","halfspace","HalfSpace","has","get","removeRigidBody","free","debugLog","GameCore","events","gameTime","physicsUpdateRate","physicsAccumulator","updateLoadingStatus","initBaseComponents","loadResources","showMainMenu","_initBaseComponents","initComponents","setupEventListeners","_loadResources","_startGame","_callee4","_context4","hideMainMenu","showGameScreen","setupScene","isConnected","clampedDeltaTime","cssText"],"sourceRoot":""}