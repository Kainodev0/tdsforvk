{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://tds-escape/webpack/runtime/async module","webpack://tds-escape/./node_modules/@dimforge/rapier3d/rapier_wasm3d_bg.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/geometry/broad_phase.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/dynamics/integration_parameters.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/control/ray_cast_vehicle_controller.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/geometry/contact.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/geometry/narrow_phase.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/pipeline/query_pipeline.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/rapier_wasm3d.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/dynamics/rigid_body.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/dynamics/impulse_joint_set.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/geometry/toi.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/dynamics/rigid_body_set.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/geometry/collider_set.js","webpack://tds-escape/./client/src/core/game.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/dynamics/multibody_joint_set.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/dynamics/coefficient_combine_rule.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/control/pid_controller.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/pipeline/physics_hooks.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/pipeline/event_queue.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/geometry/ray.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/dynamics/impulse_joint.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/rapier.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/pipeline/serialization_pipeline.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/dynamics/island_manager.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/dynamics/ccd_solver.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/pipeline/physics_pipeline.js","webpack://tds-escape/./client/src/ui/hud.js","webpack://tds-escape/./client/src/ui/inventory.js","webpack://tds-escape/./client/src/core/gameUI.js","webpack://tds-escape/./client/src/entities/player.js","webpack://tds-escape/./client/src/physics/vision-system.js","webpack://tds-escape/./client/src/core/gameWorld.js","webpack://tds-escape/./client/src/core/gameState.js","webpack://tds-escape/./client/src/core/gameEvents.js","webpack://tds-escape/./client/src/core/renderer.js","webpack://tds-escape/./client/src/core/input.js","webpack://tds-escape/./client/src/core/network.js","webpack://tds-escape/./client/src/physics/rapier-integration.js","webpack://tds-escape/./client/src/physics/physics-manager.js","webpack://tds-escape/./client/src/core/gameCore.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/math.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/dynamics/multibody_joint.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/geometry/feature.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/coarena.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/exports.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/geometry/point.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/control/character_controller.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/geometry/shape.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/geometry/collider.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/pipeline/world.js","webpack://tds-escape/./node_modules/@dimforge/rapier3d/pipeline/debug_render_pipeline.js","webpack://tds-escape/webpack/bootstrap","webpack://tds-escape/webpack/runtime/define property getters","webpack://tds-escape/webpack/runtime/harmony module decorator","webpack://tds-escape/webpack/runtime/hasOwnProperty shorthand","webpack://tds-escape/webpack/runtime/make namespace object","webpack://tds-escape/webpack/runtime/wasm loading","webpack://tds-escape/webpack/runtime/publicPath","webpack://tds-escape/webpack/startup"],"sourcesContent":["var webpackQueues = typeof Symbol === \"function\" ? Symbol(\"webpack queues\") : \"__webpack_queues__\";\nvar webpackExports = typeof Symbol === \"function\" ? Symbol(\"webpack exports\") : \"__webpack_exports__\";\nvar webpackError = typeof Symbol === \"function\" ? Symbol(\"webpack error\") : \"__webpack_error__\";\nvar resolveQueue = (queue) => {\n\tif(queue && queue.d < 1) {\n\t\tqueue.d = 1;\n\t\tqueue.forEach((fn) => (fn.r--));\n\t\tqueue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));\n\t}\n}\nvar wrapDeps = (deps) => (deps.map((dep) => {\n\tif(dep !== null && typeof dep === \"object\") {\n\t\tif(dep[webpackQueues]) return dep;\n\t\tif(dep.then) {\n\t\t\tvar queue = [];\n\t\t\tqueue.d = 0;\n\t\t\tdep.then((r) => {\n\t\t\t\tobj[webpackExports] = r;\n\t\t\t\tresolveQueue(queue);\n\t\t\t}, (e) => {\n\t\t\t\tobj[webpackError] = e;\n\t\t\t\tresolveQueue(queue);\n\t\t\t});\n\t\t\tvar obj = {};\n\t\t\tobj[webpackQueues] = (fn) => (fn(queue));\n\t\t\treturn obj;\n\t\t}\n\t}\n\tvar ret = {};\n\tret[webpackQueues] = x => {};\n\tret[webpackExports] = dep;\n\treturn ret;\n}));\n__webpack_require__.a = (module, body, hasAwait) => {\n\tvar queue;\n\thasAwait && ((queue = []).d = -1);\n\tvar depQueues = new Set();\n\tvar exports = module.exports;\n\tvar currentDeps;\n\tvar outerResolve;\n\tvar reject;\n\tvar promise = new Promise((resolve, rej) => {\n\t\treject = rej;\n\t\touterResolve = resolve;\n\t});\n\tpromise[webpackExports] = exports;\n\tpromise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise[\"catch\"](x => {}));\n\tmodule.exports = promise;\n\tbody((deps) => {\n\t\tcurrentDeps = wrapDeps(deps);\n\t\tvar fn;\n\t\tvar getResult = () => (currentDeps.map((d) => {\n\t\t\tif(d[webpackError]) throw d[webpackError];\n\t\t\treturn d[webpackExports];\n\t\t}))\n\t\tvar promise = new Promise((resolve) => {\n\t\t\tfn = () => (resolve(getResult));\n\t\t\tfn.r = 0;\n\t\t\tvar fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));\n\t\t\tcurrentDeps.map((dep) => (dep[webpackQueues](fnQueue)));\n\t\t});\n\t\treturn fn.r ? promise : getResult();\n\t}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));\n\tqueue && queue.d < 0 && (queue.d = 0);\n};","let wasm;\nexport function __wbg_set_wasm(val) {\n    wasm = val;\n}\n\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_export_0(addHeapObject(e));\n    }\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedDataViewMemory0 = null;\n\nfunction getDataViewMemory0() {\n    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm.memory.buffer)) {\n        cachedDataViewMemory0 = new DataView(wasm.memory.buffer);\n    }\n    return cachedDataViewMemory0;\n}\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n/**\n * @returns {string}\n */\nexport function version() {\n    let deferred1_0;\n    let deferred1_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.version(retptr);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        deferred1_0 = r0;\n        deferred1_1 = r1;\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_export_1(deferred1_0, deferred1_1, 1);\n    }\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n}\n\nlet stack_pointer = 128;\n\nfunction addBorrowedObject(obj) {\n    if (stack_pointer == 1) throw new Error('out of js stack');\n    heap[--stack_pointer] = obj;\n    return stack_pointer;\n}\n\nlet cachedFloat32ArrayMemory0 = null;\n\nfunction getFloat32ArrayMemory0() {\n    if (cachedFloat32ArrayMemory0 === null || cachedFloat32ArrayMemory0.byteLength === 0) {\n        cachedFloat32ArrayMemory0 = new Float32Array(wasm.memory.buffer);\n    }\n    return cachedFloat32ArrayMemory0;\n}\n\nfunction getArrayF32FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getFloat32ArrayMemory0().subarray(ptr / 4, ptr / 4 + len);\n}\n\nlet cachedUint32ArrayMemory0 = null;\n\nfunction getUint32ArrayMemory0() {\n    if (cachedUint32ArrayMemory0 === null || cachedUint32ArrayMemory0.byteLength === 0) {\n        cachedUint32ArrayMemory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachedUint32ArrayMemory0;\n}\n\nfunction getArrayU32FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint32ArrayMemory0().subarray(ptr / 4, ptr / 4 + len);\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArrayF32ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 4, 4) >>> 0;\n    getFloat32ArrayMemory0().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction passArray32ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 4, 4) >>> 0;\n    getUint32ArrayMemory0().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n * @enum {0 | 1 | 2 | 3}\n */\nexport const RawFeatureType = Object.freeze({\n    Vertex: 0, \"0\": \"Vertex\",\n    Edge: 1, \"1\": \"Edge\",\n    Face: 2, \"2\": \"Face\",\n    Unknown: 3, \"3\": \"Unknown\",\n});\n/**\n * @enum {0 | 1 | 2 | 3 | 4 | 5}\n */\nexport const RawJointAxis = Object.freeze({\n    LinX: 0, \"0\": \"LinX\",\n    LinY: 1, \"1\": \"LinY\",\n    LinZ: 2, \"2\": \"LinZ\",\n    AngX: 3, \"3\": \"AngX\",\n    AngY: 4, \"4\": \"AngY\",\n    AngZ: 5, \"5\": \"AngZ\",\n});\n/**\n * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6}\n */\nexport const RawJointType = Object.freeze({\n    Revolute: 0, \"0\": \"Revolute\",\n    Fixed: 1, \"1\": \"Fixed\",\n    Prismatic: 2, \"2\": \"Prismatic\",\n    Rope: 3, \"3\": \"Rope\",\n    Spring: 4, \"4\": \"Spring\",\n    Spherical: 5, \"5\": \"Spherical\",\n    Generic: 6, \"6\": \"Generic\",\n});\n/**\n * @enum {0 | 1}\n */\nexport const RawMotorModel = Object.freeze({\n    AccelerationBased: 0, \"0\": \"AccelerationBased\",\n    ForceBased: 1, \"1\": \"ForceBased\",\n});\n/**\n * @enum {0 | 1 | 2 | 3}\n */\nexport const RawRigidBodyType = Object.freeze({\n    Dynamic: 0, \"0\": \"Dynamic\",\n    Fixed: 1, \"1\": \"Fixed\",\n    KinematicPositionBased: 2, \"2\": \"KinematicPositionBased\",\n    KinematicVelocityBased: 3, \"3\": \"KinematicVelocityBased\",\n});\n/**\n * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17}\n */\nexport const RawShapeType = Object.freeze({\n    Ball: 0, \"0\": \"Ball\",\n    Cuboid: 1, \"1\": \"Cuboid\",\n    Capsule: 2, \"2\": \"Capsule\",\n    Segment: 3, \"3\": \"Segment\",\n    Polyline: 4, \"4\": \"Polyline\",\n    Triangle: 5, \"5\": \"Triangle\",\n    TriMesh: 6, \"6\": \"TriMesh\",\n    HeightField: 7, \"7\": \"HeightField\",\n    Compound: 8, \"8\": \"Compound\",\n    ConvexPolyhedron: 9, \"9\": \"ConvexPolyhedron\",\n    Cylinder: 10, \"10\": \"Cylinder\",\n    Cone: 11, \"11\": \"Cone\",\n    RoundCuboid: 12, \"12\": \"RoundCuboid\",\n    RoundTriangle: 13, \"13\": \"RoundTriangle\",\n    RoundCylinder: 14, \"14\": \"RoundCylinder\",\n    RoundCone: 15, \"15\": \"RoundCone\",\n    RoundConvexPolyhedron: 16, \"16\": \"RoundConvexPolyhedron\",\n    HalfSpace: 17, \"17\": \"HalfSpace\",\n});\n\nconst RawBroadPhaseFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawbroadphase_free(ptr >>> 0, 1));\n\nexport class RawBroadPhase {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawBroadPhase.prototype);\n        obj.__wbg_ptr = ptr;\n        RawBroadPhaseFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawBroadPhaseFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawbroadphase_free(ptr, 0);\n    }\n    constructor() {\n        const ret = wasm.rawbroadphase_new();\n        this.__wbg_ptr = ret >>> 0;\n        RawBroadPhaseFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst RawCCDSolverFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawccdsolver_free(ptr >>> 0, 1));\n\nexport class RawCCDSolver {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawCCDSolverFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawccdsolver_free(ptr, 0);\n    }\n    constructor() {\n        const ret = wasm.rawccdsolver_new();\n        this.__wbg_ptr = ret >>> 0;\n        RawCCDSolverFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst RawCharacterCollisionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawcharactercollision_free(ptr >>> 0, 1));\n\nexport class RawCharacterCollision {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawCharacterCollisionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawcharactercollision_free(ptr, 0);\n    }\n    constructor() {\n        const ret = wasm.rawcharactercollision_new();\n        this.__wbg_ptr = ret >>> 0;\n        RawCharacterCollisionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @returns {number}\n     */\n    handle() {\n        const ret = wasm.rawcharactercollision_handle(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {RawVector}\n     */\n    translationDeltaApplied() {\n        const ret = wasm.rawcharactercollision_translationDeltaApplied(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    translationDeltaRemaining() {\n        const ret = wasm.rawcharactercollision_translationDeltaRemaining(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    toi() {\n        const ret = wasm.rawcharactercollision_toi(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {RawVector}\n     */\n    worldWitness1() {\n        const ret = wasm.rawcharactercollision_worldWitness1(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    worldWitness2() {\n        const ret = wasm.rawcharactercollision_worldWitness2(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    worldNormal1() {\n        const ret = wasm.rawcharactercollision_worldNormal1(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    worldNormal2() {\n        const ret = wasm.rawcharactercollision_worldNormal2(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n}\n\nconst RawColliderSetFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawcolliderset_free(ptr >>> 0, 1));\n\nexport class RawColliderSet {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawColliderSet.prototype);\n        obj.__wbg_ptr = ptr;\n        RawColliderSetFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawColliderSetFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawcolliderset_free(ptr, 0);\n    }\n    /**\n     * The world-space translation of this collider.\n     * @param {number} handle\n     * @returns {RawVector}\n     */\n    coTranslation(handle) {\n        const ret = wasm.rawcolliderset_coTranslation(this.__wbg_ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * The world-space orientation of this collider.\n     * @param {number} handle\n     * @returns {RawRotation}\n     */\n    coRotation(handle) {\n        const ret = wasm.rawcolliderset_coRotation(this.__wbg_ptr, handle);\n        return RawRotation.__wrap(ret);\n    }\n    /**\n     * Sets the translation of this collider.\n     *\n     * # Parameters\n     * - `x`: the world-space position of the collider along the `x` axis.\n     * - `y`: the world-space position of the collider along the `y` axis.\n     * - `z`: the world-space position of the collider along the `z` axis.\n     * - `wakeUp`: forces the collider to wake-up so it is properly affected by forces if it\n     * wasn't moving before modifying its position.\n     * @param {number} handle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     */\n    coSetTranslation(handle, x, y, z) {\n        wasm.rawcolliderset_coSetTranslation(this.__wbg_ptr, handle, x, y, z);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     */\n    coSetTranslationWrtParent(handle, x, y, z) {\n        wasm.rawcolliderset_coSetTranslationWrtParent(this.__wbg_ptr, handle, x, y, z);\n    }\n    /**\n     * Sets the rotation quaternion of this collider.\n     *\n     * This does nothing if a zero quaternion is provided.\n     *\n     * # Parameters\n     * - `x`: the first vector component of the quaternion.\n     * - `y`: the second vector component of the quaternion.\n     * - `z`: the third vector component of the quaternion.\n     * - `w`: the scalar component of the quaternion.\n     * - `wakeUp`: forces the collider to wake-up so it is properly affected by forces if it\n     * wasn't moving before modifying its position.\n     * @param {number} handle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @param {number} w\n     */\n    coSetRotation(handle, x, y, z, w) {\n        wasm.rawcolliderset_coSetRotation(this.__wbg_ptr, handle, x, y, z, w);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @param {number} w\n     */\n    coSetRotationWrtParent(handle, x, y, z, w) {\n        wasm.rawcolliderset_coSetRotationWrtParent(this.__wbg_ptr, handle, x, y, z, w);\n    }\n    /**\n     * Is this collider a sensor?\n     * @param {number} handle\n     * @returns {boolean}\n     */\n    coIsSensor(handle) {\n        const ret = wasm.rawcolliderset_coIsSensor(this.__wbg_ptr, handle);\n        return ret !== 0;\n    }\n    /**\n     * The type of the shape of this collider.\n     * @param {number} handle\n     * @returns {RawShapeType}\n     */\n    coShapeType(handle) {\n        const ret = wasm.rawcolliderset_coShapeType(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * @param {number} handle\n     * @returns {RawVector | undefined}\n     */\n    coHalfspaceNormal(handle) {\n        const ret = wasm.rawcolliderset_coHalfspaceNormal(this.__wbg_ptr, handle);\n        return ret === 0 ? undefined : RawVector.__wrap(ret);\n    }\n    /**\n     * The half-extents of this collider if it is has a cuboid shape.\n     * @param {number} handle\n     * @returns {RawVector | undefined}\n     */\n    coHalfExtents(handle) {\n        const ret = wasm.rawcolliderset_coHalfExtents(this.__wbg_ptr, handle);\n        return ret === 0 ? undefined : RawVector.__wrap(ret);\n    }\n    /**\n     * Set the half-extents of this collider if it has a cuboid shape.\n     * @param {number} handle\n     * @param {RawVector} newHalfExtents\n     */\n    coSetHalfExtents(handle, newHalfExtents) {\n        _assertClass(newHalfExtents, RawVector);\n        wasm.rawcolliderset_coSetHalfExtents(this.__wbg_ptr, handle, newHalfExtents.__wbg_ptr);\n    }\n    /**\n     * The radius of this collider if it is a ball, capsule, cylinder, or cone shape.\n     * @param {number} handle\n     * @returns {number | undefined}\n     */\n    coRadius(handle) {\n        const ret = wasm.rawcolliderset_coRadius(this.__wbg_ptr, handle);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * Set the radius of this collider if it is a ball, capsule, cylinder, or cone shape.\n     * @param {number} handle\n     * @param {number} newRadius\n     */\n    coSetRadius(handle, newRadius) {\n        wasm.rawcolliderset_coSetRadius(this.__wbg_ptr, handle, newRadius);\n    }\n    /**\n     * The half height of this collider if it is a capsule, cylinder, or cone shape.\n     * @param {number} handle\n     * @returns {number | undefined}\n     */\n    coHalfHeight(handle) {\n        const ret = wasm.rawcolliderset_coHalfHeight(this.__wbg_ptr, handle);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * Set the half height of this collider if it is a capsule, cylinder, or cone shape.\n     * @param {number} handle\n     * @param {number} newHalfheight\n     */\n    coSetHalfHeight(handle, newHalfheight) {\n        wasm.rawcolliderset_coSetHalfHeight(this.__wbg_ptr, handle, newHalfheight);\n    }\n    /**\n     * The radius of the round edges of this collider.\n     * @param {number} handle\n     * @returns {number | undefined}\n     */\n    coRoundRadius(handle) {\n        const ret = wasm.rawcolliderset_coRoundRadius(this.__wbg_ptr, handle);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * Set the radius of the round edges of this collider.\n     * @param {number} handle\n     * @param {number} newBorderRadius\n     */\n    coSetRoundRadius(handle, newBorderRadius) {\n        wasm.rawcolliderset_coSetRoundRadius(this.__wbg_ptr, handle, newBorderRadius);\n    }\n    /**\n     * The vertices of this triangle mesh, polyline, convex polyhedron, segment, triangle or convex polyhedron, if it is one.\n     * @param {number} handle\n     * @returns {Float32Array | undefined}\n     */\n    coVertices(handle) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rawcolliderset_coVertices(retptr, this.__wbg_ptr, handle);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayF32FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_1(r0, r1 * 4, 4);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * The indices of this triangle mesh, polyline, or convex polyhedron, if it is one.\n     * @param {number} handle\n     * @returns {Uint32Array | undefined}\n     */\n    coIndices(handle) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rawcolliderset_coIndices(retptr, this.__wbg_ptr, handle);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayU32FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_1(r0, r1 * 4, 4);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} handle\n     * @returns {number | undefined}\n     */\n    coTriMeshFlags(handle) {\n        const ret = wasm.rawcolliderset_coTriMeshFlags(this.__wbg_ptr, handle);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} handle\n     * @returns {number | undefined}\n     */\n    coHeightFieldFlags(handle) {\n        const ret = wasm.rawcolliderset_coHeightFieldFlags(this.__wbg_ptr, handle);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * The height of this heightfield if it is one.\n     * @param {number} handle\n     * @returns {Float32Array | undefined}\n     */\n    coHeightfieldHeights(handle) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rawcolliderset_coHeightfieldHeights(retptr, this.__wbg_ptr, handle);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            let v1;\n            if (r0 !== 0) {\n                v1 = getArrayF32FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_export_1(r0, r1 * 4, 4);\n            }\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * The scaling factor applied of this heightfield if it is one.\n     * @param {number} handle\n     * @returns {RawVector | undefined}\n     */\n    coHeightfieldScale(handle) {\n        const ret = wasm.rawcolliderset_coHeightfieldScale(this.__wbg_ptr, handle);\n        return ret === 0 ? undefined : RawVector.__wrap(ret);\n    }\n    /**\n     * The number of rows on this heightfield's height matrix, if it is one.\n     * @param {number} handle\n     * @returns {number | undefined}\n     */\n    coHeightfieldNRows(handle) {\n        const ret = wasm.rawcolliderset_coHeightfieldNRows(this.__wbg_ptr, handle);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * The number of columns on this heightfield's height matrix, if it is one.\n     * @param {number} handle\n     * @returns {number | undefined}\n     */\n    coHeightfieldNCols(handle) {\n        const ret = wasm.rawcolliderset_coHeightfieldNCols(this.__wbg_ptr, handle);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * The unique integer identifier of the collider this collider is attached to.\n     * @param {number} handle\n     * @returns {number | undefined}\n     */\n    coParent(handle) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rawcolliderset_coParent(retptr, this.__wbg_ptr, handle);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r2 = getDataViewMemory0().getFloat64(retptr + 8 * 1, true);\n            return r0 === 0 ? undefined : r2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} handle\n     * @param {boolean} enabled\n     */\n    coSetEnabled(handle, enabled) {\n        wasm.rawcolliderset_coSetEnabled(this.__wbg_ptr, handle, enabled);\n    }\n    /**\n     * @param {number} handle\n     * @returns {boolean}\n     */\n    coIsEnabled(handle) {\n        const ret = wasm.rawcolliderset_coIsEnabled(this.__wbg_ptr, handle);\n        return ret !== 0;\n    }\n    /**\n     * @param {number} handle\n     * @param {number} contact_skin\n     */\n    coSetContactSkin(handle, contact_skin) {\n        wasm.rawcolliderset_coSetContactSkin(this.__wbg_ptr, handle, contact_skin);\n    }\n    /**\n     * @param {number} handle\n     * @returns {number}\n     */\n    coContactSkin(handle) {\n        const ret = wasm.rawcolliderset_coContactSkin(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * The friction coefficient of this collider.\n     * @param {number} handle\n     * @returns {number}\n     */\n    coFriction(handle) {\n        const ret = wasm.rawcolliderset_coFriction(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * The restitution coefficient of this collider.\n     * @param {number} handle\n     * @returns {number}\n     */\n    coRestitution(handle) {\n        const ret = wasm.rawcolliderset_coRestitution(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * The density of this collider.\n     * @param {number} handle\n     * @returns {number}\n     */\n    coDensity(handle) {\n        const ret = wasm.rawcolliderset_coDensity(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * The mass of this collider.\n     * @param {number} handle\n     * @returns {number}\n     */\n    coMass(handle) {\n        const ret = wasm.rawcolliderset_coMass(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * The volume of this collider.\n     * @param {number} handle\n     * @returns {number}\n     */\n    coVolume(handle) {\n        const ret = wasm.rawcolliderset_coVolume(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * The collision groups of this collider.\n     * @param {number} handle\n     * @returns {number}\n     */\n    coCollisionGroups(handle) {\n        const ret = wasm.rawcolliderset_coCollisionGroups(this.__wbg_ptr, handle);\n        return ret >>> 0;\n    }\n    /**\n     * The solver groups of this collider.\n     * @param {number} handle\n     * @returns {number}\n     */\n    coSolverGroups(handle) {\n        const ret = wasm.rawcolliderset_coSolverGroups(this.__wbg_ptr, handle);\n        return ret >>> 0;\n    }\n    /**\n     * The physics hooks enabled for this collider.\n     * @param {number} handle\n     * @returns {number}\n     */\n    coActiveHooks(handle) {\n        const ret = wasm.rawcolliderset_coActiveHooks(this.__wbg_ptr, handle);\n        return ret >>> 0;\n    }\n    /**\n     * The collision types enabled for this collider.\n     * @param {number} handle\n     * @returns {number}\n     */\n    coActiveCollisionTypes(handle) {\n        const ret = wasm.rawcolliderset_coActiveCollisionTypes(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * The events enabled for this collider.\n     * @param {number} handle\n     * @returns {number}\n     */\n    coActiveEvents(handle) {\n        const ret = wasm.rawcolliderset_coActiveEvents(this.__wbg_ptr, handle);\n        return ret >>> 0;\n    }\n    /**\n     * The total force magnitude beyond which a contact force event can be emitted.\n     * @param {number} handle\n     * @returns {number}\n     */\n    coContactForceEventThreshold(handle) {\n        const ret = wasm.rawcolliderset_coContactForceEventThreshold(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * @param {number} handle\n     * @param {RawVector} point\n     * @returns {boolean}\n     */\n    coContainsPoint(handle, point) {\n        _assertClass(point, RawVector);\n        const ret = wasm.rawcolliderset_coContainsPoint(this.__wbg_ptr, handle, point.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * @param {number} handle\n     * @param {RawVector} colliderVel\n     * @param {RawShape} shape2\n     * @param {RawVector} shape2Pos\n     * @param {RawRotation} shape2Rot\n     * @param {RawVector} shape2Vel\n     * @param {number} target_distance\n     * @param {number} maxToi\n     * @param {boolean} stop_at_penetration\n     * @returns {RawShapeCastHit | undefined}\n     */\n    coCastShape(handle, colliderVel, shape2, shape2Pos, shape2Rot, shape2Vel, target_distance, maxToi, stop_at_penetration) {\n        _assertClass(colliderVel, RawVector);\n        _assertClass(shape2, RawShape);\n        _assertClass(shape2Pos, RawVector);\n        _assertClass(shape2Rot, RawRotation);\n        _assertClass(shape2Vel, RawVector);\n        const ret = wasm.rawcolliderset_coCastShape(this.__wbg_ptr, handle, colliderVel.__wbg_ptr, shape2.__wbg_ptr, shape2Pos.__wbg_ptr, shape2Rot.__wbg_ptr, shape2Vel.__wbg_ptr, target_distance, maxToi, stop_at_penetration);\n        return ret === 0 ? undefined : RawShapeCastHit.__wrap(ret);\n    }\n    /**\n     * @param {number} handle\n     * @param {RawVector} collider1Vel\n     * @param {number} collider2handle\n     * @param {RawVector} collider2Vel\n     * @param {number} target_distance\n     * @param {number} max_toi\n     * @param {boolean} stop_at_penetration\n     * @returns {RawColliderShapeCastHit | undefined}\n     */\n    coCastCollider(handle, collider1Vel, collider2handle, collider2Vel, target_distance, max_toi, stop_at_penetration) {\n        _assertClass(collider1Vel, RawVector);\n        _assertClass(collider2Vel, RawVector);\n        const ret = wasm.rawcolliderset_coCastCollider(this.__wbg_ptr, handle, collider1Vel.__wbg_ptr, collider2handle, collider2Vel.__wbg_ptr, target_distance, max_toi, stop_at_penetration);\n        return ret === 0 ? undefined : RawColliderShapeCastHit.__wrap(ret);\n    }\n    /**\n     * @param {number} handle\n     * @param {RawShape} shape2\n     * @param {RawVector} shapePos2\n     * @param {RawRotation} shapeRot2\n     * @returns {boolean}\n     */\n    coIntersectsShape(handle, shape2, shapePos2, shapeRot2) {\n        _assertClass(shape2, RawShape);\n        _assertClass(shapePos2, RawVector);\n        _assertClass(shapeRot2, RawRotation);\n        const ret = wasm.rawcolliderset_coIntersectsShape(this.__wbg_ptr, handle, shape2.__wbg_ptr, shapePos2.__wbg_ptr, shapeRot2.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * @param {number} handle\n     * @param {RawShape} shape2\n     * @param {RawVector} shapePos2\n     * @param {RawRotation} shapeRot2\n     * @param {number} prediction\n     * @returns {RawShapeContact | undefined}\n     */\n    coContactShape(handle, shape2, shapePos2, shapeRot2, prediction) {\n        _assertClass(shape2, RawShape);\n        _assertClass(shapePos2, RawVector);\n        _assertClass(shapeRot2, RawRotation);\n        const ret = wasm.rawcolliderset_coContactShape(this.__wbg_ptr, handle, shape2.__wbg_ptr, shapePos2.__wbg_ptr, shapeRot2.__wbg_ptr, prediction);\n        return ret === 0 ? undefined : RawShapeContact.__wrap(ret);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} collider2handle\n     * @param {number} prediction\n     * @returns {RawShapeContact | undefined}\n     */\n    coContactCollider(handle, collider2handle, prediction) {\n        const ret = wasm.rawcolliderset_coContactCollider(this.__wbg_ptr, handle, collider2handle, prediction);\n        return ret === 0 ? undefined : RawShapeContact.__wrap(ret);\n    }\n    /**\n     * @param {number} handle\n     * @param {RawVector} point\n     * @param {boolean} solid\n     * @returns {RawPointProjection}\n     */\n    coProjectPoint(handle, point, solid) {\n        _assertClass(point, RawVector);\n        const ret = wasm.rawcolliderset_coProjectPoint(this.__wbg_ptr, handle, point.__wbg_ptr, solid);\n        return RawPointProjection.__wrap(ret);\n    }\n    /**\n     * @param {number} handle\n     * @param {RawVector} rayOrig\n     * @param {RawVector} rayDir\n     * @param {number} maxToi\n     * @returns {boolean}\n     */\n    coIntersectsRay(handle, rayOrig, rayDir, maxToi) {\n        _assertClass(rayOrig, RawVector);\n        _assertClass(rayDir, RawVector);\n        const ret = wasm.rawcolliderset_coIntersectsRay(this.__wbg_ptr, handle, rayOrig.__wbg_ptr, rayDir.__wbg_ptr, maxToi);\n        return ret !== 0;\n    }\n    /**\n     * @param {number} handle\n     * @param {RawVector} rayOrig\n     * @param {RawVector} rayDir\n     * @param {number} maxToi\n     * @param {boolean} solid\n     * @returns {number}\n     */\n    coCastRay(handle, rayOrig, rayDir, maxToi, solid) {\n        _assertClass(rayOrig, RawVector);\n        _assertClass(rayDir, RawVector);\n        const ret = wasm.rawcolliderset_coCastRay(this.__wbg_ptr, handle, rayOrig.__wbg_ptr, rayDir.__wbg_ptr, maxToi, solid);\n        return ret;\n    }\n    /**\n     * @param {number} handle\n     * @param {RawVector} rayOrig\n     * @param {RawVector} rayDir\n     * @param {number} maxToi\n     * @param {boolean} solid\n     * @returns {RawRayIntersection | undefined}\n     */\n    coCastRayAndGetNormal(handle, rayOrig, rayDir, maxToi, solid) {\n        _assertClass(rayOrig, RawVector);\n        _assertClass(rayDir, RawVector);\n        const ret = wasm.rawcolliderset_coCastRayAndGetNormal(this.__wbg_ptr, handle, rayOrig.__wbg_ptr, rayDir.__wbg_ptr, maxToi, solid);\n        return ret === 0 ? undefined : RawRayIntersection.__wrap(ret);\n    }\n    /**\n     * @param {number} handle\n     * @param {boolean} is_sensor\n     */\n    coSetSensor(handle, is_sensor) {\n        wasm.rawcolliderset_coSetSensor(this.__wbg_ptr, handle, is_sensor);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} restitution\n     */\n    coSetRestitution(handle, restitution) {\n        wasm.rawcolliderset_coSetRestitution(this.__wbg_ptr, handle, restitution);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} friction\n     */\n    coSetFriction(handle, friction) {\n        wasm.rawcolliderset_coSetFriction(this.__wbg_ptr, handle, friction);\n    }\n    /**\n     * @param {number} handle\n     * @returns {number}\n     */\n    coFrictionCombineRule(handle) {\n        const ret = wasm.rawcolliderset_coFrictionCombineRule(this.__wbg_ptr, handle);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} handle\n     * @param {number} rule\n     */\n    coSetFrictionCombineRule(handle, rule) {\n        wasm.rawcolliderset_coSetFrictionCombineRule(this.__wbg_ptr, handle, rule);\n    }\n    /**\n     * @param {number} handle\n     * @returns {number}\n     */\n    coRestitutionCombineRule(handle) {\n        const ret = wasm.rawcolliderset_coRestitutionCombineRule(this.__wbg_ptr, handle);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} handle\n     * @param {number} rule\n     */\n    coSetRestitutionCombineRule(handle, rule) {\n        wasm.rawcolliderset_coSetRestitutionCombineRule(this.__wbg_ptr, handle, rule);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} groups\n     */\n    coSetCollisionGroups(handle, groups) {\n        wasm.rawcolliderset_coSetCollisionGroups(this.__wbg_ptr, handle, groups);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} groups\n     */\n    coSetSolverGroups(handle, groups) {\n        wasm.rawcolliderset_coSetSolverGroups(this.__wbg_ptr, handle, groups);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} hooks\n     */\n    coSetActiveHooks(handle, hooks) {\n        wasm.rawcolliderset_coSetActiveHooks(this.__wbg_ptr, handle, hooks);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} events\n     */\n    coSetActiveEvents(handle, events) {\n        wasm.rawcolliderset_coSetActiveEvents(this.__wbg_ptr, handle, events);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} types\n     */\n    coSetActiveCollisionTypes(handle, types) {\n        wasm.rawcolliderset_coSetActiveCollisionTypes(this.__wbg_ptr, handle, types);\n    }\n    /**\n     * @param {number} handle\n     * @param {RawShape} shape\n     */\n    coSetShape(handle, shape) {\n        _assertClass(shape, RawShape);\n        wasm.rawcolliderset_coSetShape(this.__wbg_ptr, handle, shape.__wbg_ptr);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} threshold\n     */\n    coSetContactForceEventThreshold(handle, threshold) {\n        wasm.rawcolliderset_coSetContactForceEventThreshold(this.__wbg_ptr, handle, threshold);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} density\n     */\n    coSetDensity(handle, density) {\n        wasm.rawcolliderset_coSetDensity(this.__wbg_ptr, handle, density);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} mass\n     */\n    coSetMass(handle, mass) {\n        wasm.rawcolliderset_coSetMass(this.__wbg_ptr, handle, mass);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} mass\n     * @param {RawVector} centerOfMass\n     * @param {RawVector} principalAngularInertia\n     * @param {RawRotation} angularInertiaFrame\n     */\n    coSetMassProperties(handle, mass, centerOfMass, principalAngularInertia, angularInertiaFrame) {\n        _assertClass(centerOfMass, RawVector);\n        _assertClass(principalAngularInertia, RawVector);\n        _assertClass(angularInertiaFrame, RawRotation);\n        wasm.rawcolliderset_coSetMassProperties(this.__wbg_ptr, handle, mass, centerOfMass.__wbg_ptr, principalAngularInertia.__wbg_ptr, angularInertiaFrame.__wbg_ptr);\n    }\n    constructor() {\n        const ret = wasm.rawcolliderset_new();\n        this.__wbg_ptr = ret >>> 0;\n        RawColliderSetFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.rawcolliderset_len(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} handle\n     * @returns {boolean}\n     */\n    contains(handle) {\n        const ret = wasm.rawcolliderset_contains(this.__wbg_ptr, handle);\n        return ret !== 0;\n    }\n    /**\n     * @param {boolean} enabled\n     * @param {RawShape} shape\n     * @param {RawVector} translation\n     * @param {RawRotation} rotation\n     * @param {number} massPropsMode\n     * @param {number} mass\n     * @param {RawVector} centerOfMass\n     * @param {RawVector} principalAngularInertia\n     * @param {RawRotation} angularInertiaFrame\n     * @param {number} density\n     * @param {number} friction\n     * @param {number} restitution\n     * @param {number} frictionCombineRule\n     * @param {number} restitutionCombineRule\n     * @param {boolean} isSensor\n     * @param {number} collisionGroups\n     * @param {number} solverGroups\n     * @param {number} activeCollisionTypes\n     * @param {number} activeHooks\n     * @param {number} activeEvents\n     * @param {number} contactForceEventThreshold\n     * @param {number} contactSkin\n     * @param {boolean} hasParent\n     * @param {number} parent\n     * @param {RawRigidBodySet} bodies\n     * @returns {number | undefined}\n     */\n    createCollider(enabled, shape, translation, rotation, massPropsMode, mass, centerOfMass, principalAngularInertia, angularInertiaFrame, density, friction, restitution, frictionCombineRule, restitutionCombineRule, isSensor, collisionGroups, solverGroups, activeCollisionTypes, activeHooks, activeEvents, contactForceEventThreshold, contactSkin, hasParent, parent, bodies) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(shape, RawShape);\n            _assertClass(translation, RawVector);\n            _assertClass(rotation, RawRotation);\n            _assertClass(centerOfMass, RawVector);\n            _assertClass(principalAngularInertia, RawVector);\n            _assertClass(angularInertiaFrame, RawRotation);\n            _assertClass(bodies, RawRigidBodySet);\n            wasm.rawcolliderset_createCollider(retptr, this.__wbg_ptr, enabled, shape.__wbg_ptr, translation.__wbg_ptr, rotation.__wbg_ptr, massPropsMode, mass, centerOfMass.__wbg_ptr, principalAngularInertia.__wbg_ptr, angularInertiaFrame.__wbg_ptr, density, friction, restitution, frictionCombineRule, restitutionCombineRule, isSensor, collisionGroups, solverGroups, activeCollisionTypes, activeHooks, activeEvents, contactForceEventThreshold, contactSkin, hasParent, parent, bodies.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r2 = getDataViewMemory0().getFloat64(retptr + 8 * 1, true);\n            return r0 === 0 ? undefined : r2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * Removes a collider from this set and wake-up the rigid-body it is attached to.\n     * @param {number} handle\n     * @param {RawIslandManager} islands\n     * @param {RawRigidBodySet} bodies\n     * @param {boolean} wakeUp\n     */\n    remove(handle, islands, bodies, wakeUp) {\n        _assertClass(islands, RawIslandManager);\n        _assertClass(bodies, RawRigidBodySet);\n        wasm.rawcolliderset_remove(this.__wbg_ptr, handle, islands.__wbg_ptr, bodies.__wbg_ptr, wakeUp);\n    }\n    /**\n     * Checks if a collider with the given integer handle exists.\n     * @param {number} handle\n     * @returns {boolean}\n     */\n    isHandleValid(handle) {\n        const ret = wasm.rawcolliderset_contains(this.__wbg_ptr, handle);\n        return ret !== 0;\n    }\n    /**\n     * Applies the given JavaScript function to the integer handle of each collider managed by this collider set.\n     *\n     * # Parameters\n     * - `f(handle)`: the function to apply to the integer handle of each collider managed by this collider set. Called as `f(handle)`.\n     * @param {Function} f\n     */\n    forEachColliderHandle(f) {\n        try {\n            wasm.rawcolliderset_forEachColliderHandle(this.__wbg_ptr, addBorrowedObject(f));\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n}\n\nconst RawColliderShapeCastHitFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawcollidershapecasthit_free(ptr >>> 0, 1));\n\nexport class RawColliderShapeCastHit {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawColliderShapeCastHit.prototype);\n        obj.__wbg_ptr = ptr;\n        RawColliderShapeCastHitFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawColliderShapeCastHitFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawcollidershapecasthit_free(ptr, 0);\n    }\n    /**\n     * @returns {number}\n     */\n    colliderHandle() {\n        const ret = wasm.rawcharactercollision_handle(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {number}\n     */\n    time_of_impact() {\n        const ret = wasm.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {RawVector}\n     */\n    witness1() {\n        const ret = wasm.rawcollidershapecasthit_witness1(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    witness2() {\n        const ret = wasm.rawcollidershapecasthit_witness2(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    normal1() {\n        const ret = wasm.rawcharactercollision_translationDeltaApplied(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    normal2() {\n        const ret = wasm.rawcharactercollision_translationDeltaRemaining(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n}\n\nconst RawContactForceEventFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawcontactforceevent_free(ptr >>> 0, 1));\n\nexport class RawContactForceEvent {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawContactForceEvent.prototype);\n        obj.__wbg_ptr = ptr;\n        RawContactForceEventFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawContactForceEventFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawcontactforceevent_free(ptr, 0);\n    }\n    /**\n     * The first collider involved in the contact.\n     * @returns {number}\n     */\n    collider1() {\n        const ret = wasm.rawcharactercollision_handle(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The second collider involved in the contact.\n     * @returns {number}\n     */\n    collider2() {\n        const ret = wasm.rawcontactforceevent_collider2(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The sum of all the forces between the two colliders.\n     * @returns {RawVector}\n     */\n    total_force() {\n        const ret = wasm.rawcontactforceevent_total_force(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * The sum of the magnitudes of each force between the two colliders.\n     *\n     * Note that this is **not** the same as the magnitude of `self.total_force`.\n     * Here we are summing the magnitude of all the forces, instead of taking\n     * the magnitude of their sum.\n     * @returns {number}\n     */\n    total_force_magnitude() {\n        const ret = wasm.rawcontactforceevent_total_force_magnitude(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The world-space (unit) direction of the force with strongest magnitude.\n     * @returns {RawVector}\n     */\n    max_force_direction() {\n        const ret = wasm.rawcontactforceevent_max_force_direction(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * The magnitude of the largest force at a contact point of this contact pair.\n     * @returns {number}\n     */\n    max_force_magnitude() {\n        const ret = wasm.rawcontactforceevent_max_force_magnitude(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst RawContactManifoldFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawcontactmanifold_free(ptr >>> 0, 1));\n\nexport class RawContactManifold {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawContactManifold.prototype);\n        obj.__wbg_ptr = ptr;\n        RawContactManifoldFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawContactManifoldFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawcontactmanifold_free(ptr, 0);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    normal() {\n        const ret = wasm.rawcontactmanifold_normal(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    local_n1() {\n        const ret = wasm.rawcontactmanifold_local_n1(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    local_n2() {\n        const ret = wasm.rawcontactmanifold_local_n2(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    subshape1() {\n        const ret = wasm.rawcontactmanifold_subshape1(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {number}\n     */\n    subshape2() {\n        const ret = wasm.rawcontactmanifold_subshape2(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {number}\n     */\n    num_contacts() {\n        const ret = wasm.rawcontactmanifold_num_contacts(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} i\n     * @returns {RawVector | undefined}\n     */\n    contact_local_p1(i) {\n        const ret = wasm.rawcontactmanifold_contact_local_p1(this.__wbg_ptr, i);\n        return ret === 0 ? undefined : RawVector.__wrap(ret);\n    }\n    /**\n     * @param {number} i\n     * @returns {RawVector | undefined}\n     */\n    contact_local_p2(i) {\n        const ret = wasm.rawcontactmanifold_contact_local_p2(this.__wbg_ptr, i);\n        return ret === 0 ? undefined : RawVector.__wrap(ret);\n    }\n    /**\n     * @param {number} i\n     * @returns {number}\n     */\n    contact_dist(i) {\n        const ret = wasm.rawcontactmanifold_contact_dist(this.__wbg_ptr, i);\n        return ret;\n    }\n    /**\n     * @param {number} i\n     * @returns {number}\n     */\n    contact_fid1(i) {\n        const ret = wasm.rawcontactmanifold_contact_fid1(this.__wbg_ptr, i);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} i\n     * @returns {number}\n     */\n    contact_fid2(i) {\n        const ret = wasm.rawcontactmanifold_contact_fid2(this.__wbg_ptr, i);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} i\n     * @returns {number}\n     */\n    contact_impulse(i) {\n        const ret = wasm.rawcontactmanifold_contact_impulse(this.__wbg_ptr, i);\n        return ret;\n    }\n    /**\n     * @param {number} i\n     * @returns {number}\n     */\n    contact_tangent_impulse_x(i) {\n        const ret = wasm.rawcontactmanifold_contact_tangent_impulse_x(this.__wbg_ptr, i);\n        return ret;\n    }\n    /**\n     * @param {number} i\n     * @returns {number}\n     */\n    contact_tangent_impulse_y(i) {\n        const ret = wasm.rawcontactmanifold_contact_tangent_impulse_y(this.__wbg_ptr, i);\n        return ret;\n    }\n    /**\n     * @returns {number}\n     */\n    num_solver_contacts() {\n        const ret = wasm.rawcontactmanifold_num_solver_contacts(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} i\n     * @returns {RawVector | undefined}\n     */\n    solver_contact_point(i) {\n        const ret = wasm.rawcontactmanifold_solver_contact_point(this.__wbg_ptr, i);\n        return ret === 0 ? undefined : RawVector.__wrap(ret);\n    }\n    /**\n     * @param {number} i\n     * @returns {number}\n     */\n    solver_contact_dist(i) {\n        const ret = wasm.rawcontactmanifold_solver_contact_dist(this.__wbg_ptr, i);\n        return ret;\n    }\n    /**\n     * @param {number} i\n     * @returns {number}\n     */\n    solver_contact_friction(i) {\n        const ret = wasm.rawcontactmanifold_solver_contact_friction(this.__wbg_ptr, i);\n        return ret;\n    }\n    /**\n     * @param {number} i\n     * @returns {number}\n     */\n    solver_contact_restitution(i) {\n        const ret = wasm.rawcontactmanifold_solver_contact_restitution(this.__wbg_ptr, i);\n        return ret;\n    }\n    /**\n     * @param {number} i\n     * @returns {RawVector}\n     */\n    solver_contact_tangent_velocity(i) {\n        const ret = wasm.rawcontactmanifold_solver_contact_tangent_velocity(this.__wbg_ptr, i);\n        return RawVector.__wrap(ret);\n    }\n}\n\nconst RawContactPairFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawcontactpair_free(ptr >>> 0, 1));\n\nexport class RawContactPair {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawContactPair.prototype);\n        obj.__wbg_ptr = ptr;\n        RawContactPairFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawContactPairFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawcontactpair_free(ptr, 0);\n    }\n    /**\n     * @returns {number}\n     */\n    collider1() {\n        const ret = wasm.rawcontactpair_collider1(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {number}\n     */\n    collider2() {\n        const ret = wasm.rawcontactpair_collider2(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {number}\n     */\n    numContactManifolds() {\n        const ret = wasm.rawcontactpair_numContactManifolds(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} i\n     * @returns {RawContactManifold | undefined}\n     */\n    contactManifold(i) {\n        const ret = wasm.rawcontactpair_contactManifold(this.__wbg_ptr, i);\n        return ret === 0 ? undefined : RawContactManifold.__wrap(ret);\n    }\n}\n\nconst RawDebugRenderPipelineFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawdebugrenderpipeline_free(ptr >>> 0, 1));\n\nexport class RawDebugRenderPipeline {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawDebugRenderPipelineFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawdebugrenderpipeline_free(ptr, 0);\n    }\n    constructor() {\n        const ret = wasm.rawdebugrenderpipeline_new();\n        this.__wbg_ptr = ret >>> 0;\n        RawDebugRenderPipelineFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @returns {Float32Array}\n     */\n    vertices() {\n        const ret = wasm.rawdebugrenderpipeline_vertices(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @returns {Float32Array}\n     */\n    colors() {\n        const ret = wasm.rawdebugrenderpipeline_colors(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {RawRigidBodySet} bodies\n     * @param {RawColliderSet} colliders\n     * @param {RawImpulseJointSet} impulse_joints\n     * @param {RawMultibodyJointSet} multibody_joints\n     * @param {RawNarrowPhase} narrow_phase\n     */\n    render(bodies, colliders, impulse_joints, multibody_joints, narrow_phase) {\n        _assertClass(bodies, RawRigidBodySet);\n        _assertClass(colliders, RawColliderSet);\n        _assertClass(impulse_joints, RawImpulseJointSet);\n        _assertClass(multibody_joints, RawMultibodyJointSet);\n        _assertClass(narrow_phase, RawNarrowPhase);\n        wasm.rawdebugrenderpipeline_render(this.__wbg_ptr, bodies.__wbg_ptr, colliders.__wbg_ptr, impulse_joints.__wbg_ptr, multibody_joints.__wbg_ptr, narrow_phase.__wbg_ptr);\n    }\n}\n\nconst RawDeserializedWorldFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawdeserializedworld_free(ptr >>> 0, 1));\n\nexport class RawDeserializedWorld {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawDeserializedWorld.prototype);\n        obj.__wbg_ptr = ptr;\n        RawDeserializedWorldFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawDeserializedWorldFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawdeserializedworld_free(ptr, 0);\n    }\n    /**\n     * @returns {RawVector | undefined}\n     */\n    takeGravity() {\n        const ret = wasm.rawdeserializedworld_takeGravity(this.__wbg_ptr);\n        return ret === 0 ? undefined : RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {RawIntegrationParameters | undefined}\n     */\n    takeIntegrationParameters() {\n        const ret = wasm.rawdeserializedworld_takeIntegrationParameters(this.__wbg_ptr);\n        return ret === 0 ? undefined : RawIntegrationParameters.__wrap(ret);\n    }\n    /**\n     * @returns {RawIslandManager | undefined}\n     */\n    takeIslandManager() {\n        const ret = wasm.rawdeserializedworld_takeIslandManager(this.__wbg_ptr);\n        return ret === 0 ? undefined : RawIslandManager.__wrap(ret);\n    }\n    /**\n     * @returns {RawBroadPhase | undefined}\n     */\n    takeBroadPhase() {\n        const ret = wasm.rawdeserializedworld_takeBroadPhase(this.__wbg_ptr);\n        return ret === 0 ? undefined : RawBroadPhase.__wrap(ret);\n    }\n    /**\n     * @returns {RawNarrowPhase | undefined}\n     */\n    takeNarrowPhase() {\n        const ret = wasm.rawdeserializedworld_takeNarrowPhase(this.__wbg_ptr);\n        return ret === 0 ? undefined : RawNarrowPhase.__wrap(ret);\n    }\n    /**\n     * @returns {RawRigidBodySet | undefined}\n     */\n    takeBodies() {\n        const ret = wasm.rawdeserializedworld_takeBodies(this.__wbg_ptr);\n        return ret === 0 ? undefined : RawRigidBodySet.__wrap(ret);\n    }\n    /**\n     * @returns {RawColliderSet | undefined}\n     */\n    takeColliders() {\n        const ret = wasm.rawdeserializedworld_takeColliders(this.__wbg_ptr);\n        return ret === 0 ? undefined : RawColliderSet.__wrap(ret);\n    }\n    /**\n     * @returns {RawImpulseJointSet | undefined}\n     */\n    takeImpulseJoints() {\n        const ret = wasm.rawdeserializedworld_takeImpulseJoints(this.__wbg_ptr);\n        return ret === 0 ? undefined : RawImpulseJointSet.__wrap(ret);\n    }\n    /**\n     * @returns {RawMultibodyJointSet | undefined}\n     */\n    takeMultibodyJoints() {\n        const ret = wasm.rawdeserializedworld_takeMultibodyJoints(this.__wbg_ptr);\n        return ret === 0 ? undefined : RawMultibodyJointSet.__wrap(ret);\n    }\n}\n\nconst RawDynamicRayCastVehicleControllerFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawdynamicraycastvehiclecontroller_free(ptr >>> 0, 1));\n\nexport class RawDynamicRayCastVehicleController {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawDynamicRayCastVehicleControllerFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawdynamicraycastvehiclecontroller_free(ptr, 0);\n    }\n    /**\n     * @param {number} chassis\n     */\n    constructor(chassis) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_new(chassis);\n        this.__wbg_ptr = ret >>> 0;\n        RawDynamicRayCastVehicleControllerFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @returns {number}\n     */\n    current_vehicle_speed() {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_current_vehicle_speed(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {number}\n     */\n    chassis() {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_chassis(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {number}\n     */\n    index_up_axis() {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_index_up_axis(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} axis\n     */\n    set_index_up_axis(axis) {\n        wasm.rawdynamicraycastvehiclecontroller_set_index_up_axis(this.__wbg_ptr, axis);\n    }\n    /**\n     * @returns {number}\n     */\n    index_forward_axis() {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_index_forward_axis(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} axis\n     */\n    set_index_forward_axis(axis) {\n        wasm.rawdynamicraycastvehiclecontroller_set_index_forward_axis(this.__wbg_ptr, axis);\n    }\n    /**\n     * @param {RawVector} chassis_connection_cs\n     * @param {RawVector} direction_cs\n     * @param {RawVector} axle_cs\n     * @param {number} suspension_rest_length\n     * @param {number} radius\n     */\n    add_wheel(chassis_connection_cs, direction_cs, axle_cs, suspension_rest_length, radius) {\n        _assertClass(chassis_connection_cs, RawVector);\n        _assertClass(direction_cs, RawVector);\n        _assertClass(axle_cs, RawVector);\n        wasm.rawdynamicraycastvehiclecontroller_add_wheel(this.__wbg_ptr, chassis_connection_cs.__wbg_ptr, direction_cs.__wbg_ptr, axle_cs.__wbg_ptr, suspension_rest_length, radius);\n    }\n    /**\n     * @returns {number}\n     */\n    num_wheels() {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_num_wheels(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} dt\n     * @param {RawRigidBodySet} bodies\n     * @param {RawColliderSet} colliders\n     * @param {RawQueryPipeline} queries\n     * @param {number} filter_flags\n     * @param {number | null | undefined} filter_groups\n     * @param {Function} filter_predicate\n     */\n    update_vehicle(dt, bodies, colliders, queries, filter_flags, filter_groups, filter_predicate) {\n        try {\n            _assertClass(bodies, RawRigidBodySet);\n            _assertClass(colliders, RawColliderSet);\n            _assertClass(queries, RawQueryPipeline);\n            wasm.rawdynamicraycastvehiclecontroller_update_vehicle(this.__wbg_ptr, dt, bodies.__wbg_ptr, colliders.__wbg_ptr, queries.__wbg_ptr, filter_flags, isLikeNone(filter_groups) ? 0x100000001 : (filter_groups) >>> 0, addBorrowedObject(filter_predicate));\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n     * @param {number} i\n     * @returns {RawVector | undefined}\n     */\n    wheel_chassis_connection_point_cs(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_chassis_connection_point_cs(this.__wbg_ptr, i);\n        return ret === 0 ? undefined : RawVector.__wrap(ret);\n    }\n    /**\n     * @param {number} i\n     * @param {RawVector} value\n     */\n    set_wheel_chassis_connection_point_cs(i, value) {\n        _assertClass(value, RawVector);\n        wasm.rawdynamicraycastvehiclecontroller_set_wheel_chassis_connection_point_cs(this.__wbg_ptr, i, value.__wbg_ptr);\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_suspension_rest_length(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_suspension_rest_length(this.__wbg_ptr, i);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} i\n     * @param {number} value\n     */\n    set_wheel_suspension_rest_length(i, value) {\n        wasm.rawdynamicraycastvehiclecontroller_set_wheel_suspension_rest_length(this.__wbg_ptr, i, value);\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_max_suspension_travel(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_max_suspension_travel(this.__wbg_ptr, i);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} i\n     * @param {number} value\n     */\n    set_wheel_max_suspension_travel(i, value) {\n        wasm.rawdynamicraycastvehiclecontroller_set_wheel_max_suspension_travel(this.__wbg_ptr, i, value);\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_radius(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_radius(this.__wbg_ptr, i);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} i\n     * @param {number} value\n     */\n    set_wheel_radius(i, value) {\n        wasm.rawdynamicraycastvehiclecontroller_set_wheel_radius(this.__wbg_ptr, i, value);\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_suspension_stiffness(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_suspension_stiffness(this.__wbg_ptr, i);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} i\n     * @param {number} value\n     */\n    set_wheel_suspension_stiffness(i, value) {\n        wasm.rawdynamicraycastvehiclecontroller_set_wheel_suspension_stiffness(this.__wbg_ptr, i, value);\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_suspension_compression(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_suspension_compression(this.__wbg_ptr, i);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} i\n     * @param {number} value\n     */\n    set_wheel_suspension_compression(i, value) {\n        wasm.rawdynamicraycastvehiclecontroller_set_wheel_suspension_compression(this.__wbg_ptr, i, value);\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_suspension_relaxation(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_suspension_relaxation(this.__wbg_ptr, i);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} i\n     * @param {number} value\n     */\n    set_wheel_suspension_relaxation(i, value) {\n        wasm.rawdynamicraycastvehiclecontroller_set_wheel_suspension_relaxation(this.__wbg_ptr, i, value);\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_max_suspension_force(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_max_suspension_force(this.__wbg_ptr, i);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} i\n     * @param {number} value\n     */\n    set_wheel_max_suspension_force(i, value) {\n        wasm.rawdynamicraycastvehiclecontroller_set_wheel_max_suspension_force(this.__wbg_ptr, i, value);\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_brake(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_brake(this.__wbg_ptr, i);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} i\n     * @param {number} value\n     */\n    set_wheel_brake(i, value) {\n        wasm.rawdynamicraycastvehiclecontroller_set_wheel_brake(this.__wbg_ptr, i, value);\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_steering(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_steering(this.__wbg_ptr, i);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} i\n     * @param {number} value\n     */\n    set_wheel_steering(i, value) {\n        wasm.rawdynamicraycastvehiclecontroller_set_wheel_steering(this.__wbg_ptr, i, value);\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_engine_force(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_engine_force(this.__wbg_ptr, i);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} i\n     * @param {number} value\n     */\n    set_wheel_engine_force(i, value) {\n        wasm.rawdynamicraycastvehiclecontroller_set_wheel_engine_force(this.__wbg_ptr, i, value);\n    }\n    /**\n     * @param {number} i\n     * @returns {RawVector | undefined}\n     */\n    wheel_direction_cs(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_direction_cs(this.__wbg_ptr, i);\n        return ret === 0 ? undefined : RawVector.__wrap(ret);\n    }\n    /**\n     * @param {number} i\n     * @param {RawVector} value\n     */\n    set_wheel_direction_cs(i, value) {\n        _assertClass(value, RawVector);\n        wasm.rawdynamicraycastvehiclecontroller_set_wheel_direction_cs(this.__wbg_ptr, i, value.__wbg_ptr);\n    }\n    /**\n     * @param {number} i\n     * @returns {RawVector | undefined}\n     */\n    wheel_axle_cs(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_axle_cs(this.__wbg_ptr, i);\n        return ret === 0 ? undefined : RawVector.__wrap(ret);\n    }\n    /**\n     * @param {number} i\n     * @param {RawVector} value\n     */\n    set_wheel_axle_cs(i, value) {\n        _assertClass(value, RawVector);\n        wasm.rawdynamicraycastvehiclecontroller_set_wheel_axle_cs(this.__wbg_ptr, i, value.__wbg_ptr);\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_friction_slip(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_friction_slip(this.__wbg_ptr, i);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} i\n     * @param {number} value\n     */\n    set_wheel_friction_slip(i, value) {\n        wasm.rawdynamicraycastvehiclecontroller_set_wheel_friction_slip(this.__wbg_ptr, i, value);\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_side_friction_stiffness(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_side_friction_stiffness(this.__wbg_ptr, i);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} i\n     * @param {number} stiffness\n     */\n    set_wheel_side_friction_stiffness(i, stiffness) {\n        wasm.rawdynamicraycastvehiclecontroller_set_wheel_side_friction_stiffness(this.__wbg_ptr, i, stiffness);\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_rotation(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_rotation(this.__wbg_ptr, i);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_forward_impulse(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_forward_impulse(this.__wbg_ptr, i);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_side_impulse(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_side_impulse(this.__wbg_ptr, i);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_suspension_force(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_suspension_force(this.__wbg_ptr, i);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} i\n     * @returns {RawVector | undefined}\n     */\n    wheel_contact_normal_ws(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_contact_normal_ws(this.__wbg_ptr, i);\n        return ret === 0 ? undefined : RawVector.__wrap(ret);\n    }\n    /**\n     * @param {number} i\n     * @returns {RawVector | undefined}\n     */\n    wheel_contact_point_ws(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_contact_point_ws(this.__wbg_ptr, i);\n        return ret === 0 ? undefined : RawVector.__wrap(ret);\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_suspension_length(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_suspension_length(this.__wbg_ptr, i);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} i\n     * @returns {RawVector | undefined}\n     */\n    wheel_hard_point_ws(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_hard_point_ws(this.__wbg_ptr, i);\n        return ret === 0 ? undefined : RawVector.__wrap(ret);\n    }\n    /**\n     * @param {number} i\n     * @returns {boolean}\n     */\n    wheel_is_in_contact(i) {\n        const ret = wasm.rawdynamicraycastvehiclecontroller_wheel_is_in_contact(this.__wbg_ptr, i);\n        return ret !== 0;\n    }\n    /**\n     * @param {number} i\n     * @returns {number | undefined}\n     */\n    wheel_ground_object(i) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rawdynamicraycastvehiclecontroller_wheel_ground_object(retptr, this.__wbg_ptr, i);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r2 = getDataViewMemory0().getFloat64(retptr + 8 * 1, true);\n            return r0 === 0 ? undefined : r2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nconst RawEventQueueFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_raweventqueue_free(ptr >>> 0, 1));\n/**\n * A structure responsible for collecting events generated\n * by the physics engine.\n */\nexport class RawEventQueue {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawEventQueueFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_raweventqueue_free(ptr, 0);\n    }\n    /**\n     * Creates a new event collector.\n     *\n     * # Parameters\n     * - `autoDrain`: setting this to `true` is strongly recommended. If true, the collector will\n     * be automatically drained before each `world.step(collector)`. If false, the collector will\n     * keep all events in memory unless it is manually drained/cleared; this may lead to unbounded use of\n     * RAM if no drain is performed.\n     * @param {boolean} autoDrain\n     */\n    constructor(autoDrain) {\n        const ret = wasm.raweventqueue_new(autoDrain);\n        this.__wbg_ptr = ret >>> 0;\n        RawEventQueueFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Applies the given javascript closure on each collision event of this collector, then clear\n     * the internal collision event buffer.\n     *\n     * # Parameters\n     * - `f(handle1, handle2, started)`:  JavaScript closure applied to each collision event. The\n     * closure should take three arguments: two integers representing the handles of the colliders\n     * involved in the collision, and a boolean indicating if the collision started (true) or stopped\n     * (false).\n     * @param {Function} f\n     */\n    drainCollisionEvents(f) {\n        try {\n            wasm.raweventqueue_drainCollisionEvents(this.__wbg_ptr, addBorrowedObject(f));\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n     * @param {Function} f\n     */\n    drainContactForceEvents(f) {\n        try {\n            wasm.raweventqueue_drainContactForceEvents(this.__wbg_ptr, addBorrowedObject(f));\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n     * Removes all events contained by this collector.\n     */\n    clear() {\n        wasm.raweventqueue_clear(this.__wbg_ptr);\n    }\n}\n\nconst RawGenericJointFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawgenericjoint_free(ptr >>> 0, 1));\n\nexport class RawGenericJoint {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawGenericJoint.prototype);\n        obj.__wbg_ptr = ptr;\n        RawGenericJointFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawGenericJointFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawgenericjoint_free(ptr, 0);\n    }\n    /**\n     * Creates a new joint descriptor that builds generic joints.\n     *\n     * Generic joints allow arbitrary axes of freedom to be selected\n     * for the joint from the available 6 degrees of freedom.\n     * @param {RawVector} anchor1\n     * @param {RawVector} anchor2\n     * @param {RawVector} axis\n     * @param {number} lockedAxes\n     * @returns {RawGenericJoint | undefined}\n     */\n    static generic(anchor1, anchor2, axis, lockedAxes) {\n        _assertClass(anchor1, RawVector);\n        _assertClass(anchor2, RawVector);\n        _assertClass(axis, RawVector);\n        const ret = wasm.rawgenericjoint_generic(anchor1.__wbg_ptr, anchor2.__wbg_ptr, axis.__wbg_ptr, lockedAxes);\n        return ret === 0 ? undefined : RawGenericJoint.__wrap(ret);\n    }\n    /**\n     * @param {number} rest_length\n     * @param {number} stiffness\n     * @param {number} damping\n     * @param {RawVector} anchor1\n     * @param {RawVector} anchor2\n     * @returns {RawGenericJoint}\n     */\n    static spring(rest_length, stiffness, damping, anchor1, anchor2) {\n        _assertClass(anchor1, RawVector);\n        _assertClass(anchor2, RawVector);\n        const ret = wasm.rawgenericjoint_spring(rest_length, stiffness, damping, anchor1.__wbg_ptr, anchor2.__wbg_ptr);\n        return RawGenericJoint.__wrap(ret);\n    }\n    /**\n     * @param {number} length\n     * @param {RawVector} anchor1\n     * @param {RawVector} anchor2\n     * @returns {RawGenericJoint}\n     */\n    static rope(length, anchor1, anchor2) {\n        _assertClass(anchor1, RawVector);\n        _assertClass(anchor2, RawVector);\n        const ret = wasm.rawgenericjoint_rope(length, anchor1.__wbg_ptr, anchor2.__wbg_ptr);\n        return RawGenericJoint.__wrap(ret);\n    }\n    /**\n     * Create a new joint descriptor that builds spherical joints.\n     *\n     * A spherical joints allows three relative rotational degrees of freedom\n     * by preventing any relative translation between the anchors of the\n     * two attached rigid-bodies.\n     * @param {RawVector} anchor1\n     * @param {RawVector} anchor2\n     * @returns {RawGenericJoint}\n     */\n    static spherical(anchor1, anchor2) {\n        _assertClass(anchor1, RawVector);\n        _assertClass(anchor2, RawVector);\n        const ret = wasm.rawgenericjoint_spherical(anchor1.__wbg_ptr, anchor2.__wbg_ptr);\n        return RawGenericJoint.__wrap(ret);\n    }\n    /**\n     * Creates a new joint descriptor that builds a Prismatic joint.\n     *\n     * A prismatic joint removes all the degrees of freedom between the\n     * affected bodies, except for the translation along one axis.\n     *\n     * Returns `None` if any of the provided axes cannot be normalized.\n     * @param {RawVector} anchor1\n     * @param {RawVector} anchor2\n     * @param {RawVector} axis\n     * @param {boolean} limitsEnabled\n     * @param {number} limitsMin\n     * @param {number} limitsMax\n     * @returns {RawGenericJoint | undefined}\n     */\n    static prismatic(anchor1, anchor2, axis, limitsEnabled, limitsMin, limitsMax) {\n        _assertClass(anchor1, RawVector);\n        _assertClass(anchor2, RawVector);\n        _assertClass(axis, RawVector);\n        const ret = wasm.rawgenericjoint_prismatic(anchor1.__wbg_ptr, anchor2.__wbg_ptr, axis.__wbg_ptr, limitsEnabled, limitsMin, limitsMax);\n        return ret === 0 ? undefined : RawGenericJoint.__wrap(ret);\n    }\n    /**\n     * Creates a new joint descriptor that builds a Fixed joint.\n     *\n     * A fixed joint removes all the degrees of freedom between the affected bodies.\n     * @param {RawVector} anchor1\n     * @param {RawRotation} axes1\n     * @param {RawVector} anchor2\n     * @param {RawRotation} axes2\n     * @returns {RawGenericJoint}\n     */\n    static fixed(anchor1, axes1, anchor2, axes2) {\n        _assertClass(anchor1, RawVector);\n        _assertClass(axes1, RawRotation);\n        _assertClass(anchor2, RawVector);\n        _assertClass(axes2, RawRotation);\n        const ret = wasm.rawgenericjoint_fixed(anchor1.__wbg_ptr, axes1.__wbg_ptr, anchor2.__wbg_ptr, axes2.__wbg_ptr);\n        return RawGenericJoint.__wrap(ret);\n    }\n    /**\n     * Create a new joint descriptor that builds Revolute joints.\n     *\n     * A revolute joint removes all degrees of freedom between the affected\n     * bodies except for the rotation along one axis.\n     * @param {RawVector} anchor1\n     * @param {RawVector} anchor2\n     * @param {RawVector} axis\n     * @returns {RawGenericJoint | undefined}\n     */\n    static revolute(anchor1, anchor2, axis) {\n        _assertClass(anchor1, RawVector);\n        _assertClass(anchor2, RawVector);\n        _assertClass(axis, RawVector);\n        const ret = wasm.rawgenericjoint_revolute(anchor1.__wbg_ptr, anchor2.__wbg_ptr, axis.__wbg_ptr);\n        return ret === 0 ? undefined : RawGenericJoint.__wrap(ret);\n    }\n}\n\nconst RawImpulseJointSetFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawimpulsejointset_free(ptr >>> 0, 1));\n\nexport class RawImpulseJointSet {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawImpulseJointSet.prototype);\n        obj.__wbg_ptr = ptr;\n        RawImpulseJointSetFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawImpulseJointSetFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawimpulsejointset_free(ptr, 0);\n    }\n    /**\n     * The type of this joint.\n     * @param {number} handle\n     * @returns {RawJointType}\n     */\n    jointType(handle) {\n        const ret = wasm.rawimpulsejointset_jointType(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * The unique integer identifier of the first rigid-body this joint it attached to.\n     * @param {number} handle\n     * @returns {number}\n     */\n    jointBodyHandle1(handle) {\n        const ret = wasm.rawimpulsejointset_jointBodyHandle1(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * The unique integer identifier of the second rigid-body this joint is attached to.\n     * @param {number} handle\n     * @returns {number}\n     */\n    jointBodyHandle2(handle) {\n        const ret = wasm.rawimpulsejointset_jointBodyHandle2(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * The angular part of the joint’s local frame relative to the first rigid-body it is attached to.\n     * @param {number} handle\n     * @returns {RawRotation}\n     */\n    jointFrameX1(handle) {\n        const ret = wasm.rawimpulsejointset_jointFrameX1(this.__wbg_ptr, handle);\n        return RawRotation.__wrap(ret);\n    }\n    /**\n     * The angular part of the joint’s local frame relative to the second rigid-body it is attached to.\n     * @param {number} handle\n     * @returns {RawRotation}\n     */\n    jointFrameX2(handle) {\n        const ret = wasm.rawimpulsejointset_jointFrameX2(this.__wbg_ptr, handle);\n        return RawRotation.__wrap(ret);\n    }\n    /**\n     * The position of the first anchor of this joint.\n     *\n     * The first anchor gives the position of the points application point on the\n     * local frame of the first rigid-body it is attached to.\n     * @param {number} handle\n     * @returns {RawVector}\n     */\n    jointAnchor1(handle) {\n        const ret = wasm.rawimpulsejointset_jointAnchor1(this.__wbg_ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * The position of the second anchor of this joint.\n     *\n     * The second anchor gives the position of the points application point on the\n     * local frame of the second rigid-body it is attached to.\n     * @param {number} handle\n     * @returns {RawVector}\n     */\n    jointAnchor2(handle) {\n        const ret = wasm.rawimpulsejointset_jointAnchor2(this.__wbg_ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * Sets the position of the first local anchor\n     * @param {number} handle\n     * @param {RawVector} newPos\n     */\n    jointSetAnchor1(handle, newPos) {\n        _assertClass(newPos, RawVector);\n        wasm.rawimpulsejointset_jointSetAnchor1(this.__wbg_ptr, handle, newPos.__wbg_ptr);\n    }\n    /**\n     * Sets the position of the second local anchor\n     * @param {number} handle\n     * @param {RawVector} newPos\n     */\n    jointSetAnchor2(handle, newPos) {\n        _assertClass(newPos, RawVector);\n        wasm.rawimpulsejointset_jointSetAnchor2(this.__wbg_ptr, handle, newPos.__wbg_ptr);\n    }\n    /**\n     * Are contacts between the rigid-bodies attached by this joint enabled?\n     * @param {number} handle\n     * @returns {boolean}\n     */\n    jointContactsEnabled(handle) {\n        const ret = wasm.rawimpulsejointset_jointContactsEnabled(this.__wbg_ptr, handle);\n        return ret !== 0;\n    }\n    /**\n     * Sets whether contacts are enabled between the rigid-bodies attached by this joint.\n     * @param {number} handle\n     * @param {boolean} enabled\n     */\n    jointSetContactsEnabled(handle, enabled) {\n        wasm.rawimpulsejointset_jointSetContactsEnabled(this.__wbg_ptr, handle, enabled);\n    }\n    /**\n     * Are the limits for this joint enabled?\n     * @param {number} handle\n     * @param {RawJointAxis} axis\n     * @returns {boolean}\n     */\n    jointLimitsEnabled(handle, axis) {\n        const ret = wasm.rawimpulsejointset_jointLimitsEnabled(this.__wbg_ptr, handle, axis);\n        return ret !== 0;\n    }\n    /**\n     * Return the lower limit along the given joint axis.\n     * @param {number} handle\n     * @param {RawJointAxis} axis\n     * @returns {number}\n     */\n    jointLimitsMin(handle, axis) {\n        const ret = wasm.rawimpulsejointset_jointLimitsMin(this.__wbg_ptr, handle, axis);\n        return ret;\n    }\n    /**\n     * If this is a prismatic joint, returns its upper limit.\n     * @param {number} handle\n     * @param {RawJointAxis} axis\n     * @returns {number}\n     */\n    jointLimitsMax(handle, axis) {\n        const ret = wasm.rawimpulsejointset_jointLimitsMax(this.__wbg_ptr, handle, axis);\n        return ret;\n    }\n    /**\n     * Enables and sets the joint limits\n     * @param {number} handle\n     * @param {RawJointAxis} axis\n     * @param {number} min\n     * @param {number} max\n     */\n    jointSetLimits(handle, axis, min, max) {\n        wasm.rawimpulsejointset_jointSetLimits(this.__wbg_ptr, handle, axis, min, max);\n    }\n    /**\n     * @param {number} handle\n     * @param {RawJointAxis} axis\n     * @param {RawMotorModel} model\n     */\n    jointConfigureMotorModel(handle, axis, model) {\n        wasm.rawimpulsejointset_jointConfigureMotorModel(this.__wbg_ptr, handle, axis, model);\n    }\n    /**\n     * @param {number} handle\n     * @param {RawJointAxis} axis\n     * @param {number} targetVel\n     * @param {number} factor\n     */\n    jointConfigureMotorVelocity(handle, axis, targetVel, factor) {\n        wasm.rawimpulsejointset_jointConfigureMotorVelocity(this.__wbg_ptr, handle, axis, targetVel, factor);\n    }\n    /**\n     * @param {number} handle\n     * @param {RawJointAxis} axis\n     * @param {number} targetPos\n     * @param {number} stiffness\n     * @param {number} damping\n     */\n    jointConfigureMotorPosition(handle, axis, targetPos, stiffness, damping) {\n        wasm.rawimpulsejointset_jointConfigureMotorPosition(this.__wbg_ptr, handle, axis, targetPos, stiffness, damping);\n    }\n    /**\n     * @param {number} handle\n     * @param {RawJointAxis} axis\n     * @param {number} targetPos\n     * @param {number} targetVel\n     * @param {number} stiffness\n     * @param {number} damping\n     */\n    jointConfigureMotor(handle, axis, targetPos, targetVel, stiffness, damping) {\n        wasm.rawimpulsejointset_jointConfigureMotor(this.__wbg_ptr, handle, axis, targetPos, targetVel, stiffness, damping);\n    }\n    constructor() {\n        const ret = wasm.rawimpulsejointset_new();\n        this.__wbg_ptr = ret >>> 0;\n        RawImpulseJointSetFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @param {RawGenericJoint} params\n     * @param {number} parent1\n     * @param {number} parent2\n     * @param {boolean} wake_up\n     * @returns {number}\n     */\n    createJoint(params, parent1, parent2, wake_up) {\n        _assertClass(params, RawGenericJoint);\n        const ret = wasm.rawimpulsejointset_createJoint(this.__wbg_ptr, params.__wbg_ptr, parent1, parent2, wake_up);\n        return ret;\n    }\n    /**\n     * @param {number} handle\n     * @param {boolean} wakeUp\n     */\n    remove(handle, wakeUp) {\n        wasm.rawimpulsejointset_remove(this.__wbg_ptr, handle, wakeUp);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.rawimpulsejointset_len(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} handle\n     * @returns {boolean}\n     */\n    contains(handle) {\n        const ret = wasm.rawimpulsejointset_contains(this.__wbg_ptr, handle);\n        return ret !== 0;\n    }\n    /**\n     * Applies the given JavaScript function to the integer handle of each joint managed by this physics world.\n     *\n     * # Parameters\n     * - `f(handle)`: the function to apply to the integer handle of each joint managed by this set. Called as `f(collider)`.\n     * @param {Function} f\n     */\n    forEachJointHandle(f) {\n        try {\n            wasm.rawimpulsejointset_forEachJointHandle(this.__wbg_ptr, addBorrowedObject(f));\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n     * Applies the given JavaScript function to the integer handle of each joint attached to the given rigid-body.\n     *\n     * # Parameters\n     * - `f(handle)`: the function to apply to the integer handle of each joint attached to the rigid-body. Called as `f(collider)`.\n     * @param {number} body\n     * @param {Function} f\n     */\n    forEachJointAttachedToRigidBody(body, f) {\n        try {\n            wasm.rawimpulsejointset_forEachJointAttachedToRigidBody(this.__wbg_ptr, body, addBorrowedObject(f));\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n}\n\nconst RawIntegrationParametersFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawintegrationparameters_free(ptr >>> 0, 1));\n\nexport class RawIntegrationParameters {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawIntegrationParameters.prototype);\n        obj.__wbg_ptr = ptr;\n        RawIntegrationParametersFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawIntegrationParametersFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawintegrationparameters_free(ptr, 0);\n    }\n    constructor() {\n        const ret = wasm.rawintegrationparameters_new();\n        this.__wbg_ptr = ret >>> 0;\n        RawIntegrationParametersFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @returns {number}\n     */\n    get dt() {\n        const ret = wasm.rawintegrationparameters_dt(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {number}\n     */\n    get contact_erp() {\n        const ret = wasm.rawintegrationparameters_contact_erp(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {number}\n     */\n    get normalizedAllowedLinearError() {\n        const ret = wasm.rawintegrationparameters_normalizedAllowedLinearError(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {number}\n     */\n    get normalizedPredictionDistance() {\n        const ret = wasm.rawcontactforceevent_max_force_magnitude(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {number}\n     */\n    get numSolverIterations() {\n        const ret = wasm.rawintegrationparameters_numSolverIterations(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {number}\n     */\n    get numAdditionalFrictionIterations() {\n        const ret = wasm.rawintegrationparameters_numAdditionalFrictionIterations(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {number}\n     */\n    get numInternalPgsIterations() {\n        const ret = wasm.rawintegrationparameters_numInternalPgsIterations(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {number}\n     */\n    get minIslandSize() {\n        const ret = wasm.rawimpulsejointset_len(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {number}\n     */\n    get maxCcdSubsteps() {\n        const ret = wasm.rawintegrationparameters_maxCcdSubsteps(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {number}\n     */\n    get lengthUnit() {\n        const ret = wasm.rawintegrationparameters_lengthUnit(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @param {number} value\n     */\n    set dt(value) {\n        wasm.rawintegrationparameters_set_dt(this.__wbg_ptr, value);\n    }\n    /**\n     * @param {number} value\n     */\n    set contact_natural_frequency(value) {\n        wasm.rawintegrationparameters_set_contact_natural_frequency(this.__wbg_ptr, value);\n    }\n    /**\n     * @param {number} value\n     */\n    set normalizedAllowedLinearError(value) {\n        wasm.rawintegrationparameters_set_normalizedAllowedLinearError(this.__wbg_ptr, value);\n    }\n    /**\n     * @param {number} value\n     */\n    set normalizedPredictionDistance(value) {\n        wasm.rawintegrationparameters_set_normalizedPredictionDistance(this.__wbg_ptr, value);\n    }\n    /**\n     * @param {number} value\n     */\n    set numSolverIterations(value) {\n        wasm.rawintegrationparameters_set_numSolverIterations(this.__wbg_ptr, value);\n    }\n    /**\n     * @param {number} value\n     */\n    set numAdditionalFrictionIterations(value) {\n        wasm.rawintegrationparameters_set_numAdditionalFrictionIterations(this.__wbg_ptr, value);\n    }\n    /**\n     * @param {number} value\n     */\n    set numInternalPgsIterations(value) {\n        wasm.rawintegrationparameters_set_numInternalPgsIterations(this.__wbg_ptr, value);\n    }\n    /**\n     * @param {number} value\n     */\n    set minIslandSize(value) {\n        wasm.rawintegrationparameters_set_minIslandSize(this.__wbg_ptr, value);\n    }\n    /**\n     * @param {number} value\n     */\n    set maxCcdSubsteps(value) {\n        wasm.rawintegrationparameters_set_maxCcdSubsteps(this.__wbg_ptr, value);\n    }\n    /**\n     * @param {number} value\n     */\n    set lengthUnit(value) {\n        wasm.rawintegrationparameters_set_lengthUnit(this.__wbg_ptr, value);\n    }\n    switchToStandardPgsSolver() {\n        wasm.rawintegrationparameters_switchToStandardPgsSolver(this.__wbg_ptr);\n    }\n    switchToSmallStepsPgsSolver() {\n        wasm.rawintegrationparameters_switchToSmallStepsPgsSolver(this.__wbg_ptr);\n    }\n    switchToSmallStepsPgsSolverWithoutWarmstart() {\n        wasm.rawintegrationparameters_switchToSmallStepsPgsSolverWithoutWarmstart(this.__wbg_ptr);\n    }\n}\n\nconst RawIslandManagerFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawislandmanager_free(ptr >>> 0, 1));\n\nexport class RawIslandManager {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawIslandManager.prototype);\n        obj.__wbg_ptr = ptr;\n        RawIslandManagerFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawIslandManagerFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawislandmanager_free(ptr, 0);\n    }\n    constructor() {\n        const ret = wasm.rawislandmanager_new();\n        this.__wbg_ptr = ret >>> 0;\n        RawIslandManagerFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Applies the given JavaScript function to the integer handle of each active rigid-body\n     * managed by this island manager.\n     *\n     * After a short time of inactivity, a rigid-body is automatically deactivated (\"asleep\") by\n     * the physics engine in order to save computational power. A sleeping rigid-body never moves\n     * unless it is moved manually by the user.\n     *\n     * # Parameters\n     * - `f(handle)`: the function to apply to the integer handle of each active rigid-body managed by this\n     *   set. Called as `f(collider)`.\n     * @param {Function} f\n     */\n    forEachActiveRigidBodyHandle(f) {\n        try {\n            wasm.rawislandmanager_forEachActiveRigidBodyHandle(this.__wbg_ptr, addBorrowedObject(f));\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n}\n\nconst RawKinematicCharacterControllerFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawkinematiccharactercontroller_free(ptr >>> 0, 1));\n\nexport class RawKinematicCharacterController {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawKinematicCharacterControllerFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawkinematiccharactercontroller_free(ptr, 0);\n    }\n    /**\n     * @param {number} offset\n     */\n    constructor(offset) {\n        const ret = wasm.rawkinematiccharactercontroller_new(offset);\n        this.__wbg_ptr = ret >>> 0;\n        RawKinematicCharacterControllerFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @returns {RawVector}\n     */\n    up() {\n        const ret = wasm.rawcharactercollision_translationDeltaApplied(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @param {RawVector} vector\n     */\n    setUp(vector) {\n        _assertClass(vector, RawVector);\n        wasm.rawkinematiccharactercontroller_setUp(this.__wbg_ptr, vector.__wbg_ptr);\n    }\n    /**\n     * @returns {number}\n     */\n    normalNudgeFactor() {\n        const ret = wasm.rawkinematiccharactercontroller_normalNudgeFactor(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @param {number} value\n     */\n    setNormalNudgeFactor(value) {\n        wasm.rawkinematiccharactercontroller_setNormalNudgeFactor(this.__wbg_ptr, value);\n    }\n    /**\n     * @returns {number}\n     */\n    offset() {\n        const ret = wasm.rawintegrationparameters_dt(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @param {number} value\n     */\n    setOffset(value) {\n        wasm.rawkinematiccharactercontroller_setOffset(this.__wbg_ptr, value);\n    }\n    /**\n     * @returns {boolean}\n     */\n    slideEnabled() {\n        const ret = wasm.rawkinematiccharactercontroller_slideEnabled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * @param {boolean} enabled\n     */\n    setSlideEnabled(enabled) {\n        wasm.rawkinematiccharactercontroller_setSlideEnabled(this.__wbg_ptr, enabled);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    autostepMaxHeight() {\n        const ret = wasm.rawkinematiccharactercontroller_autostepMaxHeight(this.__wbg_ptr);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    autostepMinWidth() {\n        const ret = wasm.rawkinematiccharactercontroller_autostepMinWidth(this.__wbg_ptr);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @returns {boolean | undefined}\n     */\n    autostepIncludesDynamicBodies() {\n        const ret = wasm.rawkinematiccharactercontroller_autostepIncludesDynamicBodies(this.__wbg_ptr);\n        return ret === 0xFFFFFF ? undefined : ret !== 0;\n    }\n    /**\n     * @returns {boolean}\n     */\n    autostepEnabled() {\n        const ret = wasm.rawkinematiccharactercontroller_autostepEnabled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * @param {number} maxHeight\n     * @param {number} minWidth\n     * @param {boolean} includeDynamicBodies\n     */\n    enableAutostep(maxHeight, minWidth, includeDynamicBodies) {\n        wasm.rawkinematiccharactercontroller_enableAutostep(this.__wbg_ptr, maxHeight, minWidth, includeDynamicBodies);\n    }\n    disableAutostep() {\n        wasm.rawkinematiccharactercontroller_disableAutostep(this.__wbg_ptr);\n    }\n    /**\n     * @returns {number}\n     */\n    maxSlopeClimbAngle() {\n        const ret = wasm.rawkinematiccharactercontroller_maxSlopeClimbAngle(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @param {number} angle\n     */\n    setMaxSlopeClimbAngle(angle) {\n        wasm.rawkinematiccharactercontroller_setMaxSlopeClimbAngle(this.__wbg_ptr, angle);\n    }\n    /**\n     * @returns {number}\n     */\n    minSlopeSlideAngle() {\n        const ret = wasm.rawkinematiccharactercontroller_minSlopeSlideAngle(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @param {number} angle\n     */\n    setMinSlopeSlideAngle(angle) {\n        wasm.rawkinematiccharactercontroller_setMinSlopeSlideAngle(this.__wbg_ptr, angle);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    snapToGroundDistance() {\n        const ret = wasm.rawkinematiccharactercontroller_snapToGroundDistance(this.__wbg_ptr);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n    /**\n     * @param {number} distance\n     */\n    enableSnapToGround(distance) {\n        wasm.rawkinematiccharactercontroller_enableSnapToGround(this.__wbg_ptr, distance);\n    }\n    disableSnapToGround() {\n        wasm.rawkinematiccharactercontroller_disableSnapToGround(this.__wbg_ptr);\n    }\n    /**\n     * @returns {boolean}\n     */\n    snapToGroundEnabled() {\n        const ret = wasm.rawkinematiccharactercontroller_snapToGroundEnabled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * @param {number} dt\n     * @param {RawRigidBodySet} bodies\n     * @param {RawColliderSet} colliders\n     * @param {RawQueryPipeline} queries\n     * @param {number} collider_handle\n     * @param {RawVector} desired_translation_delta\n     * @param {boolean} apply_impulses_to_dynamic_bodies\n     * @param {number | null | undefined} character_mass\n     * @param {number} filter_flags\n     * @param {number | null | undefined} filter_groups\n     * @param {Function} filter_predicate\n     */\n    computeColliderMovement(dt, bodies, colliders, queries, collider_handle, desired_translation_delta, apply_impulses_to_dynamic_bodies, character_mass, filter_flags, filter_groups, filter_predicate) {\n        try {\n            _assertClass(bodies, RawRigidBodySet);\n            _assertClass(colliders, RawColliderSet);\n            _assertClass(queries, RawQueryPipeline);\n            _assertClass(desired_translation_delta, RawVector);\n            wasm.rawkinematiccharactercontroller_computeColliderMovement(this.__wbg_ptr, dt, bodies.__wbg_ptr, colliders.__wbg_ptr, queries.__wbg_ptr, collider_handle, desired_translation_delta.__wbg_ptr, apply_impulses_to_dynamic_bodies, isLikeNone(character_mass) ? 0x100000001 : Math.fround(character_mass), filter_flags, isLikeNone(filter_groups) ? 0x100000001 : (filter_groups) >>> 0, addBorrowedObject(filter_predicate));\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n     * @returns {RawVector}\n     */\n    computedMovement() {\n        const ret = wasm.rawkinematiccharactercontroller_computedMovement(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {boolean}\n     */\n    computedGrounded() {\n        const ret = wasm.rawkinematiccharactercontroller_computedGrounded(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * @returns {number}\n     */\n    numComputedCollisions() {\n        const ret = wasm.rawkinematiccharactercontroller_numComputedCollisions(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} i\n     * @param {RawCharacterCollision} collision\n     * @returns {boolean}\n     */\n    computedCollision(i, collision) {\n        _assertClass(collision, RawCharacterCollision);\n        const ret = wasm.rawkinematiccharactercontroller_computedCollision(this.__wbg_ptr, i, collision.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst RawMultibodyJointSetFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawmultibodyjointset_free(ptr >>> 0, 1));\n\nexport class RawMultibodyJointSet {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawMultibodyJointSet.prototype);\n        obj.__wbg_ptr = ptr;\n        RawMultibodyJointSetFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawMultibodyJointSetFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawmultibodyjointset_free(ptr, 0);\n    }\n    /**\n     * The type of this joint.\n     * @param {number} handle\n     * @returns {RawJointType}\n     */\n    jointType(handle) {\n        const ret = wasm.rawmultibodyjointset_jointType(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * The angular part of the joint’s local frame relative to the first rigid-body it is attached to.\n     * @param {number} handle\n     * @returns {RawRotation}\n     */\n    jointFrameX1(handle) {\n        const ret = wasm.rawmultibodyjointset_jointFrameX1(this.__wbg_ptr, handle);\n        return RawRotation.__wrap(ret);\n    }\n    /**\n     * The angular part of the joint’s local frame relative to the second rigid-body it is attached to.\n     * @param {number} handle\n     * @returns {RawRotation}\n     */\n    jointFrameX2(handle) {\n        const ret = wasm.rawmultibodyjointset_jointFrameX2(this.__wbg_ptr, handle);\n        return RawRotation.__wrap(ret);\n    }\n    /**\n     * The position of the first anchor of this joint.\n     *\n     * The first anchor gives the position of the points application point on the\n     * local frame of the first rigid-body it is attached to.\n     * @param {number} handle\n     * @returns {RawVector}\n     */\n    jointAnchor1(handle) {\n        const ret = wasm.rawmultibodyjointset_jointAnchor1(this.__wbg_ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * The position of the second anchor of this joint.\n     *\n     * The second anchor gives the position of the points application point on the\n     * local frame of the second rigid-body it is attached to.\n     * @param {number} handle\n     * @returns {RawVector}\n     */\n    jointAnchor2(handle) {\n        const ret = wasm.rawmultibodyjointset_jointAnchor2(this.__wbg_ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * Are contacts between the rigid-bodies attached by this joint enabled?\n     * @param {number} handle\n     * @returns {boolean}\n     */\n    jointContactsEnabled(handle) {\n        const ret = wasm.rawmultibodyjointset_jointContactsEnabled(this.__wbg_ptr, handle);\n        return ret !== 0;\n    }\n    /**\n     * Sets whether contacts are enabled between the rigid-bodies attached by this joint.\n     * @param {number} handle\n     * @param {boolean} enabled\n     */\n    jointSetContactsEnabled(handle, enabled) {\n        wasm.rawmultibodyjointset_jointSetContactsEnabled(this.__wbg_ptr, handle, enabled);\n    }\n    /**\n     * Are the limits for this joint enabled?\n     * @param {number} handle\n     * @param {RawJointAxis} axis\n     * @returns {boolean}\n     */\n    jointLimitsEnabled(handle, axis) {\n        const ret = wasm.rawmultibodyjointset_jointLimitsEnabled(this.__wbg_ptr, handle, axis);\n        return ret !== 0;\n    }\n    /**\n     * Return the lower limit along the given joint axis.\n     * @param {number} handle\n     * @param {RawJointAxis} axis\n     * @returns {number}\n     */\n    jointLimitsMin(handle, axis) {\n        const ret = wasm.rawmultibodyjointset_jointLimitsMin(this.__wbg_ptr, handle, axis);\n        return ret;\n    }\n    /**\n     * If this is a prismatic joint, returns its upper limit.\n     * @param {number} handle\n     * @param {RawJointAxis} axis\n     * @returns {number}\n     */\n    jointLimitsMax(handle, axis) {\n        const ret = wasm.rawmultibodyjointset_jointLimitsMax(this.__wbg_ptr, handle, axis);\n        return ret;\n    }\n    constructor() {\n        const ret = wasm.rawmultibodyjointset_new();\n        this.__wbg_ptr = ret >>> 0;\n        RawMultibodyJointSetFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @param {RawGenericJoint} params\n     * @param {number} parent1\n     * @param {number} parent2\n     * @param {boolean} wakeUp\n     * @returns {number}\n     */\n    createJoint(params, parent1, parent2, wakeUp) {\n        _assertClass(params, RawGenericJoint);\n        const ret = wasm.rawmultibodyjointset_createJoint(this.__wbg_ptr, params.__wbg_ptr, parent1, parent2, wakeUp);\n        return ret;\n    }\n    /**\n     * @param {number} handle\n     * @param {boolean} wakeUp\n     */\n    remove(handle, wakeUp) {\n        wasm.rawmultibodyjointset_remove(this.__wbg_ptr, handle, wakeUp);\n    }\n    /**\n     * @param {number} handle\n     * @returns {boolean}\n     */\n    contains(handle) {\n        const ret = wasm.rawmultibodyjointset_contains(this.__wbg_ptr, handle);\n        return ret !== 0;\n    }\n    /**\n     * Applies the given JavaScript function to the integer handle of each joint managed by this physics world.\n     *\n     * # Parameters\n     * - `f(handle)`: the function to apply to the integer handle of each joint managed by this set. Called as `f(collider)`.\n     * @param {Function} f\n     */\n    forEachJointHandle(f) {\n        try {\n            wasm.rawmultibodyjointset_forEachJointHandle(this.__wbg_ptr, addBorrowedObject(f));\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n     * Applies the given JavaScript function to the integer handle of each joint attached to the given rigid-body.\n     *\n     * # Parameters\n     * - `f(handle)`: the function to apply to the integer handle of each joint attached to the rigid-body. Called as `f(collider)`.\n     * @param {number} body\n     * @param {Function} f\n     */\n    forEachJointAttachedToRigidBody(body, f) {\n        try {\n            wasm.rawmultibodyjointset_forEachJointAttachedToRigidBody(this.__wbg_ptr, body, addBorrowedObject(f));\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n}\n\nconst RawNarrowPhaseFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawnarrowphase_free(ptr >>> 0, 1));\n\nexport class RawNarrowPhase {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawNarrowPhase.prototype);\n        obj.__wbg_ptr = ptr;\n        RawNarrowPhaseFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawNarrowPhaseFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawnarrowphase_free(ptr, 0);\n    }\n    constructor() {\n        const ret = wasm.rawnarrowphase_new();\n        this.__wbg_ptr = ret >>> 0;\n        RawNarrowPhaseFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @param {number} handle1\n     * @param {Function} f\n     */\n    contact_pairs_with(handle1, f) {\n        wasm.rawnarrowphase_contact_pairs_with(this.__wbg_ptr, handle1, addHeapObject(f));\n    }\n    /**\n     * @param {number} handle1\n     * @param {number} handle2\n     * @returns {RawContactPair | undefined}\n     */\n    contact_pair(handle1, handle2) {\n        const ret = wasm.rawnarrowphase_contact_pair(this.__wbg_ptr, handle1, handle2);\n        return ret === 0 ? undefined : RawContactPair.__wrap(ret);\n    }\n    /**\n     * @param {number} handle1\n     * @param {Function} f\n     */\n    intersection_pairs_with(handle1, f) {\n        wasm.rawnarrowphase_intersection_pairs_with(this.__wbg_ptr, handle1, addHeapObject(f));\n    }\n    /**\n     * @param {number} handle1\n     * @param {number} handle2\n     * @returns {boolean}\n     */\n    intersection_pair(handle1, handle2) {\n        const ret = wasm.rawnarrowphase_intersection_pair(this.__wbg_ptr, handle1, handle2);\n        return ret !== 0;\n    }\n}\n\nconst RawPhysicsPipelineFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawphysicspipeline_free(ptr >>> 0, 1));\n\nexport class RawPhysicsPipeline {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawPhysicsPipelineFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawphysicspipeline_free(ptr, 0);\n    }\n    constructor() {\n        const ret = wasm.rawphysicspipeline_new();\n        this.__wbg_ptr = ret >>> 0;\n        RawPhysicsPipelineFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @param {RawVector} gravity\n     * @param {RawIntegrationParameters} integrationParameters\n     * @param {RawIslandManager} islands\n     * @param {RawBroadPhase} broadPhase\n     * @param {RawNarrowPhase} narrowPhase\n     * @param {RawRigidBodySet} bodies\n     * @param {RawColliderSet} colliders\n     * @param {RawImpulseJointSet} joints\n     * @param {RawMultibodyJointSet} articulations\n     * @param {RawCCDSolver} ccd_solver\n     */\n    step(gravity, integrationParameters, islands, broadPhase, narrowPhase, bodies, colliders, joints, articulations, ccd_solver) {\n        _assertClass(gravity, RawVector);\n        _assertClass(integrationParameters, RawIntegrationParameters);\n        _assertClass(islands, RawIslandManager);\n        _assertClass(broadPhase, RawBroadPhase);\n        _assertClass(narrowPhase, RawNarrowPhase);\n        _assertClass(bodies, RawRigidBodySet);\n        _assertClass(colliders, RawColliderSet);\n        _assertClass(joints, RawImpulseJointSet);\n        _assertClass(articulations, RawMultibodyJointSet);\n        _assertClass(ccd_solver, RawCCDSolver);\n        wasm.rawphysicspipeline_step(this.__wbg_ptr, gravity.__wbg_ptr, integrationParameters.__wbg_ptr, islands.__wbg_ptr, broadPhase.__wbg_ptr, narrowPhase.__wbg_ptr, bodies.__wbg_ptr, colliders.__wbg_ptr, joints.__wbg_ptr, articulations.__wbg_ptr, ccd_solver.__wbg_ptr);\n    }\n    /**\n     * @param {RawVector} gravity\n     * @param {RawIntegrationParameters} integrationParameters\n     * @param {RawIslandManager} islands\n     * @param {RawBroadPhase} broadPhase\n     * @param {RawNarrowPhase} narrowPhase\n     * @param {RawRigidBodySet} bodies\n     * @param {RawColliderSet} colliders\n     * @param {RawImpulseJointSet} joints\n     * @param {RawMultibodyJointSet} articulations\n     * @param {RawCCDSolver} ccd_solver\n     * @param {RawEventQueue} eventQueue\n     * @param {object} hookObject\n     * @param {Function} hookFilterContactPair\n     * @param {Function} hookFilterIntersectionPair\n     */\n    stepWithEvents(gravity, integrationParameters, islands, broadPhase, narrowPhase, bodies, colliders, joints, articulations, ccd_solver, eventQueue, hookObject, hookFilterContactPair, hookFilterIntersectionPair) {\n        _assertClass(gravity, RawVector);\n        _assertClass(integrationParameters, RawIntegrationParameters);\n        _assertClass(islands, RawIslandManager);\n        _assertClass(broadPhase, RawBroadPhase);\n        _assertClass(narrowPhase, RawNarrowPhase);\n        _assertClass(bodies, RawRigidBodySet);\n        _assertClass(colliders, RawColliderSet);\n        _assertClass(joints, RawImpulseJointSet);\n        _assertClass(articulations, RawMultibodyJointSet);\n        _assertClass(ccd_solver, RawCCDSolver);\n        _assertClass(eventQueue, RawEventQueue);\n        wasm.rawphysicspipeline_stepWithEvents(this.__wbg_ptr, gravity.__wbg_ptr, integrationParameters.__wbg_ptr, islands.__wbg_ptr, broadPhase.__wbg_ptr, narrowPhase.__wbg_ptr, bodies.__wbg_ptr, colliders.__wbg_ptr, joints.__wbg_ptr, articulations.__wbg_ptr, ccd_solver.__wbg_ptr, eventQueue.__wbg_ptr, addHeapObject(hookObject), addHeapObject(hookFilterContactPair), addHeapObject(hookFilterIntersectionPair));\n    }\n}\n\nconst RawPidControllerFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawpidcontroller_free(ptr >>> 0, 1));\n\nexport class RawPidController {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawPidControllerFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawpidcontroller_free(ptr, 0);\n    }\n    /**\n     * @param {number} kp\n     * @param {number} ki\n     * @param {number} kd\n     * @param {number} axes_mask\n     */\n    constructor(kp, ki, kd, axes_mask) {\n        const ret = wasm.rawpidcontroller_new(kp, ki, kd, axes_mask);\n        this.__wbg_ptr = ret >>> 0;\n        RawPidControllerFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @param {number} kp\n     * @param {number} axes\n     */\n    set_kp(kp, axes) {\n        wasm.rawpidcontroller_set_kp(this.__wbg_ptr, kp, axes);\n    }\n    /**\n     * @param {number} ki\n     * @param {number} axes\n     */\n    set_ki(ki, axes) {\n        wasm.rawpidcontroller_set_ki(this.__wbg_ptr, ki, axes);\n    }\n    /**\n     * @param {number} kd\n     * @param {number} axes\n     */\n    set_kd(kd, axes) {\n        wasm.rawpidcontroller_set_kd(this.__wbg_ptr, kd, axes);\n    }\n    /**\n     * @param {number} axes_mask\n     */\n    set_axes_mask(axes_mask) {\n        wasm.rawpidcontroller_set_axes_mask(this.__wbg_ptr, axes_mask);\n    }\n    reset_integrals() {\n        wasm.rawpidcontroller_reset_integrals(this.__wbg_ptr);\n    }\n    /**\n     * @param {number} dt\n     * @param {RawRigidBodySet} bodies\n     * @param {number} rb_handle\n     * @param {RawVector} target_translation\n     * @param {RawVector} target_linvel\n     */\n    apply_linear_correction(dt, bodies, rb_handle, target_translation, target_linvel) {\n        _assertClass(bodies, RawRigidBodySet);\n        _assertClass(target_translation, RawVector);\n        _assertClass(target_linvel, RawVector);\n        wasm.rawpidcontroller_apply_linear_correction(this.__wbg_ptr, dt, bodies.__wbg_ptr, rb_handle, target_translation.__wbg_ptr, target_linvel.__wbg_ptr);\n    }\n    /**\n     * @param {number} dt\n     * @param {RawRigidBodySet} bodies\n     * @param {number} rb_handle\n     * @param {RawRotation} target_rotation\n     * @param {RawVector} target_angvel\n     */\n    apply_angular_correction(dt, bodies, rb_handle, target_rotation, target_angvel) {\n        _assertClass(bodies, RawRigidBodySet);\n        _assertClass(target_rotation, RawRotation);\n        _assertClass(target_angvel, RawVector);\n        wasm.rawpidcontroller_apply_angular_correction(this.__wbg_ptr, dt, bodies.__wbg_ptr, rb_handle, target_rotation.__wbg_ptr, target_angvel.__wbg_ptr);\n    }\n    /**\n     * @param {number} dt\n     * @param {RawRigidBodySet} bodies\n     * @param {number} rb_handle\n     * @param {RawVector} target_translation\n     * @param {RawVector} target_linvel\n     * @returns {RawVector}\n     */\n    linear_correction(dt, bodies, rb_handle, target_translation, target_linvel) {\n        _assertClass(bodies, RawRigidBodySet);\n        _assertClass(target_translation, RawVector);\n        _assertClass(target_linvel, RawVector);\n        const ret = wasm.rawpidcontroller_linear_correction(this.__wbg_ptr, dt, bodies.__wbg_ptr, rb_handle, target_translation.__wbg_ptr, target_linvel.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @param {number} dt\n     * @param {RawRigidBodySet} bodies\n     * @param {number} rb_handle\n     * @param {RawRotation} target_rotation\n     * @param {RawVector} target_angvel\n     * @returns {RawVector}\n     */\n    angular_correction(dt, bodies, rb_handle, target_rotation, target_angvel) {\n        _assertClass(bodies, RawRigidBodySet);\n        _assertClass(target_rotation, RawRotation);\n        _assertClass(target_angvel, RawVector);\n        const ret = wasm.rawpidcontroller_angular_correction(this.__wbg_ptr, dt, bodies.__wbg_ptr, rb_handle, target_rotation.__wbg_ptr, target_angvel.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n}\n\nconst RawPointColliderProjectionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawpointcolliderprojection_free(ptr >>> 0, 1));\n\nexport class RawPointColliderProjection {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawPointColliderProjection.prototype);\n        obj.__wbg_ptr = ptr;\n        RawPointColliderProjectionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawPointColliderProjectionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawpointcolliderprojection_free(ptr, 0);\n    }\n    /**\n     * @returns {number}\n     */\n    colliderHandle() {\n        const ret = wasm.rawpointcolliderprojection_colliderHandle(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {RawVector}\n     */\n    point() {\n        const ret = wasm.rawpointcolliderprojection_point(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {boolean}\n     */\n    isInside() {\n        const ret = wasm.rawpointcolliderprojection_isInside(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * @returns {RawFeatureType}\n     */\n    featureType() {\n        const ret = wasm.rawpointcolliderprojection_featureType(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    featureId() {\n        const ret = wasm.rawpointcolliderprojection_featureId(this.__wbg_ptr);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n}\n\nconst RawPointProjectionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawpointprojection_free(ptr >>> 0, 1));\n\nexport class RawPointProjection {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawPointProjection.prototype);\n        obj.__wbg_ptr = ptr;\n        RawPointProjectionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawPointProjectionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawpointprojection_free(ptr, 0);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    point() {\n        const ret = wasm.rawpointprojection_point(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {boolean}\n     */\n    isInside() {\n        const ret = wasm.rawpointprojection_isInside(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst RawQueryPipelineFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawquerypipeline_free(ptr >>> 0, 1));\n\nexport class RawQueryPipeline {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawQueryPipelineFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawquerypipeline_free(ptr, 0);\n    }\n    constructor() {\n        const ret = wasm.rawquerypipeline_new();\n        this.__wbg_ptr = ret >>> 0;\n        RawQueryPipelineFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @param {RawColliderSet} colliders\n     */\n    update(colliders) {\n        _assertClass(colliders, RawColliderSet);\n        wasm.rawquerypipeline_update(this.__wbg_ptr, colliders.__wbg_ptr);\n    }\n    /**\n     * @param {RawRigidBodySet} bodies\n     * @param {RawColliderSet} colliders\n     * @param {RawVector} rayOrig\n     * @param {RawVector} rayDir\n     * @param {number} maxToi\n     * @param {boolean} solid\n     * @param {number} filter_flags\n     * @param {number | null | undefined} filter_groups\n     * @param {number | null | undefined} filter_exclude_collider\n     * @param {number | null | undefined} filter_exclude_rigid_body\n     * @param {Function} filter_predicate\n     * @returns {RawRayColliderHit | undefined}\n     */\n    castRay(bodies, colliders, rayOrig, rayDir, maxToi, solid, filter_flags, filter_groups, filter_exclude_collider, filter_exclude_rigid_body, filter_predicate) {\n        try {\n            _assertClass(bodies, RawRigidBodySet);\n            _assertClass(colliders, RawColliderSet);\n            _assertClass(rayOrig, RawVector);\n            _assertClass(rayDir, RawVector);\n            const ret = wasm.rawquerypipeline_castRay(this.__wbg_ptr, bodies.__wbg_ptr, colliders.__wbg_ptr, rayOrig.__wbg_ptr, rayDir.__wbg_ptr, maxToi, solid, filter_flags, isLikeNone(filter_groups) ? 0x100000001 : (filter_groups) >>> 0, !isLikeNone(filter_exclude_collider), isLikeNone(filter_exclude_collider) ? 0 : filter_exclude_collider, !isLikeNone(filter_exclude_rigid_body), isLikeNone(filter_exclude_rigid_body) ? 0 : filter_exclude_rigid_body, addBorrowedObject(filter_predicate));\n            return ret === 0 ? undefined : RawRayColliderHit.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n     * @param {RawRigidBodySet} bodies\n     * @param {RawColliderSet} colliders\n     * @param {RawVector} rayOrig\n     * @param {RawVector} rayDir\n     * @param {number} maxToi\n     * @param {boolean} solid\n     * @param {number} filter_flags\n     * @param {number | null | undefined} filter_groups\n     * @param {number | null | undefined} filter_exclude_collider\n     * @param {number | null | undefined} filter_exclude_rigid_body\n     * @param {Function} filter_predicate\n     * @returns {RawRayColliderIntersection | undefined}\n     */\n    castRayAndGetNormal(bodies, colliders, rayOrig, rayDir, maxToi, solid, filter_flags, filter_groups, filter_exclude_collider, filter_exclude_rigid_body, filter_predicate) {\n        try {\n            _assertClass(bodies, RawRigidBodySet);\n            _assertClass(colliders, RawColliderSet);\n            _assertClass(rayOrig, RawVector);\n            _assertClass(rayDir, RawVector);\n            const ret = wasm.rawquerypipeline_castRayAndGetNormal(this.__wbg_ptr, bodies.__wbg_ptr, colliders.__wbg_ptr, rayOrig.__wbg_ptr, rayDir.__wbg_ptr, maxToi, solid, filter_flags, isLikeNone(filter_groups) ? 0x100000001 : (filter_groups) >>> 0, !isLikeNone(filter_exclude_collider), isLikeNone(filter_exclude_collider) ? 0 : filter_exclude_collider, !isLikeNone(filter_exclude_rigid_body), isLikeNone(filter_exclude_rigid_body) ? 0 : filter_exclude_rigid_body, addBorrowedObject(filter_predicate));\n            return ret === 0 ? undefined : RawRayColliderIntersection.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n     * @param {RawRigidBodySet} bodies\n     * @param {RawColliderSet} colliders\n     * @param {RawVector} rayOrig\n     * @param {RawVector} rayDir\n     * @param {number} maxToi\n     * @param {boolean} solid\n     * @param {Function} callback\n     * @param {number} filter_flags\n     * @param {number | null | undefined} filter_groups\n     * @param {number | null | undefined} filter_exclude_collider\n     * @param {number | null | undefined} filter_exclude_rigid_body\n     * @param {Function} filter_predicate\n     */\n    intersectionsWithRay(bodies, colliders, rayOrig, rayDir, maxToi, solid, callback, filter_flags, filter_groups, filter_exclude_collider, filter_exclude_rigid_body, filter_predicate) {\n        try {\n            _assertClass(bodies, RawRigidBodySet);\n            _assertClass(colliders, RawColliderSet);\n            _assertClass(rayOrig, RawVector);\n            _assertClass(rayDir, RawVector);\n            wasm.rawquerypipeline_intersectionsWithRay(this.__wbg_ptr, bodies.__wbg_ptr, colliders.__wbg_ptr, rayOrig.__wbg_ptr, rayDir.__wbg_ptr, maxToi, solid, addBorrowedObject(callback), filter_flags, isLikeNone(filter_groups) ? 0x100000001 : (filter_groups) >>> 0, !isLikeNone(filter_exclude_collider), isLikeNone(filter_exclude_collider) ? 0 : filter_exclude_collider, !isLikeNone(filter_exclude_rigid_body), isLikeNone(filter_exclude_rigid_body) ? 0 : filter_exclude_rigid_body, addBorrowedObject(filter_predicate));\n        } finally {\n            heap[stack_pointer++] = undefined;\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n     * @param {RawRigidBodySet} bodies\n     * @param {RawColliderSet} colliders\n     * @param {RawVector} shapePos\n     * @param {RawRotation} shapeRot\n     * @param {RawShape} shape\n     * @param {number} filter_flags\n     * @param {number | null | undefined} filter_groups\n     * @param {number | null | undefined} filter_exclude_collider\n     * @param {number | null | undefined} filter_exclude_rigid_body\n     * @param {Function} filter_predicate\n     * @returns {number | undefined}\n     */\n    intersectionWithShape(bodies, colliders, shapePos, shapeRot, shape, filter_flags, filter_groups, filter_exclude_collider, filter_exclude_rigid_body, filter_predicate) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(bodies, RawRigidBodySet);\n            _assertClass(colliders, RawColliderSet);\n            _assertClass(shapePos, RawVector);\n            _assertClass(shapeRot, RawRotation);\n            _assertClass(shape, RawShape);\n            wasm.rawquerypipeline_intersectionWithShape(retptr, this.__wbg_ptr, bodies.__wbg_ptr, colliders.__wbg_ptr, shapePos.__wbg_ptr, shapeRot.__wbg_ptr, shape.__wbg_ptr, filter_flags, isLikeNone(filter_groups) ? 0x100000001 : (filter_groups) >>> 0, !isLikeNone(filter_exclude_collider), isLikeNone(filter_exclude_collider) ? 0 : filter_exclude_collider, !isLikeNone(filter_exclude_rigid_body), isLikeNone(filter_exclude_rigid_body) ? 0 : filter_exclude_rigid_body, addBorrowedObject(filter_predicate));\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r2 = getDataViewMemory0().getFloat64(retptr + 8 * 1, true);\n            return r0 === 0 ? undefined : r2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n     * @param {RawRigidBodySet} bodies\n     * @param {RawColliderSet} colliders\n     * @param {RawVector} point\n     * @param {boolean} solid\n     * @param {number} filter_flags\n     * @param {number | null | undefined} filter_groups\n     * @param {number | null | undefined} filter_exclude_collider\n     * @param {number | null | undefined} filter_exclude_rigid_body\n     * @param {Function} filter_predicate\n     * @returns {RawPointColliderProjection | undefined}\n     */\n    projectPoint(bodies, colliders, point, solid, filter_flags, filter_groups, filter_exclude_collider, filter_exclude_rigid_body, filter_predicate) {\n        try {\n            _assertClass(bodies, RawRigidBodySet);\n            _assertClass(colliders, RawColliderSet);\n            _assertClass(point, RawVector);\n            const ret = wasm.rawquerypipeline_projectPoint(this.__wbg_ptr, bodies.__wbg_ptr, colliders.__wbg_ptr, point.__wbg_ptr, solid, filter_flags, isLikeNone(filter_groups) ? 0x100000001 : (filter_groups) >>> 0, !isLikeNone(filter_exclude_collider), isLikeNone(filter_exclude_collider) ? 0 : filter_exclude_collider, !isLikeNone(filter_exclude_rigid_body), isLikeNone(filter_exclude_rigid_body) ? 0 : filter_exclude_rigid_body, addBorrowedObject(filter_predicate));\n            return ret === 0 ? undefined : RawPointColliderProjection.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n     * @param {RawRigidBodySet} bodies\n     * @param {RawColliderSet} colliders\n     * @param {RawVector} point\n     * @param {number} filter_flags\n     * @param {number | null | undefined} filter_groups\n     * @param {number | null | undefined} filter_exclude_collider\n     * @param {number | null | undefined} filter_exclude_rigid_body\n     * @param {Function} filter_predicate\n     * @returns {RawPointColliderProjection | undefined}\n     */\n    projectPointAndGetFeature(bodies, colliders, point, filter_flags, filter_groups, filter_exclude_collider, filter_exclude_rigid_body, filter_predicate) {\n        try {\n            _assertClass(bodies, RawRigidBodySet);\n            _assertClass(colliders, RawColliderSet);\n            _assertClass(point, RawVector);\n            const ret = wasm.rawquerypipeline_projectPointAndGetFeature(this.__wbg_ptr, bodies.__wbg_ptr, colliders.__wbg_ptr, point.__wbg_ptr, filter_flags, isLikeNone(filter_groups) ? 0x100000001 : (filter_groups) >>> 0, !isLikeNone(filter_exclude_collider), isLikeNone(filter_exclude_collider) ? 0 : filter_exclude_collider, !isLikeNone(filter_exclude_rigid_body), isLikeNone(filter_exclude_rigid_body) ? 0 : filter_exclude_rigid_body, addBorrowedObject(filter_predicate));\n            return ret === 0 ? undefined : RawPointColliderProjection.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n     * @param {RawRigidBodySet} bodies\n     * @param {RawColliderSet} colliders\n     * @param {RawVector} point\n     * @param {Function} callback\n     * @param {number} filter_flags\n     * @param {number | null | undefined} filter_groups\n     * @param {number | null | undefined} filter_exclude_collider\n     * @param {number | null | undefined} filter_exclude_rigid_body\n     * @param {Function} filter_predicate\n     */\n    intersectionsWithPoint(bodies, colliders, point, callback, filter_flags, filter_groups, filter_exclude_collider, filter_exclude_rigid_body, filter_predicate) {\n        try {\n            _assertClass(bodies, RawRigidBodySet);\n            _assertClass(colliders, RawColliderSet);\n            _assertClass(point, RawVector);\n            wasm.rawquerypipeline_intersectionsWithPoint(this.__wbg_ptr, bodies.__wbg_ptr, colliders.__wbg_ptr, point.__wbg_ptr, addBorrowedObject(callback), filter_flags, isLikeNone(filter_groups) ? 0x100000001 : (filter_groups) >>> 0, !isLikeNone(filter_exclude_collider), isLikeNone(filter_exclude_collider) ? 0 : filter_exclude_collider, !isLikeNone(filter_exclude_rigid_body), isLikeNone(filter_exclude_rigid_body) ? 0 : filter_exclude_rigid_body, addBorrowedObject(filter_predicate));\n        } finally {\n            heap[stack_pointer++] = undefined;\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n     * @param {RawRigidBodySet} bodies\n     * @param {RawColliderSet} colliders\n     * @param {RawVector} shapePos\n     * @param {RawRotation} shapeRot\n     * @param {RawVector} shapeVel\n     * @param {RawShape} shape\n     * @param {number} target_distance\n     * @param {number} maxToi\n     * @param {boolean} stop_at_penetration\n     * @param {number} filter_flags\n     * @param {number | null | undefined} filter_groups\n     * @param {number | null | undefined} filter_exclude_collider\n     * @param {number | null | undefined} filter_exclude_rigid_body\n     * @param {Function} filter_predicate\n     * @returns {RawColliderShapeCastHit | undefined}\n     */\n    castShape(bodies, colliders, shapePos, shapeRot, shapeVel, shape, target_distance, maxToi, stop_at_penetration, filter_flags, filter_groups, filter_exclude_collider, filter_exclude_rigid_body, filter_predicate) {\n        try {\n            _assertClass(bodies, RawRigidBodySet);\n            _assertClass(colliders, RawColliderSet);\n            _assertClass(shapePos, RawVector);\n            _assertClass(shapeRot, RawRotation);\n            _assertClass(shapeVel, RawVector);\n            _assertClass(shape, RawShape);\n            const ret = wasm.rawquerypipeline_castShape(this.__wbg_ptr, bodies.__wbg_ptr, colliders.__wbg_ptr, shapePos.__wbg_ptr, shapeRot.__wbg_ptr, shapeVel.__wbg_ptr, shape.__wbg_ptr, target_distance, maxToi, stop_at_penetration, filter_flags, isLikeNone(filter_groups) ? 0x100000001 : (filter_groups) >>> 0, !isLikeNone(filter_exclude_collider), isLikeNone(filter_exclude_collider) ? 0 : filter_exclude_collider, !isLikeNone(filter_exclude_rigid_body), isLikeNone(filter_exclude_rigid_body) ? 0 : filter_exclude_rigid_body, addBorrowedObject(filter_predicate));\n            return ret === 0 ? undefined : RawColliderShapeCastHit.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n     * @param {RawRigidBodySet} bodies\n     * @param {RawColliderSet} colliders\n     * @param {RawVector} shapePos\n     * @param {RawRotation} shapeRot\n     * @param {RawShape} shape\n     * @param {Function} callback\n     * @param {number} filter_flags\n     * @param {number | null | undefined} filter_groups\n     * @param {number | null | undefined} filter_exclude_collider\n     * @param {number | null | undefined} filter_exclude_rigid_body\n     * @param {Function} filter_predicate\n     */\n    intersectionsWithShape(bodies, colliders, shapePos, shapeRot, shape, callback, filter_flags, filter_groups, filter_exclude_collider, filter_exclude_rigid_body, filter_predicate) {\n        try {\n            _assertClass(bodies, RawRigidBodySet);\n            _assertClass(colliders, RawColliderSet);\n            _assertClass(shapePos, RawVector);\n            _assertClass(shapeRot, RawRotation);\n            _assertClass(shape, RawShape);\n            wasm.rawquerypipeline_intersectionsWithShape(this.__wbg_ptr, bodies.__wbg_ptr, colliders.__wbg_ptr, shapePos.__wbg_ptr, shapeRot.__wbg_ptr, shape.__wbg_ptr, addBorrowedObject(callback), filter_flags, isLikeNone(filter_groups) ? 0x100000001 : (filter_groups) >>> 0, !isLikeNone(filter_exclude_collider), isLikeNone(filter_exclude_collider) ? 0 : filter_exclude_collider, !isLikeNone(filter_exclude_rigid_body), isLikeNone(filter_exclude_rigid_body) ? 0 : filter_exclude_rigid_body, addBorrowedObject(filter_predicate));\n        } finally {\n            heap[stack_pointer++] = undefined;\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n     * @param {RawVector} aabbCenter\n     * @param {RawVector} aabbHalfExtents\n     * @param {Function} callback\n     */\n    collidersWithAabbIntersectingAabb(aabbCenter, aabbHalfExtents, callback) {\n        try {\n            _assertClass(aabbCenter, RawVector);\n            _assertClass(aabbHalfExtents, RawVector);\n            wasm.rawquerypipeline_collidersWithAabbIntersectingAabb(this.__wbg_ptr, aabbCenter.__wbg_ptr, aabbHalfExtents.__wbg_ptr, addBorrowedObject(callback));\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n}\n\nconst RawRayColliderHitFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawraycolliderhit_free(ptr >>> 0, 1));\n\nexport class RawRayColliderHit {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawRayColliderHit.prototype);\n        obj.__wbg_ptr = ptr;\n        RawRayColliderHitFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawRayColliderHitFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawraycolliderhit_free(ptr, 0);\n    }\n    /**\n     * @returns {number}\n     */\n    colliderHandle() {\n        const ret = wasm.rawcharactercollision_handle(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {number}\n     */\n    timeOfImpact() {\n        const ret = wasm.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst RawRayColliderIntersectionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawraycolliderintersection_free(ptr >>> 0, 1));\n\nexport class RawRayColliderIntersection {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawRayColliderIntersection.prototype);\n        obj.__wbg_ptr = ptr;\n        RawRayColliderIntersectionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawRayColliderIntersectionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawraycolliderintersection_free(ptr, 0);\n    }\n    /**\n     * @returns {number}\n     */\n    colliderHandle() {\n        const ret = wasm.rawpointcolliderprojection_colliderHandle(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {RawVector}\n     */\n    normal() {\n        const ret = wasm.rawcollidershapecasthit_witness1(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    time_of_impact() {\n        const ret = wasm.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {RawFeatureType}\n     */\n    featureType() {\n        const ret = wasm.rawpointcolliderprojection_featureType(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    featureId() {\n        const ret = wasm.rawpointcolliderprojection_featureId(this.__wbg_ptr);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n}\n\nconst RawRayIntersectionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawrayintersection_free(ptr >>> 0, 1));\n\nexport class RawRayIntersection {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawRayIntersection.prototype);\n        obj.__wbg_ptr = ptr;\n        RawRayIntersectionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawRayIntersectionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawrayintersection_free(ptr, 0);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    normal() {\n        const ret = wasm.rawcollidershapecasthit_witness1(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    time_of_impact() {\n        const ret = wasm.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {RawFeatureType}\n     */\n    featureType() {\n        const ret = wasm.rawpointcolliderprojection_featureType(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    featureId() {\n        const ret = wasm.rawpointcolliderprojection_featureId(this.__wbg_ptr);\n        return ret === 0x100000001 ? undefined : ret;\n    }\n}\n\nconst RawRigidBodySetFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawrigidbodyset_free(ptr >>> 0, 1));\n\nexport class RawRigidBodySet {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawRigidBodySet.prototype);\n        obj.__wbg_ptr = ptr;\n        RawRigidBodySetFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawRigidBodySetFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawrigidbodyset_free(ptr, 0);\n    }\n    /**\n     * The world-space translation of this rigid-body.\n     * @param {number} handle\n     * @returns {RawVector}\n     */\n    rbTranslation(handle) {\n        const ret = wasm.rawrigidbodyset_rbTranslation(this.__wbg_ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * The world-space orientation of this rigid-body.\n     * @param {number} handle\n     * @returns {RawRotation}\n     */\n    rbRotation(handle) {\n        const ret = wasm.rawrigidbodyset_rbRotation(this.__wbg_ptr, handle);\n        return RawRotation.__wrap(ret);\n    }\n    /**\n     * Put the given rigid-body to sleep.\n     * @param {number} handle\n     */\n    rbSleep(handle) {\n        wasm.rawrigidbodyset_rbSleep(this.__wbg_ptr, handle);\n    }\n    /**\n     * Is this rigid-body sleeping?\n     * @param {number} handle\n     * @returns {boolean}\n     */\n    rbIsSleeping(handle) {\n        const ret = wasm.rawrigidbodyset_rbIsSleeping(this.__wbg_ptr, handle);\n        return ret !== 0;\n    }\n    /**\n     * Is the velocity of this rigid-body not zero?\n     * @param {number} handle\n     * @returns {boolean}\n     */\n    rbIsMoving(handle) {\n        const ret = wasm.rawrigidbodyset_rbIsMoving(this.__wbg_ptr, handle);\n        return ret !== 0;\n    }\n    /**\n     * The world-space predicted translation of this rigid-body.\n     *\n     * If this rigid-body is kinematic this value is set by the `setNextKinematicTranslation`\n     * method and is used for estimating the kinematic body velocity at the next timestep.\n     * For non-kinematic bodies, this value is currently unspecified.\n     * @param {number} handle\n     * @returns {RawVector}\n     */\n    rbNextTranslation(handle) {\n        const ret = wasm.rawrigidbodyset_rbNextTranslation(this.__wbg_ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * The world-space predicted orientation of this rigid-body.\n     *\n     * If this rigid-body is kinematic this value is set by the `setNextKinematicRotation`\n     * method and is used for estimating the kinematic body velocity at the next timestep.\n     * For non-kinematic bodies, this value is currently unspecified.\n     * @param {number} handle\n     * @returns {RawRotation}\n     */\n    rbNextRotation(handle) {\n        const ret = wasm.rawrigidbodyset_rbNextRotation(this.__wbg_ptr, handle);\n        return RawRotation.__wrap(ret);\n    }\n    /**\n     * Sets the translation of this rigid-body.\n     *\n     * # Parameters\n     * - `x`: the world-space position of the rigid-body along the `x` axis.\n     * - `y`: the world-space position of the rigid-body along the `y` axis.\n     * - `z`: the world-space position of the rigid-body along the `z` axis.\n     * - `wakeUp`: forces the rigid-body to wake-up so it is properly affected by forces if it\n     * wasn't moving before modifying its position.\n     * @param {number} handle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @param {boolean} wakeUp\n     */\n    rbSetTranslation(handle, x, y, z, wakeUp) {\n        wasm.rawrigidbodyset_rbSetTranslation(this.__wbg_ptr, handle, x, y, z, wakeUp);\n    }\n    /**\n     * Sets the rotation quaternion of this rigid-body.\n     *\n     * This does nothing if a zero quaternion is provided.\n     *\n     * # Parameters\n     * - `x`: the first vector component of the quaternion.\n     * - `y`: the second vector component of the quaternion.\n     * - `z`: the third vector component of the quaternion.\n     * - `w`: the scalar component of the quaternion.\n     * - `wakeUp`: forces the rigid-body to wake-up so it is properly affected by forces if it\n     * wasn't moving before modifying its position.\n     * @param {number} handle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @param {number} w\n     * @param {boolean} wakeUp\n     */\n    rbSetRotation(handle, x, y, z, w, wakeUp) {\n        wasm.rawrigidbodyset_rbSetRotation(this.__wbg_ptr, handle, x, y, z, w, wakeUp);\n    }\n    /**\n     * Sets the linear velocity of this rigid-body.\n     * @param {number} handle\n     * @param {RawVector} linvel\n     * @param {boolean} wakeUp\n     */\n    rbSetLinvel(handle, linvel, wakeUp) {\n        _assertClass(linvel, RawVector);\n        wasm.rawrigidbodyset_rbSetLinvel(this.__wbg_ptr, handle, linvel.__wbg_ptr, wakeUp);\n    }\n    /**\n     * Sets the angular velocity of this rigid-body.\n     * @param {number} handle\n     * @param {RawVector} angvel\n     * @param {boolean} wakeUp\n     */\n    rbSetAngvel(handle, angvel, wakeUp) {\n        _assertClass(angvel, RawVector);\n        wasm.rawrigidbodyset_rbSetAngvel(this.__wbg_ptr, handle, angvel.__wbg_ptr, wakeUp);\n    }\n    /**\n     * If this rigid body is kinematic, sets its future translation after the next timestep integration.\n     *\n     * This should be used instead of `rigidBody.setTranslation` to make the dynamic object\n     * interacting with this kinematic body behave as expected. Internally, Rapier will compute\n     * an artificial velocity for this rigid-body from its current position and its next kinematic\n     * position. This velocity will be used to compute forces on dynamic bodies interacting with\n     * this body.\n     *\n     * # Parameters\n     * - `x`: the world-space position of the rigid-body along the `x` axis.\n     * - `y`: the world-space position of the rigid-body along the `y` axis.\n     * - `z`: the world-space position of the rigid-body along the `z` axis.\n     * @param {number} handle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     */\n    rbSetNextKinematicTranslation(handle, x, y, z) {\n        wasm.rawrigidbodyset_rbSetNextKinematicTranslation(this.__wbg_ptr, handle, x, y, z);\n    }\n    /**\n     * If this rigid body is kinematic, sets its future rotation after the next timestep integration.\n     *\n     * This should be used instead of `rigidBody.setRotation` to make the dynamic object\n     * interacting with this kinematic body behave as expected. Internally, Rapier will compute\n     * an artificial velocity for this rigid-body from its current position and its next kinematic\n     * position. This velocity will be used to compute forces on dynamic bodies interacting with\n     * this body.\n     *\n     * # Parameters\n     * - `x`: the first vector component of the quaternion.\n     * - `y`: the second vector component of the quaternion.\n     * - `z`: the third vector component of the quaternion.\n     * - `w`: the scalar component of the quaternion.\n     * @param {number} handle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @param {number} w\n     */\n    rbSetNextKinematicRotation(handle, x, y, z, w) {\n        wasm.rawrigidbodyset_rbSetNextKinematicRotation(this.__wbg_ptr, handle, x, y, z, w);\n    }\n    /**\n     * @param {number} handle\n     * @param {RawColliderSet} colliders\n     */\n    rbRecomputeMassPropertiesFromColliders(handle, colliders) {\n        _assertClass(colliders, RawColliderSet);\n        wasm.rawrigidbodyset_rbRecomputeMassPropertiesFromColliders(this.__wbg_ptr, handle, colliders.__wbg_ptr);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} mass\n     * @param {boolean} wake_up\n     */\n    rbSetAdditionalMass(handle, mass, wake_up) {\n        wasm.rawrigidbodyset_rbSetAdditionalMass(this.__wbg_ptr, handle, mass, wake_up);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} mass\n     * @param {RawVector} centerOfMass\n     * @param {RawVector} principalAngularInertia\n     * @param {RawRotation} angularInertiaFrame\n     * @param {boolean} wake_up\n     */\n    rbSetAdditionalMassProperties(handle, mass, centerOfMass, principalAngularInertia, angularInertiaFrame, wake_up) {\n        _assertClass(centerOfMass, RawVector);\n        _assertClass(principalAngularInertia, RawVector);\n        _assertClass(angularInertiaFrame, RawRotation);\n        wasm.rawrigidbodyset_rbSetAdditionalMassProperties(this.__wbg_ptr, handle, mass, centerOfMass.__wbg_ptr, principalAngularInertia.__wbg_ptr, angularInertiaFrame.__wbg_ptr, wake_up);\n    }\n    /**\n     * The linear velocity of this rigid-body.\n     * @param {number} handle\n     * @returns {RawVector}\n     */\n    rbLinvel(handle) {\n        const ret = wasm.rawrigidbodyset_rbLinvel(this.__wbg_ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * The angular velocity of this rigid-body.\n     * @param {number} handle\n     * @returns {RawVector}\n     */\n    rbAngvel(handle) {\n        const ret = wasm.rawrigidbodyset_rbAngvel(this.__wbg_ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @param {number} handle\n     * @param {boolean} locked\n     * @param {boolean} wake_up\n     */\n    rbLockTranslations(handle, locked, wake_up) {\n        wasm.rawrigidbodyset_rbLockTranslations(this.__wbg_ptr, handle, locked, wake_up);\n    }\n    /**\n     * @param {number} handle\n     * @param {boolean} allow_x\n     * @param {boolean} allow_y\n     * @param {boolean} allow_z\n     * @param {boolean} wake_up\n     */\n    rbSetEnabledTranslations(handle, allow_x, allow_y, allow_z, wake_up) {\n        wasm.rawrigidbodyset_rbSetEnabledTranslations(this.__wbg_ptr, handle, allow_x, allow_y, allow_z, wake_up);\n    }\n    /**\n     * @param {number} handle\n     * @param {boolean} locked\n     * @param {boolean} wake_up\n     */\n    rbLockRotations(handle, locked, wake_up) {\n        wasm.rawrigidbodyset_rbLockRotations(this.__wbg_ptr, handle, locked, wake_up);\n    }\n    /**\n     * @param {number} handle\n     * @param {boolean} allow_x\n     * @param {boolean} allow_y\n     * @param {boolean} allow_z\n     * @param {boolean} wake_up\n     */\n    rbSetEnabledRotations(handle, allow_x, allow_y, allow_z, wake_up) {\n        wasm.rawrigidbodyset_rbSetEnabledRotations(this.__wbg_ptr, handle, allow_x, allow_y, allow_z, wake_up);\n    }\n    /**\n     * @param {number} handle\n     * @returns {number}\n     */\n    rbDominanceGroup(handle) {\n        const ret = wasm.rawrigidbodyset_rbDominanceGroup(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * @param {number} handle\n     * @param {number} group\n     */\n    rbSetDominanceGroup(handle, group) {\n        wasm.rawrigidbodyset_rbSetDominanceGroup(this.__wbg_ptr, handle, group);\n    }\n    /**\n     * @param {number} handle\n     * @param {boolean} enabled\n     */\n    rbEnableCcd(handle, enabled) {\n        wasm.rawrigidbodyset_rbEnableCcd(this.__wbg_ptr, handle, enabled);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} prediction\n     */\n    rbSetSoftCcdPrediction(handle, prediction) {\n        wasm.rawrigidbodyset_rbSetSoftCcdPrediction(this.__wbg_ptr, handle, prediction);\n    }\n    /**\n     * The mass of this rigid-body.\n     * @param {number} handle\n     * @returns {number}\n     */\n    rbMass(handle) {\n        const ret = wasm.rawrigidbodyset_rbMass(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * The inverse of the mass of a rigid-body.\n     *\n     * If this is zero, the rigid-body is assumed to have infinite mass.\n     * @param {number} handle\n     * @returns {number}\n     */\n    rbInvMass(handle) {\n        const ret = wasm.rawrigidbodyset_rbInvMass(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * The inverse mass taking into account translation locking.\n     * @param {number} handle\n     * @returns {RawVector}\n     */\n    rbEffectiveInvMass(handle) {\n        const ret = wasm.rawrigidbodyset_rbEffectiveInvMass(this.__wbg_ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * The center of mass of a rigid-body expressed in its local-space.\n     * @param {number} handle\n     * @returns {RawVector}\n     */\n    rbLocalCom(handle) {\n        const ret = wasm.rawrigidbodyset_rbLocalCom(this.__wbg_ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * The world-space center of mass of the rigid-body.\n     * @param {number} handle\n     * @returns {RawVector}\n     */\n    rbWorldCom(handle) {\n        const ret = wasm.rawrigidbodyset_rbWorldCom(this.__wbg_ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * The inverse of the principal angular inertia of the rigid-body.\n     *\n     * Components set to zero are assumed to be infinite along the corresponding principal axis.\n     * @param {number} handle\n     * @returns {RawVector}\n     */\n    rbInvPrincipalInertiaSqrt(handle) {\n        const ret = wasm.rawrigidbodyset_rbInvPrincipalInertiaSqrt(this.__wbg_ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * The principal vectors of the local angular inertia tensor of the rigid-body.\n     * @param {number} handle\n     * @returns {RawRotation}\n     */\n    rbPrincipalInertiaLocalFrame(handle) {\n        const ret = wasm.rawrigidbodyset_rbPrincipalInertiaLocalFrame(this.__wbg_ptr, handle);\n        return RawRotation.__wrap(ret);\n    }\n    /**\n     * The angular inertia along the principal inertia axes of the rigid-body.\n     * @param {number} handle\n     * @returns {RawVector}\n     */\n    rbPrincipalInertia(handle) {\n        const ret = wasm.rawrigidbodyset_rbPrincipalInertia(this.__wbg_ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * The square-root of the world-space inverse angular inertia tensor of the rigid-body,\n     * taking into account rotation locking.\n     * @param {number} handle\n     * @returns {RawSdpMatrix3}\n     */\n    rbEffectiveWorldInvInertiaSqrt(handle) {\n        const ret = wasm.rawrigidbodyset_rbEffectiveWorldInvInertiaSqrt(this.__wbg_ptr, handle);\n        return RawSdpMatrix3.__wrap(ret);\n    }\n    /**\n     * The effective world-space angular inertia (that takes the potential rotation locking into account) of\n     * this rigid-body.\n     * @param {number} handle\n     * @returns {RawSdpMatrix3}\n     */\n    rbEffectiveAngularInertia(handle) {\n        const ret = wasm.rawrigidbodyset_rbEffectiveAngularInertia(this.__wbg_ptr, handle);\n        return RawSdpMatrix3.__wrap(ret);\n    }\n    /**\n     * Wakes this rigid-body up.\n     *\n     * A dynamic rigid-body that does not move during several consecutive frames will\n     * be put to sleep by the physics engine, i.e., it will stop being simulated in order\n     * to avoid useless computations.\n     * This method forces a sleeping rigid-body to wake-up. This is useful, e.g., before modifying\n     * the position of a dynamic body so that it is properly simulated afterwards.\n     * @param {number} handle\n     */\n    rbWakeUp(handle) {\n        wasm.rawrigidbodyset_rbWakeUp(this.__wbg_ptr, handle);\n    }\n    /**\n     * Is Continuous Collision Detection enabled for this rigid-body?\n     * @param {number} handle\n     * @returns {boolean}\n     */\n    rbIsCcdEnabled(handle) {\n        const ret = wasm.rawrigidbodyset_rbIsCcdEnabled(this.__wbg_ptr, handle);\n        return ret !== 0;\n    }\n    /**\n     * @param {number} handle\n     * @returns {number}\n     */\n    rbSoftCcdPrediction(handle) {\n        const ret = wasm.rawrigidbodyset_rbSoftCcdPrediction(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * The number of colliders attached to this rigid-body.\n     * @param {number} handle\n     * @returns {number}\n     */\n    rbNumColliders(handle) {\n        const ret = wasm.rawrigidbodyset_rbNumColliders(this.__wbg_ptr, handle);\n        return ret >>> 0;\n    }\n    /**\n     * Retrieves the `i-th` collider attached to this rigid-body.\n     *\n     * # Parameters\n     * - `at`: The index of the collider to retrieve. Must be a number in `[0, this.numColliders()[`.\n     *         This index is **not** the same as the unique identifier of the collider.\n     * @param {number} handle\n     * @param {number} at\n     * @returns {number}\n     */\n    rbCollider(handle, at) {\n        const ret = wasm.rawrigidbodyset_rbCollider(this.__wbg_ptr, handle, at);\n        return ret;\n    }\n    /**\n     * The status of this rigid-body: fixed, dynamic, or kinematic.\n     * @param {number} handle\n     * @returns {RawRigidBodyType}\n     */\n    rbBodyType(handle) {\n        const ret = wasm.rawrigidbodyset_rbBodyType(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * Set a new status for this rigid-body: fixed, dynamic, or kinematic.\n     * @param {number} handle\n     * @param {RawRigidBodyType} status\n     * @param {boolean} wake_up\n     */\n    rbSetBodyType(handle, status, wake_up) {\n        wasm.rawrigidbodyset_rbSetBodyType(this.__wbg_ptr, handle, status, wake_up);\n    }\n    /**\n     * Is this rigid-body fixed?\n     * @param {number} handle\n     * @returns {boolean}\n     */\n    rbIsFixed(handle) {\n        const ret = wasm.rawrigidbodyset_rbIsFixed(this.__wbg_ptr, handle);\n        return ret !== 0;\n    }\n    /**\n     * Is this rigid-body kinematic?\n     * @param {number} handle\n     * @returns {boolean}\n     */\n    rbIsKinematic(handle) {\n        const ret = wasm.rawrigidbodyset_rbIsKinematic(this.__wbg_ptr, handle);\n        return ret !== 0;\n    }\n    /**\n     * Is this rigid-body dynamic?\n     * @param {number} handle\n     * @returns {boolean}\n     */\n    rbIsDynamic(handle) {\n        const ret = wasm.rawrigidbodyset_rbIsDynamic(this.__wbg_ptr, handle);\n        return ret !== 0;\n    }\n    /**\n     * The linear damping coefficient of this rigid-body.\n     * @param {number} handle\n     * @returns {number}\n     */\n    rbLinearDamping(handle) {\n        const ret = wasm.rawrigidbodyset_rbLinearDamping(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * The angular damping coefficient of this rigid-body.\n     * @param {number} handle\n     * @returns {number}\n     */\n    rbAngularDamping(handle) {\n        const ret = wasm.rawrigidbodyset_rbAngularDamping(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * @param {number} handle\n     * @param {number} factor\n     */\n    rbSetLinearDamping(handle, factor) {\n        wasm.rawrigidbodyset_rbSetLinearDamping(this.__wbg_ptr, handle, factor);\n    }\n    /**\n     * @param {number} handle\n     * @param {number} factor\n     */\n    rbSetAngularDamping(handle, factor) {\n        wasm.rawrigidbodyset_rbSetAngularDamping(this.__wbg_ptr, handle, factor);\n    }\n    /**\n     * @param {number} handle\n     * @param {boolean} enabled\n     */\n    rbSetEnabled(handle, enabled) {\n        wasm.rawrigidbodyset_rbSetEnabled(this.__wbg_ptr, handle, enabled);\n    }\n    /**\n     * @param {number} handle\n     * @returns {boolean}\n     */\n    rbIsEnabled(handle) {\n        const ret = wasm.rawrigidbodyset_rbIsEnabled(this.__wbg_ptr, handle);\n        return ret !== 0;\n    }\n    /**\n     * @param {number} handle\n     * @returns {number}\n     */\n    rbGravityScale(handle) {\n        const ret = wasm.rawrigidbodyset_rbGravityScale(this.__wbg_ptr, handle);\n        return ret;\n    }\n    /**\n     * @param {number} handle\n     * @param {number} factor\n     * @param {boolean} wakeUp\n     */\n    rbSetGravityScale(handle, factor, wakeUp) {\n        wasm.rawrigidbodyset_rbSetGravityScale(this.__wbg_ptr, handle, factor, wakeUp);\n    }\n    /**\n     * Resets to zero all user-added forces added to this rigid-body.\n     * @param {number} handle\n     * @param {boolean} wakeUp\n     */\n    rbResetForces(handle, wakeUp) {\n        wasm.rawrigidbodyset_rbResetForces(this.__wbg_ptr, handle, wakeUp);\n    }\n    /**\n     * Resets to zero all user-added torques added to this rigid-body.\n     * @param {number} handle\n     * @param {boolean} wakeUp\n     */\n    rbResetTorques(handle, wakeUp) {\n        wasm.rawrigidbodyset_rbResetTorques(this.__wbg_ptr, handle, wakeUp);\n    }\n    /**\n     * Adds a force at the center-of-mass of this rigid-body.\n     *\n     * # Parameters\n     * - `force`: the world-space force to apply on the rigid-body.\n     * - `wakeUp`: should the rigid-body be automatically woken-up?\n     * @param {number} handle\n     * @param {RawVector} force\n     * @param {boolean} wakeUp\n     */\n    rbAddForce(handle, force, wakeUp) {\n        _assertClass(force, RawVector);\n        wasm.rawrigidbodyset_rbAddForce(this.__wbg_ptr, handle, force.__wbg_ptr, wakeUp);\n    }\n    /**\n     * Applies an impulse at the center-of-mass of this rigid-body.\n     *\n     * # Parameters\n     * - `impulse`: the world-space impulse to apply on the rigid-body.\n     * - `wakeUp`: should the rigid-body be automatically woken-up?\n     * @param {number} handle\n     * @param {RawVector} impulse\n     * @param {boolean} wakeUp\n     */\n    rbApplyImpulse(handle, impulse, wakeUp) {\n        _assertClass(impulse, RawVector);\n        wasm.rawrigidbodyset_rbApplyImpulse(this.__wbg_ptr, handle, impulse.__wbg_ptr, wakeUp);\n    }\n    /**\n     * Adds a torque at the center-of-mass of this rigid-body.\n     *\n     * # Parameters\n     * - `torque`: the world-space torque to apply on the rigid-body.\n     * - `wakeUp`: should the rigid-body be automatically woken-up?\n     * @param {number} handle\n     * @param {RawVector} torque\n     * @param {boolean} wakeUp\n     */\n    rbAddTorque(handle, torque, wakeUp) {\n        _assertClass(torque, RawVector);\n        wasm.rawrigidbodyset_rbAddTorque(this.__wbg_ptr, handle, torque.__wbg_ptr, wakeUp);\n    }\n    /**\n     * Applies an impulsive torque at the center-of-mass of this rigid-body.\n     *\n     * # Parameters\n     * - `torque impulse`: the world-space torque impulse to apply on the rigid-body.\n     * - `wakeUp`: should the rigid-body be automatically woken-up?\n     * @param {number} handle\n     * @param {RawVector} torque_impulse\n     * @param {boolean} wakeUp\n     */\n    rbApplyTorqueImpulse(handle, torque_impulse, wakeUp) {\n        _assertClass(torque_impulse, RawVector);\n        wasm.rawrigidbodyset_rbApplyTorqueImpulse(this.__wbg_ptr, handle, torque_impulse.__wbg_ptr, wakeUp);\n    }\n    /**\n     * Adds a force at the given world-space point of this rigid-body.\n     *\n     * # Parameters\n     * - `force`: the world-space force to apply on the rigid-body.\n     * - `point`: the world-space point where the impulse is to be applied on the rigid-body.\n     * - `wakeUp`: should the rigid-body be automatically woken-up?\n     * @param {number} handle\n     * @param {RawVector} force\n     * @param {RawVector} point\n     * @param {boolean} wakeUp\n     */\n    rbAddForceAtPoint(handle, force, point, wakeUp) {\n        _assertClass(force, RawVector);\n        _assertClass(point, RawVector);\n        wasm.rawrigidbodyset_rbAddForceAtPoint(this.__wbg_ptr, handle, force.__wbg_ptr, point.__wbg_ptr, wakeUp);\n    }\n    /**\n     * Applies an impulse at the given world-space point of this rigid-body.\n     *\n     * # Parameters\n     * - `impulse`: the world-space impulse to apply on the rigid-body.\n     * - `point`: the world-space point where the impulse is to be applied on the rigid-body.\n     * - `wakeUp`: should the rigid-body be automatically woken-up?\n     * @param {number} handle\n     * @param {RawVector} impulse\n     * @param {RawVector} point\n     * @param {boolean} wakeUp\n     */\n    rbApplyImpulseAtPoint(handle, impulse, point, wakeUp) {\n        _assertClass(impulse, RawVector);\n        _assertClass(point, RawVector);\n        wasm.rawrigidbodyset_rbApplyImpulseAtPoint(this.__wbg_ptr, handle, impulse.__wbg_ptr, point.__wbg_ptr, wakeUp);\n    }\n    /**\n     * @param {number} handle\n     * @returns {number}\n     */\n    rbAdditionalSolverIterations(handle) {\n        const ret = wasm.rawrigidbodyset_rbAdditionalSolverIterations(this.__wbg_ptr, handle);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} handle\n     * @param {number} iters\n     */\n    rbSetAdditionalSolverIterations(handle, iters) {\n        wasm.rawrigidbodyset_rbSetAdditionalSolverIterations(this.__wbg_ptr, handle, iters);\n    }\n    /**\n     * An arbitrary user-defined 32-bit integer\n     * @param {number} handle\n     * @returns {number}\n     */\n    rbUserData(handle) {\n        const ret = wasm.rawrigidbodyset_rbUserData(this.__wbg_ptr, handle);\n        return ret >>> 0;\n    }\n    /**\n     * Sets the user-defined 32-bit integer of this rigid-body.\n     *\n     * # Parameters\n     * - `data`: an arbitrary user-defined 32-bit integer.\n     * @param {number} handle\n     * @param {number} data\n     */\n    rbSetUserData(handle, data) {\n        wasm.rawrigidbodyset_rbSetUserData(this.__wbg_ptr, handle, data);\n    }\n    /**\n     * Retrieves the constant force(s) the user added to this rigid-body.\n     * Returns zero if the rigid-body is not dynamic.\n     * @param {number} handle\n     * @returns {RawVector}\n     */\n    rbUserForce(handle) {\n        const ret = wasm.rawrigidbodyset_rbUserForce(this.__wbg_ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * Retrieves the constant torque(s) the user added to this rigid-body.\n     * Returns zero if the rigid-body is not dynamic.\n     * @param {number} handle\n     * @returns {RawVector}\n     */\n    rbUserTorque(handle) {\n        const ret = wasm.rawrigidbodyset_rbUserTorque(this.__wbg_ptr, handle);\n        return RawVector.__wrap(ret);\n    }\n    constructor() {\n        const ret = wasm.rawrigidbodyset_new();\n        this.__wbg_ptr = ret >>> 0;\n        RawRigidBodySetFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @param {boolean} enabled\n     * @param {RawVector} translation\n     * @param {RawRotation} rotation\n     * @param {number} gravityScale\n     * @param {number} mass\n     * @param {boolean} massOnly\n     * @param {RawVector} centerOfMass\n     * @param {RawVector} linvel\n     * @param {RawVector} angvel\n     * @param {RawVector} principalAngularInertia\n     * @param {RawRotation} angularInertiaFrame\n     * @param {boolean} translationEnabledX\n     * @param {boolean} translationEnabledY\n     * @param {boolean} translationEnabledZ\n     * @param {boolean} rotationEnabledX\n     * @param {boolean} rotationEnabledY\n     * @param {boolean} rotationEnabledZ\n     * @param {number} linearDamping\n     * @param {number} angularDamping\n     * @param {RawRigidBodyType} rb_type\n     * @param {boolean} canSleep\n     * @param {boolean} sleeping\n     * @param {number} softCcdPrediction\n     * @param {boolean} ccdEnabled\n     * @param {number} dominanceGroup\n     * @param {number} additional_solver_iterations\n     * @returns {number}\n     */\n    createRigidBody(enabled, translation, rotation, gravityScale, mass, massOnly, centerOfMass, linvel, angvel, principalAngularInertia, angularInertiaFrame, translationEnabledX, translationEnabledY, translationEnabledZ, rotationEnabledX, rotationEnabledY, rotationEnabledZ, linearDamping, angularDamping, rb_type, canSleep, sleeping, softCcdPrediction, ccdEnabled, dominanceGroup, additional_solver_iterations) {\n        _assertClass(translation, RawVector);\n        _assertClass(rotation, RawRotation);\n        _assertClass(centerOfMass, RawVector);\n        _assertClass(linvel, RawVector);\n        _assertClass(angvel, RawVector);\n        _assertClass(principalAngularInertia, RawVector);\n        _assertClass(angularInertiaFrame, RawRotation);\n        const ret = wasm.rawrigidbodyset_createRigidBody(this.__wbg_ptr, enabled, translation.__wbg_ptr, rotation.__wbg_ptr, gravityScale, mass, massOnly, centerOfMass.__wbg_ptr, linvel.__wbg_ptr, angvel.__wbg_ptr, principalAngularInertia.__wbg_ptr, angularInertiaFrame.__wbg_ptr, translationEnabledX, translationEnabledY, translationEnabledZ, rotationEnabledX, rotationEnabledY, rotationEnabledZ, linearDamping, angularDamping, rb_type, canSleep, sleeping, softCcdPrediction, ccdEnabled, dominanceGroup, additional_solver_iterations);\n        return ret;\n    }\n    /**\n     * @param {number} handle\n     * @param {RawIslandManager} islands\n     * @param {RawColliderSet} colliders\n     * @param {RawImpulseJointSet} joints\n     * @param {RawMultibodyJointSet} articulations\n     */\n    remove(handle, islands, colliders, joints, articulations) {\n        _assertClass(islands, RawIslandManager);\n        _assertClass(colliders, RawColliderSet);\n        _assertClass(joints, RawImpulseJointSet);\n        _assertClass(articulations, RawMultibodyJointSet);\n        wasm.rawrigidbodyset_remove(this.__wbg_ptr, handle, islands.__wbg_ptr, colliders.__wbg_ptr, joints.__wbg_ptr, articulations.__wbg_ptr);\n    }\n    /**\n     * The number of rigid-bodies on this set.\n     * @returns {number}\n     */\n    len() {\n        const ret = wasm.rawcolliderset_len(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * Checks if a rigid-body with the given integer handle exists.\n     * @param {number} handle\n     * @returns {boolean}\n     */\n    contains(handle) {\n        const ret = wasm.rawrigidbodyset_contains(this.__wbg_ptr, handle);\n        return ret !== 0;\n    }\n    /**\n     * Applies the given JavaScript function to the integer handle of each rigid-body managed by this set.\n     *\n     * # Parameters\n     * - `f(handle)`: the function to apply to the integer handle of each rigid-body managed by this set. Called as `f(collider)`.\n     * @param {Function} f\n     */\n    forEachRigidBodyHandle(f) {\n        try {\n            wasm.rawrigidbodyset_forEachRigidBodyHandle(this.__wbg_ptr, addBorrowedObject(f));\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n     * @param {RawColliderSet} colliders\n     */\n    propagateModifiedBodyPositionsToColliders(colliders) {\n        _assertClass(colliders, RawColliderSet);\n        wasm.rawrigidbodyset_propagateModifiedBodyPositionsToColliders(this.__wbg_ptr, colliders.__wbg_ptr);\n    }\n}\n\nconst RawRotationFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawrotation_free(ptr >>> 0, 1));\n/**\n * A rotation quaternion.\n */\nexport class RawRotation {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawRotation.prototype);\n        obj.__wbg_ptr = ptr;\n        RawRotationFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawRotationFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawrotation_free(ptr, 0);\n    }\n    /**\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     * @param {number} w\n     */\n    constructor(x, y, z, w) {\n        const ret = wasm.rawrotation_new(x, y, z, w);\n        this.__wbg_ptr = ret >>> 0;\n        RawRotationFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * The identity quaternion.\n     * @returns {RawRotation}\n     */\n    static identity() {\n        const ret = wasm.rawrotation_identity();\n        return RawRotation.__wrap(ret);\n    }\n    /**\n     * The `x` component of this quaternion.\n     * @returns {number}\n     */\n    get x() {\n        const ret = wasm.rawrotation_x(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The `y` component of this quaternion.\n     * @returns {number}\n     */\n    get y() {\n        const ret = wasm.rawintegrationparameters_dt(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The `z` component of this quaternion.\n     * @returns {number}\n     */\n    get z() {\n        const ret = wasm.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The `w` component of this quaternion.\n     * @returns {number}\n     */\n    get w() {\n        const ret = wasm.rawrotation_w(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst RawSdpMatrix3Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawsdpmatrix3_free(ptr >>> 0, 1));\n\nexport class RawSdpMatrix3 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawSdpMatrix3.prototype);\n        obj.__wbg_ptr = ptr;\n        RawSdpMatrix3Finalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawSdpMatrix3Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawsdpmatrix3_free(ptr, 0);\n    }\n    /**\n     * Row major list of the upper-triangular part of the symmetric matrix.\n     * @returns {Float32Array}\n     */\n    elements() {\n        const ret = wasm.rawsdpmatrix3_elements(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\n\nconst RawSerializationPipelineFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawserializationpipeline_free(ptr >>> 0, 1));\n\nexport class RawSerializationPipeline {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawSerializationPipelineFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawserializationpipeline_free(ptr, 0);\n    }\n    constructor() {\n        const ret = wasm.rawserializationpipeline_new();\n        this.__wbg_ptr = ret >>> 0;\n        RawSerializationPipelineFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @param {RawVector} gravity\n     * @param {RawIntegrationParameters} integrationParameters\n     * @param {RawIslandManager} islands\n     * @param {RawBroadPhase} broadPhase\n     * @param {RawNarrowPhase} narrowPhase\n     * @param {RawRigidBodySet} bodies\n     * @param {RawColliderSet} colliders\n     * @param {RawImpulseJointSet} impulse_joints\n     * @param {RawMultibodyJointSet} multibody_joints\n     * @returns {Uint8Array | undefined}\n     */\n    serializeAll(gravity, integrationParameters, islands, broadPhase, narrowPhase, bodies, colliders, impulse_joints, multibody_joints) {\n        _assertClass(gravity, RawVector);\n        _assertClass(integrationParameters, RawIntegrationParameters);\n        _assertClass(islands, RawIslandManager);\n        _assertClass(broadPhase, RawBroadPhase);\n        _assertClass(narrowPhase, RawNarrowPhase);\n        _assertClass(bodies, RawRigidBodySet);\n        _assertClass(colliders, RawColliderSet);\n        _assertClass(impulse_joints, RawImpulseJointSet);\n        _assertClass(multibody_joints, RawMultibodyJointSet);\n        const ret = wasm.rawserializationpipeline_serializeAll(this.__wbg_ptr, gravity.__wbg_ptr, integrationParameters.__wbg_ptr, islands.__wbg_ptr, broadPhase.__wbg_ptr, narrowPhase.__wbg_ptr, bodies.__wbg_ptr, colliders.__wbg_ptr, impulse_joints.__wbg_ptr, multibody_joints.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {Uint8Array} data\n     * @returns {RawDeserializedWorld | undefined}\n     */\n    deserializeAll(data) {\n        const ret = wasm.rawserializationpipeline_deserializeAll(this.__wbg_ptr, addHeapObject(data));\n        return ret === 0 ? undefined : RawDeserializedWorld.__wrap(ret);\n    }\n}\n\nconst RawShapeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawshape_free(ptr >>> 0, 1));\n\nexport class RawShape {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawShape.prototype);\n        obj.__wbg_ptr = ptr;\n        RawShapeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawShapeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawshape_free(ptr, 0);\n    }\n    /**\n     * @param {number} hx\n     * @param {number} hy\n     * @param {number} hz\n     * @returns {RawShape}\n     */\n    static cuboid(hx, hy, hz) {\n        const ret = wasm.rawshape_cuboid(hx, hy, hz);\n        return RawShape.__wrap(ret);\n    }\n    /**\n     * @param {number} hx\n     * @param {number} hy\n     * @param {number} hz\n     * @param {number} borderRadius\n     * @returns {RawShape}\n     */\n    static roundCuboid(hx, hy, hz, borderRadius) {\n        const ret = wasm.rawshape_roundCuboid(hx, hy, hz, borderRadius);\n        return RawShape.__wrap(ret);\n    }\n    /**\n     * @param {number} radius\n     * @returns {RawShape}\n     */\n    static ball(radius) {\n        const ret = wasm.rawshape_ball(radius);\n        return RawShape.__wrap(ret);\n    }\n    /**\n     * @param {RawVector} normal\n     * @returns {RawShape}\n     */\n    static halfspace(normal) {\n        _assertClass(normal, RawVector);\n        const ret = wasm.rawshape_halfspace(normal.__wbg_ptr);\n        return RawShape.__wrap(ret);\n    }\n    /**\n     * @param {number} halfHeight\n     * @param {number} radius\n     * @returns {RawShape}\n     */\n    static capsule(halfHeight, radius) {\n        const ret = wasm.rawshape_capsule(halfHeight, radius);\n        return RawShape.__wrap(ret);\n    }\n    /**\n     * @param {number} halfHeight\n     * @param {number} radius\n     * @returns {RawShape}\n     */\n    static cylinder(halfHeight, radius) {\n        const ret = wasm.rawshape_cylinder(halfHeight, radius);\n        return RawShape.__wrap(ret);\n    }\n    /**\n     * @param {number} halfHeight\n     * @param {number} radius\n     * @param {number} borderRadius\n     * @returns {RawShape}\n     */\n    static roundCylinder(halfHeight, radius, borderRadius) {\n        const ret = wasm.rawshape_roundCylinder(halfHeight, radius, borderRadius);\n        return RawShape.__wrap(ret);\n    }\n    /**\n     * @param {number} halfHeight\n     * @param {number} radius\n     * @returns {RawShape}\n     */\n    static cone(halfHeight, radius) {\n        const ret = wasm.rawshape_cone(halfHeight, radius);\n        return RawShape.__wrap(ret);\n    }\n    /**\n     * @param {number} halfHeight\n     * @param {number} radius\n     * @param {number} borderRadius\n     * @returns {RawShape}\n     */\n    static roundCone(halfHeight, radius, borderRadius) {\n        const ret = wasm.rawshape_roundCone(halfHeight, radius, borderRadius);\n        return RawShape.__wrap(ret);\n    }\n    /**\n     * @param {Float32Array} vertices\n     * @param {Uint32Array} indices\n     * @returns {RawShape}\n     */\n    static polyline(vertices, indices) {\n        const ptr0 = passArrayF32ToWasm0(vertices, wasm.__wbindgen_export_2);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray32ToWasm0(indices, wasm.__wbindgen_export_2);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.rawshape_polyline(ptr0, len0, ptr1, len1);\n        return RawShape.__wrap(ret);\n    }\n    /**\n     * @param {Float32Array} vertices\n     * @param {Uint32Array} indices\n     * @param {number} flags\n     * @returns {RawShape | undefined}\n     */\n    static trimesh(vertices, indices, flags) {\n        const ptr0 = passArrayF32ToWasm0(vertices, wasm.__wbindgen_export_2);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray32ToWasm0(indices, wasm.__wbindgen_export_2);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.rawshape_trimesh(ptr0, len0, ptr1, len1, flags);\n        return ret === 0 ? undefined : RawShape.__wrap(ret);\n    }\n    /**\n     * @param {number} nrows\n     * @param {number} ncols\n     * @param {Float32Array} heights\n     * @param {RawVector} scale\n     * @param {number} flags\n     * @returns {RawShape}\n     */\n    static heightfield(nrows, ncols, heights, scale, flags) {\n        const ptr0 = passArrayF32ToWasm0(heights, wasm.__wbindgen_export_2);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(scale, RawVector);\n        const ret = wasm.rawshape_heightfield(nrows, ncols, ptr0, len0, scale.__wbg_ptr, flags);\n        return RawShape.__wrap(ret);\n    }\n    /**\n     * @param {RawVector} p1\n     * @param {RawVector} p2\n     * @returns {RawShape}\n     */\n    static segment(p1, p2) {\n        _assertClass(p1, RawVector);\n        _assertClass(p2, RawVector);\n        const ret = wasm.rawshape_segment(p1.__wbg_ptr, p2.__wbg_ptr);\n        return RawShape.__wrap(ret);\n    }\n    /**\n     * @param {RawVector} p1\n     * @param {RawVector} p2\n     * @param {RawVector} p3\n     * @returns {RawShape}\n     */\n    static triangle(p1, p2, p3) {\n        _assertClass(p1, RawVector);\n        _assertClass(p2, RawVector);\n        _assertClass(p3, RawVector);\n        const ret = wasm.rawshape_triangle(p1.__wbg_ptr, p2.__wbg_ptr, p3.__wbg_ptr);\n        return RawShape.__wrap(ret);\n    }\n    /**\n     * @param {RawVector} p1\n     * @param {RawVector} p2\n     * @param {RawVector} p3\n     * @param {number} borderRadius\n     * @returns {RawShape}\n     */\n    static roundTriangle(p1, p2, p3, borderRadius) {\n        _assertClass(p1, RawVector);\n        _assertClass(p2, RawVector);\n        _assertClass(p3, RawVector);\n        const ret = wasm.rawshape_roundTriangle(p1.__wbg_ptr, p2.__wbg_ptr, p3.__wbg_ptr, borderRadius);\n        return RawShape.__wrap(ret);\n    }\n    /**\n     * @param {Float32Array} points\n     * @returns {RawShape | undefined}\n     */\n    static convexHull(points) {\n        const ptr0 = passArrayF32ToWasm0(points, wasm.__wbindgen_export_2);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.rawshape_convexHull(ptr0, len0);\n        return ret === 0 ? undefined : RawShape.__wrap(ret);\n    }\n    /**\n     * @param {Float32Array} points\n     * @param {number} borderRadius\n     * @returns {RawShape | undefined}\n     */\n    static roundConvexHull(points, borderRadius) {\n        const ptr0 = passArrayF32ToWasm0(points, wasm.__wbindgen_export_2);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.rawshape_roundConvexHull(ptr0, len0, borderRadius);\n        return ret === 0 ? undefined : RawShape.__wrap(ret);\n    }\n    /**\n     * @param {Float32Array} vertices\n     * @param {Uint32Array} indices\n     * @returns {RawShape | undefined}\n     */\n    static convexMesh(vertices, indices) {\n        const ptr0 = passArrayF32ToWasm0(vertices, wasm.__wbindgen_export_2);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray32ToWasm0(indices, wasm.__wbindgen_export_2);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.rawshape_convexMesh(ptr0, len0, ptr1, len1);\n        return ret === 0 ? undefined : RawShape.__wrap(ret);\n    }\n    /**\n     * @param {Float32Array} vertices\n     * @param {Uint32Array} indices\n     * @param {number} borderRadius\n     * @returns {RawShape | undefined}\n     */\n    static roundConvexMesh(vertices, indices, borderRadius) {\n        const ptr0 = passArrayF32ToWasm0(vertices, wasm.__wbindgen_export_2);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray32ToWasm0(indices, wasm.__wbindgen_export_2);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.rawshape_roundConvexMesh(ptr0, len0, ptr1, len1, borderRadius);\n        return ret === 0 ? undefined : RawShape.__wrap(ret);\n    }\n    /**\n     * @param {RawVector} shapePos1\n     * @param {RawRotation} shapeRot1\n     * @param {RawVector} shapeVel1\n     * @param {RawShape} shape2\n     * @param {RawVector} shapePos2\n     * @param {RawRotation} shapeRot2\n     * @param {RawVector} shapeVel2\n     * @param {number} target_distance\n     * @param {number} maxToi\n     * @param {boolean} stop_at_penetration\n     * @returns {RawShapeCastHit | undefined}\n     */\n    castShape(shapePos1, shapeRot1, shapeVel1, shape2, shapePos2, shapeRot2, shapeVel2, target_distance, maxToi, stop_at_penetration) {\n        _assertClass(shapePos1, RawVector);\n        _assertClass(shapeRot1, RawRotation);\n        _assertClass(shapeVel1, RawVector);\n        _assertClass(shape2, RawShape);\n        _assertClass(shapePos2, RawVector);\n        _assertClass(shapeRot2, RawRotation);\n        _assertClass(shapeVel2, RawVector);\n        const ret = wasm.rawshape_castShape(this.__wbg_ptr, shapePos1.__wbg_ptr, shapeRot1.__wbg_ptr, shapeVel1.__wbg_ptr, shape2.__wbg_ptr, shapePos2.__wbg_ptr, shapeRot2.__wbg_ptr, shapeVel2.__wbg_ptr, target_distance, maxToi, stop_at_penetration);\n        return ret === 0 ? undefined : RawShapeCastHit.__wrap(ret);\n    }\n    /**\n     * @param {RawVector} shapePos1\n     * @param {RawRotation} shapeRot1\n     * @param {RawShape} shape2\n     * @param {RawVector} shapePos2\n     * @param {RawRotation} shapeRot2\n     * @returns {boolean}\n     */\n    intersectsShape(shapePos1, shapeRot1, shape2, shapePos2, shapeRot2) {\n        _assertClass(shapePos1, RawVector);\n        _assertClass(shapeRot1, RawRotation);\n        _assertClass(shape2, RawShape);\n        _assertClass(shapePos2, RawVector);\n        _assertClass(shapeRot2, RawRotation);\n        const ret = wasm.rawshape_intersectsShape(this.__wbg_ptr, shapePos1.__wbg_ptr, shapeRot1.__wbg_ptr, shape2.__wbg_ptr, shapePos2.__wbg_ptr, shapeRot2.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * @param {RawVector} shapePos1\n     * @param {RawRotation} shapeRot1\n     * @param {RawShape} shape2\n     * @param {RawVector} shapePos2\n     * @param {RawRotation} shapeRot2\n     * @param {number} prediction\n     * @returns {RawShapeContact | undefined}\n     */\n    contactShape(shapePos1, shapeRot1, shape2, shapePos2, shapeRot2, prediction) {\n        _assertClass(shapePos1, RawVector);\n        _assertClass(shapeRot1, RawRotation);\n        _assertClass(shape2, RawShape);\n        _assertClass(shapePos2, RawVector);\n        _assertClass(shapeRot2, RawRotation);\n        const ret = wasm.rawshape_contactShape(this.__wbg_ptr, shapePos1.__wbg_ptr, shapeRot1.__wbg_ptr, shape2.__wbg_ptr, shapePos2.__wbg_ptr, shapeRot2.__wbg_ptr, prediction);\n        return ret === 0 ? undefined : RawShapeContact.__wrap(ret);\n    }\n    /**\n     * @param {RawVector} shapePos\n     * @param {RawRotation} shapeRot\n     * @param {RawVector} point\n     * @returns {boolean}\n     */\n    containsPoint(shapePos, shapeRot, point) {\n        _assertClass(shapePos, RawVector);\n        _assertClass(shapeRot, RawRotation);\n        _assertClass(point, RawVector);\n        const ret = wasm.rawshape_containsPoint(this.__wbg_ptr, shapePos.__wbg_ptr, shapeRot.__wbg_ptr, point.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * @param {RawVector} shapePos\n     * @param {RawRotation} shapeRot\n     * @param {RawVector} point\n     * @param {boolean} solid\n     * @returns {RawPointProjection}\n     */\n    projectPoint(shapePos, shapeRot, point, solid) {\n        _assertClass(shapePos, RawVector);\n        _assertClass(shapeRot, RawRotation);\n        _assertClass(point, RawVector);\n        const ret = wasm.rawshape_projectPoint(this.__wbg_ptr, shapePos.__wbg_ptr, shapeRot.__wbg_ptr, point.__wbg_ptr, solid);\n        return RawPointProjection.__wrap(ret);\n    }\n    /**\n     * @param {RawVector} shapePos\n     * @param {RawRotation} shapeRot\n     * @param {RawVector} rayOrig\n     * @param {RawVector} rayDir\n     * @param {number} maxToi\n     * @returns {boolean}\n     */\n    intersectsRay(shapePos, shapeRot, rayOrig, rayDir, maxToi) {\n        _assertClass(shapePos, RawVector);\n        _assertClass(shapeRot, RawRotation);\n        _assertClass(rayOrig, RawVector);\n        _assertClass(rayDir, RawVector);\n        const ret = wasm.rawshape_intersectsRay(this.__wbg_ptr, shapePos.__wbg_ptr, shapeRot.__wbg_ptr, rayOrig.__wbg_ptr, rayDir.__wbg_ptr, maxToi);\n        return ret !== 0;\n    }\n    /**\n     * @param {RawVector} shapePos\n     * @param {RawRotation} shapeRot\n     * @param {RawVector} rayOrig\n     * @param {RawVector} rayDir\n     * @param {number} maxToi\n     * @param {boolean} solid\n     * @returns {number}\n     */\n    castRay(shapePos, shapeRot, rayOrig, rayDir, maxToi, solid) {\n        _assertClass(shapePos, RawVector);\n        _assertClass(shapeRot, RawRotation);\n        _assertClass(rayOrig, RawVector);\n        _assertClass(rayDir, RawVector);\n        const ret = wasm.rawshape_castRay(this.__wbg_ptr, shapePos.__wbg_ptr, shapeRot.__wbg_ptr, rayOrig.__wbg_ptr, rayDir.__wbg_ptr, maxToi, solid);\n        return ret;\n    }\n    /**\n     * @param {RawVector} shapePos\n     * @param {RawRotation} shapeRot\n     * @param {RawVector} rayOrig\n     * @param {RawVector} rayDir\n     * @param {number} maxToi\n     * @param {boolean} solid\n     * @returns {RawRayIntersection | undefined}\n     */\n    castRayAndGetNormal(shapePos, shapeRot, rayOrig, rayDir, maxToi, solid) {\n        _assertClass(shapePos, RawVector);\n        _assertClass(shapeRot, RawRotation);\n        _assertClass(rayOrig, RawVector);\n        _assertClass(rayDir, RawVector);\n        const ret = wasm.rawshape_castRayAndGetNormal(this.__wbg_ptr, shapePos.__wbg_ptr, shapeRot.__wbg_ptr, rayOrig.__wbg_ptr, rayDir.__wbg_ptr, maxToi, solid);\n        return ret === 0 ? undefined : RawRayIntersection.__wrap(ret);\n    }\n}\n\nconst RawShapeCastHitFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawshapecasthit_free(ptr >>> 0, 1));\n\nexport class RawShapeCastHit {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawShapeCastHit.prototype);\n        obj.__wbg_ptr = ptr;\n        RawShapeCastHitFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawShapeCastHitFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawshapecasthit_free(ptr, 0);\n    }\n    /**\n     * @returns {number}\n     */\n    time_of_impact() {\n        const ret = wasm.rawrotation_x(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {RawVector}\n     */\n    witness1() {\n        const ret = wasm.rawshapecasthit_witness1(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    witness2() {\n        const ret = wasm.rawcontactforceevent_total_force(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    normal1() {\n        const ret = wasm.rawshapecasthit_normal1(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    normal2() {\n        const ret = wasm.rawshapecasthit_normal2(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n}\n\nconst RawShapeContactFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawshapecontact_free(ptr >>> 0, 1));\n\nexport class RawShapeContact {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawShapeContact.prototype);\n        obj.__wbg_ptr = ptr;\n        RawShapeContactFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawShapeContactFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawshapecontact_free(ptr, 0);\n    }\n    /**\n     * @returns {number}\n     */\n    distance() {\n        const ret = wasm.rawkinematiccharactercontroller_maxSlopeClimbAngle(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * @returns {RawVector}\n     */\n    point1() {\n        const ret = wasm.rawpointprojection_point(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    point2() {\n        const ret = wasm.rawcollidershapecasthit_witness1(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    normal1() {\n        const ret = wasm.rawcollidershapecasthit_witness2(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * @returns {RawVector}\n     */\n    normal2() {\n        const ret = wasm.rawcharactercollision_translationDeltaApplied(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n}\n\nconst RawVectorFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rawvector_free(ptr >>> 0, 1));\n/**\n * A vector.\n */\nexport class RawVector {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RawVector.prototype);\n        obj.__wbg_ptr = ptr;\n        RawVectorFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RawVectorFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rawvector_free(ptr, 0);\n    }\n    /**\n     * Creates a new vector filled with zeros.\n     * @returns {RawVector}\n     */\n    static zero() {\n        const ret = wasm.rawvector_zero();\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * Creates a new 3D vector from its two components.\n     *\n     * # Parameters\n     * - `x`: the `x` component of this 3D vector.\n     * - `y`: the `y` component of this 3D vector.\n     * - `z`: the `z` component of this 3D vector.\n     * @param {number} x\n     * @param {number} y\n     * @param {number} z\n     */\n    constructor(x, y, z) {\n        const ret = wasm.rawvector_new(x, y, z);\n        this.__wbg_ptr = ret >>> 0;\n        RawVectorFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * The `x` component of this vector.\n     * @returns {number}\n     */\n    get x() {\n        const ret = wasm.rawrotation_x(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Sets the `x` component of this vector.\n     * @param {number} x\n     */\n    set x(x) {\n        wasm.rawvector_set_x(this.__wbg_ptr, x);\n    }\n    /**\n     * The `y` component of this vector.\n     * @returns {number}\n     */\n    get y() {\n        const ret = wasm.rawintegrationparameters_dt(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Sets the `y` component of this vector.\n     * @param {number} y\n     */\n    set y(y) {\n        wasm.rawintegrationparameters_set_dt(this.__wbg_ptr, y);\n    }\n    /**\n     * The `z` component of this vector.\n     * @returns {number}\n     */\n    get z() {\n        const ret = wasm.rawcollidershapecasthit_time_of_impact(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Sets the `z` component of this vector.\n     * @param {number} z\n     */\n    set z(z) {\n        wasm.rawvector_set_z(this.__wbg_ptr, z);\n    }\n    /**\n     * Create a new 3D vector from this vector with its components rearranged as `{x, y, z}`.\n     *\n     * This will effectively return a copy of `this`. This method exist for completeness with the\n     * other swizzling functions.\n     * @returns {RawVector}\n     */\n    xyz() {\n        const ret = wasm.rawvector_xyz(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * Create a new 3D vector from this vector with its components rearranged as `{y, x, z}`.\n     * @returns {RawVector}\n     */\n    yxz() {\n        const ret = wasm.rawvector_yxz(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * Create a new 3D vector from this vector with its components rearranged as `{z, x, y}`.\n     * @returns {RawVector}\n     */\n    zxy() {\n        const ret = wasm.rawvector_zxy(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * Create a new 3D vector from this vector with its components rearranged as `{x, z, y}`.\n     * @returns {RawVector}\n     */\n    xzy() {\n        const ret = wasm.rawvector_xzy(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * Create a new 3D vector from this vector with its components rearranged as `{y, z, x}`.\n     * @returns {RawVector}\n     */\n    yzx() {\n        const ret = wasm.rawvector_yzx(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n    /**\n     * Create a new 3D vector from this vector with its components rearranged as `{z, y, x}`.\n     * @returns {RawVector}\n     */\n    zyx() {\n        const ret = wasm.rawvector_zyx(this.__wbg_ptr);\n        return RawVector.__wrap(ret);\n    }\n}\n\nexport function __wbg_bind_c8359b1cba058168(arg0, arg1, arg2, arg3) {\n    const ret = getObject(arg0).bind(getObject(arg1), getObject(arg2), getObject(arg3));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_buffer_609cc3eee51ed158(arg0) {\n    const ret = getObject(arg0).buffer;\n    return addHeapObject(ret);\n};\n\nexport function __wbg_call_7cccdd69e0791ae2() { return handleError(function (arg0, arg1, arg2) {\n    const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_call_833bed5770ea2041() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = getObject(arg0).call(getObject(arg1), getObject(arg2), getObject(arg3));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_call_b8adc8b1d0a0d8eb() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n    const ret = getObject(arg0).call(getObject(arg1), getObject(arg2), getObject(arg3), getObject(arg4));\n    return addHeapObject(ret);\n}, arguments) };\n\nexport function __wbg_length_3b4f022188ae8db6(arg0) {\n    const ret = getObject(arg0).length;\n    return ret;\n};\n\nexport function __wbg_length_a446193dc22c12f8(arg0) {\n    const ret = getObject(arg0).length;\n    return ret;\n};\n\nexport function __wbg_new_a12002a7f91c75be(arg0) {\n    const ret = new Uint8Array(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_newwithbyteoffsetandlength_d97e637ebe145a9a(arg0, arg1, arg2) {\n    const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_newwithbyteoffsetandlength_e6b7e69acd4c7354(arg0, arg1, arg2) {\n    const ret = new Float32Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_newwithlength_5a5efe313cfd59f1(arg0) {\n    const ret = new Float32Array(arg0 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_rawcontactforceevent_new(arg0) {\n    const ret = RawContactForceEvent.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_rawraycolliderintersection_new(arg0) {\n    const ret = RawRayColliderIntersection.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nexport function __wbg_set_10bad9bee0e9c58b(arg0, arg1, arg2) {\n    getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n};\n\nexport function __wbg_set_65595bdd868b3009(arg0, arg1, arg2) {\n    getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n};\n\nexport function __wbindgen_boolean_get(arg0) {\n    const v = getObject(arg0);\n    const ret = typeof(v) === 'boolean' ? (v ? 1 : 0) : 2;\n    return ret;\n};\n\nexport function __wbindgen_is_function(arg0) {\n    const ret = typeof(getObject(arg0)) === 'function';\n    return ret;\n};\n\nexport function __wbindgen_memory() {\n    const ret = wasm.memory;\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_number_get(arg0, arg1) {\n    const obj = getObject(arg1);\n    const ret = typeof(obj) === 'number' ? obj : undefined;\n    getDataViewMemory0().setFloat64(arg0 + 8 * 1, isLikeNone(ret) ? 0 : ret, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);\n};\n\nexport function __wbindgen_number_new(arg0) {\n    const ret = arg0;\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_object_drop_ref(arg0) {\n    takeObject(arg0);\n};\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n","import { RawBroadPhase } from \"../raw\";\n/**\n * The broad-phase used for coarse collision-detection.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `broadPhase.free()`\n * once you are done using it.\n */\nexport class BroadPhase {\n    /**\n     * Release the WASM memory occupied by this broad-phase.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n    constructor(raw) {\n        this.raw = raw || new RawBroadPhase();\n    }\n}\n//# sourceMappingURL=broad_phase.js.map","import { RawIntegrationParameters } from \"../raw\";\nexport class IntegrationParameters {\n    constructor(raw) {\n        this.raw = raw || new RawIntegrationParameters();\n    }\n    /**\n     * Free the WASM memory used by these integration parameters.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n    /**\n     * The timestep length (default: `1.0 / 60.0`)\n     */\n    get dt() {\n        return this.raw.dt;\n    }\n    /**\n     * The Error Reduction Parameter in `[0, 1]` is the proportion of\n     * the positional error to be corrected at each time step (default: `0.2`).\n     */\n    get contact_erp() {\n        return this.raw.contact_erp;\n    }\n    get lengthUnit() {\n        return this.raw.lengthUnit;\n    }\n    /**\n     * Normalized amount of penetration the engine won’t attempt to correct (default: `0.001m`).\n     *\n     * This threshold considered by the physics engine is this value multiplied by the `lengthUnit`.\n     */\n    get normalizedAllowedLinearError() {\n        return this.raw.normalizedAllowedLinearError;\n    }\n    /**\n     * The maximal normalized distance separating two objects that will generate predictive contacts (default: `0.002`).\n     *\n     * This threshold considered by the physics engine is this value multiplied by the `lengthUnit`.\n     */\n    get normalizedPredictionDistance() {\n        return this.raw.normalizedPredictionDistance;\n    }\n    /**\n     * The number of solver iterations run by the constraints solver for calculating forces (default: `4`).\n     */\n    get numSolverIterations() {\n        return this.raw.numSolverIterations;\n    }\n    /**\n     * Number of addition friction resolution iteration run during the last solver sub-step (default: `4`).\n     */\n    get numAdditionalFrictionIterations() {\n        return this.raw.numAdditionalFrictionIterations;\n    }\n    /**\n     * Number of internal Project Gauss Seidel (PGS) iterations run at each solver iteration (default: `1`).\n     */\n    get numInternalPgsIterations() {\n        return this.raw.numInternalPgsIterations;\n    }\n    /**\n     * Minimum number of dynamic bodies in each active island (default: `128`).\n     */\n    get minIslandSize() {\n        return this.raw.minIslandSize;\n    }\n    /**\n     * Maximum number of substeps performed by the  solver (default: `1`).\n     */\n    get maxCcdSubsteps() {\n        return this.raw.maxCcdSubsteps;\n    }\n    set dt(value) {\n        this.raw.dt = value;\n    }\n    set contact_natural_frequency(value) {\n        this.raw.contact_natural_frequency = value;\n    }\n    set lengthUnit(value) {\n        this.raw.lengthUnit = value;\n    }\n    set normalizedAllowedLinearError(value) {\n        this.raw.normalizedAllowedLinearError = value;\n    }\n    set normalizedPredictionDistance(value) {\n        this.raw.normalizedPredictionDistance = value;\n    }\n    /**\n     * Sets the number of solver iterations run by the constraints solver for calculating forces (default: `4`).\n     */\n    set numSolverIterations(value) {\n        this.raw.numSolverIterations = value;\n    }\n    /**\n     * Sets the number of addition friction resolution iteration run during the last solver sub-step (default: `4`).\n     */\n    set numAdditionalFrictionIterations(value) {\n        this.raw.numAdditionalFrictionIterations = value;\n    }\n    /**\n     * Sets the number of internal Project Gauss Seidel (PGS) iterations run at each solver iteration (default: `1`).\n     */\n    set numInternalPgsIterations(value) {\n        this.raw.numInternalPgsIterations = value;\n    }\n    set minIslandSize(value) {\n        this.raw.minIslandSize = value;\n    }\n    set maxCcdSubsteps(value) {\n        this.raw.maxCcdSubsteps = value;\n    }\n    switchToStandardPgsSolver() {\n        this.raw.switchToStandardPgsSolver();\n    }\n    switchToSmallStepsPgsSolver() {\n        this.raw.switchToSmallStepsPgsSolver();\n    }\n    switchToSmallStepsPgsSolverWithoutWarmstart() {\n        this.raw.switchToSmallStepsPgsSolverWithoutWarmstart();\n    }\n}\n//# sourceMappingURL=integration_parameters.js.map","import { RawDynamicRayCastVehicleController } from \"../raw\";\nimport { VectorOps } from \"../math\";\n/**\n * A character controller to simulate vehicles using ray-casting for the wheels.\n */\nexport class DynamicRayCastVehicleController {\n    constructor(chassis, bodies, colliders, queries) {\n        this.raw = new RawDynamicRayCastVehicleController(chassis.handle);\n        this.bodies = bodies;\n        this.colliders = colliders;\n        this.queries = queries;\n        this._chassis = chassis;\n    }\n    /** @internal */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n    /**\n     * Updates the vehicle’s velocity based on its suspension, engine force, and brake.\n     *\n     * This directly updates the velocity of its chassis rigid-body.\n     *\n     * @param dt - Time increment used to integrate forces.\n     * @param filterFlags - Flag to exclude categories of objects from the wheels’ ray-cast.\n     * @param filterGroups - Only colliders compatible with these groups will be hit by the wheels’ ray-casts.\n     * @param filterPredicate - Callback to filter out which collider will be hit by the wheels’ ray-casts.\n     */\n    updateVehicle(dt, filterFlags, filterGroups, filterPredicate) {\n        this.raw.update_vehicle(dt, this.bodies.raw, this.colliders.raw, this.queries.raw, filterFlags, filterGroups, this.colliders.castClosure(filterPredicate));\n    }\n    /**\n     * The current forward speed of the vehicle.\n     */\n    currentVehicleSpeed() {\n        return this.raw.current_vehicle_speed();\n    }\n    /**\n     * The rigid-body used as the chassis.\n     */\n    chassis() {\n        return this._chassis;\n    }\n    /**\n     * The chassis’ local _up_ direction (`0 = x, 1 = y, 2 = z`).\n     */\n    get indexUpAxis() {\n        return this.raw.index_up_axis();\n    }\n    /**\n     * Sets the chassis’ local _up_ direction (`0 = x, 1 = y, 2 = z`).\n     */\n    set indexUpAxis(axis) {\n        this.raw.set_index_up_axis(axis);\n    }\n    /**\n     * The chassis’ local _forward_ direction (`0 = x, 1 = y, 2 = z`).\n     */\n    get indexForwardAxis() {\n        return this.raw.index_forward_axis();\n    }\n    /**\n     * Sets the chassis’ local _forward_ direction (`0 = x, 1 = y, 2 = z`).\n     */\n    set setIndexForwardAxis(axis) {\n        this.raw.set_index_forward_axis(axis);\n    }\n    /**\n     * Adds a new wheel attached to this vehicle.\n     * @param chassisConnectionCs  - The position of the wheel relative to the chassis.\n     * @param directionCs - The direction of the wheel’s suspension, relative to the chassis. The ray-casting will\n     *                      happen following this direction to detect the ground.\n     * @param axleCs - The wheel’s axle axis, relative to the chassis.\n     * @param suspensionRestLength - The rest length of the wheel’s suspension spring.\n     * @param radius - The wheel’s radius.\n     */\n    addWheel(chassisConnectionCs, directionCs, axleCs, suspensionRestLength, radius) {\n        let rawChassisConnectionCs = VectorOps.intoRaw(chassisConnectionCs);\n        let rawDirectionCs = VectorOps.intoRaw(directionCs);\n        let rawAxleCs = VectorOps.intoRaw(axleCs);\n        this.raw.add_wheel(rawChassisConnectionCs, rawDirectionCs, rawAxleCs, suspensionRestLength, radius);\n        rawChassisConnectionCs.free();\n        rawDirectionCs.free();\n        rawAxleCs.free();\n    }\n    /**\n     * The number of wheels attached to this vehicle.\n     */\n    numWheels() {\n        return this.raw.num_wheels();\n    }\n    /*\n     *\n     * Access to wheel properties.\n     *\n     */\n    /*\n     * Getters + setters\n     */\n    /**\n     * The position of the i-th wheel, relative to the chassis.\n     */\n    wheelChassisConnectionPointCs(i) {\n        return VectorOps.fromRaw(this.raw.wheel_chassis_connection_point_cs(i));\n    }\n    /**\n     * Sets the position of the i-th wheel, relative to the chassis.\n     */\n    setWheelChassisConnectionPointCs(i, value) {\n        let rawValue = VectorOps.intoRaw(value);\n        this.raw.set_wheel_chassis_connection_point_cs(i, rawValue);\n        rawValue.free();\n    }\n    /**\n     * The rest length of the i-th wheel’s suspension spring.\n     */\n    wheelSuspensionRestLength(i) {\n        return this.raw.wheel_suspension_rest_length(i);\n    }\n    /**\n     * Sets the rest length of the i-th wheel’s suspension spring.\n     */\n    setWheelSuspensionRestLength(i, value) {\n        this.raw.set_wheel_suspension_rest_length(i, value);\n    }\n    /**\n     * The maximum distance the i-th wheel suspension can travel before and after its resting length.\n     */\n    wheelMaxSuspensionTravel(i) {\n        return this.raw.wheel_max_suspension_travel(i);\n    }\n    /**\n     * Sets the maximum distance the i-th wheel suspension can travel before and after its resting length.\n     */\n    setWheelMaxSuspensionTravel(i, value) {\n        this.raw.set_wheel_max_suspension_travel(i, value);\n    }\n    /**\n     * The i-th wheel’s radius.\n     */\n    wheelRadius(i) {\n        return this.raw.wheel_radius(i);\n    }\n    /**\n     * Sets the i-th wheel’s radius.\n     */\n    setWheelRadius(i, value) {\n        this.raw.set_wheel_radius(i, value);\n    }\n    /**\n     * The i-th wheel’s suspension stiffness.\n     *\n     * Increase this value if the suspension appears to not push the vehicle strong enough.\n     */\n    wheelSuspensionStiffness(i) {\n        return this.raw.wheel_suspension_stiffness(i);\n    }\n    /**\n     * Sets the i-th wheel’s suspension stiffness.\n     *\n     * Increase this value if the suspension appears to not push the vehicle strong enough.\n     */\n    setWheelSuspensionStiffness(i, value) {\n        this.raw.set_wheel_suspension_stiffness(i, value);\n    }\n    /**\n     * The i-th wheel’s suspension’s damping when it is being compressed.\n     */\n    wheelSuspensionCompression(i) {\n        return this.raw.wheel_suspension_compression(i);\n    }\n    /**\n     * The i-th wheel’s suspension’s damping when it is being compressed.\n     */\n    setWheelSuspensionCompression(i, value) {\n        this.raw.set_wheel_suspension_compression(i, value);\n    }\n    /**\n     * The i-th wheel’s suspension’s damping when it is being released.\n     *\n     * Increase this value if the suspension appears to overshoot.\n     */\n    wheelSuspensionRelaxation(i) {\n        return this.raw.wheel_suspension_relaxation(i);\n    }\n    /**\n     * Sets the i-th wheel’s suspension’s damping when it is being released.\n     *\n     * Increase this value if the suspension appears to overshoot.\n     */\n    setWheelSuspensionRelaxation(i, value) {\n        this.raw.set_wheel_suspension_relaxation(i, value);\n    }\n    /**\n     * The maximum force applied by the i-th wheel’s suspension.\n     */\n    wheelMaxSuspensionForce(i) {\n        return this.raw.wheel_max_suspension_force(i);\n    }\n    /**\n     * Sets the maximum force applied by the i-th wheel’s suspension.\n     */\n    setWheelMaxSuspensionForce(i, value) {\n        this.raw.set_wheel_max_suspension_force(i, value);\n    }\n    /**\n     * The maximum amount of braking impulse applied on the i-th wheel to slow down the vehicle.\n     */\n    wheelBrake(i) {\n        return this.raw.wheel_brake(i);\n    }\n    /**\n     * Set the maximum amount of braking impulse applied on the i-th wheel to slow down the vehicle.\n     */\n    setWheelBrake(i, value) {\n        this.raw.set_wheel_brake(i, value);\n    }\n    /**\n     * The steering angle (radians) for the i-th wheel.\n     */\n    wheelSteering(i) {\n        return this.raw.wheel_steering(i);\n    }\n    /**\n     * Sets the steering angle (radians) for the i-th wheel.\n     */\n    setWheelSteering(i, value) {\n        this.raw.set_wheel_steering(i, value);\n    }\n    /**\n     * The forward force applied by the i-th wheel on the chassis.\n     */\n    wheelEngineForce(i) {\n        return this.raw.wheel_engine_force(i);\n    }\n    /**\n     * Sets the forward force applied by the i-th wheel on the chassis.\n     */\n    setWheelEngineForce(i, value) {\n        this.raw.set_wheel_engine_force(i, value);\n    }\n    /**\n     * The direction of the i-th wheel’s suspension, relative to the chassis.\n     *\n     * The ray-casting will happen following this direction to detect the ground.\n     */\n    wheelDirectionCs(i) {\n        return VectorOps.fromRaw(this.raw.wheel_direction_cs(i));\n    }\n    /**\n     * Sets the direction of the i-th wheel’s suspension, relative to the chassis.\n     *\n     * The ray-casting will happen following this direction to detect the ground.\n     */\n    setWheelDirectionCs(i, value) {\n        let rawValue = VectorOps.intoRaw(value);\n        this.raw.set_wheel_direction_cs(i, rawValue);\n        rawValue.free();\n    }\n    /**\n     * The i-th wheel’s axle axis, relative to the chassis.\n     *\n     * The axis index defined as 0 = X, 1 = Y, 2 = Z.\n     */\n    wheelAxleCs(i) {\n        return VectorOps.fromRaw(this.raw.wheel_axle_cs(i));\n    }\n    /**\n     * Sets the i-th wheel’s axle axis, relative to the chassis.\n     *\n     * The axis index defined as 0 = X, 1 = Y, 2 = Z.\n     */\n    setWheelAxleCs(i, value) {\n        let rawValue = VectorOps.intoRaw(value);\n        this.raw.set_wheel_axle_cs(i, rawValue);\n        rawValue.free();\n    }\n    /**\n     * Parameter controlling how much traction the tire has.\n     *\n     * The larger the value, the more instantaneous braking will happen (with the risk of\n     * causing the vehicle to flip if it’s too strong).\n     */\n    wheelFrictionSlip(i) {\n        return this.raw.wheel_friction_slip(i);\n    }\n    /**\n     * Sets the parameter controlling how much traction the tire has.\n     *\n     * The larger the value, the more instantaneous braking will happen (with the risk of\n     * causing the vehicle to flip if it’s too strong).\n     */\n    setWheelFrictionSlip(i, value) {\n        this.raw.set_wheel_friction_slip(i, value);\n    }\n    /**\n     * The multiplier of friction between a tire and the collider it’s on top of.\n     *\n     * The larger the value, the stronger side friction will be.\n     */\n    wheelSideFrictionStiffness(i) {\n        return this.raw.wheel_side_friction_stiffness(i);\n    }\n    /**\n     * The multiplier of friction between a tire and the collider it’s on top of.\n     *\n     * The larger the value, the stronger side friction will be.\n     */\n    setWheelSideFrictionStiffness(i, value) {\n        this.raw.set_wheel_side_friction_stiffness(i, value);\n    }\n    /*\n     * Getters only.\n     */\n    /**\n     *  The i-th wheel’s current rotation angle (radians) on its axle.\n     */\n    wheelRotation(i) {\n        return this.raw.wheel_rotation(i);\n    }\n    /**\n     *  The forward impulses applied by the i-th wheel on the chassis.\n     */\n    wheelForwardImpulse(i) {\n        return this.raw.wheel_forward_impulse(i);\n    }\n    /**\n     *  The side impulses applied by the i-th wheel on the chassis.\n     */\n    wheelSideImpulse(i) {\n        return this.raw.wheel_side_impulse(i);\n    }\n    /**\n     *  The force applied by the i-th wheel suspension.\n     */\n    wheelSuspensionForce(i) {\n        return this.raw.wheel_suspension_force(i);\n    }\n    /**\n     *  The (world-space) contact normal between the i-th wheel and the floor.\n     */\n    wheelContactNormal(i) {\n        return VectorOps.fromRaw(this.raw.wheel_contact_normal_ws(i));\n    }\n    /**\n     *  The (world-space) point hit by the wheel’s ray-cast for the i-th wheel.\n     */\n    wheelContactPoint(i) {\n        return VectorOps.fromRaw(this.raw.wheel_contact_point_ws(i));\n    }\n    /**\n     *  The suspension length for the i-th wheel.\n     */\n    wheelSuspensionLength(i) {\n        return this.raw.wheel_suspension_length(i);\n    }\n    /**\n     *  The (world-space) starting point of the ray-cast for the i-th wheel.\n     */\n    wheelHardPoint(i) {\n        return VectorOps.fromRaw(this.raw.wheel_hard_point_ws(i));\n    }\n    /**\n     *  Is the i-th wheel in contact with the ground?\n     */\n    wheelIsInContact(i) {\n        return this.raw.wheel_is_in_contact(i);\n    }\n    /**\n     *  The collider hit by the ray-cast for the i-th wheel.\n     */\n    wheelGroundObject(i) {\n        return this.colliders.get(this.raw.wheel_ground_object(i));\n    }\n}\n//# sourceMappingURL=ray_cast_vehicle_controller.js.map","import { VectorOps } from \"../math\";\n/**\n * The contact info between two shapes.\n */\nexport class ShapeContact {\n    constructor(dist, point1, point2, normal1, normal2) {\n        this.distance = dist;\n        this.point1 = point1;\n        this.point2 = point2;\n        this.normal1 = normal1;\n        this.normal2 = normal2;\n    }\n    static fromRaw(raw) {\n        if (!raw)\n            return null;\n        const result = new ShapeContact(raw.distance(), VectorOps.fromRaw(raw.point1()), VectorOps.fromRaw(raw.point2()), VectorOps.fromRaw(raw.normal1()), VectorOps.fromRaw(raw.normal2()));\n        raw.free();\n        return result;\n    }\n}\n//# sourceMappingURL=contact.js.map","import { RawNarrowPhase } from \"../raw\";\nimport { VectorOps } from \"../math\";\n/**\n * The narrow-phase used for precise collision-detection.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `narrowPhase.free()`\n * once you are done using it.\n */\nexport class NarrowPhase {\n    /**\n     * Release the WASM memory occupied by this narrow-phase.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n    constructor(raw) {\n        this.raw = raw || new RawNarrowPhase();\n        this.tempManifold = new TempContactManifold(null);\n    }\n    /**\n     * Enumerates all the colliders potentially in contact with the given collider.\n     *\n     * @param collider1 - The second collider involved in the contact.\n     * @param f - Closure that will be called on each collider that is in contact with `collider1`.\n     */\n    contactPairsWith(collider1, f) {\n        this.raw.contact_pairs_with(collider1, f);\n    }\n    /**\n     * Enumerates all the colliders intersecting the given colliders, assuming one of them\n     * is a sensor.\n     */\n    intersectionPairsWith(collider1, f) {\n        this.raw.intersection_pairs_with(collider1, f);\n    }\n    /**\n     * Iterates through all the contact manifolds between the given pair of colliders.\n     *\n     * @param collider1 - The first collider involved in the contact.\n     * @param collider2 - The second collider involved in the contact.\n     * @param f - Closure that will be called on each contact manifold between the two colliders. If the second argument\n     *            passed to this closure is `true`, then the contact manifold data is flipped, i.e., methods like `localNormal1`\n     *            actually apply to the `collider2` and fields like `localNormal2` apply to the `collider1`.\n     */\n    contactPair(collider1, collider2, f) {\n        const rawPair = this.raw.contact_pair(collider1, collider2);\n        if (!!rawPair) {\n            const flipped = rawPair.collider1() != collider1;\n            let i;\n            for (i = 0; i < rawPair.numContactManifolds(); ++i) {\n                this.tempManifold.raw = rawPair.contactManifold(i);\n                if (!!this.tempManifold.raw) {\n                    f(this.tempManifold, flipped);\n                }\n                // SAFETY: The RawContactManifold stores a raw pointer that will be invalidated\n                //         at the next timestep. So we must be sure to free the pair here\n                //         to avoid unsoundness in the Rust code.\n                this.tempManifold.free();\n            }\n            rawPair.free();\n        }\n    }\n    /**\n     * Returns `true` if `collider1` and `collider2` intersect and at least one of them is a sensor.\n     * @param collider1 − The first collider involved in the intersection.\n     * @param collider2 − The second collider involved in the intersection.\n     */\n    intersectionPair(collider1, collider2) {\n        return this.raw.intersection_pair(collider1, collider2);\n    }\n}\nexport class TempContactManifold {\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n    constructor(raw) {\n        this.raw = raw;\n    }\n    normal() {\n        return VectorOps.fromRaw(this.raw.normal());\n    }\n    localNormal1() {\n        return VectorOps.fromRaw(this.raw.local_n1());\n    }\n    localNormal2() {\n        return VectorOps.fromRaw(this.raw.local_n2());\n    }\n    subshape1() {\n        return this.raw.subshape1();\n    }\n    subshape2() {\n        return this.raw.subshape2();\n    }\n    numContacts() {\n        return this.raw.num_contacts();\n    }\n    localContactPoint1(i) {\n        return VectorOps.fromRaw(this.raw.contact_local_p1(i));\n    }\n    localContactPoint2(i) {\n        return VectorOps.fromRaw(this.raw.contact_local_p2(i));\n    }\n    contactDist(i) {\n        return this.raw.contact_dist(i);\n    }\n    contactFid1(i) {\n        return this.raw.contact_fid1(i);\n    }\n    contactFid2(i) {\n        return this.raw.contact_fid2(i);\n    }\n    contactImpulse(i) {\n        return this.raw.contact_impulse(i);\n    }\n    // #if DIM3\n    contactTangentImpulseX(i) {\n        return this.raw.contact_tangent_impulse_x(i);\n    }\n    contactTangentImpulseY(i) {\n        return this.raw.contact_tangent_impulse_y(i);\n    }\n    // #endif\n    numSolverContacts() {\n        return this.raw.num_solver_contacts();\n    }\n    solverContactPoint(i) {\n        return VectorOps.fromRaw(this.raw.solver_contact_point(i));\n    }\n    solverContactDist(i) {\n        return this.raw.solver_contact_dist(i);\n    }\n    solverContactFriction(i) {\n        return this.raw.solver_contact_friction(i);\n    }\n    solverContactRestitution(i) {\n        return this.raw.solver_contact_restitution(i);\n    }\n    solverContactTangentVelocity(i) {\n        return VectorOps.fromRaw(this.raw.solver_contact_tangent_velocity(i));\n    }\n}\n//# sourceMappingURL=narrow_phase.js.map","import { RawQueryPipeline } from \"../raw\";\nimport { PointColliderProjection, RayColliderIntersection, RayColliderHit, ColliderShapeCastHit, } from \"../geometry\";\nimport { RotationOps, VectorOps } from \"../math\";\n// NOTE: must match the bits in the QueryFilterFlags on the Rust side.\n/**\n * Flags for excluding whole sets of colliders from a scene query.\n */\nexport var QueryFilterFlags;\n(function (QueryFilterFlags) {\n    /**\n     * Exclude from the query any collider attached to a fixed rigid-body and colliders with no rigid-body attached.\n     */\n    QueryFilterFlags[QueryFilterFlags[\"EXCLUDE_FIXED\"] = 1] = \"EXCLUDE_FIXED\";\n    /**\n     * Exclude from the query any collider attached to a dynamic rigid-body.\n     */\n    QueryFilterFlags[QueryFilterFlags[\"EXCLUDE_KINEMATIC\"] = 2] = \"EXCLUDE_KINEMATIC\";\n    /**\n     * Exclude from the query any collider attached to a kinematic rigid-body.\n     */\n    QueryFilterFlags[QueryFilterFlags[\"EXCLUDE_DYNAMIC\"] = 4] = \"EXCLUDE_DYNAMIC\";\n    /**\n     * Exclude from the query any collider that is a sensor.\n     */\n    QueryFilterFlags[QueryFilterFlags[\"EXCLUDE_SENSORS\"] = 8] = \"EXCLUDE_SENSORS\";\n    /**\n     * Exclude from the query any collider that is not a sensor.\n     */\n    QueryFilterFlags[QueryFilterFlags[\"EXCLUDE_SOLIDS\"] = 16] = \"EXCLUDE_SOLIDS\";\n    /**\n     * Excludes all colliders not attached to a dynamic rigid-body.\n     */\n    QueryFilterFlags[QueryFilterFlags[\"ONLY_DYNAMIC\"] = 3] = \"ONLY_DYNAMIC\";\n    /**\n     * Excludes all colliders not attached to a kinematic rigid-body.\n     */\n    QueryFilterFlags[QueryFilterFlags[\"ONLY_KINEMATIC\"] = 5] = \"ONLY_KINEMATIC\";\n    /**\n     * Exclude all colliders attached to a non-fixed rigid-body\n     * (this will not exclude colliders not attached to any rigid-body).\n     */\n    QueryFilterFlags[QueryFilterFlags[\"ONLY_FIXED\"] = 6] = \"ONLY_FIXED\";\n})(QueryFilterFlags || (QueryFilterFlags = {}));\n/**\n * A pipeline for performing queries on all the colliders of a scene.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `queryPipeline.free()`\n * once you are done using it (and all the rigid-bodies it created).\n */\nexport class QueryPipeline {\n    /**\n     * Release the WASM memory occupied by this query pipeline.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n    constructor(raw) {\n        this.raw = raw || new RawQueryPipeline();\n    }\n    /**\n     * Updates the acceleration structure of the query pipeline.\n     * @param colliders - The set of colliders taking part in this pipeline.\n     */\n    update(colliders) {\n        this.raw.update(colliders.raw);\n    }\n    /**\n     * Find the closest intersection between a ray and a set of collider.\n     *\n     * @param colliders - The set of colliders taking part in this pipeline.\n     * @param ray - The ray to cast.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the length of the ray to `ray.dir.norm() * maxToi`.\n     * @param solid - If `false` then the ray will attempt to hit the boundary of a shape, even if its\n     *   origin already lies inside of a shape. In other terms, `true` implies that all shapes are plain,\n     *   whereas `false` implies that all shapes are hollow for this ray-cast.\n     * @param groups - Used to filter the colliders that can or cannot be hit by the ray.\n     * @param filter - The callback to filter out which collider will be hit.\n     */\n    castRay(bodies, colliders, ray, maxToi, solid, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        let rawOrig = VectorOps.intoRaw(ray.origin);\n        let rawDir = VectorOps.intoRaw(ray.dir);\n        let result = RayColliderHit.fromRaw(colliders, this.raw.castRay(bodies.raw, colliders.raw, rawOrig, rawDir, maxToi, solid, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate));\n        rawOrig.free();\n        rawDir.free();\n        return result;\n    }\n    /**\n     * Find the closest intersection between a ray and a set of collider.\n     *\n     * This also computes the normal at the hit point.\n     * @param colliders - The set of colliders taking part in this pipeline.\n     * @param ray - The ray to cast.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the length of the ray to `ray.dir.norm() * maxToi`.\n     * @param solid - If `false` then the ray will attempt to hit the boundary of a shape, even if its\n     *   origin already lies inside of a shape. In other terms, `true` implies that all shapes are plain,\n     *   whereas `false` implies that all shapes are hollow for this ray-cast.\n     * @param groups - Used to filter the colliders that can or cannot be hit by the ray.\n     */\n    castRayAndGetNormal(bodies, colliders, ray, maxToi, solid, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        let rawOrig = VectorOps.intoRaw(ray.origin);\n        let rawDir = VectorOps.intoRaw(ray.dir);\n        let result = RayColliderIntersection.fromRaw(colliders, this.raw.castRayAndGetNormal(bodies.raw, colliders.raw, rawOrig, rawDir, maxToi, solid, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate));\n        rawOrig.free();\n        rawDir.free();\n        return result;\n    }\n    /**\n     * Cast a ray and collects all the intersections between a ray and the scene.\n     *\n     * @param colliders - The set of colliders taking part in this pipeline.\n     * @param ray - The ray to cast.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the length of the ray to `ray.dir.norm() * maxToi`.\n     * @param solid - If `false` then the ray will attempt to hit the boundary of a shape, even if its\n     *   origin already lies inside of a shape. In other terms, `true` implies that all shapes are plain,\n     *   whereas `false` implies that all shapes are hollow for this ray-cast.\n     * @param groups - Used to filter the colliders that can or cannot be hit by the ray.\n     * @param callback - The callback called once per hit (in no particular order) between a ray and a collider.\n     *   If this callback returns `false`, then the cast will stop and no further hits will be detected/reported.\n     */\n    intersectionsWithRay(bodies, colliders, ray, maxToi, solid, callback, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        let rawOrig = VectorOps.intoRaw(ray.origin);\n        let rawDir = VectorOps.intoRaw(ray.dir);\n        let rawCallback = (rawInter) => {\n            return callback(RayColliderIntersection.fromRaw(colliders, rawInter));\n        };\n        this.raw.intersectionsWithRay(bodies.raw, colliders.raw, rawOrig, rawDir, maxToi, solid, rawCallback, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate);\n        rawOrig.free();\n        rawDir.free();\n    }\n    /**\n     * Gets the handle of up to one collider intersecting the given shape.\n     *\n     * @param colliders - The set of colliders taking part in this pipeline.\n     * @param shapePos - The position of the shape used for the intersection test.\n     * @param shapeRot - The orientation of the shape used for the intersection test.\n     * @param shape - The shape used for the intersection test.\n     * @param groups - The bit groups and filter associated to the ray, in order to only\n     *   hit the colliders with collision groups compatible with the ray's group.\n     */\n    intersectionWithShape(bodies, colliders, shapePos, shapeRot, shape, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        let rawPos = VectorOps.intoRaw(shapePos);\n        let rawRot = RotationOps.intoRaw(shapeRot);\n        let rawShape = shape.intoRaw();\n        let result = this.raw.intersectionWithShape(bodies.raw, colliders.raw, rawPos, rawRot, rawShape, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate);\n        rawPos.free();\n        rawRot.free();\n        rawShape.free();\n        return result;\n    }\n    /**\n     * Find the projection of a point on the closest collider.\n     *\n     * @param colliders - The set of colliders taking part in this pipeline.\n     * @param point - The point to project.\n     * @param solid - If this is set to `true` then the collider shapes are considered to\n     *   be plain (if the point is located inside of a plain shape, its projection is the point\n     *   itself). If it is set to `false` the collider shapes are considered to be hollow\n     *   (if the point is located inside of an hollow shape, it is projected on the shape's\n     *   boundary).\n     * @param groups - The bit groups and filter associated to the point to project, in order to only\n     *   project on colliders with collision groups compatible with the ray's group.\n     */\n    projectPoint(bodies, colliders, point, solid, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        let rawPoint = VectorOps.intoRaw(point);\n        let result = PointColliderProjection.fromRaw(colliders, this.raw.projectPoint(bodies.raw, colliders.raw, rawPoint, solid, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate));\n        rawPoint.free();\n        return result;\n    }\n    /**\n     * Find the projection of a point on the closest collider.\n     *\n     * @param colliders - The set of colliders taking part in this pipeline.\n     * @param point - The point to project.\n     * @param groups - The bit groups and filter associated to the point to project, in order to only\n     *   project on colliders with collision groups compatible with the ray's group.\n     */\n    projectPointAndGetFeature(bodies, colliders, point, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        let rawPoint = VectorOps.intoRaw(point);\n        let result = PointColliderProjection.fromRaw(colliders, this.raw.projectPointAndGetFeature(bodies.raw, colliders.raw, rawPoint, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate));\n        rawPoint.free();\n        return result;\n    }\n    /**\n     * Find all the colliders containing the given point.\n     *\n     * @param colliders - The set of colliders taking part in this pipeline.\n     * @param point - The point used for the containment test.\n     * @param groups - The bit groups and filter associated to the point to test, in order to only\n     *   test on colliders with collision groups compatible with the ray's group.\n     * @param callback - A function called with the handles of each collider with a shape\n     *   containing the `point`.\n     */\n    intersectionsWithPoint(bodies, colliders, point, callback, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        let rawPoint = VectorOps.intoRaw(point);\n        this.raw.intersectionsWithPoint(bodies.raw, colliders.raw, rawPoint, callback, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate);\n        rawPoint.free();\n    }\n    /**\n     * Casts a shape at a constant linear velocity and retrieve the first collider it hits.\n     * This is similar to ray-casting except that we are casting a whole shape instead of\n     * just a point (the ray origin).\n     *\n     * @param colliders - The set of colliders taking part in this pipeline.\n     * @param shapePos - The initial position of the shape to cast.\n     * @param shapeRot - The initial rotation of the shape to cast.\n     * @param shapeVel - The constant velocity of the shape to cast (i.e. the cast direction).\n     * @param shape - The shape to cast.\n     * @param targetDistance − If the shape moves closer to this distance from a collider, a hit\n     *                       will be returned.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the distance traveled by the shape to `shapeVel.norm() * maxToi`.\n     * @param stopAtPenetration - If set to `false`, the linear shape-cast won’t immediately stop if\n     *   the shape is penetrating another shape at its starting point **and** its trajectory is such\n     *   that it’s on a path to exit that penetration state.\n     * @param groups - The bit groups and filter associated to the shape to cast, in order to only\n     *   test on colliders with collision groups compatible with this group.\n     */\n    castShape(bodies, colliders, shapePos, shapeRot, shapeVel, shape, targetDistance, maxToi, stopAtPenetration, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        let rawPos = VectorOps.intoRaw(shapePos);\n        let rawRot = RotationOps.intoRaw(shapeRot);\n        let rawVel = VectorOps.intoRaw(shapeVel);\n        let rawShape = shape.intoRaw();\n        let result = ColliderShapeCastHit.fromRaw(colliders, this.raw.castShape(bodies.raw, colliders.raw, rawPos, rawRot, rawVel, rawShape, targetDistance, maxToi, stopAtPenetration, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate));\n        rawPos.free();\n        rawRot.free();\n        rawVel.free();\n        rawShape.free();\n        return result;\n    }\n    /**\n     * Retrieve all the colliders intersecting the given shape.\n     *\n     * @param colliders - The set of colliders taking part in this pipeline.\n     * @param shapePos - The position of the shape to test.\n     * @param shapeRot - The orientation of the shape to test.\n     * @param shape - The shape to test.\n     * @param groups - The bit groups and filter associated to the shape to test, in order to only\n     *   test on colliders with collision groups compatible with this group.\n     * @param callback - A function called with the handles of each collider intersecting the `shape`.\n     */\n    intersectionsWithShape(bodies, colliders, shapePos, shapeRot, shape, callback, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        let rawPos = VectorOps.intoRaw(shapePos);\n        let rawRot = RotationOps.intoRaw(shapeRot);\n        let rawShape = shape.intoRaw();\n        this.raw.intersectionsWithShape(bodies.raw, colliders.raw, rawPos, rawRot, rawShape, callback, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate);\n        rawPos.free();\n        rawRot.free();\n        rawShape.free();\n    }\n    /**\n     * Finds the handles of all the colliders with an AABB intersecting the given AABB.\n     *\n     * @param aabbCenter - The center of the AABB to test.\n     * @param aabbHalfExtents - The half-extents of the AABB to test.\n     * @param callback - The callback that will be called with the handles of all the colliders\n     *                   currently intersecting the given AABB.\n     */\n    collidersWithAabbIntersectingAabb(aabbCenter, aabbHalfExtents, callback) {\n        let rawCenter = VectorOps.intoRaw(aabbCenter);\n        let rawHalfExtents = VectorOps.intoRaw(aabbHalfExtents);\n        this.raw.collidersWithAabbIntersectingAabb(rawCenter, rawHalfExtents, callback);\n        rawCenter.free();\n        rawHalfExtents.free();\n    }\n}\n//# sourceMappingURL=query_pipeline.js.map","import * as wasm from \"./rapier_wasm3d_bg.wasm\";\nexport * from \"./rapier_wasm3d_bg.js\";\nimport { __wbg_set_wasm } from \"./rapier_wasm3d_bg.js\";\n__wbg_set_wasm(wasm);","import { RotationOps, VectorOps } from \"../math\";\n// #if DIM3\nimport { SdpMatrix3Ops } from \"../math\";\n/**\n * The simulation status of a rigid-body.\n */\n// TODO: rename this to RigidBodyType\nexport var RigidBodyType;\n(function (RigidBodyType) {\n    /**\n     * A `RigidBodyType::Dynamic` body can be affected by all external forces.\n     */\n    RigidBodyType[RigidBodyType[\"Dynamic\"] = 0] = \"Dynamic\";\n    /**\n     * A `RigidBodyType::Fixed` body cannot be affected by external forces.\n     */\n    RigidBodyType[RigidBodyType[\"Fixed\"] = 1] = \"Fixed\";\n    /**\n     * A `RigidBodyType::KinematicPositionBased` body cannot be affected by any external forces but can be controlled\n     * by the user at the position level while keeping realistic one-way interaction with dynamic bodies.\n     *\n     * One-way interaction means that a kinematic body can push a dynamic body, but a kinematic body\n     * cannot be pushed by anything. In other words, the trajectory of a kinematic body can only be\n     * modified by the user and is independent from any contact or joint it is involved in.\n     */\n    RigidBodyType[RigidBodyType[\"KinematicPositionBased\"] = 2] = \"KinematicPositionBased\";\n    /**\n     * A `RigidBodyType::KinematicVelocityBased` body cannot be affected by any external forces but can be controlled\n     * by the user at the velocity level while keeping realistic one-way interaction with dynamic bodies.\n     *\n     * One-way interaction means that a kinematic body can push a dynamic body, but a kinematic body\n     * cannot be pushed by anything. In other words, the trajectory of a kinematic body can only be\n     * modified by the user and is independent from any contact or joint it is involved in.\n     */\n    RigidBodyType[RigidBodyType[\"KinematicVelocityBased\"] = 3] = \"KinematicVelocityBased\";\n})(RigidBodyType || (RigidBodyType = {}));\n/**\n * A rigid-body.\n */\nexport class RigidBody {\n    constructor(rawSet, colliderSet, handle) {\n        this.rawSet = rawSet;\n        this.colliderSet = colliderSet;\n        this.handle = handle;\n    }\n    /** @internal */\n    finalizeDeserialization(colliderSet) {\n        this.colliderSet = colliderSet;\n    }\n    /**\n     * Checks if this rigid-body is still valid (i.e. that it has\n     * not been deleted from the rigid-body set yet.\n     */\n    isValid() {\n        return this.rawSet.contains(this.handle);\n    }\n    /**\n     * Locks or unlocks the ability of this rigid-body to translate.\n     *\n     * @param locked - If `true`, this rigid-body will no longer translate due to forces and impulses.\n     * @param wakeUp - If `true`, this rigid-body will be automatically awaken if it is currently asleep.\n     */\n    lockTranslations(locked, wakeUp) {\n        return this.rawSet.rbLockTranslations(this.handle, locked, wakeUp);\n    }\n    /**\n     * Locks or unlocks the ability of this rigid-body to rotate.\n     *\n     * @param locked - If `true`, this rigid-body will no longer rotate due to torques and impulses.\n     * @param wakeUp - If `true`, this rigid-body will be automatically awaken if it is currently asleep.\n     */\n    lockRotations(locked, wakeUp) {\n        return this.rawSet.rbLockRotations(this.handle, locked, wakeUp);\n    }\n    // #if DIM3\n    /**\n     * Locks or unlocks the ability of this rigid-body to translate along individual coordinate axes.\n     *\n     * @param enableX - If `false`, this rigid-body will no longer translate due to torques and impulses, along the X coordinate axis.\n     * @param enableY - If `false`, this rigid-body will no longer translate due to torques and impulses, along the Y coordinate axis.\n     * @param enableZ - If `false`, this rigid-body will no longer translate due to torques and impulses, along the Z coordinate axis.\n     * @param wakeUp - If `true`, this rigid-body will be automatically awaken if it is currently asleep.\n     */\n    setEnabledTranslations(enableX, enableY, enableZ, wakeUp) {\n        return this.rawSet.rbSetEnabledTranslations(this.handle, enableX, enableY, enableZ, wakeUp);\n    }\n    /**\n     * Locks or unlocks the ability of this rigid-body to translate along individual coordinate axes.\n     *\n     * @param enableX - If `false`, this rigid-body will no longer translate due to torques and impulses, along the X coordinate axis.\n     * @param enableY - If `false`, this rigid-body will no longer translate due to torques and impulses, along the Y coordinate axis.\n     * @param enableZ - If `false`, this rigid-body will no longer translate due to torques and impulses, along the Z coordinate axis.\n     * @param wakeUp - If `true`, this rigid-body will be automatically awaken if it is currently asleep.\n     * @deprecated use `this.setEnabledTranslations` with the same arguments instead.\n     */\n    restrictTranslations(enableX, enableY, enableZ, wakeUp) {\n        this.setEnabledTranslations(enableX, enableY, enableZ, wakeUp);\n    }\n    /**\n     * Locks or unlocks the ability of this rigid-body to rotate along individual coordinate axes.\n     *\n     * @param enableX - If `false`, this rigid-body will no longer rotate due to torques and impulses, along the X coordinate axis.\n     * @param enableY - If `false`, this rigid-body will no longer rotate due to torques and impulses, along the Y coordinate axis.\n     * @param enableZ - If `false`, this rigid-body will no longer rotate due to torques and impulses, along the Z coordinate axis.\n     * @param wakeUp - If `true`, this rigid-body will be automatically awaken if it is currently asleep.\n     */\n    setEnabledRotations(enableX, enableY, enableZ, wakeUp) {\n        return this.rawSet.rbSetEnabledRotations(this.handle, enableX, enableY, enableZ, wakeUp);\n    }\n    /**\n     * Locks or unlocks the ability of this rigid-body to rotate along individual coordinate axes.\n     *\n     * @param enableX - If `false`, this rigid-body will no longer rotate due to torques and impulses, along the X coordinate axis.\n     * @param enableY - If `false`, this rigid-body will no longer rotate due to torques and impulses, along the Y coordinate axis.\n     * @param enableZ - If `false`, this rigid-body will no longer rotate due to torques and impulses, along the Z coordinate axis.\n     * @param wakeUp - If `true`, this rigid-body will be automatically awaken if it is currently asleep.\n     * @deprecated use `this.setEnabledRotations` with the same arguments instead.\n     */\n    restrictRotations(enableX, enableY, enableZ, wakeUp) {\n        this.setEnabledRotations(enableX, enableY, enableZ, wakeUp);\n    }\n    // #endif\n    /**\n     * The dominance group, in [-127, +127] this rigid-body is part of.\n     */\n    dominanceGroup() {\n        return this.rawSet.rbDominanceGroup(this.handle);\n    }\n    /**\n     * Sets the dominance group of this rigid-body.\n     *\n     * @param group - The dominance group of this rigid-body. Must be a signed integer in the range [-127, +127].\n     */\n    setDominanceGroup(group) {\n        this.rawSet.rbSetDominanceGroup(this.handle, group);\n    }\n    /**\n     * The number of additional solver iterations that will be run for this\n     * rigid-body and everything that interacts with it directly or indirectly\n     * through contacts or joints.\n     */\n    additionalSolverIterations() {\n        return this.rawSet.rbAdditionalSolverIterations(this.handle);\n    }\n    /**\n     * Sets the number of additional solver iterations that will be run for this\n     * rigid-body and everything that interacts with it directly or indirectly\n     * through contacts or joints.\n     *\n     * Compared to increasing the global `World.numSolverIteration`, setting this\n     * value lets you increase accuracy on only a subset of the scene, resulting in reduced\n     * performance loss.\n     *\n     * @param iters - The new number of additional solver iterations (default: 0).\n     */\n    setAdditionalSolverIterations(iters) {\n        this.rawSet.rbSetAdditionalSolverIterations(this.handle, iters);\n    }\n    /**\n     * Enable or disable CCD (Continuous Collision Detection) for this rigid-body.\n     *\n     * @param enabled - If `true`, CCD will be enabled for this rigid-body.\n     */\n    enableCcd(enabled) {\n        this.rawSet.rbEnableCcd(this.handle, enabled);\n    }\n    /**\n     * Sets the soft-CCD prediction distance for this rigid-body.\n     *\n     * See the documentation of `RigidBodyDesc.setSoftCcdPrediction` for\n     * additional details.\n     */\n    setSoftCcdPrediction(distance) {\n        this.rawSet.rbSetSoftCcdPrediction(this.handle, distance);\n    }\n    /**\n     * Gets the soft-CCD prediction distance for this rigid-body.\n     *\n     * See the documentation of `RigidBodyDesc.setSoftCcdPrediction` for\n     * additional details.\n     */\n    softCcdPrediction() {\n        return this.rawSet.rbSoftCcdPrediction(this.handle);\n    }\n    /**\n     * The world-space translation of this rigid-body.\n     */\n    translation() {\n        let res = this.rawSet.rbTranslation(this.handle);\n        return VectorOps.fromRaw(res);\n    }\n    /**\n     * The world-space orientation of this rigid-body.\n     */\n    rotation() {\n        let res = this.rawSet.rbRotation(this.handle);\n        return RotationOps.fromRaw(res);\n    }\n    /**\n     * The world-space next translation of this rigid-body.\n     *\n     * If this rigid-body is kinematic this value is set by the `setNextKinematicTranslation`\n     * method and is used for estimating the kinematic body velocity at the next timestep.\n     * For non-kinematic bodies, this value is currently unspecified.\n     */\n    nextTranslation() {\n        let res = this.rawSet.rbNextTranslation(this.handle);\n        return VectorOps.fromRaw(res);\n    }\n    /**\n     * The world-space next orientation of this rigid-body.\n     *\n     * If this rigid-body is kinematic this value is set by the `setNextKinematicRotation`\n     * method and is used for estimating the kinematic body velocity at the next timestep.\n     * For non-kinematic bodies, this value is currently unspecified.\n     */\n    nextRotation() {\n        let res = this.rawSet.rbNextRotation(this.handle);\n        return RotationOps.fromRaw(res);\n    }\n    /**\n     * Sets the translation of this rigid-body.\n     *\n     * @param tra - The world-space position of the rigid-body.\n     * @param wakeUp - Forces the rigid-body to wake-up so it is properly affected by forces if it\n     *                 wasn't moving before modifying its position.\n     */\n    setTranslation(tra, wakeUp) {\n        // #if DIM3\n        this.rawSet.rbSetTranslation(this.handle, tra.x, tra.y, tra.z, wakeUp);\n        // #endif\n    }\n    /**\n     * Sets the linear velocity of this rigid-body.\n     *\n     * @param vel - The linear velocity to set.\n     * @param wakeUp - Forces the rigid-body to wake-up if it was asleep.\n     */\n    setLinvel(vel, wakeUp) {\n        let rawVel = VectorOps.intoRaw(vel);\n        this.rawSet.rbSetLinvel(this.handle, rawVel, wakeUp);\n        rawVel.free();\n    }\n    /**\n     * The scale factor applied to the gravity affecting\n     * this rigid-body.\n     */\n    gravityScale() {\n        return this.rawSet.rbGravityScale(this.handle);\n    }\n    /**\n     * Sets the scale factor applied to the gravity affecting\n     * this rigid-body.\n     *\n     * @param factor - The scale factor to set. A value of 0.0 means\n     *   that this rigid-body will on longer be affected by gravity.\n     * @param wakeUp - Forces the rigid-body to wake-up if it was asleep.\n     */\n    setGravityScale(factor, wakeUp) {\n        this.rawSet.rbSetGravityScale(this.handle, factor, wakeUp);\n    }\n    // #if DIM3\n    /**\n     * Sets the rotation quaternion of this rigid-body.\n     *\n     * This does nothing if a zero quaternion is provided.\n     *\n     * @param rotation - The rotation to set.\n     * @param wakeUp - Forces the rigid-body to wake-up so it is properly affected by forces if it\n     * wasn't moving before modifying its position.\n     */\n    setRotation(rot, wakeUp) {\n        this.rawSet.rbSetRotation(this.handle, rot.x, rot.y, rot.z, rot.w, wakeUp);\n    }\n    /**\n     * Sets the angular velocity fo this rigid-body.\n     *\n     * @param vel - The angular velocity to set.\n     * @param wakeUp - Forces the rigid-body to wake-up if it was asleep.\n     */\n    setAngvel(vel, wakeUp) {\n        let rawVel = VectorOps.intoRaw(vel);\n        this.rawSet.rbSetAngvel(this.handle, rawVel, wakeUp);\n        rawVel.free();\n    }\n    // #endif\n    /**\n     * If this rigid body is kinematic, sets its future translation after the next timestep integration.\n     *\n     * This should be used instead of `rigidBody.setTranslation` to make the dynamic object\n     * interacting with this kinematic body behave as expected. Internally, Rapier will compute\n     * an artificial velocity for this rigid-body from its current position and its next kinematic\n     * position. This velocity will be used to compute forces on dynamic bodies interacting with\n     * this body.\n     *\n     * @param t - The kinematic translation to set.\n     */\n    setNextKinematicTranslation(t) {\n        // #if DIM3\n        this.rawSet.rbSetNextKinematicTranslation(this.handle, t.x, t.y, t.z);\n        // #endif\n    }\n    // #if DIM3\n    /**\n     * If this rigid body is kinematic, sets its future rotation after the next timestep integration.\n     *\n     * This should be used instead of `rigidBody.setRotation` to make the dynamic object\n     * interacting with this kinematic body behave as expected. Internally, Rapier will compute\n     * an artificial velocity for this rigid-body from its current position and its next kinematic\n     * position. This velocity will be used to compute forces on dynamic bodies interacting with\n     * this body.\n     *\n     * @param rot - The kinematic rotation to set.\n     */\n    setNextKinematicRotation(rot) {\n        this.rawSet.rbSetNextKinematicRotation(this.handle, rot.x, rot.y, rot.z, rot.w);\n    }\n    // #endif\n    /**\n     * The linear velocity of this rigid-body.\n     */\n    linvel() {\n        return VectorOps.fromRaw(this.rawSet.rbLinvel(this.handle));\n    }\n    // #if DIM3\n    /**\n     * The angular velocity of this rigid-body.\n     */\n    angvel() {\n        return VectorOps.fromRaw(this.rawSet.rbAngvel(this.handle));\n    }\n    // #endif\n    /**\n     * The mass of this rigid-body.\n     */\n    mass() {\n        return this.rawSet.rbMass(this.handle);\n    }\n    /**\n     * The inverse mass taking into account translation locking.\n     */\n    effectiveInvMass() {\n        return VectorOps.fromRaw(this.rawSet.rbEffectiveInvMass(this.handle));\n    }\n    /**\n     * The inverse of the mass of a rigid-body.\n     *\n     * If this is zero, the rigid-body is assumed to have infinite mass.\n     */\n    invMass() {\n        return this.rawSet.rbInvMass(this.handle);\n    }\n    /**\n     * The center of mass of a rigid-body expressed in its local-space.\n     */\n    localCom() {\n        return VectorOps.fromRaw(this.rawSet.rbLocalCom(this.handle));\n    }\n    /**\n     * The world-space center of mass of the rigid-body.\n     */\n    worldCom() {\n        return VectorOps.fromRaw(this.rawSet.rbWorldCom(this.handle));\n    }\n    // #if DIM3\n    /**\n     * The inverse of the principal angular inertia of the rigid-body.\n     *\n     * Components set to zero are assumed to be infinite along the corresponding principal axis.\n     */\n    invPrincipalInertiaSqrt() {\n        return VectorOps.fromRaw(this.rawSet.rbInvPrincipalInertiaSqrt(this.handle));\n    }\n    // #endif\n    // #if DIM3\n    /**\n     * The angular inertia along the principal inertia axes of the rigid-body.\n     */\n    principalInertia() {\n        return VectorOps.fromRaw(this.rawSet.rbPrincipalInertia(this.handle));\n    }\n    // #endif\n    // #if DIM3\n    /**\n     * The principal vectors of the local angular inertia tensor of the rigid-body.\n     */\n    principalInertiaLocalFrame() {\n        return RotationOps.fromRaw(this.rawSet.rbPrincipalInertiaLocalFrame(this.handle));\n    }\n    // #endif\n    // #if DIM3\n    /**\n     * The square-root of the world-space inverse angular inertia tensor of the rigid-body,\n     * taking into account rotation locking.\n     */\n    effectiveWorldInvInertiaSqrt() {\n        return SdpMatrix3Ops.fromRaw(this.rawSet.rbEffectiveWorldInvInertiaSqrt(this.handle));\n    }\n    // #endif\n    // #if DIM3\n    /**\n     * The effective world-space angular inertia (that takes the potential rotation locking into account) of\n     * this rigid-body.\n     */\n    effectiveAngularInertia() {\n        return SdpMatrix3Ops.fromRaw(this.rawSet.rbEffectiveAngularInertia(this.handle));\n    }\n    // #endif\n    /**\n     * Put this rigid body to sleep.\n     *\n     * A sleeping body no longer moves and is no longer simulated by the physics engine unless\n     * it is waken up. It can be woken manually with `this.wakeUp()` or automatically due to\n     * external forces like contacts.\n     */\n    sleep() {\n        this.rawSet.rbSleep(this.handle);\n    }\n    /**\n     * Wakes this rigid-body up.\n     *\n     * A dynamic rigid-body that does not move during several consecutive frames will\n     * be put to sleep by the physics engine, i.e., it will stop being simulated in order\n     * to avoid useless computations.\n     * This methods forces a sleeping rigid-body to wake-up. This is useful, e.g., before modifying\n     * the position of a dynamic body so that it is properly simulated afterwards.\n     */\n    wakeUp() {\n        this.rawSet.rbWakeUp(this.handle);\n    }\n    /**\n     * Is CCD enabled for this rigid-body?\n     */\n    isCcdEnabled() {\n        return this.rawSet.rbIsCcdEnabled(this.handle);\n    }\n    /**\n     * The number of colliders attached to this rigid-body.\n     */\n    numColliders() {\n        return this.rawSet.rbNumColliders(this.handle);\n    }\n    /**\n     * Retrieves the `i-th` collider attached to this rigid-body.\n     *\n     * @param i - The index of the collider to retrieve. Must be a number in `[0, this.numColliders()[`.\n     *         This index is **not** the same as the unique identifier of the collider.\n     */\n    collider(i) {\n        return this.colliderSet.get(this.rawSet.rbCollider(this.handle, i));\n    }\n    /**\n     * Sets whether this rigid-body is enabled or not.\n     *\n     * @param enabled - Set to `false` to disable this rigid-body and all its attached colliders.\n     */\n    setEnabled(enabled) {\n        this.rawSet.rbSetEnabled(this.handle, enabled);\n    }\n    /**\n     * Is this rigid-body enabled?\n     */\n    isEnabled() {\n        return this.rawSet.rbIsEnabled(this.handle);\n    }\n    /**\n     * The status of this rigid-body: static, dynamic, or kinematic.\n     */\n    bodyType() {\n        return this.rawSet.rbBodyType(this.handle);\n    }\n    /**\n     * Set a new status for this rigid-body: static, dynamic, or kinematic.\n     */\n    setBodyType(type, wakeUp) {\n        return this.rawSet.rbSetBodyType(this.handle, type, wakeUp);\n    }\n    /**\n     * Is this rigid-body sleeping?\n     */\n    isSleeping() {\n        return this.rawSet.rbIsSleeping(this.handle);\n    }\n    /**\n     * Is the velocity of this rigid-body not zero?\n     */\n    isMoving() {\n        return this.rawSet.rbIsMoving(this.handle);\n    }\n    /**\n     * Is this rigid-body static?\n     */\n    isFixed() {\n        return this.rawSet.rbIsFixed(this.handle);\n    }\n    /**\n     * Is this rigid-body kinematic?\n     */\n    isKinematic() {\n        return this.rawSet.rbIsKinematic(this.handle);\n    }\n    /**\n     * Is this rigid-body dynamic?\n     */\n    isDynamic() {\n        return this.rawSet.rbIsDynamic(this.handle);\n    }\n    /**\n     * The linear damping coefficient of this rigid-body.\n     */\n    linearDamping() {\n        return this.rawSet.rbLinearDamping(this.handle);\n    }\n    /**\n     * The angular damping coefficient of this rigid-body.\n     */\n    angularDamping() {\n        return this.rawSet.rbAngularDamping(this.handle);\n    }\n    /**\n     * Sets the linear damping factor applied to this rigid-body.\n     *\n     * @param factor - The damping factor to set.\n     */\n    setLinearDamping(factor) {\n        this.rawSet.rbSetLinearDamping(this.handle, factor);\n    }\n    /**\n     * Recompute the mass-properties of this rigid-bodies based on its currently attached colliders.\n     */\n    recomputeMassPropertiesFromColliders() {\n        this.rawSet.rbRecomputeMassPropertiesFromColliders(this.handle, this.colliderSet.raw);\n    }\n    /**\n     * Sets the rigid-body's additional mass.\n     *\n     * The total angular inertia of the rigid-body will be scaled automatically based on this additional mass. If this\n     * scaling effect isn’t desired, use Self::additional_mass_properties instead of this method.\n     *\n     * This is only the \"additional\" mass because the total mass of the rigid-body is equal to the sum of this\n     * additional mass and the mass computed from the colliders (with non-zero densities) attached to this rigid-body.\n     *\n     * That total mass (which includes the attached colliders’ contributions) will be updated at the name physics step,\n     * or can be updated manually with `this.recomputeMassPropertiesFromColliders`.\n     *\n     * This will override any previous additional mass-properties set by `this.setAdditionalMass`,\n     * `this.setAdditionalMassProperties`, `RigidBodyDesc::setAdditionalMass`, or\n     * `RigidBodyDesc.setAdditionalMassfProperties` for this rigid-body.\n     *\n     * @param mass - The additional mass to set.\n     * @param wakeUp - If `true` then the rigid-body will be woken up if it was put to sleep because it did not move for a while.\n     */\n    setAdditionalMass(mass, wakeUp) {\n        this.rawSet.rbSetAdditionalMass(this.handle, mass, wakeUp);\n    }\n    // #if DIM3\n    /**\n     * Sets the rigid-body's additional mass-properties.\n     *\n     * This is only the \"additional\" mass-properties because the total mass-properties of the rigid-body is equal to the\n     * sum of this additional mass-properties and the mass computed from the colliders (with non-zero densities) attached\n     * to this rigid-body.\n     *\n     * That total mass-properties (which include the attached colliders’ contributions) will be updated at the name\n     * physics step, or can be updated manually with `this.recomputeMassPropertiesFromColliders`.\n     *\n     * This will override any previous mass-properties set by `this.setAdditionalMass`,\n     * `this.setAdditionalMassProperties`, `RigidBodyDesc.setAdditionalMass`, or `RigidBodyDesc.setAdditionalMassProperties`\n     * for this rigid-body.\n     *\n     * If `wake_up` is true then the rigid-body will be woken up if it was put to sleep because it did not move for a while.\n     */\n    setAdditionalMassProperties(mass, centerOfMass, principalAngularInertia, angularInertiaLocalFrame, wakeUp) {\n        let rawCom = VectorOps.intoRaw(centerOfMass);\n        let rawPrincipalInertia = VectorOps.intoRaw(principalAngularInertia);\n        let rawInertiaFrame = RotationOps.intoRaw(angularInertiaLocalFrame);\n        this.rawSet.rbSetAdditionalMassProperties(this.handle, mass, rawCom, rawPrincipalInertia, rawInertiaFrame, wakeUp);\n        rawCom.free();\n        rawPrincipalInertia.free();\n        rawInertiaFrame.free();\n    }\n    // #endif\n    /**\n     * Sets the linear damping factor applied to this rigid-body.\n     *\n     * @param factor - The damping factor to set.\n     */\n    setAngularDamping(factor) {\n        this.rawSet.rbSetAngularDamping(this.handle, factor);\n    }\n    /**\n     * Resets to zero the user forces (but not torques) applied to this rigid-body.\n     *\n     * @param wakeUp - should the rigid-body be automatically woken-up?\n     */\n    resetForces(wakeUp) {\n        this.rawSet.rbResetForces(this.handle, wakeUp);\n    }\n    /**\n     * Resets to zero the user torques applied to this rigid-body.\n     *\n     * @param wakeUp - should the rigid-body be automatically woken-up?\n     */\n    resetTorques(wakeUp) {\n        this.rawSet.rbResetTorques(this.handle, wakeUp);\n    }\n    /**\n     * Adds a force at the center-of-mass of this rigid-body.\n     *\n     * @param force - the world-space force to add to the rigid-body.\n     * @param wakeUp - should the rigid-body be automatically woken-up?\n     */\n    addForce(force, wakeUp) {\n        const rawForce = VectorOps.intoRaw(force);\n        this.rawSet.rbAddForce(this.handle, rawForce, wakeUp);\n        rawForce.free();\n    }\n    /**\n     * Applies an impulse at the center-of-mass of this rigid-body.\n     *\n     * @param impulse - the world-space impulse to apply on the rigid-body.\n     * @param wakeUp - should the rigid-body be automatically woken-up?\n     */\n    applyImpulse(impulse, wakeUp) {\n        const rawImpulse = VectorOps.intoRaw(impulse);\n        this.rawSet.rbApplyImpulse(this.handle, rawImpulse, wakeUp);\n        rawImpulse.free();\n    }\n    // #if DIM3\n    /**\n     * Adds a torque at the center-of-mass of this rigid-body.\n     *\n     * @param torque - the world-space torque to add to the rigid-body.\n     * @param wakeUp - should the rigid-body be automatically woken-up?\n     */\n    addTorque(torque, wakeUp) {\n        const rawTorque = VectorOps.intoRaw(torque);\n        this.rawSet.rbAddTorque(this.handle, rawTorque, wakeUp);\n        rawTorque.free();\n    }\n    // #endif\n    // #if DIM3\n    /**\n     * Applies an impulsive torque at the center-of-mass of this rigid-body.\n     *\n     * @param torqueImpulse - the world-space torque impulse to apply on the rigid-body.\n     * @param wakeUp - should the rigid-body be automatically woken-up?\n     */\n    applyTorqueImpulse(torqueImpulse, wakeUp) {\n        const rawTorqueImpulse = VectorOps.intoRaw(torqueImpulse);\n        this.rawSet.rbApplyTorqueImpulse(this.handle, rawTorqueImpulse, wakeUp);\n        rawTorqueImpulse.free();\n    }\n    // #endif\n    /**\n     * Adds a force at the given world-space point of this rigid-body.\n     *\n     * @param force - the world-space force to add to the rigid-body.\n     * @param point - the world-space point where the impulse is to be applied on the rigid-body.\n     * @param wakeUp - should the rigid-body be automatically woken-up?\n     */\n    addForceAtPoint(force, point, wakeUp) {\n        const rawForce = VectorOps.intoRaw(force);\n        const rawPoint = VectorOps.intoRaw(point);\n        this.rawSet.rbAddForceAtPoint(this.handle, rawForce, rawPoint, wakeUp);\n        rawForce.free();\n        rawPoint.free();\n    }\n    /**\n     * Applies an impulse at the given world-space point of this rigid-body.\n     *\n     * @param impulse - the world-space impulse to apply on the rigid-body.\n     * @param point - the world-space point where the impulse is to be applied on the rigid-body.\n     * @param wakeUp - should the rigid-body be automatically woken-up?\n     */\n    applyImpulseAtPoint(impulse, point, wakeUp) {\n        const rawImpulse = VectorOps.intoRaw(impulse);\n        const rawPoint = VectorOps.intoRaw(point);\n        this.rawSet.rbApplyImpulseAtPoint(this.handle, rawImpulse, rawPoint, wakeUp);\n        rawImpulse.free();\n        rawPoint.free();\n    }\n    /**\n     * Retrieves the constant force(s) the user added to this rigid-body\n     * Returns zero if the rigid-body is not dynamic.\n     */\n    userForce() {\n        return VectorOps.fromRaw(this.rawSet.rbUserForce(this.handle));\n    }\n    // #if DIM3\n    /**\n     * Retrieves the constant torque(s) the user added to this rigid-body\n     * Returns zero if the rigid-body is not dynamic.\n     */\n    userTorque() {\n        return VectorOps.fromRaw(this.rawSet.rbUserTorque(this.handle));\n    }\n}\nexport class RigidBodyDesc {\n    constructor(status) {\n        this.enabled = true;\n        this.status = status;\n        this.translation = VectorOps.zeros();\n        this.rotation = RotationOps.identity();\n        this.gravityScale = 1.0;\n        this.linvel = VectorOps.zeros();\n        this.mass = 0.0;\n        this.massOnly = false;\n        this.centerOfMass = VectorOps.zeros();\n        this.translationsEnabledX = true;\n        this.translationsEnabledY = true;\n        // #if DIM3\n        this.angvel = VectorOps.zeros();\n        this.principalAngularInertia = VectorOps.zeros();\n        this.angularInertiaLocalFrame = RotationOps.identity();\n        this.translationsEnabledZ = true;\n        this.rotationsEnabledX = true;\n        this.rotationsEnabledY = true;\n        this.rotationsEnabledZ = true;\n        // #endif\n        this.linearDamping = 0.0;\n        this.angularDamping = 0.0;\n        this.canSleep = true;\n        this.sleeping = false;\n        this.ccdEnabled = false;\n        this.softCcdPrediction = 0.0;\n        this.dominanceGroup = 0;\n        this.additionalSolverIterations = 0;\n    }\n    /**\n     * A rigid-body descriptor used to build a dynamic rigid-body.\n     */\n    static dynamic() {\n        return new RigidBodyDesc(RigidBodyType.Dynamic);\n    }\n    /**\n     * A rigid-body descriptor used to build a position-based kinematic rigid-body.\n     */\n    static kinematicPositionBased() {\n        return new RigidBodyDesc(RigidBodyType.KinematicPositionBased);\n    }\n    /**\n     * A rigid-body descriptor used to build a velocity-based kinematic rigid-body.\n     */\n    static kinematicVelocityBased() {\n        return new RigidBodyDesc(RigidBodyType.KinematicVelocityBased);\n    }\n    /**\n     * A rigid-body descriptor used to build a fixed rigid-body.\n     */\n    static fixed() {\n        return new RigidBodyDesc(RigidBodyType.Fixed);\n    }\n    /**\n     * A rigid-body descriptor used to build a dynamic rigid-body.\n     *\n     * @deprecated The method has been renamed to `.dynamic()`.\n     */\n    static newDynamic() {\n        return new RigidBodyDesc(RigidBodyType.Dynamic);\n    }\n    /**\n     * A rigid-body descriptor used to build a position-based kinematic rigid-body.\n     *\n     * @deprecated The method has been renamed to `.kinematicPositionBased()`.\n     */\n    static newKinematicPositionBased() {\n        return new RigidBodyDesc(RigidBodyType.KinematicPositionBased);\n    }\n    /**\n     * A rigid-body descriptor used to build a velocity-based kinematic rigid-body.\n     *\n     * @deprecated The method has been renamed to `.kinematicVelocityBased()`.\n     */\n    static newKinematicVelocityBased() {\n        return new RigidBodyDesc(RigidBodyType.KinematicVelocityBased);\n    }\n    /**\n     * A rigid-body descriptor used to build a fixed rigid-body.\n     *\n     * @deprecated The method has been renamed to `.fixed()`.\n     */\n    static newStatic() {\n        return new RigidBodyDesc(RigidBodyType.Fixed);\n    }\n    setDominanceGroup(group) {\n        this.dominanceGroup = group;\n        return this;\n    }\n    /**\n     * Sets the number of additional solver iterations that will be run for this\n     * rigid-body and everything that interacts with it directly or indirectly\n     * through contacts or joints.\n     *\n     * Compared to increasing the global `World.numSolverIteration`, setting this\n     * value lets you increase accuracy on only a subset of the scene, resulting in reduced\n     * performance loss.\n     *\n     * @param iters - The new number of additional solver iterations (default: 0).\n     */\n    setAdditionalSolverIterations(iters) {\n        this.additionalSolverIterations = iters;\n        return this;\n    }\n    /**\n     * Sets whether the created rigid-body will be enabled or disabled.\n     * @param enabled − If set to `false` the rigid-body will be disabled at creation.\n     */\n    setEnabled(enabled) {\n        this.enabled = enabled;\n        return this;\n    }\n    // #if DIM3\n    /**\n     * Sets the initial translation of the rigid-body to create.\n     *\n     * @param tra - The translation to set.\n     */\n    setTranslation(x, y, z) {\n        if (typeof x != \"number\" ||\n            typeof y != \"number\" ||\n            typeof z != \"number\")\n            throw TypeError(\"The translation components must be numbers.\");\n        this.translation = { x: x, y: y, z: z };\n        return this;\n    }\n    // #endif\n    /**\n     * Sets the initial rotation of the rigid-body to create.\n     *\n     * @param rot - The rotation to set.\n     */\n    setRotation(rot) {\n        // #if DIM3\n        RotationOps.copy(this.rotation, rot);\n        // #endif\n        return this;\n    }\n    /**\n     * Sets the scale factor applied to the gravity affecting\n     * the rigid-body being built.\n     *\n     * @param scale - The scale factor. Set this to `0.0` if the rigid-body\n     *   needs to ignore gravity.\n     */\n    setGravityScale(scale) {\n        this.gravityScale = scale;\n        return this;\n    }\n    /**\n     * Sets the initial mass of the rigid-body being built, before adding colliders' contributions.\n     *\n     * @param mass − The initial mass of the rigid-body to create.\n     */\n    setAdditionalMass(mass) {\n        this.mass = mass;\n        this.massOnly = true;\n        return this;\n    }\n    // #if DIM3\n    /**\n     * Sets the initial linear velocity of the rigid-body to create.\n     *\n     * @param x - The linear velocity to set along the `x` axis.\n     * @param y - The linear velocity to set along the `y` axis.\n     * @param z - The linear velocity to set along the `z` axis.\n     */\n    setLinvel(x, y, z) {\n        if (typeof x != \"number\" ||\n            typeof y != \"number\" ||\n            typeof z != \"number\")\n            throw TypeError(\"The linvel components must be numbers.\");\n        this.linvel = { x: x, y: y, z: z };\n        return this;\n    }\n    /**\n     * Sets the initial angular velocity of the rigid-body to create.\n     *\n     * @param vel - The angular velocity to set.\n     */\n    setAngvel(vel) {\n        VectorOps.copy(this.angvel, vel);\n        return this;\n    }\n    /**\n     * Sets the mass properties of the rigid-body being built.\n     *\n     * Note that the final mass properties of the rigid-bodies depends\n     * on the initial mass-properties of the rigid-body (set by this method)\n     * to which is added the contributions of all the colliders with non-zero density\n     * attached to this rigid-body.\n     *\n     * Therefore, if you want your provided mass properties to be the final\n     * mass properties of your rigid-body, don't attach colliders to it, or\n     * only attach colliders with densities equal to zero.\n     *\n     * @param mass − The initial mass of the rigid-body to create.\n     * @param centerOfMass − The initial center-of-mass of the rigid-body to create.\n     * @param principalAngularInertia − The initial principal angular inertia of the rigid-body to create.\n     *                                  These are the eigenvalues of the angular inertia matrix.\n     * @param angularInertiaLocalFrame − The initial local angular inertia frame of the rigid-body to create.\n     *                                   These are the eigenvectors of the angular inertia matrix.\n     */\n    setAdditionalMassProperties(mass, centerOfMass, principalAngularInertia, angularInertiaLocalFrame) {\n        this.mass = mass;\n        VectorOps.copy(this.centerOfMass, centerOfMass);\n        VectorOps.copy(this.principalAngularInertia, principalAngularInertia);\n        RotationOps.copy(this.angularInertiaLocalFrame, angularInertiaLocalFrame);\n        this.massOnly = false;\n        return this;\n    }\n    /**\n     * Allow translation of this rigid-body only along specific axes.\n     * @param translationsEnabledX - Are translations along the X axis enabled?\n     * @param translationsEnabledY - Are translations along the y axis enabled?\n     * @param translationsEnabledZ - Are translations along the Z axis enabled?\n     */\n    enabledTranslations(translationsEnabledX, translationsEnabledY, translationsEnabledZ) {\n        this.translationsEnabledX = translationsEnabledX;\n        this.translationsEnabledY = translationsEnabledY;\n        this.translationsEnabledZ = translationsEnabledZ;\n        return this;\n    }\n    /**\n     * Allow translation of this rigid-body only along specific axes.\n     * @param translationsEnabledX - Are translations along the X axis enabled?\n     * @param translationsEnabledY - Are translations along the y axis enabled?\n     * @param translationsEnabledZ - Are translations along the Z axis enabled?\n     * @deprecated use `this.enabledTranslations` with the same arguments instead.\n     */\n    restrictTranslations(translationsEnabledX, translationsEnabledY, translationsEnabledZ) {\n        return this.enabledTranslations(translationsEnabledX, translationsEnabledY, translationsEnabledZ);\n    }\n    /**\n     * Locks all translations that would have resulted from forces on\n     * the created rigid-body.\n     */\n    lockTranslations() {\n        return this.enabledTranslations(false, false, false);\n    }\n    /**\n     * Allow rotation of this rigid-body only along specific axes.\n     * @param rotationsEnabledX - Are rotations along the X axis enabled?\n     * @param rotationsEnabledY - Are rotations along the y axis enabled?\n     * @param rotationsEnabledZ - Are rotations along the Z axis enabled?\n     */\n    enabledRotations(rotationsEnabledX, rotationsEnabledY, rotationsEnabledZ) {\n        this.rotationsEnabledX = rotationsEnabledX;\n        this.rotationsEnabledY = rotationsEnabledY;\n        this.rotationsEnabledZ = rotationsEnabledZ;\n        return this;\n    }\n    /**\n     * Allow rotation of this rigid-body only along specific axes.\n     * @param rotationsEnabledX - Are rotations along the X axis enabled?\n     * @param rotationsEnabledY - Are rotations along the y axis enabled?\n     * @param rotationsEnabledZ - Are rotations along the Z axis enabled?\n     * @deprecated use `this.enabledRotations` with the same arguments instead.\n     */\n    restrictRotations(rotationsEnabledX, rotationsEnabledY, rotationsEnabledZ) {\n        return this.enabledRotations(rotationsEnabledX, rotationsEnabledY, rotationsEnabledZ);\n    }\n    /**\n     * Locks all rotations that would have resulted from forces on\n     * the created rigid-body.\n     */\n    lockRotations() {\n        return this.restrictRotations(false, false, false);\n    }\n    // #endif\n    /**\n     * Sets the linear damping of the rigid-body to create.\n     *\n     * This will progressively slowdown the translational movement of the rigid-body.\n     *\n     * @param damping - The angular damping coefficient. Should be >= 0. The higher this\n     *                  value is, the stronger the translational slowdown will be.\n     */\n    setLinearDamping(damping) {\n        this.linearDamping = damping;\n        return this;\n    }\n    /**\n     * Sets the angular damping of the rigid-body to create.\n     *\n     * This will progressively slowdown the rotational movement of the rigid-body.\n     *\n     * @param damping - The angular damping coefficient. Should be >= 0. The higher this\n     *                  value is, the stronger the rotational slowdown will be.\n     */\n    setAngularDamping(damping) {\n        this.angularDamping = damping;\n        return this;\n    }\n    /**\n     * Sets whether or not the rigid-body to create can sleep.\n     *\n     * @param can - true if the rigid-body can sleep, false if it can't.\n     */\n    setCanSleep(can) {\n        this.canSleep = can;\n        return this;\n    }\n    /**\n     * Sets whether or not the rigid-body is to be created asleep.\n     *\n     * @param can - true if the rigid-body should be in sleep, default false.\n     */\n    setSleeping(sleeping) {\n        this.sleeping = sleeping;\n        return this;\n    }\n    /**\n     * Sets whether Continuous Collision Detection (CCD) is enabled for this rigid-body.\n     *\n     * @param enabled - true if the rigid-body has CCD enabled.\n     */\n    setCcdEnabled(enabled) {\n        this.ccdEnabled = enabled;\n        return this;\n    }\n    /**\n     * Sets the maximum prediction distance Soft Continuous Collision-Detection.\n     *\n     * When set to 0, soft-CCD is disabled. Soft-CCD helps prevent tunneling especially of\n     * slow-but-thin to moderately fast objects. The soft CCD prediction distance indicates how\n     * far in the object’s path the CCD algorithm is allowed to inspect. Large values can impact\n     * performance badly by increasing the work needed from the broad-phase.\n     *\n     * It is a generally cheaper variant of regular CCD (that can be enabled with\n     * `RigidBodyDesc::setCcdEnabled` since it relies on predictive constraints instead of\n     * shape-cast and substeps.\n     */\n    setSoftCcdPrediction(distance) {\n        this.softCcdPrediction = distance;\n        return this;\n    }\n    /**\n     * Sets the user-defined object of this rigid-body.\n     *\n     * @param userData - The user-defined object to set.\n     */\n    setUserData(data) {\n        this.userData = data;\n        return this;\n    }\n}\n//# sourceMappingURL=rigid_body.js.map","import { RawImpulseJointSet } from \"../raw\";\nimport { Coarena } from \"../coarena\";\nimport { ImpulseJoint,\n// #endif\n } from \"./impulse_joint\";\n/**\n * A set of joints.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `jointSet.free()`\n * once you are done using it (and all the joints it created).\n */\nexport class ImpulseJointSet {\n    /**\n     * Release the WASM memory occupied by this joint set.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n        if (!!this.map) {\n            this.map.clear();\n        }\n        this.map = undefined;\n    }\n    constructor(raw) {\n        this.raw = raw || new RawImpulseJointSet();\n        this.map = new Coarena();\n        // Initialize the map with the existing elements, if any.\n        if (raw) {\n            raw.forEachJointHandle((handle) => {\n                this.map.set(handle, ImpulseJoint.newTyped(raw, null, handle));\n            });\n        }\n    }\n    /** @internal */\n    finalizeDeserialization(bodies) {\n        this.map.forEach((joint) => joint.finalizeDeserialization(bodies));\n    }\n    /**\n     * Creates a new joint and return its integer handle.\n     *\n     * @param bodies - The set of rigid-bodies containing the bodies the joint is attached to.\n     * @param desc - The joint's parameters.\n     * @param parent1 - The handle of the first rigid-body this joint is attached to.\n     * @param parent2 - The handle of the second rigid-body this joint is attached to.\n     * @param wakeUp - Should the attached rigid-bodies be awakened?\n     */\n    createJoint(bodies, desc, parent1, parent2, wakeUp) {\n        const rawParams = desc.intoRaw();\n        const handle = this.raw.createJoint(rawParams, parent1, parent2, wakeUp);\n        rawParams.free();\n        let joint = ImpulseJoint.newTyped(this.raw, bodies, handle);\n        this.map.set(handle, joint);\n        return joint;\n    }\n    /**\n     * Remove a joint from this set.\n     *\n     * @param handle - The integer handle of the joint.\n     * @param wakeUp - If `true`, the rigid-bodies attached by the removed joint will be woken-up automatically.\n     */\n    remove(handle, wakeUp) {\n        this.raw.remove(handle, wakeUp);\n        this.unmap(handle);\n    }\n    /**\n     * Calls the given closure with the integer handle of each impulse joint attached to this rigid-body.\n     *\n     * @param f - The closure called with the integer handle of each impulse joint attached to the rigid-body.\n     */\n    forEachJointHandleAttachedToRigidBody(handle, f) {\n        this.raw.forEachJointAttachedToRigidBody(handle, f);\n    }\n    /**\n     * Internal function, do not call directly.\n     * @param handle\n     */\n    unmap(handle) {\n        this.map.delete(handle);\n    }\n    /**\n     * The number of joints on this set.\n     */\n    len() {\n        return this.map.len();\n    }\n    /**\n     * Does this set contain a joint with the given handle?\n     *\n     * @param handle - The joint handle to check.\n     */\n    contains(handle) {\n        return this.get(handle) != null;\n    }\n    /**\n     * Gets the joint with the given handle.\n     *\n     * Returns `null` if no joint with the specified handle exists.\n     *\n     * @param handle - The integer handle of the joint to retrieve.\n     */\n    get(handle) {\n        return this.map.get(handle);\n    }\n    /**\n     * Applies the given closure to each joint contained by this set.\n     *\n     * @param f - The closure to apply.\n     */\n    forEach(f) {\n        this.map.forEach(f);\n    }\n    /**\n     * Gets all joints in the list.\n     *\n     * @returns joint list.\n     */\n    getAll() {\n        return this.map.getAll();\n    }\n}\n//# sourceMappingURL=impulse_joint_set.js.map","import { VectorOps } from \"../math\";\n/**\n * The intersection between a ray and a collider.\n */\nexport class ShapeCastHit {\n    constructor(time_of_impact, witness1, witness2, normal1, normal2) {\n        this.time_of_impact = time_of_impact;\n        this.witness1 = witness1;\n        this.witness2 = witness2;\n        this.normal1 = normal1;\n        this.normal2 = normal2;\n    }\n    static fromRaw(colliderSet, raw) {\n        if (!raw)\n            return null;\n        const result = new ShapeCastHit(raw.time_of_impact(), VectorOps.fromRaw(raw.witness1()), VectorOps.fromRaw(raw.witness2()), VectorOps.fromRaw(raw.normal1()), VectorOps.fromRaw(raw.normal2()));\n        raw.free();\n        return result;\n    }\n}\n/**\n * The intersection between a ray and a collider.\n */\nexport class ColliderShapeCastHit extends ShapeCastHit {\n    constructor(collider, time_of_impact, witness1, witness2, normal1, normal2) {\n        super(time_of_impact, witness1, witness2, normal1, normal2);\n        this.collider = collider;\n    }\n    static fromRaw(colliderSet, raw) {\n        if (!raw)\n            return null;\n        const result = new ColliderShapeCastHit(colliderSet.get(raw.colliderHandle()), raw.time_of_impact(), VectorOps.fromRaw(raw.witness1()), VectorOps.fromRaw(raw.witness2()), VectorOps.fromRaw(raw.normal1()), VectorOps.fromRaw(raw.normal2()));\n        raw.free();\n        return result;\n    }\n}\n//# sourceMappingURL=toi.js.map","import { RawRigidBodySet } from \"../raw\";\nimport { Coarena } from \"../coarena\";\nimport { VectorOps, RotationOps } from \"../math\";\nimport { RigidBody, } from \"./rigid_body\";\n/**\n * A set of rigid bodies that can be handled by a physics pipeline.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `rigidBodySet.free()`\n * once you are done using it (and all the rigid-bodies it created).\n */\nexport class RigidBodySet {\n    /**\n     * Release the WASM memory occupied by this rigid-body set.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n        if (!!this.map) {\n            this.map.clear();\n        }\n        this.map = undefined;\n    }\n    constructor(raw) {\n        this.raw = raw || new RawRigidBodySet();\n        this.map = new Coarena();\n        // deserialize\n        if (raw) {\n            raw.forEachRigidBodyHandle((handle) => {\n                this.map.set(handle, new RigidBody(raw, null, handle));\n            });\n        }\n    }\n    /**\n     * Internal method, do not call this explicitly.\n     */\n    finalizeDeserialization(colliderSet) {\n        this.map.forEach((rb) => rb.finalizeDeserialization(colliderSet));\n    }\n    /**\n     * Creates a new rigid-body and return its integer handle.\n     *\n     * @param desc - The description of the rigid-body to create.\n     */\n    createRigidBody(colliderSet, desc) {\n        let rawTra = VectorOps.intoRaw(desc.translation);\n        let rawRot = RotationOps.intoRaw(desc.rotation);\n        let rawLv = VectorOps.intoRaw(desc.linvel);\n        let rawCom = VectorOps.intoRaw(desc.centerOfMass);\n        // #if DIM3\n        let rawAv = VectorOps.intoRaw(desc.angvel);\n        let rawPrincipalInertia = VectorOps.intoRaw(desc.principalAngularInertia);\n        let rawInertiaFrame = RotationOps.intoRaw(desc.angularInertiaLocalFrame);\n        // #endif\n        let handle = this.raw.createRigidBody(desc.enabled, rawTra, rawRot, desc.gravityScale, desc.mass, desc.massOnly, rawCom, rawLv, \n        // #if DIM3\n        rawAv, rawPrincipalInertia, rawInertiaFrame, desc.translationsEnabledX, desc.translationsEnabledY, desc.translationsEnabledZ, desc.rotationsEnabledX, desc.rotationsEnabledY, desc.rotationsEnabledZ, \n        // #endif\n        desc.linearDamping, desc.angularDamping, desc.status, desc.canSleep, desc.sleeping, desc.softCcdPrediction, desc.ccdEnabled, desc.dominanceGroup, desc.additionalSolverIterations);\n        rawTra.free();\n        rawRot.free();\n        rawLv.free();\n        rawCom.free();\n        // #if DIM3\n        rawAv.free();\n        rawPrincipalInertia.free();\n        rawInertiaFrame.free();\n        // #endif\n        const body = new RigidBody(this.raw, colliderSet, handle);\n        body.userData = desc.userData;\n        this.map.set(handle, body);\n        return body;\n    }\n    /**\n     * Removes a rigid-body from this set.\n     *\n     * This will also remove all the colliders and joints attached to the rigid-body.\n     *\n     * @param handle - The integer handle of the rigid-body to remove.\n     * @param colliders - The set of colliders that may contain colliders attached to the removed rigid-body.\n     * @param impulseJoints - The set of impulse joints that may contain joints attached to the removed rigid-body.\n     * @param multibodyJoints - The set of multibody joints that may contain joints attached to the removed rigid-body.\n     */\n    remove(handle, islands, colliders, impulseJoints, multibodyJoints) {\n        // Unmap the entities that will be removed automatically because of the rigid-body removals.\n        for (let i = 0; i < this.raw.rbNumColliders(handle); i += 1) {\n            colliders.unmap(this.raw.rbCollider(handle, i));\n        }\n        impulseJoints.forEachJointHandleAttachedToRigidBody(handle, (handle) => impulseJoints.unmap(handle));\n        multibodyJoints.forEachJointHandleAttachedToRigidBody(handle, (handle) => multibodyJoints.unmap(handle));\n        // Remove the rigid-body.\n        this.raw.remove(handle, islands.raw, colliders.raw, impulseJoints.raw, multibodyJoints.raw);\n        this.map.delete(handle);\n    }\n    /**\n     * The number of rigid-bodies on this set.\n     */\n    len() {\n        return this.map.len();\n    }\n    /**\n     * Does this set contain a rigid-body with the given handle?\n     *\n     * @param handle - The rigid-body handle to check.\n     */\n    contains(handle) {\n        return this.get(handle) != null;\n    }\n    /**\n     * Gets the rigid-body with the given handle.\n     *\n     * @param handle - The handle of the rigid-body to retrieve.\n     */\n    get(handle) {\n        return this.map.get(handle);\n    }\n    /**\n     * Applies the given closure to each rigid-body contained by this set.\n     *\n     * @param f - The closure to apply.\n     */\n    forEach(f) {\n        this.map.forEach(f);\n    }\n    /**\n     * Applies the given closure to each active rigid-bodies contained by this set.\n     *\n     * A rigid-body is active if it is not sleeping, i.e., if it moved recently.\n     *\n     * @param f - The closure to apply.\n     */\n    forEachActiveRigidBody(islands, f) {\n        islands.forEachActiveRigidBodyHandle((handle) => {\n            f(this.get(handle));\n        });\n    }\n    /**\n     * Gets all rigid-bodies in the list.\n     *\n     * @returns rigid-bodies list.\n     */\n    getAll() {\n        return this.map.getAll();\n    }\n}\n//# sourceMappingURL=rigid_body_set.js.map","import { RawColliderSet } from \"../raw\";\nimport { Coarena } from \"../coarena\";\nimport { RotationOps, VectorOps } from \"../math\";\nimport { Collider } from \"./collider\";\n/**\n * A set of rigid bodies that can be handled by a physics pipeline.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `colliderSet.free()`\n * once you are done using it (and all the rigid-bodies it created).\n */\nexport class ColliderSet {\n    /**\n     * Release the WASM memory occupied by this collider set.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n        if (!!this.map) {\n            this.map.clear();\n        }\n        this.map = undefined;\n    }\n    constructor(raw) {\n        this.raw = raw || new RawColliderSet();\n        this.map = new Coarena();\n        // Initialize the map with the existing elements, if any.\n        if (raw) {\n            raw.forEachColliderHandle((handle) => {\n                this.map.set(handle, new Collider(this, handle, null));\n            });\n        }\n    }\n    /** @internal */\n    castClosure(f) {\n        return (handle) => {\n            if (!!f) {\n                return f(this.get(handle));\n            }\n            else {\n                return undefined;\n            }\n        };\n    }\n    /** @internal */\n    finalizeDeserialization(bodies) {\n        this.map.forEach((collider) => collider.finalizeDeserialization(bodies));\n    }\n    /**\n     * Creates a new collider and return its integer handle.\n     *\n     * @param bodies - The set of bodies where the collider's parent can be found.\n     * @param desc - The collider's description.\n     * @param parentHandle - The integer handle of the rigid-body this collider is attached to.\n     */\n    createCollider(bodies, desc, parentHandle) {\n        let hasParent = parentHandle != undefined && parentHandle != null;\n        if (hasParent && isNaN(parentHandle))\n            throw Error(\"Cannot create a collider with a parent rigid-body handle that is not a number.\");\n        let rawShape = desc.shape.intoRaw();\n        let rawTra = VectorOps.intoRaw(desc.translation);\n        let rawRot = RotationOps.intoRaw(desc.rotation);\n        let rawCom = VectorOps.intoRaw(desc.centerOfMass);\n        // #if DIM3\n        let rawPrincipalInertia = VectorOps.intoRaw(desc.principalAngularInertia);\n        let rawInertiaFrame = RotationOps.intoRaw(desc.angularInertiaLocalFrame);\n        // #endif\n        let handle = this.raw.createCollider(desc.enabled, rawShape, rawTra, rawRot, desc.massPropsMode, desc.mass, rawCom, \n        // #if DIM3\n        rawPrincipalInertia, rawInertiaFrame, \n        // #endif\n        desc.density, desc.friction, desc.restitution, desc.frictionCombineRule, desc.restitutionCombineRule, desc.isSensor, desc.collisionGroups, desc.solverGroups, desc.activeCollisionTypes, desc.activeHooks, desc.activeEvents, desc.contactForceEventThreshold, desc.contactSkin, hasParent, hasParent ? parentHandle : 0, bodies.raw);\n        rawShape.free();\n        rawTra.free();\n        rawRot.free();\n        rawCom.free();\n        // #if DIM3\n        rawPrincipalInertia.free();\n        rawInertiaFrame.free();\n        // #endif\n        let parent = hasParent ? bodies.get(parentHandle) : null;\n        let collider = new Collider(this, handle, parent, desc.shape);\n        this.map.set(handle, collider);\n        return collider;\n    }\n    /**\n     * Remove a collider from this set.\n     *\n     * @param handle - The integer handle of the collider to remove.\n     * @param bodies - The set of rigid-body containing the rigid-body the collider is attached to.\n     * @param wakeUp - If `true`, the rigid-body the removed collider is attached to will be woken-up automatically.\n     */\n    remove(handle, islands, bodies, wakeUp) {\n        this.raw.remove(handle, islands.raw, bodies.raw, wakeUp);\n        this.unmap(handle);\n    }\n    /**\n     * Internal function, do not call directly.\n     * @param handle\n     */\n    unmap(handle) {\n        this.map.delete(handle);\n    }\n    /**\n     * Gets the rigid-body with the given handle.\n     *\n     * @param handle - The handle of the rigid-body to retrieve.\n     */\n    get(handle) {\n        return this.map.get(handle);\n    }\n    /**\n     * The number of colliders on this set.\n     */\n    len() {\n        return this.map.len();\n    }\n    /**\n     * Does this set contain a collider with the given handle?\n     *\n     * @param handle - The collider handle to check.\n     */\n    contains(handle) {\n        return this.get(handle) != null;\n    }\n    /**\n     * Applies the given closure to each collider contained by this set.\n     *\n     * @param f - The closure to apply.\n     */\n    forEach(f) {\n        this.map.forEach(f);\n    }\n    /**\n     * Gets all colliders in the list.\n     *\n     * @returns collider list.\n     */\n    getAll() {\n        return this.map.getAll();\n    }\n}\n//# sourceMappingURL=collider_set.js.map","import { GameCore } from './gameCore.js';\nimport RAPIER from '@dimforge/rapier3d';\n\n// Инициализация Rapier перед запуском игры\nawait RAPIER.init();\n\nexport class Game extends GameCore {\n  static RAPIER = RAPIER; // 👈 если хочешь передавать его в другие модули\n}","import { RawMultibodyJointSet } from \"../raw\";\nimport { Coarena } from \"../coarena\";\nimport { MultibodyJoint,\n// #endif\n } from \"./multibody_joint\";\n/**\n * A set of joints.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `jointSet.free()`\n * once you are done using it (and all the joints it created).\n */\nexport class MultibodyJointSet {\n    /**\n     * Release the WASM memory occupied by this joint set.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n        if (!!this.map) {\n            this.map.clear();\n        }\n        this.map = undefined;\n    }\n    constructor(raw) {\n        this.raw = raw || new RawMultibodyJointSet();\n        this.map = new Coarena();\n        // Initialize the map with the existing elements, if any.\n        if (raw) {\n            raw.forEachJointHandle((handle) => {\n                this.map.set(handle, MultibodyJoint.newTyped(this.raw, handle));\n            });\n        }\n    }\n    /**\n     * Creates a new joint and return its integer handle.\n     *\n     * @param desc - The joint's parameters.\n     * @param parent1 - The handle of the first rigid-body this joint is attached to.\n     * @param parent2 - The handle of the second rigid-body this joint is attached to.\n     * @param wakeUp - Should the attached rigid-bodies be awakened?\n     */\n    createJoint(desc, parent1, parent2, wakeUp) {\n        const rawParams = desc.intoRaw();\n        const handle = this.raw.createJoint(rawParams, parent1, parent2, wakeUp);\n        rawParams.free();\n        let joint = MultibodyJoint.newTyped(this.raw, handle);\n        this.map.set(handle, joint);\n        return joint;\n    }\n    /**\n     * Remove a joint from this set.\n     *\n     * @param handle - The integer handle of the joint.\n     * @param wake_up - If `true`, the rigid-bodies attached by the removed joint will be woken-up automatically.\n     */\n    remove(handle, wake_up) {\n        this.raw.remove(handle, wake_up);\n        this.map.delete(handle);\n    }\n    /**\n     * Internal function, do not call directly.\n     * @param handle\n     */\n    unmap(handle) {\n        this.map.delete(handle);\n    }\n    /**\n     * The number of joints on this set.\n     */\n    len() {\n        return this.map.len();\n    }\n    /**\n     * Does this set contain a joint with the given handle?\n     *\n     * @param handle - The joint handle to check.\n     */\n    contains(handle) {\n        return this.get(handle) != null;\n    }\n    /**\n     * Gets the joint with the given handle.\n     *\n     * Returns `null` if no joint with the specified handle exists.\n     *\n     * @param handle - The integer handle of the joint to retrieve.\n     */\n    get(handle) {\n        return this.map.get(handle);\n    }\n    /**\n     * Applies the given closure to each joint contained by this set.\n     *\n     * @param f - The closure to apply.\n     */\n    forEach(f) {\n        this.map.forEach(f);\n    }\n    /**\n     * Calls the given closure with the integer handle of each multibody joint attached to this rigid-body.\n     *\n     * @param f - The closure called with the integer handle of each multibody joint attached to the rigid-body.\n     */\n    forEachJointHandleAttachedToRigidBody(handle, f) {\n        this.raw.forEachJointAttachedToRigidBody(handle, f);\n    }\n    /**\n     * Gets all joints in the list.\n     *\n     * @returns joint list.\n     */\n    getAll() {\n        return this.map.getAll();\n    }\n}\n//# sourceMappingURL=multibody_joint_set.js.map","/**\n * A rule applied to combine coefficients.\n *\n * Use this when configuring the `ColliderDesc` to specify\n * how friction and restitution coefficient should be combined\n * in a contact.\n */\nexport var CoefficientCombineRule;\n(function (CoefficientCombineRule) {\n    CoefficientCombineRule[CoefficientCombineRule[\"Average\"] = 0] = \"Average\";\n    CoefficientCombineRule[CoefficientCombineRule[\"Min\"] = 1] = \"Min\";\n    CoefficientCombineRule[CoefficientCombineRule[\"Multiply\"] = 2] = \"Multiply\";\n    CoefficientCombineRule[CoefficientCombineRule[\"Max\"] = 3] = \"Max\";\n})(CoefficientCombineRule || (CoefficientCombineRule = {}));\n//# sourceMappingURL=coefficient_combine_rule.js.map","import { RawPidController } from \"../raw\";\nimport { RotationOps, VectorOps } from \"../math\";\n// TODO: unify with the JointAxesMask\n/**\n * An enum representing the possible joint axes controlled by a PidController.\n * They can be ORed together, like:\n * PidAxesMask.LinX || PidAxesMask.LinY\n * to get a pid controller that only constraints the translational X and Y axes.\n *\n * Possible axes are:\n *\n * - `X`: X translation axis\n * - `Y`: Y translation axis\n * - `Z`: Z translation axis\n * - `AngX`: X angular rotation axis (3D only)\n * - `AngY`: Y angular rotation axis (3D only)\n * - `AngZ`: Z angular rotation axis\n */\nexport var PidAxesMask;\n(function (PidAxesMask) {\n    PidAxesMask[PidAxesMask[\"None\"] = 0] = \"None\";\n    PidAxesMask[PidAxesMask[\"LinX\"] = 1] = \"LinX\";\n    PidAxesMask[PidAxesMask[\"LinY\"] = 2] = \"LinY\";\n    PidAxesMask[PidAxesMask[\"LinZ\"] = 4] = \"LinZ\";\n    // #if DIM3\n    PidAxesMask[PidAxesMask[\"AngX\"] = 8] = \"AngX\";\n    PidAxesMask[PidAxesMask[\"AngY\"] = 16] = \"AngY\";\n    // #endif\n    PidAxesMask[PidAxesMask[\"AngZ\"] = 32] = \"AngZ\";\n    // #if DIM3\n    PidAxesMask[PidAxesMask[\"AllLin\"] = 7] = \"AllLin\";\n    PidAxesMask[PidAxesMask[\"AllAng\"] = 56] = \"AllAng\";\n    // #endif\n    PidAxesMask[PidAxesMask[\"All\"] = 63] = \"All\";\n})(PidAxesMask || (PidAxesMask = {}));\n/**\n * A controller for controlling dynamic bodies using the\n * Proportional-Integral-Derivative correction model.\n */\nexport class PidController {\n    constructor(params, bodies, kp, ki, kd, axes) {\n        this.params = params;\n        this.bodies = bodies;\n        this.raw = new RawPidController(kp, ki, kd, axes);\n    }\n    /** @internal */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n    setKp(kp, axes) {\n        this.raw.set_kp(kp, axes);\n    }\n    setKi(ki, axes) {\n        this.raw.set_kp(ki, axes);\n    }\n    setKd(kd, axes) {\n        this.raw.set_kp(kd, axes);\n    }\n    setAxes(axes) {\n        this.raw.set_axes_mask(axes);\n    }\n    resetIntegrals() {\n        this.raw.reset_integrals();\n    }\n    applyLinearCorrection(body, targetPosition, targetLinvel) {\n        let rawPos = VectorOps.intoRaw(targetPosition);\n        let rawVel = VectorOps.intoRaw(targetLinvel);\n        this.raw.apply_linear_correction(this.params.dt, this.bodies.raw, body.handle, rawPos, rawVel);\n        rawPos.free();\n        rawVel.free();\n    }\n    // #if DIM3\n    applyAngularCorrection(body, targetRotation, targetAngVel) {\n        let rawPos = RotationOps.intoRaw(targetRotation);\n        let rawVel = VectorOps.intoRaw(targetAngVel);\n        this.raw.apply_angular_correction(this.params.dt, this.bodies.raw, body.handle, rawPos, rawVel);\n        rawPos.free();\n        rawVel.free();\n    }\n    // #endif\n    linearCorrection(body, targetPosition, targetLinvel) {\n        let rawPos = VectorOps.intoRaw(targetPosition);\n        let rawVel = VectorOps.intoRaw(targetLinvel);\n        let correction = this.raw.linear_correction(this.params.dt, this.bodies.raw, body.handle, rawPos, rawVel);\n        rawPos.free();\n        rawVel.free();\n        return VectorOps.fromRaw(correction);\n    }\n    // #if DIM3\n    angularCorrection(body, targetRotation, targetAngVel) {\n        let rawPos = RotationOps.intoRaw(targetRotation);\n        let rawVel = VectorOps.intoRaw(targetAngVel);\n        let correction = this.raw.angular_correction(this.params.dt, this.bodies.raw, body.handle, rawPos, rawVel);\n        rawPos.free();\n        rawVel.free();\n        return VectorOps.fromRaw(correction);\n    }\n}\n//# sourceMappingURL=pid_controller.js.map","export var ActiveHooks;\n(function (ActiveHooks) {\n    ActiveHooks[ActiveHooks[\"NONE\"] = 0] = \"NONE\";\n    ActiveHooks[ActiveHooks[\"FILTER_CONTACT_PAIRS\"] = 1] = \"FILTER_CONTACT_PAIRS\";\n    ActiveHooks[ActiveHooks[\"FILTER_INTERSECTION_PAIRS\"] = 2] = \"FILTER_INTERSECTION_PAIRS\";\n    // MODIFY_SOLVER_CONTACTS = 0b0100, /* Not supported yet in JS. */\n})(ActiveHooks || (ActiveHooks = {}));\nexport var SolverFlags;\n(function (SolverFlags) {\n    SolverFlags[SolverFlags[\"EMPTY\"] = 0] = \"EMPTY\";\n    SolverFlags[SolverFlags[\"COMPUTE_IMPULSE\"] = 1] = \"COMPUTE_IMPULSE\";\n})(SolverFlags || (SolverFlags = {}));\n//# sourceMappingURL=physics_hooks.js.map","import { RawEventQueue } from \"../raw\";\nimport { VectorOps } from \"../math\";\n/**\n * Flags indicating what events are enabled for colliders.\n */\nexport var ActiveEvents;\n(function (ActiveEvents) {\n    ActiveEvents[ActiveEvents[\"NONE\"] = 0] = \"NONE\";\n    /**\n     * Enable collision events.\n     */\n    ActiveEvents[ActiveEvents[\"COLLISION_EVENTS\"] = 1] = \"COLLISION_EVENTS\";\n    /**\n     * Enable contact force events.\n     */\n    ActiveEvents[ActiveEvents[\"CONTACT_FORCE_EVENTS\"] = 2] = \"CONTACT_FORCE_EVENTS\";\n})(ActiveEvents || (ActiveEvents = {}));\n/**\n * Event occurring when the sum of the magnitudes of the\n * contact forces between two colliders exceed a threshold.\n *\n * This object should **not** be stored anywhere. Its properties can only be\n * read from within the closure given to `EventHandler.drainContactForceEvents`.\n */\nexport class TempContactForceEvent {\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n    /**\n     * The first collider involved in the contact.\n     */\n    collider1() {\n        return this.raw.collider1();\n    }\n    /**\n     * The second collider involved in the contact.\n     */\n    collider2() {\n        return this.raw.collider2();\n    }\n    /**\n     * The sum of all the forces between the two colliders.\n     */\n    totalForce() {\n        return VectorOps.fromRaw(this.raw.total_force());\n    }\n    /**\n     * The sum of the magnitudes of each force between the two colliders.\n     *\n     * Note that this is **not** the same as the magnitude of `self.total_force`.\n     * Here we are summing the magnitude of all the forces, instead of taking\n     * the magnitude of their sum.\n     */\n    totalForceMagnitude() {\n        return this.raw.total_force_magnitude();\n    }\n    /**\n     * The world-space (unit) direction of the force with strongest magnitude.\n     */\n    maxForceDirection() {\n        return VectorOps.fromRaw(this.raw.max_force_direction());\n    }\n    /**\n     * The magnitude of the largest force at a contact point of this contact pair.\n     */\n    maxForceMagnitude() {\n        return this.raw.max_force_magnitude();\n    }\n}\n/**\n * A structure responsible for collecting events generated\n * by the physics engine.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `eventQueue.free()`\n * once you are done using it.\n */\nexport class EventQueue {\n    /**\n     * Creates a new event collector.\n     *\n     * @param autoDrain -setting this to `true` is strongly recommended. If true, the collector will\n     * be automatically drained before each `world.step(collector)`. If false, the collector will\n     * keep all events in memory unless it is manually drained/cleared; this may lead to unbounded use of\n     * RAM if no drain is performed.\n     */\n    constructor(autoDrain, raw) {\n        this.raw = raw || new RawEventQueue(autoDrain);\n    }\n    /**\n     * Release the WASM memory occupied by this event-queue.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n    /**\n     * Applies the given javascript closure on each collision event of this collector, then clear\n     * the internal collision event buffer.\n     *\n     * @param f - JavaScript closure applied to each collision event. The\n     * closure must take three arguments: two integers representing the handles of the colliders\n     * involved in the collision, and a boolean indicating if the collision started (true) or stopped\n     * (false).\n     */\n    drainCollisionEvents(f) {\n        this.raw.drainCollisionEvents(f);\n    }\n    /**\n     * Applies the given javascript closure on each contact force event of this collector, then clear\n     * the internal collision event buffer.\n     *\n     * @param f - JavaScript closure applied to each collision event. The\n     *            closure must take one `TempContactForceEvent` argument.\n     */\n    drainContactForceEvents(f) {\n        let event = new TempContactForceEvent();\n        this.raw.drainContactForceEvents((raw) => {\n            event.raw = raw;\n            f(event);\n            event.free();\n        });\n    }\n    /**\n     * Removes all events contained by this collector\n     */\n    clear() {\n        this.raw.clear();\n    }\n}\n//# sourceMappingURL=event_queue.js.map","import { VectorOps } from \"../math\";\nimport { FeatureType } from \"./feature\";\n/**\n * A ray. This is a directed half-line.\n */\nexport class Ray {\n    /**\n     * Builds a ray from its origin and direction.\n     *\n     * @param origin - The ray's starting point.\n     * @param dir - The ray's direction of propagation.\n     */\n    constructor(origin, dir) {\n        this.origin = origin;\n        this.dir = dir;\n    }\n    pointAt(t) {\n        return {\n            x: this.origin.x + this.dir.x * t,\n            y: this.origin.y + this.dir.y * t,\n            // #if DIM3\n            z: this.origin.z + this.dir.z * t,\n            // #endif\n        };\n    }\n}\n/**\n * The intersection between a ray and a collider.\n */\nexport class RayIntersection {\n    constructor(timeOfImpact, normal, featureType, featureId) {\n        /**\n         * The type of the geometric feature the point was projected on.\n         */\n        this.featureType = FeatureType.Unknown;\n        /**\n         * The id of the geometric feature the point was projected on.\n         */\n        this.featureId = undefined;\n        this.timeOfImpact = timeOfImpact;\n        this.normal = normal;\n        if (featureId !== undefined)\n            this.featureId = featureId;\n        if (featureType !== undefined)\n            this.featureType = featureType;\n    }\n    static fromRaw(raw) {\n        if (!raw)\n            return null;\n        const result = new RayIntersection(raw.time_of_impact(), VectorOps.fromRaw(raw.normal()), raw.featureType(), raw.featureId());\n        raw.free();\n        return result;\n    }\n}\n/**\n * The intersection between a ray and a collider (includes the collider handle).\n */\nexport class RayColliderIntersection {\n    constructor(collider, timeOfImpact, normal, featureType, featureId) {\n        /**\n         * The type of the geometric feature the point was projected on.\n         */\n        this.featureType = FeatureType.Unknown;\n        /**\n         * The id of the geometric feature the point was projected on.\n         */\n        this.featureId = undefined;\n        this.collider = collider;\n        this.timeOfImpact = timeOfImpact;\n        this.normal = normal;\n        if (featureId !== undefined)\n            this.featureId = featureId;\n        if (featureType !== undefined)\n            this.featureType = featureType;\n    }\n    static fromRaw(colliderSet, raw) {\n        if (!raw)\n            return null;\n        const result = new RayColliderIntersection(colliderSet.get(raw.colliderHandle()), raw.time_of_impact(), VectorOps.fromRaw(raw.normal()), raw.featureType(), raw.featureId());\n        raw.free();\n        return result;\n    }\n}\n/**\n * The time of impact between a ray and a collider.\n */\nexport class RayColliderHit {\n    constructor(collider, timeOfImpact) {\n        this.collider = collider;\n        this.timeOfImpact = timeOfImpact;\n    }\n    static fromRaw(colliderSet, raw) {\n        if (!raw)\n            return null;\n        const result = new RayColliderHit(colliderSet.get(raw.colliderHandle()), raw.timeOfImpact());\n        raw.free();\n        return result;\n    }\n}\n//# sourceMappingURL=ray.js.map","import { VectorOps, RotationOps } from \"../math\";\nimport { RawGenericJoint, RawJointAxis, RawJointType, } from \"../raw\";\n/**\n * An enum grouping all possible types of joints:\n *\n * - `Revolute`: A revolute joint that removes all degrees of freedom between the affected\n *               bodies except for the rotation along one axis.\n * - `Fixed`: A fixed joint that removes all relative degrees of freedom between the affected bodies.\n * - `Prismatic`: A prismatic joint that removes all degrees of freedom between the affected\n *                bodies except for the translation along one axis.\n * - `Spherical`: (3D only) A spherical joint that removes all relative linear degrees of freedom between the affected bodies.\n * - `Generic`: (3D only) A joint with customizable degrees of freedom, allowing any of the 6 axes to be locked.\n */\nexport var JointType;\n(function (JointType) {\n    JointType[JointType[\"Revolute\"] = 0] = \"Revolute\";\n    JointType[JointType[\"Fixed\"] = 1] = \"Fixed\";\n    JointType[JointType[\"Prismatic\"] = 2] = \"Prismatic\";\n    JointType[JointType[\"Rope\"] = 3] = \"Rope\";\n    JointType[JointType[\"Spring\"] = 4] = \"Spring\";\n    // #if DIM3\n    JointType[JointType[\"Spherical\"] = 5] = \"Spherical\";\n    JointType[JointType[\"Generic\"] = 6] = \"Generic\";\n    // #endif\n})(JointType || (JointType = {}));\nexport var MotorModel;\n(function (MotorModel) {\n    MotorModel[MotorModel[\"AccelerationBased\"] = 0] = \"AccelerationBased\";\n    MotorModel[MotorModel[\"ForceBased\"] = 1] = \"ForceBased\";\n})(MotorModel || (MotorModel = {}));\n/**\n * An enum representing the possible joint axes of a generic joint.\n * They can be ORed together, like:\n * JointAxesMask.LinX || JointAxesMask.LinY\n * to get a joint that is only free in the X and Y translational (positional) axes.\n *\n * Possible free axes are:\n *\n * - `X`: X translation axis\n * - `Y`: Y translation axis\n * - `Z`: Z translation axis\n * - `AngX`: X angular rotation axis\n * - `AngY`: Y angular rotations axis\n * - `AngZ`: Z angular rotation axis\n */\nexport var JointAxesMask;\n(function (JointAxesMask) {\n    JointAxesMask[JointAxesMask[\"LinX\"] = 1] = \"LinX\";\n    JointAxesMask[JointAxesMask[\"LinY\"] = 2] = \"LinY\";\n    JointAxesMask[JointAxesMask[\"LinZ\"] = 4] = \"LinZ\";\n    JointAxesMask[JointAxesMask[\"AngX\"] = 8] = \"AngX\";\n    JointAxesMask[JointAxesMask[\"AngY\"] = 16] = \"AngY\";\n    JointAxesMask[JointAxesMask[\"AngZ\"] = 32] = \"AngZ\";\n})(JointAxesMask || (JointAxesMask = {}));\nexport class ImpulseJoint {\n    constructor(rawSet, bodySet, handle) {\n        this.rawSet = rawSet;\n        this.bodySet = bodySet;\n        this.handle = handle;\n    }\n    static newTyped(rawSet, bodySet, handle) {\n        switch (rawSet.jointType(handle)) {\n            case RawJointType.Revolute:\n                return new RevoluteImpulseJoint(rawSet, bodySet, handle);\n            case RawJointType.Prismatic:\n                return new PrismaticImpulseJoint(rawSet, bodySet, handle);\n            case RawJointType.Fixed:\n                return new FixedImpulseJoint(rawSet, bodySet, handle);\n            case RawJointType.Spring:\n                return new SpringImpulseJoint(rawSet, bodySet, handle);\n            case RawJointType.Rope:\n                return new RopeImpulseJoint(rawSet, bodySet, handle);\n            // #if DIM3\n            case RawJointType.Spherical:\n                return new SphericalImpulseJoint(rawSet, bodySet, handle);\n            case RawJointType.Generic:\n                return new GenericImpulseJoint(rawSet, bodySet, handle);\n            // #endif\n            default:\n                return new ImpulseJoint(rawSet, bodySet, handle);\n        }\n    }\n    /** @internal */\n    finalizeDeserialization(bodySet) {\n        this.bodySet = bodySet;\n    }\n    /**\n     * Checks if this joint is still valid (i.e. that it has\n     * not been deleted from the joint set yet).\n     */\n    isValid() {\n        return this.rawSet.contains(this.handle);\n    }\n    /**\n     * The first rigid-body this joint it attached to.\n     */\n    body1() {\n        return this.bodySet.get(this.rawSet.jointBodyHandle1(this.handle));\n    }\n    /**\n     * The second rigid-body this joint is attached to.\n     */\n    body2() {\n        return this.bodySet.get(this.rawSet.jointBodyHandle2(this.handle));\n    }\n    /**\n     * The type of this joint given as a string.\n     */\n    type() {\n        return this.rawSet.jointType(this.handle);\n    }\n    // #if DIM3\n    /**\n     * The rotation quaternion that aligns this joint's first local axis to the `x` axis.\n     */\n    frameX1() {\n        return RotationOps.fromRaw(this.rawSet.jointFrameX1(this.handle));\n    }\n    // #endif\n    // #if DIM3\n    /**\n     * The rotation matrix that aligns this joint's second local axis to the `x` axis.\n     */\n    frameX2() {\n        return RotationOps.fromRaw(this.rawSet.jointFrameX2(this.handle));\n    }\n    // #endif\n    /**\n     * The position of the first anchor of this joint.\n     *\n     * The first anchor gives the position of the application point on the\n     * local frame of the first rigid-body it is attached to.\n     */\n    anchor1() {\n        return VectorOps.fromRaw(this.rawSet.jointAnchor1(this.handle));\n    }\n    /**\n     * The position of the second anchor of this joint.\n     *\n     * The second anchor gives the position of the application point on the\n     * local frame of the second rigid-body it is attached to.\n     */\n    anchor2() {\n        return VectorOps.fromRaw(this.rawSet.jointAnchor2(this.handle));\n    }\n    /**\n     * Sets the position of the first anchor of this joint.\n     *\n     * The first anchor gives the position of the application point on the\n     * local frame of the first rigid-body it is attached to.\n     */\n    setAnchor1(newPos) {\n        const rawPoint = VectorOps.intoRaw(newPos);\n        this.rawSet.jointSetAnchor1(this.handle, rawPoint);\n        rawPoint.free();\n    }\n    /**\n     * Sets the position of the second anchor of this joint.\n     *\n     * The second anchor gives the position of the application point on the\n     * local frame of the second rigid-body it is attached to.\n     */\n    setAnchor2(newPos) {\n        const rawPoint = VectorOps.intoRaw(newPos);\n        this.rawSet.jointSetAnchor2(this.handle, rawPoint);\n        rawPoint.free();\n    }\n    /**\n     * Controls whether contacts are computed between colliders attached\n     * to the rigid-bodies linked by this joint.\n     */\n    setContactsEnabled(enabled) {\n        this.rawSet.jointSetContactsEnabled(this.handle, enabled);\n    }\n    /**\n     * Indicates if contacts are enabled between colliders attached\n     * to the rigid-bodies linked by this joint.\n     */\n    contactsEnabled() {\n        return this.rawSet.jointContactsEnabled(this.handle);\n    }\n}\nexport class UnitImpulseJoint extends ImpulseJoint {\n    /**\n     * Are the limits enabled for this joint?\n     */\n    limitsEnabled() {\n        return this.rawSet.jointLimitsEnabled(this.handle, this.rawAxis());\n    }\n    /**\n     * The min limit of this joint.\n     */\n    limitsMin() {\n        return this.rawSet.jointLimitsMin(this.handle, this.rawAxis());\n    }\n    /**\n     * The max limit of this joint.\n     */\n    limitsMax() {\n        return this.rawSet.jointLimitsMax(this.handle, this.rawAxis());\n    }\n    /**\n     * Sets the limits of this joint.\n     *\n     * @param min - The minimum bound of this joint’s free coordinate.\n     * @param max - The maximum bound of this joint’s free coordinate.\n     */\n    setLimits(min, max) {\n        this.rawSet.jointSetLimits(this.handle, this.rawAxis(), min, max);\n    }\n    configureMotorModel(model) {\n        this.rawSet.jointConfigureMotorModel(this.handle, this.rawAxis(), model);\n    }\n    configureMotorVelocity(targetVel, factor) {\n        this.rawSet.jointConfigureMotorVelocity(this.handle, this.rawAxis(), targetVel, factor);\n    }\n    configureMotorPosition(targetPos, stiffness, damping) {\n        this.rawSet.jointConfigureMotorPosition(this.handle, this.rawAxis(), targetPos, stiffness, damping);\n    }\n    configureMotor(targetPos, targetVel, stiffness, damping) {\n        this.rawSet.jointConfigureMotor(this.handle, this.rawAxis(), targetPos, targetVel, stiffness, damping);\n    }\n}\nexport class FixedImpulseJoint extends ImpulseJoint {\n}\nexport class RopeImpulseJoint extends ImpulseJoint {\n}\nexport class SpringImpulseJoint extends ImpulseJoint {\n}\nexport class PrismaticImpulseJoint extends UnitImpulseJoint {\n    rawAxis() {\n        return RawJointAxis.LinX;\n    }\n}\nexport class RevoluteImpulseJoint extends UnitImpulseJoint {\n    rawAxis() {\n        return RawJointAxis.AngX;\n    }\n}\n// #if DIM3\nexport class GenericImpulseJoint extends ImpulseJoint {\n}\nexport class SphericalImpulseJoint extends ImpulseJoint {\n}\n// #endif\nexport class JointData {\n    constructor() { }\n    /**\n     * Creates a new joint descriptor that builds a Fixed joint.\n     *\n     * A fixed joint removes all the degrees of freedom between the affected bodies, ensuring their\n     * anchor and local frames coincide in world-space.\n     *\n     * @param anchor1 - Point where the joint is attached on the first rigid-body affected by this joint. Expressed in the\n     *                  local-space of the rigid-body.\n     * @param frame1 - The reference orientation of the joint wrt. the first rigid-body.\n     * @param anchor2 - Point where the joint is attached on the second rigid-body affected by this joint. Expressed in the\n     *                  local-space of the rigid-body.\n     * @param frame2 - The reference orientation of the joint wrt. the second rigid-body.\n     */\n    static fixed(anchor1, frame1, anchor2, frame2) {\n        let res = new JointData();\n        res.anchor1 = anchor1;\n        res.anchor2 = anchor2;\n        res.frame1 = frame1;\n        res.frame2 = frame2;\n        res.jointType = JointType.Fixed;\n        return res;\n    }\n    static spring(rest_length, stiffness, damping, anchor1, anchor2) {\n        let res = new JointData();\n        res.anchor1 = anchor1;\n        res.anchor2 = anchor2;\n        res.length = rest_length;\n        res.stiffness = stiffness;\n        res.damping = damping;\n        res.jointType = JointType.Spring;\n        return res;\n    }\n    static rope(length, anchor1, anchor2) {\n        let res = new JointData();\n        res.anchor1 = anchor1;\n        res.anchor2 = anchor2;\n        res.length = length;\n        res.jointType = JointType.Rope;\n        return res;\n    }\n    // #if DIM3\n    /**\n     * Create a new joint descriptor that builds generic joints.\n     *\n     * A generic joint allows customizing its degrees of freedom\n     * by supplying a mask of the joint axes that should remain locked.\n     *\n     * @param anchor1 - Point where the joint is attached on the first rigid-body affected by this joint. Expressed in the\n     *                  local-space of the rigid-body.\n     * @param anchor2 - Point where the joint is attached on the second rigid-body affected by this joint. Expressed in the\n     *                  local-space of the rigid-body.\n     * @param axis - The X axis of the joint, expressed in the local-space of the rigid-bodies it is attached to.\n     * @param axesMask - Mask representing the locked axes of the joint. You can use logical OR to select these from\n     *                   the JointAxesMask enum. For example, passing (JointAxesMask.AngX || JointAxesMask.AngY) will\n     *                   create a joint locked in the X and Y rotational axes.\n     */\n    static generic(anchor1, anchor2, axis, axesMask) {\n        let res = new JointData();\n        res.anchor1 = anchor1;\n        res.anchor2 = anchor2;\n        res.axis = axis;\n        res.axesMask = axesMask;\n        res.jointType = JointType.Generic;\n        return res;\n    }\n    /**\n     * Create a new joint descriptor that builds spherical joints.\n     *\n     * A spherical joint allows three relative rotational degrees of freedom\n     * by preventing any relative translation between the anchors of the\n     * two attached rigid-bodies.\n     *\n     * @param anchor1 - Point where the joint is attached on the first rigid-body affected by this joint. Expressed in the\n     *                  local-space of the rigid-body.\n     * @param anchor2 - Point where the joint is attached on the second rigid-body affected by this joint. Expressed in the\n     *                  local-space of the rigid-body.\n     */\n    static spherical(anchor1, anchor2) {\n        let res = new JointData();\n        res.anchor1 = anchor1;\n        res.anchor2 = anchor2;\n        res.jointType = JointType.Spherical;\n        return res;\n    }\n    /**\n     * Creates a new joint descriptor that builds a Prismatic joint.\n     *\n     * A prismatic joint removes all the degrees of freedom between the\n     * affected bodies, except for the translation along one axis.\n     *\n     * @param anchor1 - Point where the joint is attached on the first rigid-body affected by this joint. Expressed in the\n     *                  local-space of the rigid-body.\n     * @param anchor2 - Point where the joint is attached on the second rigid-body affected by this joint. Expressed in the\n     *                  local-space of the rigid-body.\n     * @param axis - Axis of the joint, expressed in the local-space of the rigid-bodies it is attached to.\n     */\n    static prismatic(anchor1, anchor2, axis) {\n        let res = new JointData();\n        res.anchor1 = anchor1;\n        res.anchor2 = anchor2;\n        res.axis = axis;\n        res.jointType = JointType.Prismatic;\n        return res;\n    }\n    /**\n     * Create a new joint descriptor that builds Revolute joints.\n     *\n     * A revolute joint removes all degrees of freedom between the affected\n     * bodies except for the rotation along one axis.\n     *\n     * @param anchor1 - Point where the joint is attached on the first rigid-body affected by this joint. Expressed in the\n     *                  local-space of the rigid-body.\n     * @param anchor2 - Point where the joint is attached on the second rigid-body affected by this joint. Expressed in the\n     *                  local-space of the rigid-body.\n     * @param axis - Axis of the joint, expressed in the local-space of the rigid-bodies it is attached to.\n     */\n    static revolute(anchor1, anchor2, axis) {\n        let res = new JointData();\n        res.anchor1 = anchor1;\n        res.anchor2 = anchor2;\n        res.axis = axis;\n        res.jointType = JointType.Revolute;\n        return res;\n    }\n    // #endif\n    intoRaw() {\n        let rawA1 = VectorOps.intoRaw(this.anchor1);\n        let rawA2 = VectorOps.intoRaw(this.anchor2);\n        let rawAx;\n        let result;\n        let limitsEnabled = false;\n        let limitsMin = 0.0;\n        let limitsMax = 0.0;\n        switch (this.jointType) {\n            case JointType.Fixed:\n                let rawFra1 = RotationOps.intoRaw(this.frame1);\n                let rawFra2 = RotationOps.intoRaw(this.frame2);\n                result = RawGenericJoint.fixed(rawA1, rawFra1, rawA2, rawFra2);\n                rawFra1.free();\n                rawFra2.free();\n                break;\n            case JointType.Spring:\n                result = RawGenericJoint.spring(this.length, this.stiffness, this.damping, rawA1, rawA2);\n                break;\n            case JointType.Rope:\n                result = RawGenericJoint.rope(this.length, rawA1, rawA2);\n                break;\n            case JointType.Prismatic:\n                rawAx = VectorOps.intoRaw(this.axis);\n                if (!!this.limitsEnabled) {\n                    limitsEnabled = true;\n                    limitsMin = this.limits[0];\n                    limitsMax = this.limits[1];\n                }\n                // #if DIM3\n                result = RawGenericJoint.prismatic(rawA1, rawA2, rawAx, limitsEnabled, limitsMin, limitsMax);\n                // #endif\n                rawAx.free();\n                break;\n            // #if DIM3\n            case JointType.Generic:\n                rawAx = VectorOps.intoRaw(this.axis);\n                // implicit type cast: axesMask is a JointAxesMask bitflag enum,\n                // we're treating it as a u8 on the Rust side\n                let rawAxesMask = this.axesMask;\n                result = RawGenericJoint.generic(rawA1, rawA2, rawAx, rawAxesMask);\n                break;\n            case JointType.Spherical:\n                result = RawGenericJoint.spherical(rawA1, rawA2);\n                break;\n            case JointType.Revolute:\n                rawAx = VectorOps.intoRaw(this.axis);\n                result = RawGenericJoint.revolute(rawA1, rawA2, rawAx);\n                rawAx.free();\n                break;\n            // #endif\n        }\n        rawA1.free();\n        rawA2.free();\n        return result;\n    }\n}\n//# sourceMappingURL=impulse_joint.js.map","import * as RAPIER from \"./exports\";\nexport * from \"./exports\";\nexport default RAPIER;\n//# sourceMappingURL=rapier.js.map","import { RawSerializationPipeline } from \"../raw\";\nimport { VectorOps } from \"../math\";\nimport { World } from \"./world\";\n/**\n * A pipeline for serializing the physics scene.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `queryPipeline.free()`\n * once you are done using it (and all the rigid-bodies it created).\n */\nexport class SerializationPipeline {\n    /**\n     * Release the WASM memory occupied by this serialization pipeline.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n    constructor(raw) {\n        this.raw = raw || new RawSerializationPipeline();\n    }\n    /**\n     * Serialize a complete physics state into a single byte array.\n     * @param gravity - The current gravity affecting the simulation.\n     * @param integrationParameters - The integration parameters of the simulation.\n     * @param broadPhase - The broad-phase of the simulation.\n     * @param narrowPhase - The narrow-phase of the simulation.\n     * @param bodies - The rigid-bodies taking part into the simulation.\n     * @param colliders - The colliders taking part into the simulation.\n     * @param impulseJoints - The impulse joints taking part into the simulation.\n     * @param multibodyJoints - The multibody joints taking part into the simulation.\n     */\n    serializeAll(gravity, integrationParameters, islands, broadPhase, narrowPhase, bodies, colliders, impulseJoints, multibodyJoints) {\n        let rawGra = VectorOps.intoRaw(gravity);\n        const res = this.raw.serializeAll(rawGra, integrationParameters.raw, islands.raw, broadPhase.raw, narrowPhase.raw, bodies.raw, colliders.raw, impulseJoints.raw, multibodyJoints.raw);\n        rawGra.free();\n        return res;\n    }\n    /**\n     * Deserialize the complete physics state from a single byte array.\n     *\n     * @param data - The byte array to deserialize.\n     */\n    deserializeAll(data) {\n        return World.fromRaw(this.raw.deserializeAll(data));\n    }\n}\n//# sourceMappingURL=serialization_pipeline.js.map","import { RawIslandManager } from \"../raw\";\n/**\n * The CCD solver responsible for resolving Continuous Collision Detection.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `ccdSolver.free()`\n * once you are done using it.\n */\nexport class IslandManager {\n    /**\n     * Release the WASM memory occupied by this narrow-phase.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n    constructor(raw) {\n        this.raw = raw || new RawIslandManager();\n    }\n    /**\n     * Applies the given closure to the handle of each active rigid-bodies contained by this set.\n     *\n     * A rigid-body is active if it is not sleeping, i.e., if it moved recently.\n     *\n     * @param f - The closure to apply.\n     */\n    forEachActiveRigidBodyHandle(f) {\n        this.raw.forEachActiveRigidBodyHandle(f);\n    }\n}\n//# sourceMappingURL=island_manager.js.map","import { RawCCDSolver } from \"../raw\";\n/**\n * The CCD solver responsible for resolving Continuous Collision Detection.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `ccdSolver.free()`\n * once you are done using it.\n */\nexport class CCDSolver {\n    /**\n     * Release the WASM memory occupied by this narrow-phase.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n    constructor(raw) {\n        this.raw = raw || new RawCCDSolver();\n    }\n}\n//# sourceMappingURL=ccd_solver.js.map","import { RawPhysicsPipeline } from \"../raw\";\nimport { VectorOps } from \"../math\";\nexport class PhysicsPipeline {\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n    }\n    constructor(raw) {\n        this.raw = raw || new RawPhysicsPipeline();\n    }\n    step(gravity, integrationParameters, islands, broadPhase, narrowPhase, bodies, colliders, impulseJoints, multibodyJoints, ccdSolver, eventQueue, hooks) {\n        let rawG = VectorOps.intoRaw(gravity);\n        if (!!eventQueue) {\n            this.raw.stepWithEvents(rawG, integrationParameters.raw, islands.raw, broadPhase.raw, narrowPhase.raw, bodies.raw, colliders.raw, impulseJoints.raw, multibodyJoints.raw, ccdSolver.raw, eventQueue.raw, hooks, !!hooks ? hooks.filterContactPair : null, !!hooks ? hooks.filterIntersectionPair : null);\n        }\n        else {\n            this.raw.step(rawG, integrationParameters.raw, islands.raw, broadPhase.raw, narrowPhase.raw, bodies.raw, colliders.raw, impulseJoints.raw, multibodyJoints.raw, ccdSolver.raw);\n        }\n        rawG.free();\n    }\n}\n//# sourceMappingURL=physics_pipeline.js.map","/**\n * Класс для управления HUD (интерфейсом в игре)\n */\nexport class HUD {\n    /**\n     * @param {HTMLElement} element - DOM элемент для отображения HUD\n     */\n    constructor(element) {\n        this.element = element;\n        \n        // Элементы HUD\n        this.healthBar = element.querySelector('#health-bar .health-value');\n        this.ammoCounter = element.querySelector('#ammo-counter');\n        this.weaponInfo = element.querySelector('#weapon-info');\n        this.statusMessages = element.querySelector('#status-messages');\n        \n        // Состояние HUD\n        this.health = 100;\n        this.ammo = 0;\n        this.weapon = 'Нет';\n        this.messages = [];\n        \n        // Таймер для удаления сообщений\n        this.messageTimer = null;\n        \n        // Инициализация\n        this.initialize();\n    }\n    \n    /**\n     * Инициализация HUD\n     */\n    initialize() {\n        // Обновляем элементы с начальными значениями, если они существуют\n        if (this.healthBar) this.updateHealthBar();\n        if (this.ammoCounter) this.updateAmmoCounter();\n        if (this.weaponInfo) this.updateWeaponInfo();\n    }\n    \n    /**\n     * Обновление HUD\n     * @param {Object} data - данные для обновления\n     */\n    update(data) {\n        // Обновляем только переданные данные\n        if (data.health !== undefined && data.health !== this.health) {\n            this.health = data.health;\n            this.updateHealthBar();\n        }\n        \n        if (data.ammo !== undefined && data.ammo !== this.ammo) {\n            this.ammo = data.ammo;\n            this.updateAmmoCounter();\n        }\n        \n        if (data.weapon !== undefined && data.weapon !== this.weapon) {\n            this.weapon = data.weapon;\n            this.updateWeaponInfo();\n        }\n    }\n    \n    /**\n     * Обновление полоски здоровья\n     */\n    updateHealthBar() {\n        // Обновляем ширину полоски здоровья\n        if (!this.healthBar) return;\n        \n        this.healthBar.style.width = `${this.health}%`;\n        \n        // Меняем цвет в зависимости от количества здоровья\n        if (this.health > 70) {\n            this.healthBar.style.backgroundColor = '#4CAF50'; // Зеленый\n        } else if (this.health > 30) {\n            this.healthBar.style.backgroundColor = '#FFC107'; // Желтый\n        } else {\n            this.healthBar.style.backgroundColor = '#F44336'; // Красный\n        }\n    }\n    \n    /**\n     * Обновление счетчика патронов\n     */\n    updateAmmoCounter() {\n        if (!this.ammoCounter) return;\n        this.ammoCounter.textContent = `${this.ammo}`;\n    }\n    \n    /**\n     * Обновление информации об оружии\n     */\n    updateWeaponInfo() {\n        if (!this.weaponInfo) return;\n        this.weaponInfo.textContent = this.weapon;\n    }\n    \n    /**\n     * Добавление сообщения в статус\n     * @param {string} message - текст сообщения\n     * @param {number} duration - длительность показа в миллисекундах\n     */\n    addStatusMessage(message, duration = 3000) {\n        // Добавляем сообщение в список\n        this.messages.push({\n            text: message,\n            timestamp: Date.now(),\n            duration\n        });\n        \n        // Обновляем отображение сообщений\n        this.updateStatusMessages();\n        \n        // Устанавливаем таймер для удаления сообщения\n        if (this.messageTimer === null) {\n            this.messageTimer = setInterval(() => {\n                this.checkMessagesTimeout();\n            }, 1000);\n        }\n    }\n    \n    /**\n     * Обновление отображения статусных сообщений\n     */\n    updateStatusMessages() {\n        if (!this.statusMessages) return;\n        \n        // Очищаем элемент\n        this.statusMessages.innerHTML = '';\n        \n        // Добавляем сообщения\n        this.messages.forEach(msg => {\n            const messageElement = document.createElement('div');\n            messageElement.className = 'status-message';\n            messageElement.textContent = msg.text;\n            \n            this.statusMessages.appendChild(messageElement);\n        });\n    }\n    \n    /**\n     * Проверка таймаута сообщений\n     */\n    checkMessagesTimeout() {\n        const now = Date.now();\n        let hasRemovedMessages = false;\n        \n        // Удаляем устаревшие сообщения\n        this.messages = this.messages.filter(msg => {\n            const isExpired = now - msg.timestamp > msg.duration;\n            if (isExpired) {\n                hasRemovedMessages = true;\n            }\n            return !isExpired;\n        });\n        \n        // Обновляем отображение, если были удалены сообщения\n        if (hasRemovedMessages) {\n            this.updateStatusMessages();\n        }\n        \n        // Останавливаем таймер, если нет сообщений\n        if (this.messages.length === 0) {\n            clearInterval(this.messageTimer);\n            this.messageTimer = null;\n        }\n    }\n    \n    /**\n     * Показать HUD\n     */\n    show() {\n        this.element.classList.remove('hidden');\n    }\n    \n    /**\n     * Скрыть HUD\n     */\n    hide() {\n        this.element.classList.add('hidden');\n    }\n}","/**\n * Класс для управления интерфейсом инвентаря\n */\nexport class InventoryUI {\n    /**\n     * @param {HTMLElement} element - DOM элемент для отображения инвентаря\n     */\n    constructor(element) {\n        this.element = element;\n        \n        // Элементы инвентаря\n        this.gridElement = element.querySelector('.inventory-grid');\n        this.equippedElement = element.querySelector('.equipped-items');\n        \n        // Данные инвентаря\n        this.inventory = {\n            items: [],\n            maxSlots: 25 // 5x5 сетка\n        };\n        \n        // Экипированные предметы\n        this.equipped = {\n            weapon: null,\n            armor: null,\n            helmet: null\n        };\n        \n        // Инициализация\n        this.initialize();\n    }\n    \n    /**\n     * Инициализация интерфейса инвентаря\n     */\n    initialize() {\n        // Создаем слоты инвентаря\n        this.createInventorySlots();\n        \n        // Создаем слоты экипировки\n        this.createEquippedSlots();\n        \n        // Настраиваем обработчики событий перетаскивания\n        this.setupDragAndDrop();\n    }\n    \n    /**\n     * Создание слотов инвентаря\n     */\n    createInventorySlots() {\n        if (!this.gridElement) return;\n        \n        // Очищаем контейнер\n        this.gridElement.innerHTML = '';\n        \n        // Создаем сетку слотов 5x5\n        for (let i = 0; i < this.inventory.maxSlots; i++) {\n            const slot = document.createElement('div');\n            slot.className = 'inventory-slot';\n            slot.dataset.slotIndex = i;\n            \n            this.gridElement.appendChild(slot);\n        }\n    }\n    \n    /**\n     * Создание слотов экипировки\n     */\n    createEquippedSlots() {\n        if (!this.equippedElement) return;\n        \n        // Очищаем контейнер\n        this.equippedElement.innerHTML = '';\n        \n        // Создаем слоты для экипировки\n        const slots = [\n            { id: 'weapon', label: 'Оружие' },\n            { id: 'armor', label: 'Броня' },\n            { id: 'helmet', label: 'Шлем' }\n        ];\n        \n        slots.forEach(slotInfo => {\n            const slotContainer = document.createElement('div');\n            slotContainer.className = 'equipped-slot-container';\n            \n            const label = document.createElement('div');\n            label.className = 'equipped-slot-label';\n            label.textContent = slotInfo.label;\n            \n            const slot = document.createElement('div');\n            slot.className = 'equipped-slot';\n            slot.dataset.slotType = slotInfo.id;\n            \n            slotContainer.appendChild(label);\n            slotContainer.appendChild(slot);\n            \n            this.equippedElement.appendChild(slotContainer);\n        });\n    }\n    \n    /**\n     * Настройка системы перетаскивания\n     */\n    setupDragAndDrop() {\n        // Здесь будет реализация drag-and-drop\n        // Для прототипа оставим простую реализацию с кликами\n        \n        // Находим все слоты инвентаря\n        const inventorySlots = this.element.querySelectorAll('.inventory-slot');\n        \n        // Добавляем обработчики клика\n        inventorySlots.forEach(slot => {\n            slot.addEventListener('click', () => {\n                // В будущем здесь будет логика выбора предмета\n                console.log('Клик по слоту инвентаря:', slot.dataset.slotIndex);\n            });\n        });\n        \n        // Находим все слоты экипировки\n        const equippedSlots = this.element.querySelectorAll('.equipped-slot');\n        \n        // Добавляем обработчики клика\n        equippedSlots.forEach(slot => {\n            slot.addEventListener('click', () => {\n                // В будущем здесь будет логика выбора экипированного предмета\n                console.log('Клик по слоту экипировки:', slot.dataset.slotType);\n            });\n        });\n    }\n    \n    /**\n     * Обновление отображения инвентаря\n     * @param {Object} inventory - данные инвентаря\n     */\n    update(inventory) {\n        if (!inventory) return;\n        \n        // Обновляем данные\n        this.inventory = inventory;\n        \n        // Обновляем отображение\n        this.updateInventoryDisplay();\n    }\n    \n    /**\n     * Обновление отображения экипировки\n     * @param {Object} equipped - данные экипировки\n     */\n    updateEquipped(equipped) {\n        if (!equipped) return;\n        \n        // Обновляем данные\n        this.equipped = equipped;\n        \n        // Обновляем отображение\n        this.updateEquippedDisplay();\n    }\n    \n    /**\n     * Обновление отображения слотов инвентаря\n     */\n    updateInventoryDisplay() {\n        // Находим все слоты инвентаря\n        const slots = this.element.querySelectorAll('.inventory-slot');\n        \n        // Очищаем все слоты\n        slots.forEach(slot => {\n            slot.innerHTML = '';\n            slot.classList.remove('filled');\n        });\n        \n        // Заполняем слоты предметами\n        this.inventory.items.forEach((item, index) => {\n            if (index >= slots.length) return;\n            \n            const slot = slots[index];\n            \n            // Создаем элемент предмета\n            const itemElement = document.createElement('div');\n            itemElement.className = 'inventory-item';\n            itemElement.dataset.itemId = item.id;\n            \n            // Разный стиль для разных типов предметов\n            switch (item.type) {\n                case 'weapon':\n                    itemElement.classList.add('item-weapon');\n                    itemElement.textContent = 'W';\n                    break;\n                case 'medkit':\n                    itemElement.classList.add('item-medkit');\n                    itemElement.textContent = 'M';\n                    break;\n                case 'ammo':\n                    itemElement.classList.add('item-ammo');\n                    itemElement.textContent = 'A';\n                    break;\n                default:\n                    itemElement.textContent = '?';\n            }\n            \n            // Добавляем предмет в слот\n            slot.appendChild(itemElement);\n            slot.classList.add('filled');\n        });\n    }\n    \n    /**\n     * Обновление отображения экипированных предметов\n     */\n    updateEquippedDisplay() {\n        // Обновляем отображение экипированного оружия\n        const weaponSlot = this.element.querySelector('.equipped-slot[data-slot-type=\"weapon\"]');\n        if (weaponSlot) {\n            weaponSlot.innerHTML = '';\n            \n            if (this.equipped.weapon) {\n                const weaponElement = document.createElement('div');\n                weaponElement.className = 'equipped-item item-weapon';\n                weaponElement.textContent = 'W';\n                \n                weaponSlot.appendChild(weaponElement);\n            }\n        }\n        \n        // Обновляем отображение экипированной брони\n        const armorSlot = this.element.querySelector('.equipped-slot[data-slot-type=\"armor\"]');\n        if (armorSlot) {\n            armorSlot.innerHTML = '';\n            \n            if (this.equipped.armor) {\n                const armorElement = document.createElement('div');\n                armorElement.className = 'equipped-item item-armor';\n                armorElement.textContent = 'A';\n                \n                armorSlot.appendChild(armorElement);\n            }\n        }\n        \n        // Обновляем отображение экипированного шлема\n        const helmetSlot = this.element.querySelector('.equipped-slot[data-slot-type=\"helmet\"]');\n        if (helmetSlot) {\n            helmetSlot.innerHTML = '';\n            \n            if (this.equipped.helmet) {\n                const helmetElement = document.createElement('div');\n                helmetElement.className = 'equipped-item item-helmet';\n                helmetElement.textContent = 'H';\n                \n                helmetSlot.appendChild(helmetElement);\n            }\n        }\n    }\n    \n    /**\n     * Добавление стилей для предметов в инвентаре\n     */\n    addInventoryStyles() {\n        // Создаем стили для предметов\n        const style = document.createElement('style');\n        style.textContent = `\n            .inventory-item {\n                width: 90%;\n                height: 90%;\n                margin: 5%;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                color: white;\n                font-weight: bold;\n                user-select: none;\n                cursor: pointer;\n            }\n            \n            .item-weapon {\n                background-color: #FF5722;\n            }\n            \n            .item-medkit {\n                background-color: #4CAF50;\n            }\n            \n            .item-ammo {\n                background-color: #FFC107;\n            }\n            \n            .item-armor {\n                background-color: #2196F3;\n            }\n            \n            .item-helmet {\n                background-color: #673AB7;\n            }\n            \n            .equipped-slot-container {\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n            }\n            \n            .equipped-slot-label {\n                margin-bottom: 5px;\n                font-size: 14px;\n            }\n            \n            .equipped-item {\n                width: 90%;\n                height: 90%;\n                margin: 5%;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                color: white;\n                font-weight: bold;\n            }\n        `;\n        \n        document.head.appendChild(style);\n    }\n    \n    /**\n     * Показать инвентарь\n     */\n    show() {\n        // Добавляем стили для предметов при первом открытии\n        if (!document.querySelector('style[data-inventory-styles]')) {\n            this.addInventoryStyles();\n        }\n        \n        this.element.classList.remove('hidden');\n    }\n    \n    /**\n     * Скрыть инвентарь\n     */\n    hide() {\n        this.element.classList.add('hidden');\n    }\n}","// client/src/core/GameUI.js\n\nimport { HUD } from '../ui/hud.js';\nimport { InventoryUI } from '../ui/inventory.js';\nimport { log } from './gameCore.js';\n\n/**\n * Класс для управления пользовательским интерфейсом игры\n */\nexport class GameUI {\n    /**\n     * @param {Object} game - ссылка на основной класс игры\n     */\n    constructor(game) {\n        this.game = game;\n        \n        // Элементы DOM\n        this.loadingScreen = document.getElementById('loading-screen');\n        this.mainMenu = document.getElementById('main-menu');\n        this.gameCanvas = document.getElementById('game-canvas');\n        this.hudElement = document.getElementById('hud');\n        this.inventoryScreen = document.getElementById('inventory-screen');\n        this.loadingStatus = document.getElementById('loading-status');\n        \n        // Компоненты UI\n        this.components = {\n            hud: null,\n            inventory: null\n        };\n    }\n    \n    /**\n     * Инициализация компонентов UI\n     */\n    async initComponents() {\n        this.components = {\n            hud: this.hudElement ? new HUD(this.hudElement) : null,\n            inventory: this.inventoryScreen ? new InventoryUI(this.inventoryScreen) : null\n        };\n        \n        return true;\n    }\n    \n    /**\n     * Обновление статуса загрузки\n     * @param {string} status - текст статуса\n     */\n    updateLoadingStatus(status) {\n        if (this.loadingStatus) {\n            this.loadingStatus.textContent = status;\n        }\n        log(status);\n    }\n    \n    /**\n     * Показать экран ошибки\n     * @param {string} message - сообщение об ошибке\n     */\n    showErrorScreen(message) {\n        // Создаем экран ошибки, если он ещё не существует\n        let errorScreen = document.getElementById('error-screen');\n        if (!errorScreen) {\n            errorScreen = document.createElement('div');\n            errorScreen.id = 'error-screen';\n            errorScreen.className = 'error-overlay';\n            errorScreen.innerHTML = `\n                <div class=\"error-container\">\n                    <h2>Произошла ошибка</h2>\n                    <p id=\"error-message\">${message}</p>\n                    <button id=\"reload-button\">Перезагрузить</button>\n                </div>\n            `;\n            document.body.appendChild(errorScreen);\n            \n            // Добавляем обработчик для кнопки перезагрузки\n            const reloadButton = document.getElementById('reload-button');\n            if (reloadButton) {\n                reloadButton.addEventListener('click', () => {\n                    window.location.reload();\n                });\n            }\n            \n            // Добавляем стили для экрана ошибки\n            const style = document.createElement('style');\n            style.textContent = `\n                .error-overlay {\n                    position: fixed;\n                    top: 0;\n                    left: 0;\n                    width: 100%;\n                    height: 100%;\n                    background-color: rgba(0, 0, 0, 0.85);\n                    z-index: 9999;\n                    display: flex;\n                    justify-content: center;\n                    align-items: center;\n                }\n                .error-container {\n                    background-color: #333;\n                    padding: 20px;\n                    border: 2px solid #f44336;\n                    max-width: 80%;\n                    text-align: center;\n                }\n                .error-container h2 {\n                    color: #f44336;\n                    margin-bottom: 15px;\n                }\n                .error-container p {\n                    color: #fff;\n                    margin-bottom: 20px;\n                    font-family: monospace;\n                    white-space: pre-wrap;\n                    text-align: left;\n                }\n                #reload-button {\n                    background-color: #4CAF50;\n                    color: white;\n                    border: none;\n                    padding: 10px 20px;\n                    cursor: pointer;\n                    font-size: 16px;\n                }\n                #reload-button:hover {\n                    background-color: #45a049;\n                }\n            `;\n            document.head.appendChild(style);\n        } else {\n            // Обновляем сообщение об ошибке\n            const errorMessage = document.getElementById('error-message');\n            if (errorMessage) {\n                errorMessage.textContent = message;\n            }\n        }\n        \n        // Скрываем экран загрузки\n        if (this.loadingScreen) {\n            this.loadingScreen.classList.add('hidden');\n        }\n    }\n    \n    /**\n     * Показать главное меню\n     */\n    showMainMenu() {\n        if (this.loadingScreen) {\n            this.loadingScreen.classList.add('hidden');\n        }\n        if (this.mainMenu) {\n            this.mainMenu.classList.remove('hidden');\n        }\n        this.game.state.currentScene = 'menu';\n        log('Главное меню отображено');\n    }\n    \n    /**\n     * Скрыть главное меню\n     */\n    hideMainMenu() {\n        if (this.mainMenu) {\n            this.mainMenu.classList.add('hidden');\n        }\n    }\n    \n    /**\n     * Показать игровой экран\n     */\n    showGameScreen() {\n        if (this.gameCanvas) {\n            this.gameCanvas.classList.remove('hidden');\n        }\n        if (this.hudElement) {\n            this.hudElement.classList.remove('hidden');\n        }\n    }\n    \n    /**\n     * Обновление UI\n     */\n    update() {\n        // Обновляем HUD\n        if (this.game.world.player && this.components.hud) {\n            this.components.hud.update({\n                health: this.game.world.player.health,\n                ammo: this.game.world.player.ammo,\n                weapon: this.game.world.player.weapon\n            });\n        }\n    }\n    \n    /**\n     * Переключение инвентаря\n     */\n    toggleInventory() {\n        if (this.inventoryScreen.classList.contains('hidden')) {\n            this.showInventory();\n        } else {\n            this.hideInventory();\n        }\n    }\n    \n    /**\n     * Показать инвентарь\n     */\n    showInventory() {\n        this.inventoryScreen.classList.remove('hidden');\n        \n        if (this.components.inventory) {\n            this.components.inventory.show();\n        }\n        \n        if (this.game.input) {\n            this.game.input.disableGameControls();\n        }\n    }\n    \n    /**\n     * Скрыть инвентарь\n     */\n    hideInventory() {\n        this.inventoryScreen.classList.add('hidden');\n        \n        if (this.components.inventory) {\n            this.components.inventory.hide();\n        }\n        \n        if (this.game.input) {\n            this.game.input.enableGameControls();\n        }\n    }\n}","// client/src/entities/player.js\n\n/**\n * Класс игрока, управляющий поведением и состоянием персонажа\n */\nexport class Player {\n    /**\n     * @param {Object} options - настройки игрока\n     * @param {Object} options.position - начальная позиция\n     * @param {Object} options.renderer - ссылка на рендерер\n     * @param {Object} options.input - ссылка на обработчик ввода\n     * @param {Object} options.game - ссылка на игровой объект\n     */\n    constructor(options) {\n        // Базовые параметры\n        this.id = options.id || 'local_player';\n        this.isLocalPlayer = options.isLocalPlayer !== undefined ? options.isLocalPlayer : true;\n        \n        // Позиция и вращение\n        this.position = options.position || { x: 0, y: 0, z: 0 };\n        this.rotation = options.rotation || { x: 0, y: 0, z: 0 };\n        this.direction = { x: 0, z: -1 }; // Направление взгляда (по умолчанию вперед)\n        \n        // Характеристики\n        this.health = options.health || 100;\n        this.maxHealth = options.maxHealth || 100;\n        this.speed = options.speed || 5; // базовая скорость движения\n        this.weapon = options.weapon || 'pistol';\n        this.ammo = options.ammo || 30;\n        this.weaponType = 'single'; // 'single' или 'auto'\n        this.fireRate = 500; // задержка между выстрелами в мс (для одиночного оружия)\n        this.recoil = { x: 0.05, y: 0.05 }; // сила отдачи\n        \n        // Инвентарь\n        this.inventory = options.inventory || {\n            items: [],\n            maxSlots: 25 // 5x5 сетка\n        };\n        \n        // Состояния\n        this.isMoving = false;\n        this.isRunning = false;\n        this.isAiming = false;\n        this.isShooting = false;\n        this.canShoot = true; // флаг возможности стрельбы\n        this.lastShootTime = 0;\n        this.currentState = 'idle'; // idle, walk, run, aim, shoot\n        \n        // Параметры обзора\n        this.viewAngle = 90; // начальный угол обзора в градусах\n        this.normalViewAngle = 90;\n        this.aimingViewAngle = 45;\n        this.runningViewAngle = 70; // угол обзора при беге\n        this.viewDistance = 50; // дальность видимости\n        \n        // Параметры движения\n        this.normalSpeed = 5;\n        this.runningSpeed = 7.5; // скорость бега (+50%)\n        this.aimingSpeed = 1.5; // скорость при прицеливании (-70%)\n        this.acceleration = 10; // ускорение для плавности движения\n        this.velocity = { x: 0, z: 0 }; // текущая скорость\n        \n        // Ссылки на другие модули\n        this.renderer = options.renderer;\n        this.input = options.input;\n        this.game = options.game;\n        this.mesh = null; // будет инициализирован при создании модели\n        \n        // Если это локальный игрок, настраиваем управление\n        if (this.isLocalPlayer) {\n            this.setupControls();\n        }\n        \n        // Создаем модель игрока\n        this.createModel();\n    }\n    \n    /**\n     * Создание модели игрока\n     */\n    createModel() {\n        // Если рендерер не доступен, выходим\n        if (!this.renderer) return;\n        \n        // Создаем меш через рендерер\n        this.mesh = this.renderer.addPlayer({\n            position: this.position,\n            rotation: this.rotation,\n            isLocalPlayer: this.isLocalPlayer\n        });\n    }\n    \n    /**\n     * Настройка управления игроком\n     */\n    setupControls() {\n        if (!this.input) return;\n        \n        // Добавляем обработчик ЛКМ для прицеливания\n        this.input.setMouseDownCallback((button, position) => {\n            if (button === 0) { // Левая кнопка\n                this.startAiming();\n            }\n        });\n        \n        // Обработчик отпускания ЛКМ\n        this.input.setMouseUpCallback((button) => {\n            if (button === 0) { // Левая кнопка\n                this.stopAiming();\n            }\n        });\n        \n        // Обработчик ПКМ для стрельбы\n        this.input.setRightClickCallback(() => {\n            this.tryShoot();\n        });\n        \n        // Обработчик движения мыши для вращения\n        this.input.setMouseMoveCallback((position, delta) => {\n            this.handleMouseMove(position);\n        });\n    }\n    \n    /**\n     * Начало прицеливания\n     */\n    startAiming() {\n        this.isAiming = true;\n        this.speed = this.aimingSpeed;\n        this.viewAngle = this.aimingViewAngle;\n        console.log('Начало прицеливания');\n    }\n    \n    /**\n     * Конец прицеливания\n     */\n    stopAiming() {\n        this.isAiming = false;\n        this.speed = this.normalSpeed;\n        this.viewAngle = this.normalViewAngle;\n        console.log('Конец прицеливания');\n    }\n    \n    /**\n     * Попытка выстрела\n     */\n    tryShoot() {\n        // Можно стрелять только если игрок прицеливается\n        if (!this.isAiming || !this.canShoot || this.ammo <= 0) {\n            return;\n        }\n        \n        const currentTime = Date.now();\n        \n        // Проверяем временную задержку между выстрелами\n        if (currentTime - this.lastShootTime < this.fireRate) {\n            return;\n        }\n        \n        // Устанавливаем время последнего выстрела\n        this.lastShootTime = currentTime;\n        \n        // Уменьшаем количество патронов\n        this.ammo--;\n        \n        // Устанавливаем флаг стрельбы (для анимации)\n        this.isShooting = true;\n        setTimeout(() => {\n            this.isShooting = false;\n        }, 100);\n        \n        // Применяем отдачу\n        this.applyRecoil();\n        \n        // Создаем выстрел\n        this.createShot();\n        \n        // Для одиночного оружия добавляем задержку перед следующим выстрелом\n        if (this.weaponType === 'single') {\n            this.canShoot = false;\n            setTimeout(() => {\n                this.canShoot = true;\n            }, this.fireRate);\n        }\n        \n        // Отправляем информацию о выстреле на сервер\n        if (this.game && this.game.network) {\n            this.game.network.sendPlayerShoot(\n                this.position,\n                this.direction,\n                this.weapon\n            );\n        }\n    }\n    \n    /**\n     * Применение отдачи при стрельбе\n     */\n    applyRecoil() {\n        // Случайное смещение прицела в пределах recoil\n        const recoilX = (Math.random() - 0.5) * this.recoil.x * 2;\n        const recoilY = -Math.abs(Math.random() * this.recoil.y); // Всегда вверх\n        \n        // Получаем текущую позицию мыши\n        const mousePos = this.input.getMousePosition();\n        \n        // Симулируем движение мыши с отдачей\n        const newMousePos = {\n            x: mousePos.x + recoilX * 100, // Умножаем для заметного эффекта\n            y: mousePos.y + recoilY * 100\n        };\n        \n        // Обновляем направление игрока\n        this.handleMouseMove(newMousePos);\n    }\n    \n    /**\n     * Обработка движения мыши\n     * @param {Object} position - позиция мыши {x, y}\n     */\n    handleMouseMove(position) {\n        // Получаем размеры канваса\n        const canvasRect = this.renderer.canvas.getBoundingClientRect();\n        const canvasCenter = {\n            x: canvasRect.left + canvasRect.width / 2,\n            y: canvasRect.top + canvasRect.height / 2\n        };\n        \n        // Вычисляем вектор от центра к мыши\n        const mouseVec = {\n            x: position.x - canvasCenter.x,\n            y: position.y - canvasCenter.y\n        };\n        \n        // Нормализуем вектор\n        const length = Math.sqrt(mouseVec.x * mouseVec.x + mouseVec.y * mouseVec.y);\n        if (length > 0) {\n            mouseVec.x /= length;\n            mouseVec.y /= length;\n        }\n        \n        // Вычисляем угол поворота (в радианах)\n        const angle = Math.atan2(mouseVec.x, -mouseVec.y);\n        \n        // Устанавливаем направление игрока\n        this.rotation.y = angle;\n        this.direction = {\n            x: Math.sin(angle),\n            z: -Math.cos(angle)\n        };\n    }\n    \n    /**\n     * Обновление состояния игрока\n     * @param {number} deltaTime - прошедшее время с предыдущего кадра\n     */\n    update(deltaTime) {\n        if (!deltaTime) return;\n        \n        // Только локальный игрок может двигаться сам\n        if (this.isLocalPlayer) {\n            this.handleMovement(deltaTime);\n            \n            // Обновляем камеру для слежения за игроком\n            if (this.renderer) {\n                this.renderer.updateCamera(this.position);\n            }\n            \n            // Обновляем параметры при нажатии Shift (бег)\n            this.handleRunning();\n            \n            // Обновляем состояние анимации\n            this.updateAnimationState();\n        }\n        \n        // Обновляем модель (позицию и анимацию)\n        this.updateModel();\n    }\n    \n    /**\n     * Обработка бега (нажатие Shift)\n     */\n    handleRunning() {\n        if (!this.input) return;\n        \n        const wasRunning = this.isRunning;\n        \n        // Проверяем нажат ли Shift и не в режиме прицеливания\n        if (this.input.isKeyPressed('ShiftLeft') && !this.isAiming) {\n            if (!this.isRunning) {\n                this.isRunning = true;\n                this.speed = this.runningSpeed;\n                this.viewAngle = this.runningViewAngle;\n            }\n        } else if (this.isRunning) {\n            this.isRunning = false;\n            this.speed = this.isAiming ? this.aimingSpeed : this.normalSpeed;\n            this.viewAngle = this.isAiming ? this.aimingViewAngle : this.normalViewAngle;\n        }\n        \n        // Если состояние бега изменилось, сообщаем об этом\n        if (wasRunning !== this.isRunning) {\n            console.log(this.isRunning ? 'Начало бега' : 'Конец бега');\n        }\n    }\n    \n    /**\n     * Обновление состояния анимации\n     */\n    updateAnimationState() {\n        let newState = 'idle';\n        \n        if (this.isMoving) {\n            newState = this.isRunning ? 'run' : 'walk';\n        }\n        \n        if (this.isAiming) {\n            newState = 'aim';\n        }\n        \n        if (this.isShooting) {\n            newState = 'shoot';\n        }\n        \n        if (this.currentState !== newState) {\n            this.currentState = newState;\n            console.log(`Состояние анимации: ${this.currentState}`);\n            \n            // Здесь будет логика смены анимации\n        }\n    }\n    \n    /**\n     * Обработка движения игрока\n     * @param {number} deltaTime - прошедшее время с предыдущего кадра\n     */\n    handleMovement(deltaTime) {\n        if (!this.input) return;\n        \n        // Получаем направление движения\n        const moveDir = this.input.getMovementDirection();\n        \n        // Если вектор движения нулевой, снижаем скорость\n        if (moveDir.x === 0 && moveDir.z === 0) {\n            // Применяем трение для плавной остановки\n            this.velocity.x *= 0.9;\n            this.velocity.z *= 0.9;\n            \n            // Если скорость совсем маленькая, останавливаемся\n            if (Math.abs(this.velocity.x) < 0.01 && Math.abs(this.velocity.z) < 0.01) {\n                this.velocity.x = 0;\n                this.velocity.z = 0;\n                this.isMoving = false;\n            }\n        } else {\n            // Устанавливаем флаг движения\n            this.isMoving = true;\n            \n            // Вычисляем целевую скорость с учетом нормализации\n            const length = Math.sqrt(moveDir.x * moveDir.x + moveDir.z * moveDir.z);\n            const normalizedDir = {\n                x: moveDir.x / length,\n                z: moveDir.z / length\n            };\n            \n            const targetVel = {\n                x: normalizedDir.x * this.speed,\n                z: normalizedDir.z * this.speed\n            };\n            \n            // Плавно изменяем скорость\n            this.velocity.x += (targetVel.x - this.velocity.x) * this.acceleration * deltaTime;\n            this.velocity.z += (targetVel.z - this.velocity.z) * this.acceleration * deltaTime;\n        }\n        \n        // Вычисляем новую позицию\n        const newX = this.position.x + this.velocity.x * deltaTime;\n        const newZ = this.position.z + this.velocity.z * deltaTime;\n        \n        // Проверка столкновений (упрощенная)\n        const canMoveX = this.checkCollision({ x: newX, y: this.position.y, z: this.position.z });\n        const canMoveZ = this.checkCollision({ x: this.position.x, y: this.position.y, z: newZ });\n        \n        // Обновляем позицию\n        if (canMoveX) {\n            this.position.x = newX;\n        } else {\n            this.velocity.x = 0; // Остановка при столкновении\n        }\n        \n        if (canMoveZ) {\n            this.position.z = newZ;\n        } else {\n            this.velocity.z = 0; // Остановка при столкновении\n        }\n        \n        // Отправляем изменения на сервер, если доступно\n        if (this.game && this.game.network) {\n            this.game.network.sendPlayerMove(this.position, this.rotation);\n        }\n    }\n    \n    /**\n     * Упрощенная проверка столкновений\n     * @param {Object} newPosition - новая позиция для проверки\n     * @returns {boolean} - можно ли двигаться на новую позицию\n     */\n    checkCollision(newPosition) {\n        // Проверяем выход за границы карты\n        const mapSize = 500; // Половина размера карты (1000x1000)\n        \n        if (Math.abs(newPosition.x) > mapSize || Math.abs(newPosition.z) > mapSize) {\n            return false;\n        }\n        \n        // Здесь должна быть проверка столкновений с объектами\n        // В прототипе используем только границы карты\n        \n        return true;\n    }\n    \n    /**\n     * Создание выстрела (визуально и логически)\n     */\n    createShot() {\n        // В прототипе создаем простой луч\n        if (this.renderer && this.renderer.scene) {\n            const rayStart = { ...this.position };\n            rayStart.y += 1; // Уровень \"глаз\"\n            \n            const rayEnd = {\n                x: rayStart.x + this.direction.x * 100,\n                y: rayStart.y,\n                z: rayStart.z + this.direction.z * 100\n            };\n            \n            // Создаем временный луч для визуализации выстрела\n            this.renderer.createTemporaryBeam(rayStart, rayEnd, 0xFF0000, 100);\n            \n            console.log('Выстрел!', this.direction);\n        }\n    }\n    \n    /**\n     * Обновление модели игрока\n     */\n    updateModel() {\n        if (this.mesh && this.renderer) {\n            // Обновляем позицию меша\n            this.renderer.updateObjectTransform(this.mesh, this.position, this.rotation);\n            \n            // В будущем здесь будет управление анимациями\n        }\n    }\n    \n    /**\n     * Получение угла обзора\n     * @returns {number} - текущий угол обзора в градусах\n     */\n    getViewAngle() {\n        return this.viewAngle;\n    }\n    \n    /**\n     * Получение дальности обзора\n     * @returns {number} - текущая дальность обзора\n     */\n    getViewDistance() {\n        return this.viewDistance;\n    }\n    \n    /**\n     * Получение направления взгляда\n     * @returns {Object} - вектор направления {x, z}\n     */\n    getViewDirection() {\n        return { ...this.direction };\n    }\n}","/**\n* Система визуализации конуса зрения и тумана войны в стиле Darkwood\n* Использует Rapier.js для расчета рейкастов и Three.js для отображения\n*/\nexport class VisionSystem {\n    /**\n     * @param {Object} options - настройки системы визуализации\n     * @param {Object} options.scene - Three.js сцена\n     * @param {Object} options.world - Rapier.js мир физики\n     * @param {Object} options.player - игрок, для которого отображается конус зрения\n     * @param {number} options.fov - угол обзора в градусах (по умолчанию 90)\n     * @param {number} options.rayCount - количество лучей (по умолчанию 50)\n     * @param {number} options.maxDistance - максимальная дистанция обзора (по умолчанию 50)\n     * @param {boolean} options.memoryEnabled - сохранение посещенных областей (по умолчанию true)\n     * @param {boolean} options.blurEdges - размытие краев конуса зрения (по умолчанию true)\n     */\n    constructor(options) {\n        // Проверяем наличие обязательных параметров\n        if (!options.scene || !options.player) {\n            console.error('VisionSystem: не указаны обязательные параметры (scene, player)');\n            return;\n        }\n \n        this.scene = options.scene;\n        this.world = options.world; // Может быть undefined на момент создания\n        this.player = options.player;\n        \n        // Настройки по умолчанию\n        this.fov = options.fov !== undefined ? options.fov : 90; // угол обзора в градусах\n        this.rayCount = options.rayCount || 60; // количество лучей (было 50, оптимизировано)\n        this.maxDistance = options.maxDistance || 50; // максимальная дистанция обзора\n        this.memoryEnabled = options.memoryEnabled !== undefined ? options.memoryEnabled : true; // сохранение посещенных областей\n        this.blurEdges = options.blurEdges !== undefined ? options.blurEdges : true; // размытие краев конуса зрения\n        \n        // Константы для динамической настройки угла обзора\n        this.normalFov = 90; // нормальный угол обзора в градусах\n        this.aimingFov = 45; // угол обзора при прицеливании\n        this.runningFov = 70; // угол обзора при беге\n        \n        // Внутренние переменные\n        this.visibilityMask = null; // маска для затемнения невидимых областей\n        this.memoryMask = null; // маска для посещенных областей\n        this.visibilityShape = null; // форма для вырезания конуса видимости\n        this.currentVisionMesh = null; // текущая область конуса видимости\n        \n        // Для хранения информации о посещенных зонах\n        this.cellSize = options.cellSize || 5; // размер ячейки для карты посещенных областей\n        this.gridSize = 1000; // размер игрового мира\n        this.gridResolution = Math.ceil(this.gridSize / this.cellSize); // разрешение сетки\n        this.memoryGrid = new Array(this.gridResolution); // сетка посещенных областей\n        \n        // Флаги состояния\n        this.isInitialized = false;\n        this.isRapierReady = false;\n        this.isRapierChecked = false;\n        this.initializationPromise = null;\n        this.lastErrorTime = 0;\n        this.updateInterval = options.updateInterval || 0; // 0 = каждый кадр, иначе мс между обновлениями\n        this.lastUpdateTime = 0;\n        this.errorCooldown = 5000; // Пауза между повторными логами ошибок (мс)\n        \n        // Инициализация сетки памяти\n        for (let i = 0; i < this.gridResolution; i++) {\n            this.memoryGrid[i] = new Array(this.gridResolution).fill(0);\n        }\n        \n        // Группа для всех элементов системы видимости\n        this.visibilityGroup = new THREE.Group();\n        this.scene.add(this.visibilityGroup);\n \n        // Асинхронная инициализация\n        this.init();\n    }\n    \n    /**\n     * Асинхронная инициализация системы видимости\n     * @returns {Promise} - промис, который разрешается после инициализации\n     */\n    async init() {\n        if (this.initializationPromise) {\n            return this.initializationPromise;\n        }\n        \n        this.initializationPromise = new Promise(async (resolve) => {\n            try {\n                console.log('VisionSystem: начало инициализации...');\n                \n                // Создаем слои видимости\n                this.initVisibilityLayers();\n                \n                // Проверка доступности Rapier\n                await this.checkRapierAvailability();\n                \n                this.isInitialized = true;\n                console.log('VisionSystem: успешно инициализирована');\n                resolve(true);\n            } catch (error) {\n                console.error('VisionSystem: ошибка при инициализации:', error);\n                resolve(false);\n            }\n        });\n        \n        return this.initializationPromise;\n    }\n    \n    /**\n     * Проверка доступности библиотеки Rapier\n     * @returns {Promise} - промис, который разрешается, когда Rapier доступен\n     */\n    async checkRapierAvailability() {\n        // Если уже проверили - возвращаем результат\n        if (this.isRapierChecked) {\n            return this.isRapierReady;\n        }\n        \n        return new Promise((resolve) => {\n            // Функция для проверки доступности Rapier\n            const checkRapier = () => {\n                // Проверяем доступность Rapier у нас\n                const RAPIER = this.getRapierInstance();\n                if (RAPIER) {\n                    console.log('VisionSystem: RAPIER доступен');\n                    this.isRapierReady = true;\n                    this.isRapierChecked = true;\n                    resolve(true);\n                    return;\n                }\n                \n                // Если Rapier недоступен и мир не установлен - продолжаем проверять\n                if (!this.world) {\n                    setTimeout(checkRapier, 100);\n                    return;\n                }\n                \n                // Проверяем, есть ли у мира метод castRay или castRayAndGetNormal\n                if (typeof this.world.castRay === 'function' || \n                    typeof this.world.castRayAndGetNormal === 'function') {\n                    console.log('VisionSystem: мир физики доступен и поддерживает рейкасты');\n                    this.isRapierReady = true;\n                    this.isRapierChecked = true;\n                    resolve(true);\n                    return;\n                }\n                \n                // Продолжаем проверять, но не чаще раза в 100 мс\n                setTimeout(checkRapier, 100);\n            };\n            \n            // Начинаем проверку\n            checkRapier();\n        });\n    }\n \n    /**\n     * Получение экземпляра RAPIER из разных источников\n     * @returns {Object|null} - объект RAPIER или null, если он недоступен\n     */\n    getRapierInstance() {\n        if (typeof RAPIER !== 'undefined') {\n            return RAPIER;\n        }\n        \n        if (typeof window !== 'undefined' && window.RAPIER) {\n            return window.RAPIER;\n        }\n        \n        return null;\n    }\n \n    /**\n     * Инициализация слоев видимости\n     */\n    initVisibilityLayers() {\n        // 1. Создаем слой тумана войны (полностью закрывает карту)\n        this.createFogOfWarLayer();\n        \n        // 2. Создаем слой памяти (посещенные области в черно-белом)\n        this.createMemoryLayer();\n        \n        // 3. Создаем слой текущей видимости (конус зрения)\n        this.createVisionConeLayer();\n    }\n    \n    /**\n     * Создание слоя тумана войны\n     */\n    createFogOfWarLayer() {\n        // Создаем большой черный прямоугольник, покрывающий весь мир\n        const fogGeometry = new THREE.PlaneGeometry(this.gridSize * 1.5, this.gridSize * 1.5);\n        const fogMaterial = new THREE.MeshBasicMaterial({\n            color: 0x000000,\n            transparent: true,\n            opacity: 0.95,\n            side: THREE.DoubleSide,\n            depthTest: false,\n            depthWrite: false\n        });\n        \n        this.fogOfWarMesh = new THREE.Mesh(fogGeometry, fogMaterial);\n        this.fogOfWarMesh.rotation.x = -Math.PI / 2; // горизонтально\n        this.fogOfWarMesh.position.y = 0.3; // немного выше остальных слоев\n        this.fogOfWarMesh.renderOrder = 997; // рендерим под остальными слоями\n        this.visibilityGroup.add(this.fogOfWarMesh);\n    }\n    \n    /**\n     * Создание слоя памяти (посещенные области)\n     */\n    createMemoryLayer() {\n        // Создаем сетку для отображения посещенных областей\n        const gridGeometry = new THREE.PlaneGeometry(\n            this.gridSize * 1.5, \n            this.gridSize * 1.5,\n            this.gridResolution,\n            this.gridResolution\n        );\n        \n        // Материал для посещенных областей (чёрно-белый)\n        const memoryMaterial = new THREE.ShaderMaterial({\n            uniforms: {\n                opacity: { value: 0.7 },\n                colorInfluence: { value: 0.2 } // насколько сильно сохраняется цвет (0 = полностью ЧБ, 1 = цветной)\n            },\n            vertexShader: `\n                varying vec2 vUv;\n                varying vec3 vPosition;\n                \n                void main() {\n                    vUv = uv;\n                    vPosition = position;\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                }\n            `,\n            fragmentShader: `\n                uniform float opacity;\n                uniform float colorInfluence;\n                \n                varying vec2 vUv;\n                varying vec3 vPosition;\n                \n                void main() {\n                    // В реальной реализации здесь будет использоваться текстура с рендера сцены\n                    // Для прототипа просто делаем ЧБ эффект\n                    gl_FragColor = vec4(0.3, 0.3, 0.3, opacity);\n                }\n            `,\n            transparent: true,\n            side: THREE.DoubleSide,\n            depthTest: false,\n            depthWrite: false\n        });\n        \n        this.memoryMesh = new THREE.Mesh(gridGeometry, memoryMaterial);\n        this.memoryMesh.rotation.x = -Math.PI / 2; // горизонтально\n        this.memoryMesh.position.y = 0.2; // выше земли, но ниже тумана\n        this.memoryMesh.renderOrder = 998; // рендерим между туманом и конусом видимости\n        this.visibilityGroup.add(this.memoryMesh);\n        \n        // Создаем атрибут видимости для вершин\n        const visibilityAttribute = new Float32Array(gridGeometry.attributes.position.count);\n        for (let i = 0; i < visibilityAttribute.length; i++) {\n            visibilityAttribute[i] = 0.0; // изначально все вершины невидимы\n        }\n        \n        gridGeometry.setAttribute('visibility', new THREE.BufferAttribute(visibilityAttribute, 1));\n    }\n    \n    /**\n     * Создание слоя конуса видимости\n     */\n    createVisionConeLayer() {\n        // Создаем базовую геометрию (будет обновляться каждый кадр)\n        const initialShape = new THREE.Shape();\n        initialShape.moveTo(0, 0);\n        initialShape.lineTo(5, 5);\n        initialShape.lineTo(-5, 5);\n        initialShape.lineTo(0, 0);\n        \n        // Маска для затемнения невидимых областей\n        const maskMaterial = new THREE.MeshBasicMaterial({\n            color: 0x000000,\n            side: THREE.DoubleSide,\n            transparent: true,\n            opacity: 0.8,\n            depthTest: false,\n            depthWrite: false\n        });\n        \n        // Создаем пустую маску (будет обновляться каждый кадр)\n        const worldSize = this.gridSize * 1.5;\n        const maskGeometry = new THREE.PlaneGeometry(worldSize, worldSize);\n        this.visibilityMask = new THREE.Mesh(maskGeometry, maskMaterial);\n        this.visibilityMask.rotation.x = -Math.PI / 2; // горизонтально\n        this.visibilityMask.position.y = 0.1; // ниже всех остальных слоёв\n        this.visibilityMask.renderOrder = 999; // рендерим последним\n        this.visibilityGroup.add(this.visibilityMask);\n    }\n    \n    /**\n     * Проверка готовности системы видимости\n     * @returns {boolean} - флаг готовности\n     */\n    isReady() {\n        return this.isInitialized && this.isRapierReady && !!this.world;\n    }\n    \n    /**\n     * Обновление конуса видимости\n     */\n    update() {\n        // Если система не инициализирована, ждем\n        if (!this.isInitialized) {\n            return;\n        }\n        \n        // Если Rapier не готов, пробуем проверить его доступность\n        if (!this.isRapierReady) {\n            this.checkRapierAvailability();\n            return;\n        }\n        \n        // Если не переданы необходимые объекты, выходим\n        if (!this.player || !this.world) {\n            return;\n        }\n \n        // Проверяем, не слишком ли рано для обновления (для оптимизации)\n        const now = Date.now();\n        if (this.updateInterval > 0 && now - this.lastUpdateTime < this.updateInterval) {\n            return;\n        }\n        this.lastUpdateTime = now;\n        \n        try {\n            // Получаем актуальные данные от игрока\n            const playerPos = this.player.position;\n            let playerDirection = { x: 0, z: -1 }; // направление по умолчанию\n            \n            // Пытаемся получить текущее направление взгляда, если метод существует\n            if (typeof this.player.getViewDirection === 'function') {\n                playerDirection = this.player.getViewDirection();\n            }\n            \n            // Определяем текущий угол обзора в зависимости от состояния игрока\n            let currentFov = this.normalFov;\n            if (this.player.isAiming) {\n                currentFov = this.aimingFov;\n            } else if (this.player.isRunning) {\n                currentFov = this.runningFov;\n            }\n            // Преобразуем угол из градусов в радианы\n            const fovRadians = (currentFov * Math.PI) / 180;\n            \n            // Вычисляем направление взгляда игрока в радианах\n            const directionAngle = Math.atan2(playerDirection.x, playerDirection.z);\n            \n            // Обновляем маску видимости\n            this.updateVisionMask(playerPos, directionAngle, fovRadians);\n            \n            // Обновляем карту памяти\n            if (this.memoryEnabled) {\n                this.updateMemoryMap(playerPos, directionAngle, fovRadians);\n            }\n        } catch (error) {\n            // Ограничиваем частоту вывода ошибок в консоль\n            const now = Date.now();\n            if (now - this.lastErrorTime > this.errorCooldown) {\n                console.error('VisionSystem: ошибка при обновлении:', error);\n                this.lastErrorTime = now;\n            }\n        }\n    }\n    \n    /**\n     * Обновление маски видимости (конуса зрения)\n     * @param {Object} playerPos - позиция игрока\n     * @param {number} directionAngle - угол направления взгляда в радианах\n     * @param {number} fovRadians - угол обзора в радианах\n     */\n    updateVisionMask(playerPos, directionAngle, fovRadians) {\n        // Защитная проверка - Rapier должен быть доступен\n        if (!this.isRapierReady || !this.world) {\n            return;\n        }\n        \n        // Защитная проверка объектов\n        if (!playerPos || directionAngle === undefined || fovRadians === undefined) {\n            return;\n        }\n        \n        try {\n            // Получаем экземпляр RAPIER\n            const RAPIER = this.getRapierInstance();\n            if (!RAPIER) {\n                console.warn('VisionSystem: RAPIER не определен при обновлении маски видимости');\n                return;\n            }\n            \n            // Половина угла обзора\n            const halfFov = fovRadians / 2;\n            \n            // Определяем точку старта лучей\n            const origin = {\n                x: playerPos.x,\n                y: playerPos.y + 1.0, // на уровне \"глаз\" игрока\n                z: playerPos.z\n            };\n            \n            // Формируем список углов для выпуска лучей\n            const angles = [];\n            for (let i = 0; i < this.rayCount; i++) {\n                const angle = directionAngle - halfFov + (i / (this.rayCount - 1)) * fovRadians;\n                angles.push(angle);\n            }\n            \n            // Вычисляем точки контура видимой области\n            const points = [];\n            \n            // Добавляем первую точку - позиция игрока\n            points.push(new THREE.Vector2(0, 0));\n            \n            // Выпускаем лучи и находим точки пересечения\n            angles.forEach(angle => {\n                // Единичный вектор направления в горизонтальной плоскости\n                const dir = {\n                    x: Math.sin(angle),\n                    y: 0,\n                    z: Math.cos(angle)\n                };\n                \n                // Выполняем рейкаст\n                let endPoint;\n                \n                try {\n                    // Создаем луч Rapier (с проверкой существования конструктора)\n                    let ray;\n                    if (typeof RAPIER.Ray === 'function') {\n                        ray = new RAPIER.Ray(origin, dir);\n                    } else if (RAPIER.Ray) {\n                        ray = RAPIER.Ray.new(origin, dir);\n                    } else {\n                        // Если Ray недоступен, используем базовое значение\n                        endPoint = {\n                            x: origin.x + dir.x * this.maxDistance,\n                            z: origin.z + dir.z * this.maxDistance\n                        };\n                        points.push(new THREE.Vector2(\n                            endPoint.x - origin.x,\n                            endPoint.z - origin.z\n                        ));\n                        return; // Выход из текущей итерации forEach\n                    }\n                    \n                    // Выполняем рейкаст в физическом мире\n                    let hit = null;\n                    if (typeof this.world.castRay === 'function') {\n                        hit = this.world.castRay(ray, this.maxDistance, true);\n                    } else if (typeof this.world.castRayAndGetNormal === 'function') {\n                        const result = this.world.castRayAndGetNormal(origin, dir, this.maxDistance, true);\n                        hit = result.hasHit ? result : null;\n                    }\n                    \n                    if (hit) {\n                        // Луч столкнулся с препятствием\n                        const hitDist = typeof hit.toi === 'function' ? hit.toi() : hit.toi;\n                        const impactDistance = hitDist * this.maxDistance * 0.99;\n                        \n                        // Конечная точка чуть ближе точки столкновения\n                        endPoint = {\n                            x: origin.x + dir.x * impactDistance,\n                            z: origin.z + dir.z * impactDistance\n                        };\n                    } else {\n                        // Луч не встретил препятствий\n                        endPoint = {\n                            x: origin.x + dir.x * this.maxDistance,\n                            z: origin.z + dir.z * this.maxDistance\n                        };\n                    }\n                } catch (error) {\n                    console.error('VisionSystem: ошибка при выполнении рейкаста:', error);\n                    // В случае ошибки используем максимальную дистанцию\n                    endPoint = {\n                        x: origin.x + dir.x * this.maxDistance,\n                        z: origin.z + dir.z * this.maxDistance\n                    };\n                }\n                \n                // Добавляем точку в список\n                points.push(new THREE.Vector2(\n                    endPoint.x - origin.x,\n                    endPoint.z - origin.z\n                ));\n                \n                // Отмечаем область как посещенную\n                if (this.memoryEnabled) {\n                    this.markVisitedArea(endPoint.x, endPoint.z);\n                }\n            });\n            \n            // Добавляем последнюю точку, замыкающую форму\n            if (points.length > 1) {\n                points.push(points[1].clone());\n            }\n            \n            // Создаем форму конуса видимости\n            this.updateVisibilityShape(points, playerPos);\n        } catch (error) {\n            console.error('VisionSystem: ошибка при обновлении маски видимости:', error);\n        }\n    }\n    \n    /**\n     * Обновление формы видимости\n     * @param {Array} points - точки контура видимой области\n     * @param {Object} playerPos - позиция игрока\n     */\n    updateVisibilityShape(points, playerPos) {\n        // Проверяем валидность точек\n        if (!points || points.length < 3) {\n            console.warn('VisionSystem: недостаточно точек для создания формы видимости');\n            return;\n        }\n        \n        try {\n            // Создаем форму конуса видимости\n            const shape = new THREE.Shape();\n            shape.moveTo(points[0].x, points[0].y);\n            \n            for (let i = 1; i < points.length; i++) {\n                shape.lineTo(points[i].x, points[i].y);\n            }\n            \n            // Создаем внешний контур (большой прямоугольник)\n            const worldSize = this.maxDistance * 2;\n            const outerShape = new THREE.Shape();\n            outerShape.moveTo(-worldSize, -worldSize);\n            outerShape.lineTo(worldSize, -worldSize);\n            outerShape.lineTo(worldSize, worldSize);\n            outerShape.lineTo(-worldSize, worldSize);\n            outerShape.lineTo(-worldSize, -worldSize);\n            \n            // Вырезаем форму конуса\n            outerShape.holes.push(shape);\n            \n            // Обновляем геометрию маски\n            if (this.visibilityMask) {\n                // Удаляем старую геометрию\n                if (this.visibilityMask.geometry) {\n                    this.visibilityMask.geometry.dispose();\n                }\n                \n                // Создаем новую геометрию\n                this.visibilityMask.geometry = new THREE.ShapeGeometry(outerShape);\n                \n                // Перемещаем в позицию игрока\n                this.visibilityMask.position.set(playerPos.x, 0.1, playerPos.z);\n            }\n        } catch (error) {\n            console.error('VisionSystem: ошибка при обновлении формы видимости:', error);\n        }\n    }\n    \n    /**\n     * Отметка области как посещенной\n     * @param {number} x - координата X в мировом пространстве\n     * @param {number} z - координата Z в мировом пространстве\n     */\n    markVisitedArea(x, z) {\n        // Преобразуем мировые координаты в координаты сетки\n        const halfGridSize = this.gridSize / 2;\n        const gridX = Math.floor((x + halfGridSize) / this.cellSize);\n        const gridZ = Math.floor((z + halfGridSize) / this.cellSize);\n        \n        // Проверяем, что координаты внутри сетки\n        if (gridX >= 0 && gridX < this.gridResolution && \n            gridZ >= 0 && gridZ < this.gridResolution) {\n            \n            // Отмечаем область как посещенную\n            this.memoryGrid[gridX][gridZ] = 1;\n            \n            // Отмечаем соседние ячейки для плавного перехода\n            const radius = 1; // радиус влияния в ячейках сетки\n            \n            for (let dx = -radius; dx <= radius; dx++) {\n                for (let dz = -radius; dz <= radius; dz++) {\n                    const nx = gridX + dx;\n                    const nz = gridZ + dz;\n                    \n                    if (nx >= 0 && nx < this.gridResolution && \n                        nz >= 0 && nz < this.gridResolution) {\n                        \n                        // Устанавливаем значение не меньше 0.7 для соседних ячеек\n                        this.memoryGrid[nx][nz] = Math.max(this.memoryGrid[nx][nz], 0.7);\n                    }\n                }\n            }\n        }\n    }\n    \n    /**\n     * Обновление карты памяти\n     * @param {Object} playerPos - позиция игрока\n     * @param {number} directionAngle - угол направления взгляда\n     * @param {number} fovRadians - угол обзора в радианах\n     */\n    updateMemoryMap(playerPos, directionAngle, fovRadians) {\n        if (!this.memoryEnabled || !this.memoryMesh) return;\n        \n        try {\n            // Обновляем сетку памяти на маске тумана войны\n            if (this.fogOfWarMesh && this.fogOfWarMesh.material) {\n                // Здесь обычно используется шейдер или другой метод для \n                // обновления маски на основе сетки памяти\n                \n                // В этой реализации для простоты мы просто накладываем\n                // маску поверх тех областей, которые не посещены\n \n                // Обновляем непрозрачность маски памяти в зависимости от стейта\n                // В полной реализации здесь было бы обновление шейдера\n                \n                // Дополнительное: создание отверстий в тумане войны на основе сетки памяти\n                // Создаем геометрию для вырезания посещенных областей из тумана войны\n                // (Для прототипа не реализуем полностью)\n            }\n \n            // В полной реализации здесь было бы обновление шейдера\n            // на основе карты посещенных областей\n        } catch (error) {\n            console.error('VisionSystem: ошибка при обновлении карты памяти:', error);\n        }\n    }\n    \n    /**\n     * Изменение угла обзора\n     * @param {number} fov - новый угол обзора в градусах\n     */\n    setFov(fov) {\n        this.fov = fov;\n    }\n    \n    /**\n     * Изменение максимальной дистанции видимости\n     * @param {number} distance - новая максимальная дистанция\n     */\n    setMaxDistance(distance) {\n        this.maxDistance = distance;\n    }\n    \n    /**\n     * Изменение количества лучей\n     * @param {number} count - новое количество лучей\n     */\n    setRayCount(count) {\n        this.rayCount = count;\n    }\n    \n    /**\n     * Очистка карты памяти (сброс посещенных областей)\n     */\n    clearMemory() {\n        if (!this.memoryEnabled) return;\n        \n        // Сбрасываем сетку памяти\n        for (let i = 0; i < this.gridResolution; i++) {\n            for (let j = 0; j < this.gridResolution; j++) {\n                this.memoryGrid[i][j] = 0;\n            }\n        }\n        \n        console.log('VisionSystem: карта памяти очищена');\n    }\n    \n    /**\n    * Освобождение ресурсов системы\n    */\n   dispose() {\n    try {\n        // Удаляем маску видимости\n        if (this.visibilityMask) {\n            if (this.visibilityMask.geometry) {\n                this.visibilityMask.geometry.dispose();\n            }\n            if (this.visibilityMask.material) {\n                this.visibilityMask.material.dispose();\n            }\n            this.visibilityGroup.remove(this.visibilityMask);\n        }\n        \n        // Удаляем маску памяти\n        if (this.memoryMesh) {\n            if (this.memoryMesh.geometry) {\n                this.memoryMesh.geometry.dispose();\n            }\n            if (this.memoryMesh.material) {\n                this.memoryMesh.material.dispose();\n            }\n            this.visibilityGroup.remove(this.memoryMesh);\n        }\n        \n        // Удаляем маску тумана войны\n        if (this.fogOfWarMesh) {\n            if (this.fogOfWarMesh.geometry) {\n                this.fogOfWarMesh.geometry.dispose();\n            }\n            if (this.fogOfWarMesh.material) {\n                this.fogOfWarMesh.material.dispose();\n            }\n            this.visibilityGroup.remove(this.fogOfWarMesh);\n        }\n        \n        // Удаляем группу видимости\n        if (this.visibilityGroup) {\n            this.scene.remove(this.visibilityGroup);\n        }\n        \n        // Сбрасываем переменные\n        this.visibilityMask = null;\n        this.memoryMesh = null;\n        this.fogOfWarMesh = null;\n        this.visibilityGroup = null;\n        this.memoryGrid = [];\n        this.isInitialized = false;\n        this.isRapierReady = false;\n        this.isRapierChecked = false;\n        this.initializationPromise = null;\n        \n        console.log('VisionSystem: ресурсы успешно освобождены');\n    } catch (error) {\n        console.error('VisionSystem: ошибка при освобождении ресурсов:', error);\n    }\n}\n}","// client/src/core/GameWorld.js\n\nimport { Player } from '../entities/player.js';\nimport { VisionSystem } from '../physics/vision-system.js';\nimport { log } from './gameCore.js';\n\n/**\n * Класс для управления игровым миром и сущностями\n */\nexport class GameWorld {\n    /**\n     * @param {Object} game - ссылка на основной класс игры\n     */\n    constructor(game) {\n        this.game = game;\n        \n        // Сущности\n        this.player = null;\n        this.entities = [];\n        \n        // Системы\n        this.visionSystem = null;\n    }\n    \n    /**\n     * Инициализация игрового мира\n     */\n    async initialize() {\n        try {\n            // Создание тестовых стен\n            this.createTestWalls();\n            \n            // Создание игрока\n            this.player = new Player({\n                position: { x: 0, y: 0, z: 0 },\n                renderer: this.game.renderer,\n                input: this.game.input,\n                game: this.game\n            });\n            \n            log('Игрок создан');\n            \n            // Инициализация системы видимости\n            await this.initVisionSystem();\n            \n            return true;\n        } catch (error) {\n            log(`Ошибка инициализации игрового мира: ${error.message}`);\n            return false;\n        }\n    }\n    \n    /**\n     * Обновление игрового мира\n     * @param {number} deltaTime - время между кадрами\n     */\n    update(deltaTime) {\n        // Обновление игрока\n        if (this.player) {\n            this.player.update(deltaTime);\n        }\n        \n        // Обновление других сущностей\n        this.entities.forEach(entity => {\n            if (entity.update) {\n                entity.update(deltaTime);\n            }\n        });\n    }\n    \n    /**\n     * Фиксированное обновление для физики\n     * @param {number} deltaTime - фиксированный временной шаг\n     */\n    fixedUpdate(deltaTime) {\n        // Обновляем состояние сущностей (NPC и др.)\n        this.entities.forEach(entity => {\n            if (entity.fixedUpdate) {\n                entity.fixedUpdate(deltaTime);\n            }\n        });\n    }\n    \n    /**\n     * Метод для инициализации системы видимости\n     */\n    async initVisionSystem() {\n        try {\n            if (!this.game.renderer || !this.game.renderer.scene || !this.player) {\n                throw new Error('Не все компоненты доступны для инициализации системы видимости');\n            }\n            \n            log('Инициализация системы видимости...');\n            \n            // Создаем систему видимости\n            const visionSystem = new VisionSystem({\n                scene: this.game.renderer.scene,\n                world: this.game.physics.getWorld(),\n                player: this.player,\n                fov: 90, // Начальный угол обзора\n                rayCount: 60, // Количество лучей\n                maxDistance: 50, // Максимальная дистанция видимости\n                memoryEnabled: true, // Запоминать посещенные области\n                blurEdges: true // Размытие краев видимости\n            });\n            \n            // Дожидаемся инициализации системы видимости\n            await visionSystem.init();\n            \n            // Проверяем готовность системы\n            if (!visionSystem.isReady()) {\n                log('Система видимости не готова, но будет инициализирована позже автоматически');\n            }\n            \n            // Сохраняем систему видимости в рендерере\n            this.game.renderer.visionSystem = visionSystem;\n            this.visionSystem = visionSystem;\n            \n            log('Система видимости инициализирована');\n            return true;\n        } catch (error) {\n            log(`Ошибка инициализации системы видимости: ${error.message}`);\n            return false;\n        }\n    }\n    \n    /**\n     * Метод для создания тестовых стен\n     */\n    createTestWalls() {\n        try {\n            if (!this.game.physics || !this.game.physics.isReady() || !this.game.renderer || !this.game.renderer.scene) {\n                log('Физика или рендерер не готовы для создания стен');\n                return;\n            }\n            \n            log('Создание тестовых стен...');\n            \n            // Создаем материал для стен\n            const wallMaterial = new THREE.MeshStandardMaterial({\n                color: 0x808080,\n                roughness: 0.7,\n                metalness: 0.2\n            });\n            \n            // Функция для создания стены\n            const createWall = (x, z, width, depth, height = 3) => {\n                // Создаем геометрию\n                const geometry = new THREE.BoxGeometry(width, height, depth);\n                const mesh = new THREE.Mesh(geometry, wallMaterial);\n                \n                // Устанавливаем позицию\n                mesh.position.set(x, height / 2, z);\n                \n                // Добавляем на сцену\n                this.game.renderer.scene.add(mesh);\n                \n                // Создаем физический коллайдер\n                this.game.physics.createObstacle({\n                    position: { x, y: height / 2, z },\n                    size: { x: width, y: height, z: depth },\n                    object: mesh\n                });\n                \n                return mesh;\n            };\n            \n            // Создаем стены лабиринта\n            // Горизонтальные стены (границы)\n            createWall(0, -20, 40, 1);\n            createWall(-20, 0, 1, 40);\n            createWall(20, 0, 1, 40);\n            createWall(0, 20, 40, 1);\n            \n            // Внутренние стены\n            createWall(-10, -10, 1, 20);\n            createWall(10, 10, 20, 1);\n            createWall(10, -5, 1, 10);\n            createWall(-5, 5, 10, 1);\n            \n            // Препятствия\n            createWall(-15, -15, 3, 3);\n            createWall(15, -15, 3, 3);\n            createWall(15, 15, 3, 3);\n            createWall(-15, 15, 3, 3);\n            \n            log('Тестовые стены созданы');\n        } catch (error) {\n            log(`Ошибка создания тестовых стен: ${error.message}`);\n        }\n    }\n    \n    /**\n     * Добавление сущности в игру\n     * @param {Object} entity - сущность для добавления\n     */\n    addEntity(entity) {\n        this.entities.push(entity);\n    }\n    \n    /**\n     * Удаление сущности из игры\n     * @param {Object} entity - сущность для удаления\n     */\n    removeEntity(entity) {\n        const index = this.entities.indexOf(entity);\n        if (index !== -1) {\n            this.entities.splice(index, 1);\n        }\n    }\n    \n    /**\n     * Очистка игрового мира\n     */\n    clear() {\n        // Удаляем все сущности\n        this.entities = [];\n        \n        // Удаляем игрока\n        this.player = null;\n        \n        // Очищаем системы\n        if (this.visionSystem) {\n            this.visionSystem.dispose();\n            this.visionSystem = null;\n        }\n        \n        if (this.game.renderer && this.game.renderer.visionSystem) {\n            this.game.renderer.visionSystem = null;\n        }\n    }\n}","// client/src/core/GameState.js\n\nimport { log } from './gameCore.js';\n\n/**\n * Класс для управления состоянием игры\n */\nexport class GameState {\n    /**\n     * @param {Object} game - ссылка на основной класс игры\n     */\n    constructor(game) {\n        this.game = game;\n        \n        // Флаги состояния\n        this.isRunning = false;\n        this.isLoading = true;\n        this.isPaused = false;\n        \n        // Текущая сцена (loading, menu, game, pause)\n        this.currentScene = 'loading';\n        \n        // Настройки видимости\n        this.fogOfWarEnabled = true;\n        this.visibilitySystemEnabled = true;\n    }\n    \n    /**\n     * Переключение состояния паузы\n     */\n    togglePause() {\n        if (this.isRunning) {\n            this.pauseGame();\n        } else {\n            this.resumeGame();\n        }\n    }\n    \n    /**\n     * Остановить игру (пауза)\n     */\n    pauseGame() {\n        this.isRunning = false;\n        this.isPaused = true;\n        \n        if (this.game.input) {\n            this.game.input.disableGameControls();\n        }\n        \n        // Здесь можно добавить отображение меню паузы\n        log('Игра на паузе');\n    }\n    \n    /**\n     * Возобновить игру\n     */\n    resumeGame() {\n        this.isRunning = true;\n        this.isPaused = false;\n        \n        if (this.game.input) {\n            this.game.input.enableGameControls();\n        }\n        \n        // Скрываем меню паузы\n        log('Игра возобновлена');\n        \n        // Перезапускаем игровой цикл\n        this.game.lastFrameTime = performance.now();\n        requestAnimationFrame(this.game.update);\n    }\n    \n    /**\n     * Завершение игры\n     */\n    endGame() {\n        this.isRunning = false;\n        this.currentScene = 'menu';\n        \n        // Очистка игрового мира\n        if (this.game.world) {\n            this.game.world.clear();\n        }\n        \n        // Очищаем физику\n        if (this.game.physics) {\n            this.game.physics.dispose();\n        }\n        \n        // Отображение главного меню\n        if (this.game.ui) {\n            if (this.game.ui.gameCanvas) {\n                this.game.ui.gameCanvas.classList.add('hidden');\n            }\n            if (this.game.ui.hudElement) {\n                this.game.ui.hudElement.classList.add('hidden');\n            }\n            if (this.game.ui.mainMenu) {\n                this.game.ui.mainMenu.classList.remove('hidden');\n            }\n        }\n        \n        log('Игра завершена');\n    }\n    \n    /**\n     * Проверка, находится ли игра в указанной сцене\n     * @param {string} scene - имя сцены для проверки\n     * @returns {boolean} результат проверки\n     */\n    isInScene(scene) {\n        return this.currentScene === scene;\n    }\n}","// client/src/core/gameEvents.js\n\nimport { log } from './gameCore.js';\n\n/**\n * Класс для обработки событий в игре\n */\nexport class GameEvents {\n    /**\n     * @param {Object} game - ссылка на основной класс игры\n     */\n    constructor(game) {\n        this.game = game;\n        \n        // Привязка методов к this\n        this.handleGlobalError = this.handleGlobalError.bind(this);\n        this.handlePromiseError = this.handlePromiseError.bind(this);\n        \n        // Регистрация обработчиков глобальных ошибок\n        window.addEventListener('error', this.handleGlobalError);\n        window.addEventListener('unhandledrejection', this.handlePromiseError);\n    }\n    \n    /**\n     * Настройка обработчиков событий\n     */\n    setupEventListeners() {\n        try {\n            // Обработчики для главного меню\n            const startGameButton = document.getElementById('start-game');\n            if (startGameButton) {\n                startGameButton.addEventListener('click', () => this.game.startGame());\n            }\n            \n            const settingsButton = document.getElementById('settings');\n            if (settingsButton) {\n                settingsButton.addEventListener('click', () => {\n                    log('Настройки');\n                    // В будущем здесь будет открытие меню настроек\n                });\n            }\n            \n            // Обработчик для закрытия инвентаря\n            const closeInventoryButton = document.getElementById('close-inventory');\n            if (closeInventoryButton) {\n                closeInventoryButton.addEventListener('click', () => {\n                    this.game.ui.hideInventory();\n                });\n            }\n            \n            // Обработчики клавиш\n            if (this.game.input) {\n                this.game.input.addKeyCallback('KeyI', () => {\n                    if (this.game.state.isInScene('game')) {\n                        this.game.ui.toggleInventory();\n                    }\n                });\n                \n                // Обработчик ESC для паузы\n                this.game.input.addKeyCallback('Escape', () => {\n                    if (this.game.state.isInScene('game')) {\n                        this.game.state.togglePause();\n                    }\n                });\n            }\n            \n            // Интеграция с VK (если доступно)\n            if (window.vkBridge) {\n                try {\n                    window.vkBridge.send('VKWebAppInit');\n                    log('VK Bridge инициализирован');\n                } catch (e) {\n                    log(`Ошибка инициализации VK Bridge: ${e.message}`);\n                }\n            }\n            \n            // Обработчик изменения размера окна\n            window.addEventListener('resize', () => {\n                if (this.game.renderer) {\n                    // Перерисовываем сцену при изменении размера окна\n                    this.game.renderer.render(this.game.world.player);\n                }\n            });\n            \n            log('Обработчики событий настроены');\n        } catch (error) {\n            log(`Ошибка настройки обработчиков событий: ${error.message}`);\n            throw error;\n        }\n    }\n    \n    /**\n     * Обработка глобальных ошибок\n     * @param {ErrorEvent} event - событие ошибки\n     */\n    handleGlobalError(event) {\n        log(`Глобальная ошибка: ${event.message} в ${event.filename}:${event.lineno}`);\n        \n        // Показываем сообщение об ошибке, если игра ещё не запущена\n        if (this.game.state.isInScene('loading')) {\n            this.game.ui.showErrorScreen(`Ошибка: ${event.message}`);\n        }\n        \n        // Предотвращаем дополнительную обработку ошибки\n        event.preventDefault();\n    }\n    \n    /**\n     * Обработка необработанных ошибок промисов\n     * @param {PromiseRejectionEvent} event - событие отклонения промиса\n     */\n    handlePromiseError(event) {\n        const errorMessage = event.reason?.message || 'Неизвестная ошибка Promise';\n        log(`Необработанная ошибка Promise: ${errorMessage}`);\n        \n        // Показываем сообщение об ошибке, если игра ещё не запущена\n        if (this.game.state.isInScene('loading')) {\n            this.game.ui.showErrorScreen(`Ошибка асинхронной операции: ${errorMessage}`);\n        }\n        \n        // Предотвращаем дополнительную обработку ошибки\n        event.preventDefault();\n    }\n}","// client/src/core/renderer.js\n\n/**\n * Класс отвечающий за рендеринг игры с использованием Three.js\n */\nexport class Renderer {\n    /**\n     * @param {HTMLCanvasElement} canvas - DOM элемент canvas для рендеринга\n     */\n    constructor(canvas) {\n        this.canvas = canvas;\n        this.scene = null;\n        this.camera = null;\n        this.renderer = null;\n        this.lights = [];\n        this.models = {}; // Хранилище для загруженных моделей\n        this.textures = {}; // Хранилище для загруженных текстур\n        \n        // Элементы для системы видимости\n        this.visionSystem = null;\n        this.temporaryObjects = []; // Временные объекты (лучи, эффекты)\n    }\n\n    /**\n     * Настройка сцены, камеры и рендерера\n     */\n    setupScene() {\n        // Создание сцены\n        this.scene = new THREE.Scene();\n        this.scene.background = new THREE.Color(0x87CEEB); // Цвет неба\n        \n        // Создание камеры (перспективная, вид сверху)\n        const aspect = window.innerWidth / window.innerHeight;\n        this.camera = new THREE.PerspectiveCamera(75, aspect, 0.1, 1000);\n        this.camera.position.set(0, 30, 30); // Позиция над землей\n        this.camera.lookAt(0, 0, 0); // Направлена на игрока\n        \n        // Создание рендерера\n        this.renderer = new THREE.WebGLRenderer({\n            canvas: this.canvas,\n            antialias: true\n        });\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n        this.renderer.shadowMap.enabled = true;\n        \n        // Добавление освещения\n        this.setupLights();\n        \n        // Создание земли\n        this.createGround();\n        \n        // Инициализируем пустой объект для системы видимости\n        // Она будет инициализирована позже в Game.initVisionSystem()\n        this.visionSystem = null;\n        \n        // Обработчик изменения размера окна\n        window.addEventListener('resize', () => {\n            this.camera.aspect = window.innerWidth / window.innerHeight;\n            this.camera.updateProjectionMatrix();\n            this.renderer.setSize(window.innerWidth, window.innerHeight);\n        });\n    }\n    \n    /**\n     * Настройка освещения сцены\n     */\n    setupLights() {\n        // Основной направленный свет (имитация солнца)\n        const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n        directionalLight.position.set(10, 30, 10);\n        directionalLight.castShadow = true;\n        \n        // Настройка теней\n        directionalLight.shadow.mapSize.width = 2048;\n        directionalLight.shadow.mapSize.height = 2048;\n        directionalLight.shadow.camera.near = 0.5;\n        directionalLight.shadow.camera.far = 100;\n        directionalLight.shadow.camera.left = -50;\n        directionalLight.shadow.camera.right = 50;\n        directionalLight.shadow.camera.top = 50;\n        directionalLight.shadow.camera.bottom = -50;\n        \n        this.scene.add(directionalLight);\n        this.lights.push(directionalLight);\n        \n        // Рассеянный свет (чтобы тени не были слишком темными)\n        const ambientLight = new THREE.AmbientLight(0x505050, 0.7);\n        this.scene.add(ambientLight);\n        this.lights.push(ambientLight);\n    }\n    \n    /**\n     * Создание земли (простая поверхность для прототипа)\n     */\n    createGround() {\n        const groundGeometry = new THREE.PlaneGeometry(1000, 1000, 100, 100);\n        const groundMaterial = new THREE.MeshStandardMaterial({\n            color: 0x3e6539, // Зеленый цвет земли\n            roughness: 1,\n            metalness: 0\n        });\n        \n        const ground = new THREE.Mesh(groundGeometry, groundMaterial);\n        ground.rotation.x = -Math.PI / 2; // Разворот плоскости горизонтально\n        ground.position.y = -0.5;\n        ground.receiveShadow = true;\n        \n        this.scene.add(ground);\n    }\n    \n    /**\n     * Создание временного луча для визуализации выстрела\n     * @param {Object} start - начальная точка луча\n     * @param {Object} end - конечная точка луча\n     * @param {number} color - цвет луча\n     * @param {number} duration - длительность отображения в миллисекундах\n     */\n    createTemporaryBeam(start, end, color = 0xFF0000, duration = 100) {\n        // Создаем материал для луча\n        const material = new THREE.LineBasicMaterial({\n            color: color,\n            transparent: true,\n            opacity: 0.8\n        });\n        \n        // Создаем геометрию\n        const geometry = new THREE.BufferGeometry();\n        const points = [\n            new THREE.Vector3(start.x, start.y, start.z),\n            new THREE.Vector3(end.x, end.y, end.z)\n        ];\n        geometry.setFromPoints(points);\n        \n        // Создаем линию\n        const line = new THREE.Line(geometry, material);\n        this.scene.add(line);\n        \n        // Добавляем в список временных объектов\n        const tempObject = {\n            object: line,\n            endTime: Date.now() + duration\n        };\n        this.temporaryObjects.push(tempObject);\n        \n        // Устанавливаем таймер для удаления\n        setTimeout(() => {\n            this.removeTemporaryObject(tempObject);\n        }, duration);\n    }\n    \n    /**\n     * Удаление временного объекта\n     * @param {Object} tempObject - временный объект для удаления\n     */\n    removeTemporaryObject(tempObject) {\n        if (!tempObject || !tempObject.object) return;\n        \n        // Удаляем со сцены\n        this.scene.remove(tempObject.object);\n        \n        // Удаляем из списка\n        const index = this.temporaryObjects.indexOf(tempObject);\n        if (index !== -1) {\n            this.temporaryObjects.splice(index, 1);\n        }\n        \n        // Освобождаем ресурсы\n        if (tempObject.object.geometry) {\n            tempObject.object.geometry.dispose();\n        }\n        if (tempObject.object.material) {\n            tempObject.object.material.dispose();\n        }\n    }\n    \n    /**\n     * Очистка устаревших временных объектов\n     */\n    cleanTemporaryObjects() {\n        const now = Date.now();\n        \n        // Удаляем устаревшие объекты\n        this.temporaryObjects = this.temporaryObjects.filter(tempObj => {\n            if (tempObj.endTime <= now) {\n                this.scene.remove(tempObj.object);\n                \n                // Освобождаем ресурсы\n                if (tempObj.object.geometry) {\n                    tempObj.object.geometry.dispose();\n                }\n                if (tempObj.object.material) {\n                    tempObj.object.material.dispose();\n                }\n                \n                return false;\n            }\n            return true;\n        });\n    }\n    \n    /**\n     * Добавление игрока на сцену\n     * @param {Object} playerData - данные игрока\n     * @returns {THREE.Object3D} - объект игрока\n     */\n    addPlayer(playerData) {\n        // Создаем временную модель игрока (цилиндр)\n        const geometry = new THREE.CylinderGeometry(0.5, 0.5, 1.8, 8);\n        const material = new THREE.MeshStandardMaterial({\n            color: 0x1E90FF, // Синий цвет для игрока\n            roughness: 0.7\n        });\n        \n        const playerMesh = new THREE.Mesh(geometry, material);\n        playerMesh.position.copy(playerData.position);\n        playerMesh.castShadow = true;\n        playerMesh.receiveShadow = true;\n        \n        // Добавляем оружие (временное, упрощенное)\n        const weaponGeometry = new THREE.BoxGeometry(0.1, 0.1, 1);\n        const weaponMaterial = new THREE.MeshStandardMaterial({\n            color: 0x333333,\n            roughness: 0.5\n        });\n        \n        const weapon = new THREE.Mesh(weaponGeometry, weaponMaterial);\n        weapon.position.set(0.5, 0, 0.5); // Позиция относительно игрока\n        playerMesh.add(weapon);\n        \n        this.scene.add(playerMesh);\n        \n        return playerMesh;\n    }\n    \n    /**\n     * Обновление камеры для следования за игроком\n     * @param {Object} playerPosition - текущая позиция игрока\n     */\n    updateCamera(playerPosition) {\n        if (!this.camera) return;\n        \n        // Устанавливаем позицию камеры над игроком\n        this.camera.position.x = playerPosition.x;\n        this.camera.position.z = playerPosition.z + 30; // Немного сзади\n        \n        // Направляем камеру на игрока\n        this.camera.lookAt(playerPosition.x, playerPosition.y, playerPosition.z);\n    }\n    \n    /**\n     * Обновление трансформации объекта\n     * @param {THREE.Object3D} object - объект для обновления\n     * @param {Object} position - новая позиция\n     * @param {Object} rotation - новое вращение\n     */\n    updateObjectTransform(object, position, rotation) {\n        if (!object) return;\n        \n        // Обновляем позицию\n        if (position) {\n            object.position.x = position.x;\n            object.position.y = position.y;\n            object.position.z = position.z;\n        }\n        \n        // Обновляем вращение\n        if (rotation) {\n            object.rotation.y = rotation.y;\n        }\n    }\n    \n    /**\n     * Рендеринг сцены с учетом игрока\n     * @param {Object} player - объект игрока для системы видимости\n     */\n    render(player) {\n        if (!this.renderer || !this.scene || !this.camera) return;\n        \n        // Обновляем систему видимости, если она инициализирована и есть игрок\n        if (this.visionSystem && player) {\n            this.visionSystem.update();\n        }\n        \n        // Очищаем устаревшие временные объекты\n        this.cleanTemporaryObjects();\n        \n        // Рендерим сцену\n        this.renderer.render(this.scene, this.camera);\n    }\n    \n    /**\n     * Установка качества графики\n     * @param {string} quality - уровень качества ('low', 'medium', 'high')\n     */\n    setQuality(quality) {\n        if (!this.renderer) return;\n        \n        switch (quality) {\n            case 'low':\n                this.renderer.setPixelRatio(1);\n                this.renderer.shadowMap.enabled = false;\n                break;\n            case 'medium':\n                this.renderer.setPixelRatio(window.devicePixelRatio);\n                this.renderer.shadowMap.enabled = true;\n                this.renderer.shadowMap.type = THREE.PCFShadowMap;\n                break;\n            case 'high':\n                this.renderer.setPixelRatio(window.devicePixelRatio);\n                this.renderer.shadowMap.enabled = true;\n                this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n                break;\n        }\n    }\n    \n    /**\n     * Добавление предмета на сцену\n     * @param {Object} itemData - данные предмета\n     * @returns {THREE.Object3D} - объект предмета\n     */\n    addItem(itemData) {\n        // Создаем упрощенную модель предмета (в зависимости от типа)\n        let geometry, material;\n        \n        switch (itemData.type) {\n            case 'weapon':\n                geometry = new THREE.BoxGeometry(0.8, 0.3, 0.2);\n                material = new THREE.MeshStandardMaterial({ color: 0xFF5722 });\n                break;\n            case 'medkit':\n                geometry = new THREE.BoxGeometry(0.5, 0.3, 0.5);\n                material = new THREE.MeshStandardMaterial({ color: 0x4CAF50 });\n                break;\n            case 'ammo':\n                geometry = new THREE.BoxGeometry(0.3, 0.3, 0.3);\n                material = new THREE.MeshStandardMaterial({ color: 0xFFC107 });\n                break;\n            default:\n                geometry = new THREE.SphereGeometry(0.3, 8, 8);\n                material = new THREE.MeshStandardMaterial({ color: 0xCCCCCC });\n        }\n        \n        // Создаем меш\n        const itemMesh = new THREE.Mesh(geometry, material);\n        itemMesh.position.copy(itemData.position);\n        itemMesh.position.y = 0.2; // Чуть выше земли\n        itemMesh.castShadow = true;\n        itemMesh.receiveShadow = true;\n        \n        // Добавляем на сцену\n        this.scene.add(itemMesh);\n        \n        return itemMesh;\n    }\n    \n    /**\n     * Добавление NPC на сцену\n     * @param {Object} npcData - данные NPC\n     * @returns {THREE.Object3D} - объект NPC\n     */\n    addNPC(npcData) {\n        // Создаем модель NPC (цилиндр)\n        const geometry = new THREE.CylinderGeometry(0.5, 0.5, 1.8, 8);\n        const material = new THREE.MeshStandardMaterial({\n            color: npcData.type === 'enemy' ? 0xFF0000 : 0x00FF00,\n            roughness: 0.7\n        });\n        \n        const npcMesh = new THREE.Mesh(geometry, material);\n        npcMesh.position.copy(npcData.position);\n        npcMesh.castShadow = true;\n        npcMesh.receiveShadow = true;\n        \n        this.scene.add(npcMesh);\n        \n        return npcMesh;\n    }\n}","// client/src/core/input.js\n\n/**\n * Класс обработки пользовательского ввода\n */\nexport class InputHandler {\n    constructor() {\n        // Состояние клавиш\n        this.keys = {};\n        \n        // Состояние мыши\n        this.mouse = {\n            position: { x: 0, y: 0 },\n            isDown: false,\n            rightIsDown: false\n        };\n        \n        // Последнее положение мыши для расчета дельты\n        this.lastMousePosition = { x: 0, y: 0 };\n        \n        // Колбэки для клавиш\n        this.keyCallbacks = {};\n        \n        // Колбэки для мыши\n        this.clickCallback = null;\n        this.rightClickCallback = null;\n        this.mouseMoveCallback = null;\n        this.mouseDownCallback = null;\n        this.mouseUpCallback = null;\n        \n        // Флаг активных игровых управлений\n        this.gameControlsEnabled = true;\n        \n        // Настройки ввода\n        this.mouseSensitivity = 1.0;\n        \n        // Привязка методов к контексту\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.handleKeyUp = this.handleKeyUp.bind(this);\n        this.handleMouseMove = this.handleMouseMove.bind(this);\n        this.handleMouseDown = this.handleMouseDown.bind(this);\n        this.handleMouseUp = this.handleMouseUp.bind(this);\n        this.handleContextMenu = this.handleContextMenu.bind(this);\n        \n        // Инициализация обработчиков событий\n        this.init();\n    }\n    \n    /**\n     * Инициализация обработчиков событий\n     */\n    init() {\n        // Добавление обработчиков событий клавиатуры\n        window.addEventListener('keydown', this.handleKeyDown);\n        window.addEventListener('keyup', this.handleKeyUp);\n        \n        // Добавление обработчиков событий мыши\n        window.addEventListener('mousemove', this.handleMouseMove);\n        window.addEventListener('mousedown', this.handleMouseDown);\n        window.addEventListener('mouseup', this.handleMouseUp);\n        window.addEventListener('contextmenu', this.handleContextMenu);\n        \n        // Подавление стандартных действий браузера\n        document.body.style.userSelect = 'none';\n    }\n    \n    /**\n     * Обработчик нажатия клавиши\n     * @param {KeyboardEvent} event - событие нажатия клавиши\n     */\n    handleKeyDown(event) {\n        // Запоминаем состояние клавиши\n        this.keys[event.code] = true;\n        \n        // Вызываем колбэк, если он установлен\n        if (this.keyCallbacks[event.code] && this.gameControlsEnabled) {\n            this.keyCallbacks[event.code]();\n        }\n    }\n    \n    /**\n     * Обработчик отпускания клавиши\n     * @param {KeyboardEvent} event - событие отпускания клавиши\n     */\n    handleKeyUp(event) {\n        // Запоминаем состояние клавиши\n        this.keys[event.code] = false;\n    }\n    \n    /**\n     * Обработчик движения мыши\n     * @param {MouseEvent} event - событие движения мыши\n     */\n    handleMouseMove(event) {\n        // Обновляем позицию мыши\n        this.mouse.position.x = event.clientX;\n        this.mouse.position.y = event.clientY;\n        \n        // Вычисляем delta движения с учетом чувствительности\n        const deltaX = (this.mouse.position.x - this.lastMousePosition.x) * this.mouseSensitivity;\n        const deltaY = (this.mouse.position.y - this.lastMousePosition.y) * this.mouseSensitivity;\n        \n        // Обновляем последнюю позицию\n        this.lastMousePosition.x = this.mouse.position.x;\n        this.lastMousePosition.y = this.mouse.position.y;\n        \n        // Вызываем колбэк движения, если он установлен\n        if (this.mouseMoveCallback && this.gameControlsEnabled) {\n            this.mouseMoveCallback(this.mouse.position, { x: deltaX, y: deltaY });\n        }\n    }\n    \n    /**\n     * Обработчик нажатия кнопки мыши\n     * @param {MouseEvent} event - событие нажатия кнопки мыши\n     */\n    handleMouseDown(event) {\n        if (event.button === 0) {\n            // Левая кнопка мыши\n            this.mouse.isDown = true;\n            \n            // Вызываем общий колбэк нажатия\n            if (this.mouseDownCallback && this.gameControlsEnabled) {\n                this.mouseDownCallback(0, this.mouse.position);\n            }\n            \n            // Вызываем колбэк левого клика\n            if (this.clickCallback && this.gameControlsEnabled) {\n                this.clickCallback(this.mouse.position);\n            }\n        } else if (event.button === 2) {\n            // Правая кнопка мыши\n            this.mouse.rightIsDown = true;\n            \n            // Вызываем общий колбэк нажатия\n            if (this.mouseDownCallback && this.gameControlsEnabled) {\n                this.mouseDownCallback(2, this.mouse.position);\n            }\n            \n            // Вызываем колбэк правого клика\n            if (this.rightClickCallback && this.gameControlsEnabled) {\n                this.rightClickCallback(this.mouse.position);\n            }\n        }\n    }\n    \n    /**\n     * Обработчик отпускания кнопки мыши\n     * @param {MouseEvent} event - событие отпускания кнопки мыши\n     */\n    handleMouseUp(event) {\n        if (event.button === 0) {\n            this.mouse.isDown = false;\n            \n            // Вызываем колбэк отпускания\n            if (this.mouseUpCallback && this.gameControlsEnabled) {\n                this.mouseUpCallback(0);\n            }\n        } else if (event.button === 2) {\n            this.mouse.rightIsDown = false;\n            \n            // Вызываем колбэк отпускания\n            if (this.mouseUpCallback && this.gameControlsEnabled) {\n                this.mouseUpCallback(2);\n            }\n        }\n    }\n    \n    /**\n     * Обработчик контекстного меню (правый клик)\n     * @param {MouseEvent} event - событие контекстного меню\n     */\n    handleContextMenu(event) {\n        // Предотвращаем появление стандартного контекстного меню\n        event.preventDefault();\n    }\n    \n    /**\n     * Проверка, нажата ли указанная клавиша\n     * @param {string} code - код клавиши\n     * @returns {boolean} - состояние клавиши\n     */\n    isKeyPressed(code) {\n        return this.gameControlsEnabled && this.keys[code] === true;\n    }\n    \n    /**\n     * Проверка, нажата ли левая кнопка мыши\n     * @returns {boolean} - состояние левой кнопки мыши\n     */\n    isMouseDown() {\n        return this.gameControlsEnabled && this.mouse.isDown;\n    }\n    \n    /**\n     * Проверка, нажата ли правая кнопка мыши\n     * @returns {boolean} - состояние правой кнопки мыши\n     */\n    isRightMouseDown() {\n        return this.gameControlsEnabled && this.mouse.rightIsDown;\n    }\n    \n    /**\n     * Получение текущей позиции мыши\n     * @returns {Object} - координаты мыши {x, y}\n     */\n    getMousePosition() {\n        return { ...this.mouse.position };\n    }\n    \n    /**\n     * Установка чувствительности мыши\n     * @param {number} sensitivity - чувствительность мыши\n     */\n    setMouseSensitivity(sensitivity) {\n        this.mouseSensitivity = sensitivity;\n    }\n    \n    /**\n     * Добавление колбэка для клавиши\n     * @param {string} code - код клавиши\n     * @param {Function} callback - функция обратного вызова\n     */\n    addKeyCallback(code, callback) {\n        this.keyCallbacks[code] = callback;\n    }\n    \n    /**\n     * Удаление колбэка для клавиши\n     * @param {string} code - код клавиши\n     */\n    removeKeyCallback(code) {\n        delete this.keyCallbacks[code];\n    }\n    \n    /**\n     * Установка колбэка для клика мыши\n     * @param {Function} callback - функция обратного вызова\n     */\n    setClickCallback(callback) {\n        this.clickCallback = callback;\n    }\n    \n    /**\n     * Установка колбэка для правого клика мыши\n     * @param {Function} callback - функция обратного вызова\n     */\n    setRightClickCallback(callback) {\n        this.rightClickCallback = callback;\n    }\n    \n    /**\n     * Установка колбэка для движения мыши\n     * @param {Function} callback - функция обратного вызова\n     */\n    setMouseMoveCallback(callback) {\n        this.mouseMoveCallback = callback;\n    }\n    \n    /**\n     * Установка колбэка для нажатия кнопки мыши\n     * @param {Function} callback - функция обратного вызова (button, position)\n     */\n    setMouseDownCallback(callback) {\n        this.mouseDownCallback = callback;\n    }\n    \n    /**\n     * Установка колбэка для отпускания кнопки мыши\n     * @param {Function} callback - функция обратного вызова (button)\n     */\n    setMouseUpCallback(callback) {\n        this.mouseUpCallback = callback;\n    }\n    \n    /**\n     * Отключение управления игрой (для меню, инвентаря и т.д.)\n     */\n    disableGameControls() {\n        this.gameControlsEnabled = false;\n    }\n    \n    /**\n     * Включение управления игрой\n     */\n    enableGameControls() {\n        this.gameControlsEnabled = true;\n    }\n    \n    /**\n     * Получение направления движения на основе нажатых клавиш\n     * @returns {Object} - вектор движения {x, z}\n     */\n    getMovementDirection() {\n        if (!this.gameControlsEnabled) {\n            return { x: 0, z: 0 };\n        }\n        \n        let dirX = 0;\n        let dirZ = 0;\n        \n        // Вперед/назад (WASD)\n        if (this.isKeyPressed('KeyW') || this.isKeyPressed('ArrowUp')) {\n            dirZ = -1;\n        } else if (this.isKeyPressed('KeyS') || this.isKeyPressed('ArrowDown')) {\n            dirZ = 1;\n        }\n        \n        // Влево/вправо (WASD)\n        if (this.isKeyPressed('KeyA') || this.isKeyPressed('ArrowLeft')) {\n            dirX = -1;\n        } else if (this.isKeyPressed('KeyD') || this.isKeyPressed('ArrowRight')) {\n            dirX = 1;\n        }\n        \n        return { x: dirX, z: dirZ };\n    }\n    \n    /**\n     * Очистка всех колбэков\n     */\n    clearCallbacks() {\n        this.keyCallbacks = {};\n        this.clickCallback = null;\n        this.rightClickCallback = null;\n        this.mouseMoveCallback = null;\n        this.mouseDownCallback = null;\n        this.mouseUpCallback = null;\n    }\n    \n    /**\n     * Уничтожение обработчика ввода и удаление обработчиков событий\n     */\n    destroy() {\n        window.removeEventListener('keydown', this.handleKeyDown);\n        window.removeEventListener('keyup', this.handleKeyUp);\n        window.removeEventListener('mousemove', this.handleMouseMove);\n        window.removeEventListener('mousedown', this.handleMouseDown);\n        window.removeEventListener('mouseup', this.handleMouseUp);\n        window.removeEventListener('contextmenu', this.handleContextMenu);\n        \n        document.body.style.userSelect = '';\n    }\n}","/**\n * Класс для управления сетевым соединением игры\n * Для прототипа будет имитировать серверное соединение\n */\nexport class NetworkManager {\n    constructor() {\n        this.socket = null;\n        this.connected = false;\n        this.serverUrl = 'wss://your-server-url.com'; // Изменить на реальный URL при деплое\n        this.mockMode = true; // Для прототипа используем мок-режим\n        \n        // Колбэки для событий\n        this.eventHandlers = {\n            connect: [],\n            disconnect: [],\n            error: [],\n            message: [],\n            playerMove: [],\n            playerShoot: [],\n            playerDamage: [],\n            itemPickup: [],\n            npcSpawn: [],\n            npcMove: [],\n            gameState: []\n        };\n        \n        // Данные для мок-режима\n        this.mockData = {\n            players: {},\n            npcs: {},\n            items: {}\n        };\n        \n        // ID игрока (для локальной игры будет фиксированным)\n        this.playerId = 'local_player';\n    }\n    \n    /**\n     * Подключение к серверу\n     * @returns {Promise} - промис подключения\n     */\n    connect() {\n        return new Promise((resolve) => {\n            // В режиме прототипа имитируем подключение\n            console.log('Запущен режим прототипа (без сервера)');\n            this.connected = true;\n            \n            // Генерируем тестовые данные\n            this.generateMockData();\n            \n            // Имитируем время загрузки\n            setTimeout(() => {\n                // Вызываем обработчики подключения\n                this.eventHandlers.connect.forEach(handler => handler());\n                \n                // Имитация движения NPC\n                this.startMockNpcMovement();\n                \n                resolve();\n            }, 500);\n        });\n    }\n    \n    /**\n     * Генерация тестовых данных для мок-режима\n     */\n    generateMockData() {\n        // Генерируем предметы на карте\n        for (let i = 0; i < 15; i++) {\n            const id = `item_${i}`;\n            const x = (Math.random() - 0.5) * 80;\n            const z = (Math.random() - 0.5) * 80;\n            \n            // Случайный тип предмета\n            const types = ['weapon', 'medkit', 'ammo'];\n            const type = types[Math.floor(Math.random() * types.length)];\n            \n            this.mockData.items[id] = {\n                id,\n                type,\n                position: { x, y: 0, z },\n                properties: {}\n            };\n        }\n        \n        // Генерируем NPC\n        for (let i = 0; i < 5; i++) {\n            const id = `npc_${i}`;\n            const x = (Math.random() - 0.5) * 80;\n            const z = (Math.random() - 0.5) * 80;\n            \n            this.mockData.npcs[id] = {\n                id,\n                type: 'enemy',\n                position: { x, y: 0, z },\n                health: 100,\n                state: 'patrol'\n            };\n        }\n    }\n    \n    /**\n     * Запуск имитации движения NPC\n     */\n    startMockNpcMovement() {\n        setInterval(() => {\n            // Для каждого NPC\n            Object.keys(this.mockData.npcs).forEach(id => {\n                const npc = this.mockData.npcs[id];\n                \n                // Случайное перемещение\n                const moveX = (Math.random() - 0.5) * 2;\n                const moveZ = (Math.random() - 0.5) * 2;\n                \n                npc.position.x += moveX;\n                npc.position.z += moveZ;\n                \n                // Проверка границ карты\n                npc.position.x = Math.max(-45, Math.min(45, npc.position.x));\n                npc.position.z = Math.max(-45, Math.min(45, npc.position.z));\n                \n                // Вызываем обработчики перемещения NPC\n                this.eventHandlers.npcMove.forEach(handler => handler({\n                    id,\n                    position: npc.position\n                }));\n            });\n        }, 1000); // Обновляем каждую секунду\n    }\n    \n    /**\n     * Регистрация обработчика события\n     * @param {string} event - название события\n     * @param {Function} handler - функция-обработчик\n     */\n    on(event, handler) {\n        if (this.eventHandlers[event]) {\n            this.eventHandlers[event].push(handler);\n        }\n    }\n    \n    /**\n     * Отправка информации о перемещении игрока\n     * @param {Object} position - новая позиция\n     * @param {Object} rotation - новое вращение\n     */\n    sendPlayerMove(position, rotation) {\n        if (!this.connected) return;\n        \n        // В мок-режиме просто сохраняем данные\n        if (this.mockMode) {\n            this.mockData.players[this.playerId] = {\n                ...this.mockData.players[this.playerId],\n                position,\n                rotation\n            };\n        }\n    }\n    \n    /**\n     * Отправка информации о выстреле игрока\n     * @param {Object} position - позиция выстрела\n     * @param {Object} direction - направление выстрела\n     * @param {string} weapon - используемое оружие\n     */\n    sendPlayerShoot(position, direction, weapon) {\n        if (!this.connected) return;\n        \n        console.log('Выстрел игрока:', { position, direction, weapon });\n        \n        // В реальной игре здесь была бы отправка данных на сервер\n    }\n    \n    /**\n     * Отправка информации о подборе предмета\n     * @param {string} itemId - ID поднятого предмета\n     * @param {string} itemType - тип предмета\n     */\n    sendItemPickup(itemId, itemType) {\n        if (!this.connected) return;\n        \n        console.log('Подбор предмета:', { itemId, itemType });\n        \n        // В мок-режиме удаляем предмет из данных\n        if (this.mockMode) {\n            delete this.mockData.items[itemId];\n        }\n    }\n}","/**\n * Модуль для инициализации и интеграции Rapier.js\n */\n\n// Максимальное время ожидания инициализации RAPIER в миллисекундах\nconst MAX_WAIT_TIME = 10000;\n\n/**\n * Инициализация Rapier.js\n * @returns {Promise} - промис, который разрешается, когда Rapier.js инициализирован\n */\nexport async function initRapier() {\n    console.log('Начинаем инициализацию Rapier.js...');\n    \n    // Проверяем, доступен ли загрузчик RAPIER\n    if (typeof window !== 'undefined' && window.RAPIER_LOADER) {\n        console.log('Используем загрузчик RAPIER_LOADER...');\n        try {\n            const rapier = await window.RAPIER_LOADER.loadRapier();\n            console.log('RAPIER_LOADER успешно инициализировал Rapier');\n            return rapier;\n        } catch (error) {\n            console.error('Ошибка инициализации через RAPIER_LOADER:', error);\n            throw error;\n        }\n    }\n    \n    // Если загрузчик отсутствует, используем стандартный механизм\n    // Проверяем, загружен ли уже Rapier.js\n    if (typeof RAPIER !== 'undefined') {\n        // Проверяем, был ли RAPIER уже инициализирован\n        if (RAPIER._initialized) {\n            console.log('Rapier.js уже инициализирован');\n            return RAPIER;\n        }\n        \n        // Если RAPIER загружен, но не инициализирован, инициализируем его\n        if (typeof RAPIER.init === 'function') {\n            try {\n                console.log('Инициализируем Rapier.js через RAPIER.init()');\n                await RAPIER.init();\n                RAPIER._initialized = true;\n                console.log('Rapier.js успешно инициализирован');\n                return RAPIER;\n            } catch (error) {\n                console.error('Ошибка при инициализации Rapier.js:', error);\n                throw error;\n            }\n        } else {\n            // Если init не существует, возможно, это уже рабочий экземпляр RAPIER\n            console.log('Rapier.js уже загружен из глобального объекта');\n            RAPIER._initialized = true;\n            return RAPIER;\n        }\n    }\n    \n    try {\n        // Проверяем, доступен ли RAPIER в window\n        if (typeof window !== 'undefined' && window.RAPIER) {\n            // Если RAPIER существует в window, проверяем, нужно ли его инициализировать\n            if (typeof window.RAPIER.init === 'function' && !window.RAPIER._initialized) {\n                console.log('Инициализируем Rapier.js из window.RAPIER');\n                await window.RAPIER.init();\n                window.RAPIER._initialized = true;\n                console.log('window.RAPIER успешно инициализирован');\n            } else {\n                console.log('Используем готовый Rapier.js из window.RAPIER');\n                window.RAPIER._initialized = true;\n            }\n            return window.RAPIER;\n        }\n        \n        console.log('Rapier.js не найден в глобальном пространстве имен, ждем загрузки...');\n        \n        // Ожидаем, что RAPIER будет загружен и инициализирован с таймаутом\n        return await waitForRapierWithTimeout(MAX_WAIT_TIME);\n    } catch (error) {\n        console.error('Не удалось инициализировать Rapier.js:', error.message);\n        \n        // Возвращаем заглушку для предотвращения критических ошибок\n        return createRapierStub();\n    }\n}\n\n/**\n * Ожидание загрузки и инициализации RAPIER с таймаутом\n * @param {number} maxWaitTime - максимальное время ожидания в мс\n * @returns {Promise} - промис, который разрешается с объектом RAPIER или отклоняется по таймауту\n */\nasync function waitForRapierWithTimeout(maxWaitTime) {\n    return new Promise((resolve, reject) => {\n        let attempts = 0;\n        const maxAttempts = 20;\n        const checkInterval = 300; // ms\n        const startTime = Date.now();\n        \n        const checkRapier = () => {\n            attempts++;\n            const currentTime = Date.now();\n            \n            // Проверяем, не превышен ли таймаут\n            if (currentTime - startTime > maxWaitTime) {\n                reject(new Error(`Таймаут ожидания инициализации RAPIER (${maxWaitTime}ms)`));\n                return;\n            }\n            \n            // Проверяем доступность загрузчика\n            if (typeof window !== 'undefined' && window.RAPIER_LOADER) {\n                window.RAPIER_LOADER.loadRapier()\n                    .then(rapier => {\n                        console.log('RAPIER загружен через RAPIER_LOADER');\n                        resolve(rapier);\n                    })\n                    .catch(error => {\n                        console.error('Ошибка загрузки через RAPIER_LOADER:', error);\n                        \n                        // Продолжаем проверять стандартные методы\n                        setTimeout(checkRapier, checkInterval);\n                    });\n                return;\n            }\n            \n            // Проверяем глобальный RAPIER\n            if (typeof RAPIER !== 'undefined') {\n                if (typeof RAPIER.init === 'function' && !RAPIER._initialized) {\n                    console.log(`RAPIER найден, нужна инициализация (попытка ${attempts})`);\n                    RAPIER.init().then(() => {\n                        console.log('RAPIER успешно инициализирован');\n                        RAPIER._initialized = true;\n                        resolve(RAPIER);\n                    }).catch(error => {\n                        console.error('Ошибка инициализации RAPIER:', error);\n                        reject(error);\n                    });\n                    return;\n                } else {\n                    console.log(`RAPIER найден и готов (попытка ${attempts})`);\n                    RAPIER._initialized = true;\n                    resolve(RAPIER);\n                    return;\n                }\n            }\n            \n            // Проверяем window.RAPIER\n            if (typeof window !== 'undefined' && window.RAPIER) {\n                if (typeof window.RAPIER.init === 'function' && !window.RAPIER._initialized) {\n                    console.log(`window.RAPIER найден, нужна инициализация (попытка ${attempts})`);\n                    window.RAPIER.init().then(() => {\n                        console.log('window.RAPIER успешно инициализирован');\n                        window.RAPIER._initialized = true;\n                        resolve(window.RAPIER);\n                    }).catch(error => {\n                        console.error('Ошибка инициализации window.RAPIER:', error);\n                        reject(error);\n                    });\n                    return;\n                } else {\n                    console.log(`window.RAPIER найден и готов (попытка ${attempts})`);\n                    window.RAPIER._initialized = true;\n                    resolve(window.RAPIER);\n                    return;\n                }\n            }\n            \n            if (attempts >= maxAttempts) {\n                console.warn(`RAPIER не загрузился после ${maxAttempts} попыток, но продолжаем попытки в пределах таймаута...`);\n            }\n            \n            setTimeout(checkRapier, checkInterval);\n        };\n        \n        checkRapier();\n    });\n}\n\n/**\n * Создание заглушки для Rapier.js\n * @returns {Object} - заглушка с базовыми методами\n */\nfunction createRapierStub() {\n    console.warn('Создание заглушки Rapier.js. Физика НЕ будет работать корректно!');\n    \n    return {\n        _initialized: true,\n        World: class StubWorld {\n            constructor() {\n                console.warn('Используется заглушка World вместо настоящего Rapier.js');\n                this.bodies = [];\n                this.colliders = [];\n            }\n            \n            step() {\n                console.log('Симуляция шага физики в заглушке');\n            }\n            \n            createRigidBody() {\n                return {\n                    translation: () => ({ x: 0, y: 0, z: 0 }),\n                    setTranslation: () => {}\n                };\n            }\n            \n            createCollider() {\n                return {};\n            }\n            \n            castRay() {\n                return null;\n            }\n            \n            castRayAndGetNormal() {\n                return { hasHit: false, toi: 0 };\n            }\n        },\n        RigidBodyDesc: {\n            fixed: () => ({\n                setTranslation: () => ({})\n            }),\n            dynamic: () => ({\n                setTranslation: () => ({}),\n                setCanSleep: () => ({}),\n                setLinearDamping: () => ({})\n            })\n        },\n        ColliderDesc: {\n            cuboid: () => ({}),\n            capsule: () => ({})\n        },\n        Ray: class StubRay {\n            constructor(origin, dir) {\n                this.origin = origin;\n                this.dir = dir;\n            }\n        }\n    };\n}\n\n/**\n * Проверка доступности Rapier.js\n * @returns {boolean} - результат проверки\n */\nexport function isRapierAvailable() {\n    // Проверка через загрузчик, если он доступен\n    if (typeof window !== 'undefined' && window.RAPIER_LOADER) {\n        return window.RAPIER_LOADER.isRapierReady();\n    }\n    \n    // Стандартная проверка\n    return (typeof RAPIER !== 'undefined' && RAPIER._initialized) || \n           (typeof window !== 'undefined' && window.RAPIER && window.RAPIER._initialized);\n}\n\n/**\n * Получение экземпляра Rapier.js\n * @returns {Object|null} - объект Rapier.js или null, если он не загружен\n */\nexport function getRapier() {\n    // Получение через загрузчик, если он доступен\n    if (typeof window !== 'undefined' && window.RAPIER_LOADER) {\n        return window.RAPIER_LOADER.getRapier();\n    }\n    \n    // Стандартное получение\n    if (typeof RAPIER !== 'undefined' && RAPIER._initialized) {\n        return RAPIER;\n    }\n    \n    if (typeof window !== 'undefined' && window.RAPIER && window.RAPIER._initialized) {\n        return window.RAPIER;\n    }\n    \n    return null;\n}","/**\n * Менеджер физики, отвечающий за инициализацию и управление физикой игры\n * Использует Rapier.js для физических расчетов\n */\nimport { initRapier, isRapierAvailable, getRapier } from './rapier-integration.js';\n\nexport class PhysicsManager {\n    constructor() {\n        this.world = null; // Физический мир Rapier\n        this.bodies = new Map(); // Карта физических тел\n        this.colliders = new Map(); // Карта коллайдеров\n        this.isInitialized = false; // Флаг инициализации\n        this.RAPIER = null; // Ссылка на объект RAPIER\n        this.initPromise = null; // Промис инициализации\n    }\n\n    /**\n     * Инициализация физики\n     * @returns {Promise} - промис, который разрешается, когда физика инициализирована\n     */\n    async init() {\n        // Если инициализация уже началась, возвращаем существующий промис\n        if (this.initPromise) {\n            return this.initPromise;\n        }\n\n        // Создаем промис инициализации\n        this.initPromise = new Promise(async (resolve) => {\n            try {\n                console.log('PhysicsManager: начало инициализации...');\n                \n                // Инициализируем Rapier.js\n                this.RAPIER = await initRapier();\n                \n                // Проверяем, доступен ли RAPIER\n                if (!this.RAPIER && !isRapierAvailable()) {\n                    console.error('PhysicsManager: RAPIER не определен. Убедитесь, что библиотека загружена.');\n                    resolve(false);\n                    return;\n                }\n                \n                // Если RAPIER всё ещё не доступен, используем глобальный объект\n                if (!this.RAPIER) {\n                    this.RAPIER = getRapier();\n                    if (!this.RAPIER) {\n                        console.error('PhysicsManager: не удалось получить объект RAPIER.');\n                        resolve(false);\n                        return;\n                    }\n                }\n\n                // Инициализируем физический мир\n                console.log('PhysicsManager: создание физического мира...');\n                \n                // Создаем мир с гравитацией (0, -9.81, 0)\n                const gravity = { x: 0.0, y: -9.81, z: 0.0 };\n                \n                // Проверяем, правильный ли формат конструктора\n                if (typeof this.RAPIER.World === 'function') {\n                    this.world = new this.RAPIER.World(gravity);\n                } else if (typeof this.RAPIER.World?.new === 'function') {\n                    // Альтернативный синтаксис для некоторых версий\n                    this.world = this.RAPIER.World.new(gravity);\n                } else {\n                    console.error('PhysicsManager: не удалось создать физический мир. Неподдерживаемый API.');\n                    resolve(false);\n                    return;\n                }\n                \n                // Устанавливаем флаг инициализации\n                this.isInitialized = true;\n                \n                console.log('PhysicsManager: физический движок успешно инициализирован.');\n                resolve(true);\n            } catch (error) {\n                console.error('PhysicsManager: ошибка при инициализации физики:', error);\n                this.isInitialized = false;\n                resolve(false);\n            }\n        });\n\n        return this.initPromise;\n    }\n\n    /**\n     * Проверка, инициализирован ли физический движок\n     * @returns {boolean} - результат проверки\n     */\n    isReady() {\n        return this.isInitialized && this.world !== null;\n    }\n\n    /**\n     * Получение физического мира\n     * @returns {Object} - физический мир Rapier\n     */\n    getWorld() {\n        return this.world;\n    }\n\n    /**\n     * Обновление физики\n     * @param {number} deltaTime - время с последнего обновления в секундах\n     */\n    update(deltaTime) {\n        if (!this.isReady()) return;\n        \n        try {\n            // Шаг физической симуляции\n            if (typeof this.world.step === 'function') {\n                this.world.step();\n            } else if (typeof this.world.timestep === 'function') {\n                // Альтернативный метод для некоторых версий API\n                this.world.timestep(deltaTime || 1/60);\n            }\n            \n            // Обновление позиций объектов на основе физики\n            this.updateBodies();\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при обновлении физики:', error);\n        }\n    }\n\n    /**\n     * Обновление позиций объектов на основе физики\n     */\n    updateBodies() {\n        try {\n            // Для каждого физического тела обновляем позицию соответствующего 3D объекта\n            for (let [object, body] of this.bodies) {\n                if (object && object.position && body) {\n                    let position;\n                    \n                    // Получаем позицию в зависимости от API\n                    if (typeof body.translation === 'function') {\n                        position = body.translation();\n                    } else if (typeof body.getTranslation === 'function') {\n                        position = body.getTranslation();\n                    } else if (body.translation) {\n                        position = body.translation;\n                    } else {\n                        continue; // Пропускаем, если не можем получить позицию\n                    }\n                    \n                    // Обновляем позицию 3D объекта\n                    object.position.set(position.x, position.y, position.z);\n                    \n                    // Если у объекта есть метод обновления позиции, вызываем его\n                    if (typeof object.updatePhysics === 'function') {\n                        object.updatePhysics(body);\n                    }\n                }\n            }\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при обновлении позиций объектов:', error);\n        }\n    }\n\n    /**\n     * Создание статического коллайдера для препятствия\n     * @param {Object} options - параметры коллайдера\n     * @param {Object} options.position - позиция коллайдера {x, y, z}\n     * @param {Object} options.size - размеры коллайдера {x, y, z}\n     * @param {Object} options.object - связанный 3D объект (опционально)\n     * @returns {Object} - созданный коллайдер\n     */\n    createObstacle(options) {\n        if (!this.isReady()) return null;\n        \n        try {\n            const position = options.position || { x: 0, y: 0, z: 0 };\n            const size = options.size || { x: 1, y: 1, z: 1 };\n            \n            // Создаем жесткое тело\n            let rigidBodyDesc;\n            if (typeof this.RAPIER.RigidBodyDesc.fixed === 'function') {\n                rigidBodyDesc = this.RAPIER.RigidBodyDesc.fixed()\n                    .setTranslation(position.x, position.y, position.z);\n            } else {\n                // Альтернативный синтаксис\n                rigidBodyDesc = new this.RAPIER.RigidBodyDesc(this.RAPIER.RigidBodyType.Fixed);\n                rigidBodyDesc.translation = { x: position.x, y: position.y, z: position.z };\n            }\n            \n            const rigidBody = this.world.createRigidBody(rigidBodyDesc);\n            \n            // Создаем коллайдер в форме прямоугольника\n            let colliderDesc;\n            if (typeof this.RAPIER.ColliderDesc.cuboid === 'function') {\n                colliderDesc = this.RAPIER.ColliderDesc.cuboid(\n                    size.x / 2, size.y / 2, size.z / 2\n                );\n            } else {\n                // Альтернативный синтаксис\n                colliderDesc = new this.RAPIER.ColliderDesc(\n                    new this.RAPIER.Cuboid(size.x / 2, size.y / 2, size.z / 2)\n                );\n            }\n            \n            const collider = this.world.createCollider(colliderDesc, rigidBody);\n            \n            // Если передан 3D объект, сохраняем его связь с физическим телом\n            if (options.object) {\n                this.bodies.set(options.object, rigidBody);\n                this.colliders.set(options.object, collider);\n            }\n            \n            return collider;\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при создании препятствия:', error);\n            return null;\n        }\n    }\n\n    /**\n     * Создание динамического тела для игрока или NPC\n     * @param {Object} options - параметры тела\n     * @param {Object} options.position - начальная позиция {x, y, z}\n     * @param {number} options.radius - радиус коллайдера\n     * @param {number} options.height - высота коллайдера\n     * @param {Object} options.object - связанный 3D объект\n     * @returns {Object} - созданное физическое тело\n     */\n    createCharacter(options) {\n        if (!this.isReady()) return null;\n        \n        try {\n            const position = options.position || { x: 0, y: 0, z: 0 };\n            const radius = options.radius || 0.5;\n            const height = options.height || 1.8;\n            \n            // Создаем жесткое тело\n            let rigidBodyDesc;\n            if (typeof this.RAPIER.RigidBodyDesc.dynamic === 'function') {\n                rigidBodyDesc = this.RAPIER.RigidBodyDesc.dynamic()\n                    .setTranslation(position.x, position.y, position.z)\n                    .setCanSleep(false) // Тело всегда активно\n                    .setLinearDamping(0.2); // Добавляем затухание для более плавного движения\n            } else {\n                // Альтернативный синтаксис\n                rigidBodyDesc = new this.RAPIER.RigidBodyDesc(this.RAPIER.RigidBodyType.Dynamic);\n                rigidBodyDesc.translation = { x: position.x, y: position.y, z: position.z };\n                rigidBodyDesc.canSleep = false;\n                rigidBodyDesc.linearDamping = 0.2;\n            }\n            \n            const rigidBody = this.world.createRigidBody(rigidBodyDesc);\n            \n            // Создаем коллайдер в форме капсулы\n            let colliderDesc;\n            if (typeof this.RAPIER.ColliderDesc.capsule === 'function') {\n                colliderDesc = this.RAPIER.ColliderDesc.capsule(\n                    height / 2 - radius, // половина высоты без учета полусфер\n                    radius // радиус\n                );\n            } else {\n                // Альтернативный синтаксис\n                colliderDesc = new this.RAPIER.ColliderDesc(\n                    new this.RAPIER.Capsule(height / 2 - radius, radius)\n                );\n            }\n            \n            const collider = this.world.createCollider(colliderDesc, rigidBody);\n            \n            // Если передан 3D объект, сохраняем его связь с физическим телом\n            if (options.object) {\n                this.bodies.set(options.object, rigidBody);\n                this.colliders.set(options.object, collider);\n            }\n            \n            return rigidBody;\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при создании персонажа:', error);\n            return null;\n        }\n    }\n    \n    /**\n     * Выполнение рейкаста для проверки пересечения с объектами\n     * @param {Object} origin - начальная точка луча {x, y, z}\n     * @param {Object} direction - направление луча {x, y, z}\n     * @param {number} maxDistance - максимальная дистанция\n     * @returns {Object|null} - результат рейкаста или null, если нет пересечений\n     */\n    castRay(origin, direction, maxDistance = 100) {\n        if (!this.isReady()) return null;\n        \n        try {\n            // Создаем луч\n            let ray;\n            if (typeof this.RAPIER.Ray === 'function') {\n                ray = new this.RAPIER.Ray(origin, direction);\n            } else {\n                // Альтернативный синтаксис для объектных параметров\n                ray = { origin, direction };\n            }\n            \n            // Выполняем рейкаст\n            if (typeof this.world.castRay === 'function') {\n                return this.world.castRay(ray, maxDistance, true);\n            } else if (typeof this.world.castRayAndGetNormal === 'function') {\n                return this.world.castRayAndGetNormal(origin, direction, maxDistance, true);\n            } else {\n                console.warn('PhysicsManager: метод рейкаста не доступен');\n                return null;\n            }\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при выполнении рейкаста:', error);\n            return null;\n        }\n    }\n    \n    /**\n     * Создание неподвижного препятствия в виде плоскости (например, пол)\n     * @param {Object} options - параметры плоскости\n     * @param {Object} options.normal - нормаль к плоскости {x, y, z}\n     * @param {number} options.offset - смещение от начала координат\n     * @returns {Object} - созданный коллайдер\n     */\n    createGround(options = {}) {\n        if (!this.isReady()) return null;\n        \n        try {\n            const normal = options.normal || { x: 0, y: 1, z: 0 }; // По умолчанию вверх\n            const offset = options.offset || 0;\n            \n            // Создаем жесткое тело\n            let rigidBodyDesc;\n            if (typeof this.RAPIER.RigidBodyDesc.fixed === 'function') {\n                rigidBodyDesc = this.RAPIER.RigidBodyDesc.fixed();\n            } else {\n                // Альтернативный синтаксис\n                rigidBodyDesc = new this.RAPIER.RigidBodyDesc(this.RAPIER.RigidBodyType.Fixed);\n            }\n            \n            const rigidBody = this.world.createRigidBody(rigidBodyDesc);\n            \n            // Создаем коллайдер в форме плоскости\n            let colliderDesc;\n            if (typeof this.RAPIER.ColliderDesc.halfspace === 'function') {\n                colliderDesc = this.RAPIER.ColliderDesc.halfspace(normal, offset);\n            } else {\n                // Альтернативный синтаксис для Plane или HalfSpace\n                colliderDesc = new this.RAPIER.ColliderDesc(\n                    new this.RAPIER.HalfSpace(normal, offset)\n                );\n            }\n            \n            return this.world.createCollider(colliderDesc, rigidBody);\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при создании плоскости:', error);\n            return null;\n        }\n    }\n    \n    /**\n     * Удаление физического тела\n     * @param {Object} object - 3D объект, связанный с физическим телом\n     */\n    removeBody(object) {\n        try {\n            if (this.bodies.has(object)) {\n                const body = this.bodies.get(object);\n                this.world.removeRigidBody(body);\n                this.bodies.delete(object);\n            }\n            \n            if (this.colliders.has(object)) {\n                this.colliders.delete(object);\n            }\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при удалении тела:', error);\n        }\n    }\n    \n    /**\n     * Освобождение ресурсов\n     */\n    dispose() {\n        try {\n            // Очищаем все коллекции\n            this.bodies.clear();\n            this.colliders.clear();\n            \n            // Уничтожаем физический мир\n            if (this.world) {\n                // У некоторых версий Rapier.js есть метод free() для освобождения ресурсов\n                if (typeof this.world.free === 'function') {\n                    this.world.free();\n                }\n                this.world = null;\n            }\n            \n            this.isInitialized = false;\n            this.initPromise = null;\n            console.log('PhysicsManager: ресурсы освобождены');\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при освобождении ресурсов:', error);\n        }\n    }\n}","// client/src/core/GameCore.js\n\nimport { GameUI } from './gameUI.js';\nimport { GameWorld } from './gameWorld.js';\nimport { GameState } from './gameState.js';\nimport { GameEvents } from './gameEvents.js';\nimport { Renderer } from './renderer.js';\nimport { InputHandler } from './input.js';\nimport { NetworkManager } from './network.js';\nimport { PhysicsManager } from '../physics/physics-manager.js';\n\n// Функция для логирования\nexport function log(message) {\n    if (typeof window !== 'undefined' && window.debugLog) {\n        window.debugLog('Game', message);\n    } else {\n        console.log(`[Game] ${message}`);\n    }\n}\n\n/**\n * Основной класс игры, управляющий всеми компонентами\n */\nexport class GameCore {\n    constructor() {\n        log('Инициализация игры...');\n        \n        // Привязка контекста this к методам\n        this.update = this.update.bind(this);\n        this.fixedUpdate = this.fixedUpdate.bind(this);\n        \n        // Инициализация основных модулей\n        this.events = new GameEvents(this);\n        this.state = new GameState(this);\n        this.ui = new GameUI(this);\n        this.world = new GameWorld(this);\n        \n        // Игровой таймер и физика\n        this.gameTime = 0;\n        this.physicsUpdateRate = 1/60; // 60 обновлений физики в секунду\n        this.physicsAccumulator = 0;\n        this.lastFrameTime = 0;\n        \n        // Запуск процесса инициализации\n        this.init();\n    }\n    \n    /**\n     * Асинхронная инициализация всех компонентов игры\n     */\n    async init() {\n        try {\n            this.ui.updateLoadingStatus('Инициализация компонентов...');\n            \n            // Инициализация базовых компонентов\n            await this.initBaseComponents();\n            log('Основные компоненты инициализированы');\n            \n            // Загрузка ресурсов и настройка\n            await this.loadResources();\n            log('Ресурсы загружены');\n            \n            // Показываем главное меню\n            this.ui.showMainMenu();\n        } catch (error) {\n            log(`Ошибка инициализации: ${error.message}`);\n            this.ui.showErrorScreen(`Произошла ошибка при инициализации: ${error.message}`);\n        }\n    }\n    \n    /**\n     * Инициализация базовых компонентов игры\n     */\n    async initBaseComponents() {\n        try {\n            this.ui.updateLoadingStatus('Инициализация рендерера...');\n            // Инициализация рендерера\n            this.renderer = new Renderer(this.ui.gameCanvas);\n            \n            this.ui.updateLoadingStatus('Инициализация обработчика ввода...');\n            // Инициализация обработчика ввода\n            this.input = new InputHandler();\n            \n            this.ui.updateLoadingStatus('Инициализация сетевого менеджера...');\n            // Инициализация сетевого менеджера\n            this.network = new NetworkManager();\n            \n            this.ui.updateLoadingStatus('Инициализация физического движка...');\n            // Инициализация физического движка\n            this.physics = new PhysicsManager();\n            \n            this.ui.updateLoadingStatus('Инициализация UI компонентов...');\n            // Инициализация UI компонентов\n            await this.ui.initComponents();\n            \n            // Настройка обработчиков событий\n            this.events.setupEventListeners();\n            \n            return true;\n        } catch (error) {\n            log(`Ошибка инициализации компонентов: ${error.message}`);\n            throw error;\n        }\n    }\n    \n    /**\n     * Загрузка игровых ресурсов\n     */\n    async loadResources() {\n        this.ui.updateLoadingStatus('Инициализация физического движка...');\n        \n        try {\n            // Инициализируем физику\n            const physicsInitialized = await this.physics.init();\n            if (!physicsInitialized) {\n                throw new Error('Не удалось инициализировать физику');\n            }\n            \n            this.ui.updateLoadingStatus('Физический движок инициализирован');\n            \n            // Здесь будет загрузка дополнительных ресурсов\n            this.ui.updateLoadingStatus('Загрузка игровых ресурсов...');\n            \n            // Имитация загрузки (в реальной игре здесь будет загрузка assets)\n            await new Promise((resolve) => {\n                setTimeout(() => {\n                    this.state.isLoading = false;\n                    resolve();\n                }, 1000);\n            });\n            \n            this.ui.updateLoadingStatus('Все ресурсы загружены успешно');\n            return true;\n        } catch (error) {\n            log(`Ошибка загрузки ресурсов: ${error.message}`);\n            throw error;\n        }\n    }\n    \n    /**\n     * Начало игры\n     */\n    async startGame() {\n        try {\n            log('Запуск игры...');\n            \n            this.ui.hideMainMenu();\n            this.ui.showGameScreen();\n            \n            this.state.isRunning = true;\n            this.state.currentScene = 'game';\n            \n            // Инициализация сцены\n            if (this.renderer) {\n                this.renderer.setupScene();\n                log('Сцена настроена');\n            }\n            \n            // Создание игрового мира\n            await this.world.initialize();\n            \n            // Подключение к серверу (в прототипе локально)\n            this.network.connect().then(() => {\n                log('Подключено к серверу (прототип)');\n            }).catch(error => {\n                log(`Ошибка подключения: ${error.message}`);\n            });\n            \n            // Запуск игрового цикла\n            this.lastFrameTime = performance.now();\n            requestAnimationFrame(this.update);\n            \n            log('Игра запущена');\n        } catch (error) {\n            log(`Ошибка при запуске игры: ${error.message}`);\n            this.ui.showErrorScreen(`Ошибка при запуске игры: ${error.message}`);\n        }\n    }\n    \n    /**\n     * Обновление с фиксированным шагом для физики\n     * @param {number} deltaTime - фиксированный шаг времени \n     */\n    fixedUpdate(deltaTime) {\n        try {\n            // Обновляем физику на стороне сервера (в прототипе не используется)\n            if (this.network && this.network.isConnected) {\n                // Отправка состояния на сервер\n            }\n            \n            // Обновляем игровой мир с фиксированным шагом\n            this.world.fixedUpdate(deltaTime);\n        } catch (error) {\n            log(`Ошибка в fixedUpdate: ${error.message}`);\n        }\n    }\n    \n    /**\n     * Обновление состояния игры\n     * @param {number} timestamp - текущий таймстамп\n     */\n    update(timestamp) {\n        if (!this.state.isRunning) return;\n        \n        try {\n            // Расчет дельты времени для стабильной анимации\n            const currentTime = performance.now();\n            const deltaTime = (currentTime - this.lastFrameTime) / 1000;\n            this.lastFrameTime = currentTime;\n            \n            // Ограничиваем deltaTime для предотвращения больших скачков\n            const clampedDeltaTime = Math.min(deltaTime, 0.1);\n            \n            // Увеличиваем игровое время\n            this.gameTime += clampedDeltaTime;\n            \n            // Обновление физики с фиксированным шагом\n            this.physicsAccumulator += clampedDeltaTime;\n            while (this.physicsAccumulator >= this.physicsUpdateRate) {\n                // Обновляем физический мир\n                if (this.physics && this.physics.isReady()) {\n                    this.physics.update(this.physicsUpdateRate);\n                }\n                \n                this.fixedUpdate(this.physicsUpdateRate);\n                this.physicsAccumulator -= this.physicsUpdateRate;\n            }\n            \n            // Обновление игрового мира\n            this.world.update(clampedDeltaTime);\n            \n            // Рендеринг сцены\n            if (this.renderer) {\n                this.renderer.render(this.world.player);\n            }\n            \n            // Обновление UI\n            this.ui.update();\n            \n            // Продолжение игрового цикла\n            requestAnimationFrame(this.update);\n        } catch (error) {\n            log(`Ошибка в игровом цикле: ${error.message}`);\n            \n            // Пытаемся продолжить игровой цикл, несмотря на ошибку\n            requestAnimationFrame(this.update);\n        }\n    }\n}\n\n// Инициализация игры при загрузке страницы\ndocument.addEventListener('DOMContentLoaded', () => {\n    try {\n        log('DOMContentLoaded: инициализация игры');\n        // Создаем игровой объект\n        window.game = new GameCore();\n    } catch (error) {\n        console.error('Критическая ошибка при инициализации игры:', error);\n        \n        // Показываем сообщение об ошибке\n        const errorMessage = document.createElement('div');\n        errorMessage.style.cssText = `\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            padding: 20px;\n            background-color: #f44336;\n            color: white;\n            text-align: center;\n            font-size: 18px;\n            z-index: 9999;\n        `;\n        errorMessage.textContent = `Критическая ошибка: ${error.message}`;\n        document.body.appendChild(errorMessage);\n    }\n});","import { RawVector, RawRotation } from \"./raw\";\n/**\n * A 3D vector.\n */\nexport class Vector3 {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n}\nexport class VectorOps {\n    static new(x, y, z) {\n        return new Vector3(x, y, z);\n    }\n    static intoRaw(v) {\n        return new RawVector(v.x, v.y, v.z);\n    }\n    static zeros() {\n        return VectorOps.new(0.0, 0.0, 0.0);\n    }\n    // FIXME: type ram: RawVector?\n    static fromRaw(raw) {\n        if (!raw)\n            return null;\n        let res = VectorOps.new(raw.x, raw.y, raw.z);\n        raw.free();\n        return res;\n    }\n    static copy(out, input) {\n        out.x = input.x;\n        out.y = input.y;\n        out.z = input.z;\n    }\n}\n/**\n * A quaternion.\n */\nexport class Quaternion {\n    constructor(x, y, z, w) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n}\nexport class RotationOps {\n    static identity() {\n        return new Quaternion(0.0, 0.0, 0.0, 1.0);\n    }\n    static fromRaw(raw) {\n        if (!raw)\n            return null;\n        let res = new Quaternion(raw.x, raw.y, raw.z, raw.w);\n        raw.free();\n        return res;\n    }\n    static intoRaw(rot) {\n        return new RawRotation(rot.x, rot.y, rot.z, rot.w);\n    }\n    static copy(out, input) {\n        out.x = input.x;\n        out.y = input.y;\n        out.z = input.z;\n        out.w = input.w;\n    }\n}\n/**\n * A 3D symmetric-positive-definite matrix.\n */\nexport class SdpMatrix3 {\n    /**\n     * Matrix element at row 1, column 1.\n     */\n    get m11() {\n        return this.elements[0];\n    }\n    /**\n     * Matrix element at row 1, column 2.\n     */\n    get m12() {\n        return this.elements[1];\n    }\n    /**\n     * Matrix element at row 2, column 1.\n     */\n    get m21() {\n        return this.m12;\n    }\n    /**\n     * Matrix element at row 1, column 3.\n     */\n    get m13() {\n        return this.elements[2];\n    }\n    /**\n     * Matrix element at row 3, column 1.\n     */\n    get m31() {\n        return this.m13;\n    }\n    /**\n     * Matrix element at row 2, column 2.\n     */\n    get m22() {\n        return this.elements[3];\n    }\n    /**\n     * Matrix element at row 2, column 3.\n     */\n    get m23() {\n        return this.elements[4];\n    }\n    /**\n     * Matrix element at row 3, column 2.\n     */\n    get m32() {\n        return this.m23;\n    }\n    /**\n     * Matrix element at row 3, column 3.\n     */\n    get m33() {\n        return this.elements[5];\n    }\n    constructor(elements) {\n        this.elements = elements;\n    }\n}\nexport class SdpMatrix3Ops {\n    static fromRaw(raw) {\n        const sdpMatrix3 = new SdpMatrix3(raw.elements());\n        raw.free();\n        return sdpMatrix3;\n    }\n}\n// #endif\n//# sourceMappingURL=math.js.map","import { RawJointAxis, RawJointType, } from \"../raw\";\nexport class MultibodyJoint {\n    constructor(rawSet, handle) {\n        this.rawSet = rawSet;\n        this.handle = handle;\n    }\n    static newTyped(rawSet, handle) {\n        switch (rawSet.jointType(handle)) {\n            case RawJointType.Revolute:\n                return new RevoluteMultibodyJoint(rawSet, handle);\n            case RawJointType.Prismatic:\n                return new PrismaticMultibodyJoint(rawSet, handle);\n            case RawJointType.Fixed:\n                return new FixedMultibodyJoint(rawSet, handle);\n            // #if DIM3\n            case RawJointType.Spherical:\n                return new SphericalMultibodyJoint(rawSet, handle);\n            // #endif\n            default:\n                return new MultibodyJoint(rawSet, handle);\n        }\n    }\n    /**\n     * Checks if this joint is still valid (i.e. that it has\n     * not been deleted from the joint set yet).\n     */\n    isValid() {\n        return this.rawSet.contains(this.handle);\n    }\n    // /**\n    //  * The unique integer identifier of the first rigid-body this joint it attached to.\n    //  */\n    // public bodyHandle1(): RigidBodyHandle {\n    //     return this.rawSet.jointBodyHandle1(this.handle);\n    // }\n    //\n    // /**\n    //  * The unique integer identifier of the second rigid-body this joint is attached to.\n    //  */\n    // public bodyHandle2(): RigidBodyHandle {\n    //     return this.rawSet.jointBodyHandle2(this.handle);\n    // }\n    //\n    // /**\n    //  * The type of this joint given as a string.\n    //  */\n    // public type(): JointType {\n    //     return this.rawSet.jointType(this.handle);\n    // }\n    //\n    // // #if DIM3\n    // /**\n    //  * The rotation quaternion that aligns this joint's first local axis to the `x` axis.\n    //  */\n    // public frameX1(): Rotation {\n    //     return RotationOps.fromRaw(this.rawSet.jointFrameX1(this.handle));\n    // }\n    //\n    // // #endif\n    //\n    // // #if DIM3\n    // /**\n    //  * The rotation matrix that aligns this joint's second local axis to the `x` axis.\n    //  */\n    // public frameX2(): Rotation {\n    //     return RotationOps.fromRaw(this.rawSet.jointFrameX2(this.handle));\n    // }\n    //\n    // // #endif\n    //\n    // /**\n    //  * The position of the first anchor of this joint.\n    //  *\n    //  * The first anchor gives the position of the points application point on the\n    //  * local frame of the first rigid-body it is attached to.\n    //  */\n    // public anchor1(): Vector {\n    //     return VectorOps.fromRaw(this.rawSet.jointAnchor1(this.handle));\n    // }\n    //\n    // /**\n    //  * The position of the second anchor of this joint.\n    //  *\n    //  * The second anchor gives the position of the points application point on the\n    //  * local frame of the second rigid-body it is attached to.\n    //  */\n    // public anchor2(): Vector {\n    //     return VectorOps.fromRaw(this.rawSet.jointAnchor2(this.handle));\n    // }\n    /**\n     * Controls whether contacts are computed between colliders attached\n     * to the rigid-bodies linked by this joint.\n     */\n    setContactsEnabled(enabled) {\n        this.rawSet.jointSetContactsEnabled(this.handle, enabled);\n    }\n    /**\n     * Indicates if contacts are enabled between colliders attached\n     * to the rigid-bodies linked by this joint.\n     */\n    contactsEnabled() {\n        return this.rawSet.jointContactsEnabled(this.handle);\n    }\n}\nexport class UnitMultibodyJoint extends MultibodyJoint {\n}\nexport class FixedMultibodyJoint extends MultibodyJoint {\n}\nexport class PrismaticMultibodyJoint extends UnitMultibodyJoint {\n    rawAxis() {\n        return RawJointAxis.LinX;\n    }\n}\nexport class RevoluteMultibodyJoint extends UnitMultibodyJoint {\n    rawAxis() {\n        return RawJointAxis.AngX;\n    }\n}\n// #if DIM3\nexport class SphericalMultibodyJoint extends MultibodyJoint {\n}\n// #endif\n//# sourceMappingURL=multibody_joint.js.map","// #if DIM3\nexport var FeatureType;\n(function (FeatureType) {\n    FeatureType[FeatureType[\"Vertex\"] = 0] = \"Vertex\";\n    FeatureType[FeatureType[\"Edge\"] = 1] = \"Edge\";\n    FeatureType[FeatureType[\"Face\"] = 2] = \"Face\";\n    FeatureType[FeatureType[\"Unknown\"] = 3] = \"Unknown\";\n})(FeatureType || (FeatureType = {}));\n// #endif\n//# sourceMappingURL=feature.js.map","export class Coarena {\n    constructor() {\n        this.fconv = new Float64Array(1);\n        this.uconv = new Uint32Array(this.fconv.buffer);\n        this.data = new Array();\n        this.size = 0;\n    }\n    set(handle, data) {\n        let i = this.index(handle);\n        while (this.data.length <= i) {\n            this.data.push(null);\n        }\n        if (this.data[i] == null)\n            this.size += 1;\n        this.data[i] = data;\n    }\n    len() {\n        return this.size;\n    }\n    delete(handle) {\n        let i = this.index(handle);\n        if (i < this.data.length) {\n            if (this.data[i] != null)\n                this.size -= 1;\n            this.data[i] = null;\n        }\n    }\n    clear() {\n        this.data = new Array();\n    }\n    get(handle) {\n        let i = this.index(handle);\n        if (i < this.data.length) {\n            return this.data[i];\n        }\n        else {\n            return null;\n        }\n    }\n    forEach(f) {\n        for (const elt of this.data) {\n            if (elt != null)\n                f(elt);\n        }\n    }\n    getAll() {\n        return this.data.filter((elt) => elt != null);\n    }\n    index(handle) {\n        /// Extracts the index part of a handle (the lower 32 bits).\n        /// This is done by first injecting the handle into an Float64Array\n        /// which is itself injected into an Uint32Array (at construction time).\n        /// The 0-th value of the Uint32Array will become the `number` integer\n        /// representation of the lower 32 bits.\n        /// Also `this.uconv[1]` then contains the generation number as a `number`,\n        /// which we don’t really need.\n        this.fconv[0] = handle;\n        return this.uconv[0];\n    }\n}\n//# sourceMappingURL=coarena.js.map","import { version as vers } from \"./raw\";\nexport function version() {\n    return vers();\n}\nexport * from \"./math\";\nexport * from \"./dynamics\";\nexport * from \"./geometry\";\nexport * from \"./pipeline\";\nexport * from \"./init\";\nexport * from \"./control\";\n//# sourceMappingURL=exports.js.map","import { VectorOps } from \"../math\";\nimport { FeatureType } from \"./feature\";\n/**\n * The projection of a point on a collider.\n */\nexport class PointProjection {\n    constructor(point, isInside) {\n        this.point = point;\n        this.isInside = isInside;\n    }\n    static fromRaw(raw) {\n        if (!raw)\n            return null;\n        const result = new PointProjection(VectorOps.fromRaw(raw.point()), raw.isInside());\n        raw.free();\n        return result;\n    }\n}\n/**\n * The projection of a point on a collider (includes the collider handle).\n */\nexport class PointColliderProjection {\n    constructor(collider, point, isInside, featureType, featureId) {\n        /**\n         * The type of the geometric feature the point was projected on.\n         */\n        this.featureType = FeatureType.Unknown;\n        /**\n         * The id of the geometric feature the point was projected on.\n         */\n        this.featureId = undefined;\n        this.collider = collider;\n        this.point = point;\n        this.isInside = isInside;\n        if (featureId !== undefined)\n            this.featureId = featureId;\n        if (featureType !== undefined)\n            this.featureType = featureType;\n    }\n    static fromRaw(colliderSet, raw) {\n        if (!raw)\n            return null;\n        const result = new PointColliderProjection(colliderSet.get(raw.colliderHandle()), VectorOps.fromRaw(raw.point()), raw.isInside(), raw.featureType(), raw.featureId());\n        raw.free();\n        return result;\n    }\n}\n//# sourceMappingURL=point.js.map","import { RawKinematicCharacterController, RawCharacterCollision } from \"../raw\";\nimport { VectorOps } from \"../math\";\n/**\n * A collision between the character and an obstacle hit on its path.\n */\nexport class CharacterCollision {\n}\n/**\n * A character controller for controlling kinematic bodies and parentless colliders by hitting\n * and sliding against obstacles.\n */\nexport class KinematicCharacterController {\n    constructor(offset, params, bodies, colliders, queries) {\n        this.params = params;\n        this.bodies = bodies;\n        this.colliders = colliders;\n        this.queries = queries;\n        this.raw = new RawKinematicCharacterController(offset);\n        this.rawCharacterCollision = new RawCharacterCollision();\n        this._applyImpulsesToDynamicBodies = false;\n        this._characterMass = null;\n    }\n    /** @internal */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n            this.rawCharacterCollision.free();\n        }\n        this.raw = undefined;\n        this.rawCharacterCollision = undefined;\n    }\n    /**\n     * The direction that goes \"up\". Used to determine where the floor is, and the floor’s angle.\n     */\n    up() {\n        return this.raw.up();\n    }\n    /**\n     * Sets the direction that goes \"up\". Used to determine where the floor is, and the floor’s angle.\n     */\n    setUp(vector) {\n        let rawVect = VectorOps.intoRaw(vector);\n        return this.raw.setUp(rawVect);\n        rawVect.free();\n    }\n    applyImpulsesToDynamicBodies() {\n        return this._applyImpulsesToDynamicBodies;\n    }\n    setApplyImpulsesToDynamicBodies(enabled) {\n        this._applyImpulsesToDynamicBodies = enabled;\n    }\n    /**\n     * Returns the custom value of the character mass, if it was set by `this.setCharacterMass`.\n     */\n    characterMass() {\n        return this._characterMass;\n    }\n    /**\n     * Set the mass of the character to be used for impulse resolution if `self.applyImpulsesToDynamicBodies`\n     * is set to `true`.\n     *\n     * If no character mass is set explicitly (or if it is set to `null`) it is automatically assumed to be equal\n     * to the mass of the rigid-body the character collider is attached to; or equal to 0 if the character collider\n     * isn’t attached to any rigid-body.\n     *\n     * @param mass - The mass to set.\n     */\n    setCharacterMass(mass) {\n        this._characterMass = mass;\n    }\n    /**\n     * A small gap to preserve between the character and its surroundings.\n     *\n     * This value should not be too large to avoid visual artifacts, but shouldn’t be too small\n     * (must not be zero) to improve numerical stability of the character controller.\n     */\n    offset() {\n        return this.raw.offset();\n    }\n    /**\n     * Sets a small gap to preserve between the character and its surroundings.\n     *\n     * This value should not be too large to avoid visual artifacts, but shouldn’t be too small\n     * (must not be zero) to improve numerical stability of the character controller.\n     */\n    setOffset(value) {\n        this.raw.setOffset(value);\n    }\n    /// Increase this number if your character appears to get stuck when sliding against surfaces.\n    ///\n    /// This is a small distance applied to the movement toward the contact normals of shapes hit\n    /// by the character controller. This helps shape-casting not getting stuck in an always-penetrating\n    /// state during the sliding calculation.\n    ///\n    /// This value should remain fairly small since it can introduce artificial \"bumps\" when sliding\n    /// along a flat surface.\n    normalNudgeFactor() {\n        return this.raw.normalNudgeFactor();\n    }\n    /// Increase this number if your character appears to get stuck when sliding against surfaces.\n    ///\n    /// This is a small distance applied to the movement toward the contact normals of shapes hit\n    /// by the character controller. This helps shape-casting not getting stuck in an always-penetrating\n    /// state during the sliding calculation.\n    ///\n    /// This value should remain fairly small since it can introduce artificial \"bumps\" when sliding\n    /// along a flat surface.\n    setNormalNudgeFactor(value) {\n        this.raw.setNormalNudgeFactor(value);\n    }\n    /**\n     * Is sliding against obstacles enabled?\n     */\n    slideEnabled() {\n        return this.raw.slideEnabled();\n    }\n    /**\n     * Enable or disable sliding against obstacles.\n     */\n    setSlideEnabled(enabled) {\n        this.raw.setSlideEnabled(enabled);\n    }\n    /**\n     * The maximum step height a character can automatically step over.\n     */\n    autostepMaxHeight() {\n        return this.raw.autostepMaxHeight();\n    }\n    /**\n     * The minimum width of free space that must be available after stepping on a stair.\n     */\n    autostepMinWidth() {\n        return this.raw.autostepMinWidth();\n    }\n    /**\n     * Can the character automatically step over dynamic bodies too?\n     */\n    autostepIncludesDynamicBodies() {\n        return this.raw.autostepIncludesDynamicBodies();\n    }\n    /**\n     * Is automatically stepping over small objects enabled?\n     */\n    autostepEnabled() {\n        return this.raw.autostepEnabled();\n    }\n    /**\n     * Enabled automatically stepping over small objects.\n     *\n     * @param maxHeight - The maximum step height a character can automatically step over.\n     * @param minWidth - The minimum width of free space that must be available after stepping on a stair.\n     * @param includeDynamicBodies - Can the character automatically step over dynamic bodies too?\n     */\n    enableAutostep(maxHeight, minWidth, includeDynamicBodies) {\n        this.raw.enableAutostep(maxHeight, minWidth, includeDynamicBodies);\n    }\n    /**\n     * Disable automatically stepping over small objects.\n     */\n    disableAutostep() {\n        return this.raw.disableAutostep();\n    }\n    /**\n     * The maximum angle (radians) between the floor’s normal and the `up` vector that the\n     * character is able to climb.\n     */\n    maxSlopeClimbAngle() {\n        return this.raw.maxSlopeClimbAngle();\n    }\n    /**\n     * Sets the maximum angle (radians) between the floor’s normal and the `up` vector that the\n     * character is able to climb.\n     */\n    setMaxSlopeClimbAngle(angle) {\n        this.raw.setMaxSlopeClimbAngle(angle);\n    }\n    /**\n     * The minimum angle (radians) between the floor’s normal and the `up` vector before the\n     * character starts to slide down automatically.\n     */\n    minSlopeSlideAngle() {\n        return this.raw.minSlopeSlideAngle();\n    }\n    /**\n     * Sets the minimum angle (radians) between the floor’s normal and the `up` vector before the\n     * character starts to slide down automatically.\n     */\n    setMinSlopeSlideAngle(angle) {\n        this.raw.setMinSlopeSlideAngle(angle);\n    }\n    /**\n     * If snap-to-ground is enabled, should the character be automatically snapped to the ground if\n     * the distance between the ground and its feet are smaller than the specified threshold?\n     */\n    snapToGroundDistance() {\n        return this.raw.snapToGroundDistance();\n    }\n    /**\n     * Enables automatically snapping the character to the ground if the distance between\n     * the ground and its feet are smaller than the specified threshold.\n     */\n    enableSnapToGround(distance) {\n        this.raw.enableSnapToGround(distance);\n    }\n    /**\n     * Disables automatically snapping the character to the ground.\n     */\n    disableSnapToGround() {\n        this.raw.disableSnapToGround();\n    }\n    /**\n     * Is automatically snapping the character to the ground enabled?\n     */\n    snapToGroundEnabled() {\n        return this.raw.snapToGroundEnabled();\n    }\n    /**\n     * Computes the movement the given collider is able to execute after hitting and sliding on obstacles.\n     *\n     * @param collider - The collider to move.\n     * @param desiredTranslationDelta - The desired collider movement.\n     * @param filterFlags - Flags for excluding whole subsets of colliders from the obstacles taken into account.\n     * @param filterGroups - Groups for excluding colliders with incompatible collision groups from the obstacles\n     *                       taken into account.\n     * @param filterPredicate - Any collider for which this closure returns `false` will be excluded from the\n     *                          obstacles taken into account.\n     */\n    computeColliderMovement(collider, desiredTranslationDelta, filterFlags, filterGroups, filterPredicate) {\n        let rawTranslationDelta = VectorOps.intoRaw(desiredTranslationDelta);\n        this.raw.computeColliderMovement(this.params.dt, this.bodies.raw, this.colliders.raw, this.queries.raw, collider.handle, rawTranslationDelta, this._applyImpulsesToDynamicBodies, this._characterMass, filterFlags, filterGroups, this.colliders.castClosure(filterPredicate));\n        rawTranslationDelta.free();\n    }\n    /**\n     * The movement computed by the last call to `this.computeColliderMovement`.\n     */\n    computedMovement() {\n        return VectorOps.fromRaw(this.raw.computedMovement());\n    }\n    /**\n     * The result of ground detection computed by the last call to `this.computeColliderMovement`.\n     */\n    computedGrounded() {\n        return this.raw.computedGrounded();\n    }\n    /**\n     * The number of collisions against obstacles detected along the path of the last call\n     * to `this.computeColliderMovement`.\n     */\n    numComputedCollisions() {\n        return this.raw.numComputedCollisions();\n    }\n    /**\n     * Returns the collision against one of the obstacles detected along the path of the last\n     * call to `this.computeColliderMovement`.\n     *\n     * @param i - The i-th collision will be returned.\n     * @param out - If this argument is set, it will be filled with the collision information.\n     */\n    computedCollision(i, out) {\n        if (!this.raw.computedCollision(i, this.rawCharacterCollision)) {\n            return null;\n        }\n        else {\n            let c = this.rawCharacterCollision;\n            out = out !== null && out !== void 0 ? out : new CharacterCollision();\n            out.translationDeltaApplied = VectorOps.fromRaw(c.translationDeltaApplied());\n            out.translationDeltaRemaining = VectorOps.fromRaw(c.translationDeltaRemaining());\n            out.toi = c.toi();\n            out.witness1 = VectorOps.fromRaw(c.worldWitness1());\n            out.witness2 = VectorOps.fromRaw(c.worldWitness2());\n            out.normal1 = VectorOps.fromRaw(c.worldNormal1());\n            out.normal2 = VectorOps.fromRaw(c.worldNormal2());\n            out.collider = this.colliders.get(c.handle());\n            return out;\n        }\n    }\n}\n//# sourceMappingURL=character_controller.js.map","import { VectorOps, RotationOps } from \"../math\";\nimport { RawShape, RawShapeType } from \"../raw\";\nimport { ShapeContact } from \"./contact\";\nimport { PointProjection } from \"./point\";\nimport { RayIntersection } from \"./ray\";\nimport { ShapeCastHit } from \"./toi\";\nexport class Shape {\n    /**\n     * instant mode without cache\n     */\n    static fromRaw(rawSet, handle) {\n        const rawType = rawSet.coShapeType(handle);\n        let extents;\n        let borderRadius;\n        let vs;\n        let indices;\n        let halfHeight;\n        let radius;\n        let normal;\n        switch (rawType) {\n            case RawShapeType.Ball:\n                return new Ball(rawSet.coRadius(handle));\n            case RawShapeType.Cuboid:\n                extents = rawSet.coHalfExtents(handle);\n                // #if DIM3\n                return new Cuboid(extents.x, extents.y, extents.z);\n            // #endif\n            case RawShapeType.RoundCuboid:\n                extents = rawSet.coHalfExtents(handle);\n                borderRadius = rawSet.coRoundRadius(handle);\n                // #if DIM3\n                return new RoundCuboid(extents.x, extents.y, extents.z, borderRadius);\n            // #endif\n            case RawShapeType.Capsule:\n                halfHeight = rawSet.coHalfHeight(handle);\n                radius = rawSet.coRadius(handle);\n                return new Capsule(halfHeight, radius);\n            case RawShapeType.Segment:\n                vs = rawSet.coVertices(handle);\n                // #if DIM3\n                return new Segment(VectorOps.new(vs[0], vs[1], vs[2]), VectorOps.new(vs[3], vs[4], vs[5]));\n            // #endif\n            case RawShapeType.Polyline:\n                vs = rawSet.coVertices(handle);\n                indices = rawSet.coIndices(handle);\n                return new Polyline(vs, indices);\n            case RawShapeType.Triangle:\n                vs = rawSet.coVertices(handle);\n                // #if DIM3\n                return new Triangle(VectorOps.new(vs[0], vs[1], vs[2]), VectorOps.new(vs[3], vs[4], vs[5]), VectorOps.new(vs[6], vs[7], vs[8]));\n            // #endif\n            case RawShapeType.RoundTriangle:\n                vs = rawSet.coVertices(handle);\n                borderRadius = rawSet.coRoundRadius(handle);\n                // #if DIM3\n                return new RoundTriangle(VectorOps.new(vs[0], vs[1], vs[2]), VectorOps.new(vs[3], vs[4], vs[5]), VectorOps.new(vs[6], vs[7], vs[8]), borderRadius);\n            // #endif\n            case RawShapeType.HalfSpace:\n                normal = VectorOps.fromRaw(rawSet.coHalfspaceNormal(handle));\n                return new HalfSpace(normal);\n            case RawShapeType.TriMesh:\n                vs = rawSet.coVertices(handle);\n                indices = rawSet.coIndices(handle);\n                const tri_flags = rawSet.coTriMeshFlags(handle);\n                return new TriMesh(vs, indices, tri_flags);\n            case RawShapeType.HeightField:\n                const scale = rawSet.coHeightfieldScale(handle);\n                const heights = rawSet.coHeightfieldHeights(handle);\n                // #if DIM3\n                const nrows = rawSet.coHeightfieldNRows(handle);\n                const ncols = rawSet.coHeightfieldNCols(handle);\n                const hf_flags = rawSet.coHeightFieldFlags(handle);\n                return new Heightfield(nrows, ncols, heights, scale, hf_flags);\n            // #endif\n            // #if DIM3\n            case RawShapeType.ConvexPolyhedron:\n                vs = rawSet.coVertices(handle);\n                indices = rawSet.coIndices(handle);\n                return new ConvexPolyhedron(vs, indices);\n            case RawShapeType.RoundConvexPolyhedron:\n                vs = rawSet.coVertices(handle);\n                indices = rawSet.coIndices(handle);\n                borderRadius = rawSet.coRoundRadius(handle);\n                return new RoundConvexPolyhedron(vs, indices, borderRadius);\n            case RawShapeType.Cylinder:\n                halfHeight = rawSet.coHalfHeight(handle);\n                radius = rawSet.coRadius(handle);\n                return new Cylinder(halfHeight, radius);\n            case RawShapeType.RoundCylinder:\n                halfHeight = rawSet.coHalfHeight(handle);\n                radius = rawSet.coRadius(handle);\n                borderRadius = rawSet.coRoundRadius(handle);\n                return new RoundCylinder(halfHeight, radius, borderRadius);\n            case RawShapeType.Cone:\n                halfHeight = rawSet.coHalfHeight(handle);\n                radius = rawSet.coRadius(handle);\n                return new Cone(halfHeight, radius);\n            case RawShapeType.RoundCone:\n                halfHeight = rawSet.coHalfHeight(handle);\n                radius = rawSet.coRadius(handle);\n                borderRadius = rawSet.coRoundRadius(handle);\n                return new RoundCone(halfHeight, radius, borderRadius);\n            // #endif\n            default:\n                throw new Error(\"unknown shape type: \" + rawType);\n        }\n    }\n    /**\n     * Computes the time of impact between two moving shapes.\n     * @param shapePos1 - The initial position of this sahpe.\n     * @param shapeRot1 - The rotation of this shape.\n     * @param shapeVel1 - The velocity of this shape.\n     * @param shape2 - The second moving shape.\n     * @param shapePos2 - The initial position of the second shape.\n     * @param shapeRot2 - The rotation of the second shape.\n     * @param shapeVel2 - The velocity of the second shape.\n     * @param targetDistance − If the shape moves closer to this distance from a collider, a hit\n     *                         will be returned.\n     * @param maxToi - The maximum time when the impact can happen.\n     * @param stopAtPenetration - If set to `false`, the linear shape-cast won’t immediately stop if\n     *   the shape is penetrating another shape at its starting point **and** its trajectory is such\n     *   that it’s on a path to exit that penetration state.\n     * @returns If the two moving shapes collider at some point along their trajectories, this returns the\n     *  time at which the two shape collider as well as the contact information during the impact. Returns\n     *  `null`if the two shapes never collide along their paths.\n     */\n    castShape(shapePos1, shapeRot1, shapeVel1, shape2, shapePos2, shapeRot2, shapeVel2, targetDistance, maxToi, stopAtPenetration) {\n        let rawPos1 = VectorOps.intoRaw(shapePos1);\n        let rawRot1 = RotationOps.intoRaw(shapeRot1);\n        let rawVel1 = VectorOps.intoRaw(shapeVel1);\n        let rawPos2 = VectorOps.intoRaw(shapePos2);\n        let rawRot2 = RotationOps.intoRaw(shapeRot2);\n        let rawVel2 = VectorOps.intoRaw(shapeVel2);\n        let rawShape1 = this.intoRaw();\n        let rawShape2 = shape2.intoRaw();\n        let result = ShapeCastHit.fromRaw(null, rawShape1.castShape(rawPos1, rawRot1, rawVel1, rawShape2, rawPos2, rawRot2, rawVel2, targetDistance, maxToi, stopAtPenetration));\n        rawPos1.free();\n        rawRot1.free();\n        rawVel1.free();\n        rawPos2.free();\n        rawRot2.free();\n        rawVel2.free();\n        rawShape1.free();\n        rawShape2.free();\n        return result;\n    }\n    /**\n     * Tests if this shape intersects another shape.\n     *\n     * @param shapePos1 - The position of this shape.\n     * @param shapeRot1 - The rotation of this shape.\n     * @param shape2  - The second shape to test.\n     * @param shapePos2 - The position of the second shape.\n     * @param shapeRot2 - The rotation of the second shape.\n     * @returns `true` if the two shapes intersect, `false` if they don’t.\n     */\n    intersectsShape(shapePos1, shapeRot1, shape2, shapePos2, shapeRot2) {\n        let rawPos1 = VectorOps.intoRaw(shapePos1);\n        let rawRot1 = RotationOps.intoRaw(shapeRot1);\n        let rawPos2 = VectorOps.intoRaw(shapePos2);\n        let rawRot2 = RotationOps.intoRaw(shapeRot2);\n        let rawShape1 = this.intoRaw();\n        let rawShape2 = shape2.intoRaw();\n        let result = rawShape1.intersectsShape(rawPos1, rawRot1, rawShape2, rawPos2, rawRot2);\n        rawPos1.free();\n        rawRot1.free();\n        rawPos2.free();\n        rawRot2.free();\n        rawShape1.free();\n        rawShape2.free();\n        return result;\n    }\n    /**\n     * Computes one pair of contact points between two shapes.\n     *\n     * @param shapePos1 - The initial position of this sahpe.\n     * @param shapeRot1 - The rotation of this shape.\n     * @param shape2 - The second shape.\n     * @param shapePos2 - The initial position of the second shape.\n     * @param shapeRot2 - The rotation of the second shape.\n     * @param prediction - The prediction value, if the shapes are separated by a distance greater than this value, test will fail.\n     * @returns `null` if the shapes are separated by a distance greater than prediction, otherwise contact details. The result is given in world-space.\n     */\n    contactShape(shapePos1, shapeRot1, shape2, shapePos2, shapeRot2, prediction) {\n        let rawPos1 = VectorOps.intoRaw(shapePos1);\n        let rawRot1 = RotationOps.intoRaw(shapeRot1);\n        let rawPos2 = VectorOps.intoRaw(shapePos2);\n        let rawRot2 = RotationOps.intoRaw(shapeRot2);\n        let rawShape1 = this.intoRaw();\n        let rawShape2 = shape2.intoRaw();\n        let result = ShapeContact.fromRaw(rawShape1.contactShape(rawPos1, rawRot1, rawShape2, rawPos2, rawRot2, prediction));\n        rawPos1.free();\n        rawRot1.free();\n        rawPos2.free();\n        rawRot2.free();\n        rawShape1.free();\n        rawShape2.free();\n        return result;\n    }\n    containsPoint(shapePos, shapeRot, point) {\n        let rawPos = VectorOps.intoRaw(shapePos);\n        let rawRot = RotationOps.intoRaw(shapeRot);\n        let rawPoint = VectorOps.intoRaw(point);\n        let rawShape = this.intoRaw();\n        let result = rawShape.containsPoint(rawPos, rawRot, rawPoint);\n        rawPos.free();\n        rawRot.free();\n        rawPoint.free();\n        rawShape.free();\n        return result;\n    }\n    projectPoint(shapePos, shapeRot, point, solid) {\n        let rawPos = VectorOps.intoRaw(shapePos);\n        let rawRot = RotationOps.intoRaw(shapeRot);\n        let rawPoint = VectorOps.intoRaw(point);\n        let rawShape = this.intoRaw();\n        let result = PointProjection.fromRaw(rawShape.projectPoint(rawPos, rawRot, rawPoint, solid));\n        rawPos.free();\n        rawRot.free();\n        rawPoint.free();\n        rawShape.free();\n        return result;\n    }\n    intersectsRay(ray, shapePos, shapeRot, maxToi) {\n        let rawPos = VectorOps.intoRaw(shapePos);\n        let rawRot = RotationOps.intoRaw(shapeRot);\n        let rawRayOrig = VectorOps.intoRaw(ray.origin);\n        let rawRayDir = VectorOps.intoRaw(ray.dir);\n        let rawShape = this.intoRaw();\n        let result = rawShape.intersectsRay(rawPos, rawRot, rawRayOrig, rawRayDir, maxToi);\n        rawPos.free();\n        rawRot.free();\n        rawRayOrig.free();\n        rawRayDir.free();\n        rawShape.free();\n        return result;\n    }\n    castRay(ray, shapePos, shapeRot, maxToi, solid) {\n        let rawPos = VectorOps.intoRaw(shapePos);\n        let rawRot = RotationOps.intoRaw(shapeRot);\n        let rawRayOrig = VectorOps.intoRaw(ray.origin);\n        let rawRayDir = VectorOps.intoRaw(ray.dir);\n        let rawShape = this.intoRaw();\n        let result = rawShape.castRay(rawPos, rawRot, rawRayOrig, rawRayDir, maxToi, solid);\n        rawPos.free();\n        rawRot.free();\n        rawRayOrig.free();\n        rawRayDir.free();\n        rawShape.free();\n        return result;\n    }\n    castRayAndGetNormal(ray, shapePos, shapeRot, maxToi, solid) {\n        let rawPos = VectorOps.intoRaw(shapePos);\n        let rawRot = RotationOps.intoRaw(shapeRot);\n        let rawRayOrig = VectorOps.intoRaw(ray.origin);\n        let rawRayDir = VectorOps.intoRaw(ray.dir);\n        let rawShape = this.intoRaw();\n        let result = RayIntersection.fromRaw(rawShape.castRayAndGetNormal(rawPos, rawRot, rawRayOrig, rawRayDir, maxToi, solid));\n        rawPos.free();\n        rawRot.free();\n        rawRayOrig.free();\n        rawRayDir.free();\n        rawShape.free();\n        return result;\n    }\n}\n// #if DIM3\n/**\n * An enumeration representing the type of a shape.\n */\nexport var ShapeType;\n(function (ShapeType) {\n    ShapeType[ShapeType[\"Ball\"] = 0] = \"Ball\";\n    ShapeType[ShapeType[\"Cuboid\"] = 1] = \"Cuboid\";\n    ShapeType[ShapeType[\"Capsule\"] = 2] = \"Capsule\";\n    ShapeType[ShapeType[\"Segment\"] = 3] = \"Segment\";\n    ShapeType[ShapeType[\"Polyline\"] = 4] = \"Polyline\";\n    ShapeType[ShapeType[\"Triangle\"] = 5] = \"Triangle\";\n    ShapeType[ShapeType[\"TriMesh\"] = 6] = \"TriMesh\";\n    ShapeType[ShapeType[\"HeightField\"] = 7] = \"HeightField\";\n    // Compound = 8,\n    ShapeType[ShapeType[\"ConvexPolyhedron\"] = 9] = \"ConvexPolyhedron\";\n    ShapeType[ShapeType[\"Cylinder\"] = 10] = \"Cylinder\";\n    ShapeType[ShapeType[\"Cone\"] = 11] = \"Cone\";\n    ShapeType[ShapeType[\"RoundCuboid\"] = 12] = \"RoundCuboid\";\n    ShapeType[ShapeType[\"RoundTriangle\"] = 13] = \"RoundTriangle\";\n    ShapeType[ShapeType[\"RoundCylinder\"] = 14] = \"RoundCylinder\";\n    ShapeType[ShapeType[\"RoundCone\"] = 15] = \"RoundCone\";\n    ShapeType[ShapeType[\"RoundConvexPolyhedron\"] = 16] = \"RoundConvexPolyhedron\";\n    ShapeType[ShapeType[\"HalfSpace\"] = 17] = \"HalfSpace\";\n})(ShapeType || (ShapeType = {}));\n// NOTE: this **must** match the bits in the HeightFieldFlags on the rust side.\n/**\n * Flags controlling the behavior of some operations involving heightfields.\n */\nexport var HeightFieldFlags;\n(function (HeightFieldFlags) {\n    /**\n     * If set, a special treatment will be applied to contact manifold calculation to eliminate\n     * or fix contacts normals that could lead to incorrect bumps in physics simulation (especially\n     * on flat surfaces).\n     *\n     * This is achieved by taking into account adjacent triangle normals when computing contact\n     * points for a given triangle.\n     */\n    HeightFieldFlags[HeightFieldFlags[\"FIX_INTERNAL_EDGES\"] = 1] = \"FIX_INTERNAL_EDGES\";\n})(HeightFieldFlags || (HeightFieldFlags = {}));\n// #endif\n// NOTE: this **must** match the TriMeshFlags on the rust side.\n/**\n * Flags controlling the behavior of the triangle mesh creation and of some\n * operations involving triangle meshes.\n */\nexport var TriMeshFlags;\n(function (TriMeshFlags) {\n    // NOTE: these two flags are not really useful in JS.\n    //\n    // /**\n    //  * If set, the half-edge topology of the trimesh will be computed if possible.\n    //  */\n    // HALF_EDGE_TOPOLOGY = 0b0000_0001,\n    // /** If set, the half-edge topology and connected components of the trimesh will be computed if possible.\n    //  *\n    //  * Because of the way it is currently implemented, connected components can only be computed on\n    //  * a mesh where the half-edge topology computation succeeds. It will no longer be the case in the\n    //  * future once we decouple the computations.\n    //  */\n    // CONNECTED_COMPONENTS = 0b0000_0010,\n    /**\n     * If set, any triangle that results in a failing half-hedge topology computation will be deleted.\n     */\n    TriMeshFlags[TriMeshFlags[\"DELETE_BAD_TOPOLOGY_TRIANGLES\"] = 4] = \"DELETE_BAD_TOPOLOGY_TRIANGLES\";\n    /**\n     * If set, the trimesh will be assumed to be oriented (with outward normals).\n     *\n     * The pseudo-normals of its vertices and edges will be computed.\n     */\n    TriMeshFlags[TriMeshFlags[\"ORIENTED\"] = 8] = \"ORIENTED\";\n    /**\n     * If set, the duplicate vertices of the trimesh will be merged.\n     *\n     * Two vertices with the exact same coordinates will share the same entry on the\n     * vertex buffer and the index buffer is adjusted accordingly.\n     */\n    TriMeshFlags[TriMeshFlags[\"MERGE_DUPLICATE_VERTICES\"] = 16] = \"MERGE_DUPLICATE_VERTICES\";\n    /**\n     * If set, the triangles sharing two vertices with identical index values will be removed.\n     *\n     * Because of the way it is currently implemented, this methods implies that duplicate\n     * vertices will be merged. It will no longer be the case in the future once we decouple\n     * the computations.\n     */\n    TriMeshFlags[TriMeshFlags[\"DELETE_DEGENERATE_TRIANGLES\"] = 32] = \"DELETE_DEGENERATE_TRIANGLES\";\n    /**\n     * If set, two triangles sharing three vertices with identical index values (in any order)\n     * will be removed.\n     *\n     * Because of the way it is currently implemented, this methods implies that duplicate\n     * vertices will be merged. It will no longer be the case in the future once we decouple\n     * the computations.\n     */\n    TriMeshFlags[TriMeshFlags[\"DELETE_DUPLICATE_TRIANGLES\"] = 64] = \"DELETE_DUPLICATE_TRIANGLES\";\n    /**\n     * If set, a special treatment will be applied to contact manifold calculation to eliminate\n     * or fix contacts normals that could lead to incorrect bumps in physics simulation\n     * (especially on flat surfaces).\n     *\n     * This is achieved by taking into account adjacent triangle normals when computing contact\n     * points for a given triangle.\n     *\n     * /!\\ NOT SUPPORTED IN THE 2D VERSION OF RAPIER.\n     */\n    TriMeshFlags[TriMeshFlags[\"FIX_INTERNAL_EDGES\"] = 152] = \"FIX_INTERNAL_EDGES\";\n})(TriMeshFlags || (TriMeshFlags = {}));\n/**\n * A shape that is a sphere in 3D and a circle in 2D.\n */\nexport class Ball extends Shape {\n    /**\n     * Creates a new ball with the given radius.\n     * @param radius - The balls radius.\n     */\n    constructor(radius) {\n        super();\n        this.type = ShapeType.Ball;\n        this.radius = radius;\n    }\n    intoRaw() {\n        return RawShape.ball(this.radius);\n    }\n}\nexport class HalfSpace extends Shape {\n    /**\n     * Creates a new halfspace delimited by an infinite plane.\n     *\n     * @param normal - The outward normal of the plane.\n     */\n    constructor(normal) {\n        super();\n        this.type = ShapeType.HalfSpace;\n        this.normal = normal;\n    }\n    intoRaw() {\n        let n = VectorOps.intoRaw(this.normal);\n        let result = RawShape.halfspace(n);\n        n.free();\n        return result;\n    }\n}\n/**\n * A shape that is a box in 3D and a rectangle in 2D.\n */\nexport class Cuboid extends Shape {\n    // #if DIM3\n    /**\n     * Creates a new 3D cuboid.\n     * @param hx - The half width of the cuboid.\n     * @param hy - The half height of the cuboid.\n     * @param hz - The half depth of the cuboid.\n     */\n    constructor(hx, hy, hz) {\n        super();\n        this.type = ShapeType.Cuboid;\n        this.halfExtents = VectorOps.new(hx, hy, hz);\n    }\n    // #endif\n    intoRaw() {\n        // #if DIM3\n        return RawShape.cuboid(this.halfExtents.x, this.halfExtents.y, this.halfExtents.z);\n        // #endif\n    }\n}\n/**\n * A shape that is a box in 3D and a rectangle in 2D, with round corners.\n */\nexport class RoundCuboid extends Shape {\n    // #if DIM3\n    /**\n     * Creates a new 3D cuboid.\n     * @param hx - The half width of the cuboid.\n     * @param hy - The half height of the cuboid.\n     * @param hz - The half depth of the cuboid.\n     * @param borderRadius - The radius of the borders of this cuboid. This will\n     *   effectively increase the half-extents of the cuboid by this radius.\n     */\n    constructor(hx, hy, hz, borderRadius) {\n        super();\n        this.type = ShapeType.RoundCuboid;\n        this.halfExtents = VectorOps.new(hx, hy, hz);\n        this.borderRadius = borderRadius;\n    }\n    // #endif\n    intoRaw() {\n        // #if DIM3\n        return RawShape.roundCuboid(this.halfExtents.x, this.halfExtents.y, this.halfExtents.z, this.borderRadius);\n        // #endif\n    }\n}\n/**\n * A shape that is a capsule.\n */\nexport class Capsule extends Shape {\n    /**\n     * Creates a new capsule with the given radius and half-height.\n     * @param halfHeight - The balls half-height along the `y` axis.\n     * @param radius - The balls radius.\n     */\n    constructor(halfHeight, radius) {\n        super();\n        this.type = ShapeType.Capsule;\n        this.halfHeight = halfHeight;\n        this.radius = radius;\n    }\n    intoRaw() {\n        return RawShape.capsule(this.halfHeight, this.radius);\n    }\n}\n/**\n * A shape that is a segment.\n */\nexport class Segment extends Shape {\n    /**\n     * Creates a new segment shape.\n     * @param a - The first point of the segment.\n     * @param b - The second point of the segment.\n     */\n    constructor(a, b) {\n        super();\n        this.type = ShapeType.Segment;\n        this.a = a;\n        this.b = b;\n    }\n    intoRaw() {\n        let ra = VectorOps.intoRaw(this.a);\n        let rb = VectorOps.intoRaw(this.b);\n        let result = RawShape.segment(ra, rb);\n        ra.free();\n        rb.free();\n        return result;\n    }\n}\n/**\n * A shape that is a segment.\n */\nexport class Triangle extends Shape {\n    /**\n     * Creates a new triangle shape.\n     *\n     * @param a - The first point of the triangle.\n     * @param b - The second point of the triangle.\n     * @param c - The third point of the triangle.\n     */\n    constructor(a, b, c) {\n        super();\n        this.type = ShapeType.Triangle;\n        this.a = a;\n        this.b = b;\n        this.c = c;\n    }\n    intoRaw() {\n        let ra = VectorOps.intoRaw(this.a);\n        let rb = VectorOps.intoRaw(this.b);\n        let rc = VectorOps.intoRaw(this.c);\n        let result = RawShape.triangle(ra, rb, rc);\n        ra.free();\n        rb.free();\n        rc.free();\n        return result;\n    }\n}\n/**\n * A shape that is a triangle with round borders and a non-zero thickness.\n */\nexport class RoundTriangle extends Shape {\n    /**\n     * Creates a new triangle shape with round corners.\n     *\n     * @param a - The first point of the triangle.\n     * @param b - The second point of the triangle.\n     * @param c - The third point of the triangle.\n     * @param borderRadius - The radius of the borders of this triangle. In 3D,\n     *   this is also equal to half the thickness of the triangle.\n     */\n    constructor(a, b, c, borderRadius) {\n        super();\n        this.type = ShapeType.RoundTriangle;\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.borderRadius = borderRadius;\n    }\n    intoRaw() {\n        let ra = VectorOps.intoRaw(this.a);\n        let rb = VectorOps.intoRaw(this.b);\n        let rc = VectorOps.intoRaw(this.c);\n        let result = RawShape.roundTriangle(ra, rb, rc, this.borderRadius);\n        ra.free();\n        rb.free();\n        rc.free();\n        return result;\n    }\n}\n/**\n * A shape that is a triangle mesh.\n */\nexport class Polyline extends Shape {\n    /**\n     * Creates a new polyline shape.\n     *\n     * @param vertices - The coordinates of the polyline's vertices.\n     * @param indices - The indices of the polyline's segments. If this is `null` or not provided, then\n     *    the vertices are assumed to form a line strip.\n     */\n    constructor(vertices, indices) {\n        super();\n        this.type = ShapeType.Polyline;\n        this.vertices = vertices;\n        this.indices = indices !== null && indices !== void 0 ? indices : new Uint32Array(0);\n    }\n    intoRaw() {\n        return RawShape.polyline(this.vertices, this.indices);\n    }\n}\n/**\n * A shape that is a triangle mesh.\n */\nexport class TriMesh extends Shape {\n    /**\n     * Creates a new triangle mesh shape.\n     *\n     * @param vertices - The coordinates of the triangle mesh's vertices.\n     * @param indices - The indices of the triangle mesh's triangles.\n     */\n    constructor(vertices, indices, flags) {\n        super();\n        this.type = ShapeType.TriMesh;\n        this.vertices = vertices;\n        this.indices = indices;\n        this.flags = flags;\n    }\n    intoRaw() {\n        return RawShape.trimesh(this.vertices, this.indices, this.flags);\n    }\n}\n// #if DIM3\n/**\n * A shape that is a convex polygon.\n */\nexport class ConvexPolyhedron extends Shape {\n    /**\n     * Creates a new convex polygon shape.\n     *\n     * @param vertices - The coordinates of the convex polygon's vertices.\n     * @param indices - The index buffer of this convex mesh. If this is `null`\n     *   or `undefined`, the convex-hull of the input vertices will be computed\n     *   automatically. Otherwise, it will be assumed that the mesh you provide\n     *   is already convex.\n     */\n    constructor(vertices, indices) {\n        super();\n        this.type = ShapeType.ConvexPolyhedron;\n        this.vertices = vertices;\n        this.indices = indices;\n    }\n    intoRaw() {\n        if (!!this.indices) {\n            return RawShape.convexMesh(this.vertices, this.indices);\n        }\n        else {\n            return RawShape.convexHull(this.vertices);\n        }\n    }\n}\n/**\n * A shape that is a convex polygon.\n */\nexport class RoundConvexPolyhedron extends Shape {\n    /**\n     * Creates a new convex polygon shape.\n     *\n     * @param vertices - The coordinates of the convex polygon's vertices.\n     * @param indices - The index buffer of this convex mesh. If this is `null`\n     *   or `undefined`, the convex-hull of the input vertices will be computed\n     *   automatically. Otherwise, it will be assumed that the mesh you provide\n     *   is already convex.\n     * @param borderRadius - The radius of the borders of this convex polyhedron.\n     */\n    constructor(vertices, indices, borderRadius) {\n        super();\n        this.type = ShapeType.RoundConvexPolyhedron;\n        this.vertices = vertices;\n        this.indices = indices;\n        this.borderRadius = borderRadius;\n    }\n    intoRaw() {\n        if (!!this.indices) {\n            return RawShape.roundConvexMesh(this.vertices, this.indices, this.borderRadius);\n        }\n        else {\n            return RawShape.roundConvexHull(this.vertices, this.borderRadius);\n        }\n    }\n}\n/**\n * A shape that is a heightfield.\n */\nexport class Heightfield extends Shape {\n    /**\n     * Creates a new heightfield shape.\n     *\n     * @param nrows − The number of rows in the heights matrix.\n     * @param ncols - The number of columns in the heights matrix.\n     * @param heights - The heights of the heightfield along its local `y` axis,\n     *                  provided as a matrix stored in column-major order.\n     * @param scale - The dimensions of the heightfield's local `x,z` plane.\n     */\n    constructor(nrows, ncols, heights, scale, flags) {\n        super();\n        this.type = ShapeType.HeightField;\n        this.nrows = nrows;\n        this.ncols = ncols;\n        this.heights = heights;\n        this.scale = scale;\n        this.flags = flags;\n    }\n    intoRaw() {\n        let rawScale = VectorOps.intoRaw(this.scale);\n        let rawShape = RawShape.heightfield(this.nrows, this.ncols, this.heights, rawScale, this.flags);\n        rawScale.free();\n        return rawShape;\n    }\n}\n/**\n * A shape that is a 3D cylinder.\n */\nexport class Cylinder extends Shape {\n    /**\n     * Creates a new cylinder with the given radius and half-height.\n     * @param halfHeight - The balls half-height along the `y` axis.\n     * @param radius - The balls radius.\n     */\n    constructor(halfHeight, radius) {\n        super();\n        this.type = ShapeType.Cylinder;\n        this.halfHeight = halfHeight;\n        this.radius = radius;\n    }\n    intoRaw() {\n        return RawShape.cylinder(this.halfHeight, this.radius);\n    }\n}\n/**\n * A shape that is a 3D cylinder with round corners.\n */\nexport class RoundCylinder extends Shape {\n    /**\n     * Creates a new cylinder with the given radius and half-height.\n     * @param halfHeight - The balls half-height along the `y` axis.\n     * @param radius - The balls radius.\n     * @param borderRadius - The radius of the borders of this cylinder.\n     */\n    constructor(halfHeight, radius, borderRadius) {\n        super();\n        this.type = ShapeType.RoundCylinder;\n        this.borderRadius = borderRadius;\n        this.halfHeight = halfHeight;\n        this.radius = radius;\n    }\n    intoRaw() {\n        return RawShape.roundCylinder(this.halfHeight, this.radius, this.borderRadius);\n    }\n}\n/**\n * A shape that is a 3D cone.\n */\nexport class Cone extends Shape {\n    /**\n     * Creates a new cone with the given radius and half-height.\n     * @param halfHeight - The balls half-height along the `y` axis.\n     * @param radius - The balls radius.\n     */\n    constructor(halfHeight, radius) {\n        super();\n        this.type = ShapeType.Cone;\n        this.halfHeight = halfHeight;\n        this.radius = radius;\n    }\n    intoRaw() {\n        return RawShape.cone(this.halfHeight, this.radius);\n    }\n}\n/**\n * A shape that is a 3D cone with round corners.\n */\nexport class RoundCone extends Shape {\n    /**\n     * Creates a new cone with the given radius and half-height.\n     * @param halfHeight - The balls half-height along the `y` axis.\n     * @param radius - The balls radius.\n     * @param borderRadius - The radius of the borders of this cone.\n     */\n    constructor(halfHeight, radius, borderRadius) {\n        super();\n        this.type = ShapeType.RoundCone;\n        this.halfHeight = halfHeight;\n        this.radius = radius;\n        this.borderRadius = borderRadius;\n    }\n    intoRaw() {\n        return RawShape.roundCone(this.halfHeight, this.radius, this.borderRadius);\n    }\n}\n// #endif\n//# sourceMappingURL=shape.js.map","import { RotationOps, VectorOps } from \"../math\";\nimport { CoefficientCombineRule, } from \"../dynamics\";\nimport { ActiveHooks, ActiveEvents } from \"../pipeline\";\nimport { Shape, Cuboid, Ball, Capsule, TriMesh, Polyline, Heightfield, Segment, Triangle, RoundTriangle, RoundCuboid, \n// #if DIM3\nCylinder, RoundCylinder, Cone, RoundCone, ConvexPolyhedron, RoundConvexPolyhedron,\n// #endif\n } from \"./shape\";\nimport { RayIntersection } from \"./ray\";\nimport { PointProjection } from \"./point\";\nimport { ColliderShapeCastHit, ShapeCastHit } from \"./toi\";\nimport { ShapeContact } from \"./contact\";\n/**\n * Flags affecting whether collision-detection happens between two colliders\n * depending on the type of rigid-bodies they are attached to.\n */\nexport var ActiveCollisionTypes;\n(function (ActiveCollisionTypes) {\n    /**\n     * Enable collision-detection between a collider attached to a dynamic body\n     * and another collider attached to a dynamic body.\n     */\n    ActiveCollisionTypes[ActiveCollisionTypes[\"DYNAMIC_DYNAMIC\"] = 1] = \"DYNAMIC_DYNAMIC\";\n    /**\n     * Enable collision-detection between a collider attached to a dynamic body\n     * and another collider attached to a kinematic body.\n     */\n    ActiveCollisionTypes[ActiveCollisionTypes[\"DYNAMIC_KINEMATIC\"] = 12] = \"DYNAMIC_KINEMATIC\";\n    /**\n     * Enable collision-detection between a collider attached to a dynamic body\n     * and another collider attached to a fixed body (or not attached to any body).\n     */\n    ActiveCollisionTypes[ActiveCollisionTypes[\"DYNAMIC_FIXED\"] = 2] = \"DYNAMIC_FIXED\";\n    /**\n     * Enable collision-detection between a collider attached to a kinematic body\n     * and another collider attached to a kinematic body.\n     */\n    ActiveCollisionTypes[ActiveCollisionTypes[\"KINEMATIC_KINEMATIC\"] = 52224] = \"KINEMATIC_KINEMATIC\";\n    /**\n     * Enable collision-detection between a collider attached to a kinematic body\n     * and another collider attached to a fixed body (or not attached to any body).\n     */\n    ActiveCollisionTypes[ActiveCollisionTypes[\"KINEMATIC_FIXED\"] = 8704] = \"KINEMATIC_FIXED\";\n    /**\n     * Enable collision-detection between a collider attached to a fixed body (or\n     * not attached to any body) and another collider attached to a fixed body (or\n     * not attached to any body).\n     */\n    ActiveCollisionTypes[ActiveCollisionTypes[\"FIXED_FIXED\"] = 32] = \"FIXED_FIXED\";\n    /**\n     * The default active collision types, enabling collisions between a dynamic body\n     * and another body of any type, but not enabling collisions between two non-dynamic bodies.\n     */\n    ActiveCollisionTypes[ActiveCollisionTypes[\"DEFAULT\"] = 15] = \"DEFAULT\";\n    /**\n     * Enable collisions between any kind of rigid-bodies (including between two non-dynamic bodies).\n     */\n    ActiveCollisionTypes[ActiveCollisionTypes[\"ALL\"] = 60943] = \"ALL\";\n})(ActiveCollisionTypes || (ActiveCollisionTypes = {}));\n/**\n * A geometric entity that can be attached to a body so it can be affected\n * by contacts and proximity queries.\n */\nexport class Collider {\n    constructor(colliderSet, handle, parent, shape) {\n        this.colliderSet = colliderSet;\n        this.handle = handle;\n        this._parent = parent;\n        this._shape = shape;\n    }\n    /** @internal */\n    finalizeDeserialization(bodies) {\n        if (this.handle != null) {\n            this._parent = bodies.get(this.colliderSet.raw.coParent(this.handle));\n        }\n    }\n    ensureShapeIsCached() {\n        if (!this._shape)\n            this._shape = Shape.fromRaw(this.colliderSet.raw, this.handle);\n    }\n    /**\n     * The shape of this collider.\n     */\n    get shape() {\n        this.ensureShapeIsCached();\n        return this._shape;\n    }\n    /**\n     * Checks if this collider is still valid (i.e. that it has\n     * not been deleted from the collider set yet).\n     */\n    isValid() {\n        return this.colliderSet.raw.contains(this.handle);\n    }\n    /**\n     * The world-space translation of this rigid-body.\n     */\n    translation() {\n        return VectorOps.fromRaw(this.colliderSet.raw.coTranslation(this.handle));\n    }\n    /**\n     * The world-space orientation of this rigid-body.\n     */\n    rotation() {\n        return RotationOps.fromRaw(this.colliderSet.raw.coRotation(this.handle));\n    }\n    /**\n     * Is this collider a sensor?\n     */\n    isSensor() {\n        return this.colliderSet.raw.coIsSensor(this.handle);\n    }\n    /**\n     * Sets whether or not this collider is a sensor.\n     * @param isSensor - If `true`, the collider will be a sensor.\n     */\n    setSensor(isSensor) {\n        this.colliderSet.raw.coSetSensor(this.handle, isSensor);\n    }\n    /**\n     * Sets the new shape of the collider.\n     * @param shape - The collider’s new shape.\n     */\n    setShape(shape) {\n        let rawShape = shape.intoRaw();\n        this.colliderSet.raw.coSetShape(this.handle, rawShape);\n        rawShape.free();\n        this._shape = shape;\n    }\n    /**\n     * Sets whether this collider is enabled or not.\n     *\n     * @param enabled - Set to `false` to disable this collider (its parent rigid-body won’t be disabled automatically by this).\n     */\n    setEnabled(enabled) {\n        this.colliderSet.raw.coSetEnabled(this.handle, enabled);\n    }\n    /**\n     * Is this collider enabled?\n     */\n    isEnabled() {\n        return this.colliderSet.raw.coIsEnabled(this.handle);\n    }\n    /**\n     * Sets the restitution coefficient of the collider to be created.\n     *\n     * @param restitution - The restitution coefficient in `[0, 1]`. A value of 0 (the default) means no bouncing behavior\n     *                   while 1 means perfect bouncing (though energy may still be lost due to numerical errors of the\n     *                   constraints solver).\n     */\n    setRestitution(restitution) {\n        this.colliderSet.raw.coSetRestitution(this.handle, restitution);\n    }\n    /**\n     * Sets the friction coefficient of the collider to be created.\n     *\n     * @param friction - The friction coefficient. Must be greater or equal to 0. This is generally smaller than 1. The\n     *                   higher the coefficient, the stronger friction forces will be for contacts with the collider\n     *                   being built.\n     */\n    setFriction(friction) {\n        this.colliderSet.raw.coSetFriction(this.handle, friction);\n    }\n    /**\n     * Gets the rule used to combine the friction coefficients of two colliders\n     * colliders involved in a contact.\n     */\n    frictionCombineRule() {\n        return this.colliderSet.raw.coFrictionCombineRule(this.handle);\n    }\n    /**\n     * Sets the rule used to combine the friction coefficients of two colliders\n     * colliders involved in a contact.\n     *\n     * @param rule − The combine rule to apply.\n     */\n    setFrictionCombineRule(rule) {\n        this.colliderSet.raw.coSetFrictionCombineRule(this.handle, rule);\n    }\n    /**\n     * Gets the rule used to combine the restitution coefficients of two colliders\n     * colliders involved in a contact.\n     */\n    restitutionCombineRule() {\n        return this.colliderSet.raw.coRestitutionCombineRule(this.handle);\n    }\n    /**\n     * Sets the rule used to combine the restitution coefficients of two colliders\n     * colliders involved in a contact.\n     *\n     * @param rule − The combine rule to apply.\n     */\n    setRestitutionCombineRule(rule) {\n        this.colliderSet.raw.coSetRestitutionCombineRule(this.handle, rule);\n    }\n    /**\n     * Sets the collision groups used by this collider.\n     *\n     * Two colliders will interact iff. their collision groups are compatible.\n     * See the documentation of `InteractionGroups` for details on teh used bit pattern.\n     *\n     * @param groups - The collision groups used for the collider being built.\n     */\n    setCollisionGroups(groups) {\n        this.colliderSet.raw.coSetCollisionGroups(this.handle, groups);\n    }\n    /**\n     * Sets the solver groups used by this collider.\n     *\n     * Forces between two colliders in contact will be computed iff their solver\n     * groups are compatible.\n     * See the documentation of `InteractionGroups` for details on the used bit pattern.\n     *\n     * @param groups - The solver groups used for the collider being built.\n     */\n    setSolverGroups(groups) {\n        this.colliderSet.raw.coSetSolverGroups(this.handle, groups);\n    }\n    /**\n     * Sets the contact skin for this collider.\n     *\n     * See the documentation of `ColliderDesc.setContactSkin` for additional details.\n     */\n    contactSkin() {\n        return this.colliderSet.raw.coContactSkin(this.handle);\n    }\n    /**\n     * Sets the contact skin for this collider.\n     *\n     * See the documentation of `ColliderDesc.setContactSkin` for additional details.\n     *\n     * @param thickness - The contact skin thickness.\n     */\n    setContactSkin(thickness) {\n        return this.colliderSet.raw.coSetContactSkin(this.handle, thickness);\n    }\n    /**\n     * Get the physics hooks active for this collider.\n     */\n    activeHooks() {\n        return this.colliderSet.raw.coActiveHooks(this.handle);\n    }\n    /**\n     * Set the physics hooks active for this collider.\n     *\n     * Use this to enable custom filtering rules for contact/intersecstion pairs involving this collider.\n     *\n     * @param activeHooks - The hooks active for contact/intersection pairs involving this collider.\n     */\n    setActiveHooks(activeHooks) {\n        this.colliderSet.raw.coSetActiveHooks(this.handle, activeHooks);\n    }\n    /**\n     * The events active for this collider.\n     */\n    activeEvents() {\n        return this.colliderSet.raw.coActiveEvents(this.handle);\n    }\n    /**\n     * Set the events active for this collider.\n     *\n     * Use this to enable contact and/or intersection event reporting for this collider.\n     *\n     * @param activeEvents - The events active for contact/intersection pairs involving this collider.\n     */\n    setActiveEvents(activeEvents) {\n        this.colliderSet.raw.coSetActiveEvents(this.handle, activeEvents);\n    }\n    /**\n     * Gets the collision types active for this collider.\n     */\n    activeCollisionTypes() {\n        return this.colliderSet.raw.coActiveCollisionTypes(this.handle);\n    }\n    /**\n     * Sets the total force magnitude beyond which a contact force event can be emitted.\n     *\n     * @param threshold - The new force threshold.\n     */\n    setContactForceEventThreshold(threshold) {\n        return this.colliderSet.raw.coSetContactForceEventThreshold(this.handle, threshold);\n    }\n    /**\n     * The total force magnitude beyond which a contact force event can be emitted.\n     */\n    contactForceEventThreshold() {\n        return this.colliderSet.raw.coContactForceEventThreshold(this.handle);\n    }\n    /**\n     * Set the collision types active for this collider.\n     *\n     * @param activeCollisionTypes - The hooks active for contact/intersection pairs involving this collider.\n     */\n    setActiveCollisionTypes(activeCollisionTypes) {\n        this.colliderSet.raw.coSetActiveCollisionTypes(this.handle, activeCollisionTypes);\n    }\n    /**\n     * Sets the uniform density of this collider.\n     *\n     * This will override any previous mass-properties set by `this.setDensity`,\n     * `this.setMass`, `this.setMassProperties`, `ColliderDesc.density`,\n     * `ColliderDesc.mass`, or `ColliderDesc.massProperties` for this collider.\n     *\n     * The mass and angular inertia of this collider will be computed automatically based on its\n     * shape.\n     */\n    setDensity(density) {\n        this.colliderSet.raw.coSetDensity(this.handle, density);\n    }\n    /**\n     * Sets the mass of this collider.\n     *\n     * This will override any previous mass-properties set by `this.setDensity`,\n     * `this.setMass`, `this.setMassProperties`, `ColliderDesc.density`,\n     * `ColliderDesc.mass`, or `ColliderDesc.massProperties` for this collider.\n     *\n     * The angular inertia of this collider will be computed automatically based on its shape\n     * and this mass value.\n     */\n    setMass(mass) {\n        this.colliderSet.raw.coSetMass(this.handle, mass);\n    }\n    // #if DIM3\n    /**\n     * Sets the mass of this collider.\n     *\n     * This will override any previous mass-properties set by `this.setDensity`,\n     * `this.setMass`, `this.setMassProperties`, `ColliderDesc.density`,\n     * `ColliderDesc.mass`, or `ColliderDesc.massProperties` for this collider.\n     */\n    setMassProperties(mass, centerOfMass, principalAngularInertia, angularInertiaLocalFrame) {\n        let rawCom = VectorOps.intoRaw(centerOfMass);\n        let rawPrincipalInertia = VectorOps.intoRaw(principalAngularInertia);\n        let rawInertiaFrame = RotationOps.intoRaw(angularInertiaLocalFrame);\n        this.colliderSet.raw.coSetMassProperties(this.handle, mass, rawCom, rawPrincipalInertia, rawInertiaFrame);\n        rawCom.free();\n        rawPrincipalInertia.free();\n        rawInertiaFrame.free();\n    }\n    // #endif\n    /**\n     * Sets the translation of this collider.\n     *\n     * @param tra - The world-space position of the collider.\n     */\n    setTranslation(tra) {\n        // #if DIM3\n        this.colliderSet.raw.coSetTranslation(this.handle, tra.x, tra.y, tra.z);\n        // #endif\n    }\n    /**\n     * Sets the translation of this collider relative to its parent rigid-body.\n     *\n     * Does nothing if this collider isn't attached to a rigid-body.\n     *\n     * @param tra - The new translation of the collider relative to its parent.\n     */\n    setTranslationWrtParent(tra) {\n        // #if DIM3\n        this.colliderSet.raw.coSetTranslationWrtParent(this.handle, tra.x, tra.y, tra.z);\n        // #endif\n    }\n    // #if DIM3\n    /**\n     * Sets the rotation quaternion of this collider.\n     *\n     * This does nothing if a zero quaternion is provided.\n     *\n     * @param rotation - The rotation to set.\n     */\n    setRotation(rot) {\n        this.colliderSet.raw.coSetRotation(this.handle, rot.x, rot.y, rot.z, rot.w);\n    }\n    /**\n     * Sets the rotation quaternion of this collider relative to its parent rigid-body.\n     *\n     * This does nothing if a zero quaternion is provided or if this collider isn't\n     * attached to a rigid-body.\n     *\n     * @param rotation - The rotation to set.\n     */\n    setRotationWrtParent(rot) {\n        this.colliderSet.raw.coSetRotationWrtParent(this.handle, rot.x, rot.y, rot.z, rot.w);\n    }\n    // #endif\n    /**\n     * The type of the shape of this collider.\n     * @deprecated this field will be removed in the future, please access this field on `shape` member instead.\n     */\n    shapeType() {\n        return this.colliderSet.raw.coShapeType(this.handle);\n    }\n    /**\n     * The half-extents of this collider if it is a cuboid shape.\n     * @deprecated this field will be removed in the future, please access this field on `shape` member instead.\n     */\n    halfExtents() {\n        return VectorOps.fromRaw(this.colliderSet.raw.coHalfExtents(this.handle));\n    }\n    /**\n     * Sets the half-extents of this collider if it is a cuboid shape.\n     *\n     * @param newHalfExtents - desired half extents.\n     */\n    setHalfExtents(newHalfExtents) {\n        const rawPoint = VectorOps.intoRaw(newHalfExtents);\n        this.colliderSet.raw.coSetHalfExtents(this.handle, rawPoint);\n    }\n    /**\n     * The radius of this collider if it is a ball, cylinder, capsule, or cone shape.\n     * @deprecated this field will be removed in the future, please access this field on `shape` member instead.\n     */\n    radius() {\n        return this.colliderSet.raw.coRadius(this.handle);\n    }\n    /**\n     * Sets the radius of this collider if it is a ball, cylinder, capsule, or cone shape.\n     *\n     * @param newRadius - desired radius.\n     */\n    setRadius(newRadius) {\n        this.colliderSet.raw.coSetRadius(this.handle, newRadius);\n    }\n    /**\n     * The radius of the round edges of this collider if it is a round cylinder.\n     * @deprecated this field will be removed in the future, please access this field on `shape` member instead.\n     */\n    roundRadius() {\n        return this.colliderSet.raw.coRoundRadius(this.handle);\n    }\n    /**\n     * Sets the radius of the round edges of this collider if it has round edges.\n     *\n     * @param newBorderRadius - desired round edge radius.\n     */\n    setRoundRadius(newBorderRadius) {\n        this.colliderSet.raw.coSetRoundRadius(this.handle, newBorderRadius);\n    }\n    /**\n     * The half height of this collider if it is a cylinder, capsule, or cone shape.\n     * @deprecated this field will be removed in the future, please access this field on `shape` member instead.\n     */\n    halfHeight() {\n        return this.colliderSet.raw.coHalfHeight(this.handle);\n    }\n    /**\n     * Sets the half height of this collider if it is a cylinder, capsule, or cone shape.\n     *\n     * @param newHalfheight - desired half height.\n     */\n    setHalfHeight(newHalfheight) {\n        this.colliderSet.raw.coSetHalfHeight(this.handle, newHalfheight);\n    }\n    /**\n     * If this collider has a triangle mesh, polyline, convex polygon, or convex polyhedron shape,\n     * this returns the vertex buffer of said shape.\n     * @deprecated this field will be removed in the future, please access this field on `shape` member instead.\n     */\n    vertices() {\n        return this.colliderSet.raw.coVertices(this.handle);\n    }\n    /**\n     * If this collider has a triangle mesh, polyline, or convex polyhedron shape,\n     * this returns the index buffer of said shape.\n     * @deprecated this field will be removed in the future, please access this field on `shape` member instead.\n     */\n    indices() {\n        return this.colliderSet.raw.coIndices(this.handle);\n    }\n    /**\n     * If this collider has a heightfield shape, this returns the heights buffer of\n     * the heightfield.\n     * In 3D, the returned height matrix is provided in column-major order.\n     * @deprecated this field will be removed in the future, please access this field on `shape` member instead.\n     */\n    heightfieldHeights() {\n        return this.colliderSet.raw.coHeightfieldHeights(this.handle);\n    }\n    /**\n     * If this collider has a heightfield shape, this returns the scale\n     * applied to it.\n     * @deprecated this field will be removed in the future, please access this field on `shape` member instead.\n     */\n    heightfieldScale() {\n        let scale = this.colliderSet.raw.coHeightfieldScale(this.handle);\n        return VectorOps.fromRaw(scale);\n    }\n    // #if DIM3\n    /**\n     * If this collider has a heightfield shape, this returns the number of\n     * rows of its height matrix.\n     * @deprecated this field will be removed in the future, please access this field on `shape` member instead.\n     */\n    heightfieldNRows() {\n        return this.colliderSet.raw.coHeightfieldNRows(this.handle);\n    }\n    /**\n     * If this collider has a heightfield shape, this returns the number of\n     * columns of its height matrix.\n     * @deprecated this field will be removed in the future, please access this field on `shape` member instead.\n     */\n    heightfieldNCols() {\n        return this.colliderSet.raw.coHeightfieldNCols(this.handle);\n    }\n    // #endif\n    /**\n     * The rigid-body this collider is attached to.\n     */\n    parent() {\n        return this._parent;\n    }\n    /**\n     * The friction coefficient of this collider.\n     */\n    friction() {\n        return this.colliderSet.raw.coFriction(this.handle);\n    }\n    /**\n     * The restitution coefficient of this collider.\n     */\n    restitution() {\n        return this.colliderSet.raw.coRestitution(this.handle);\n    }\n    /**\n     * The density of this collider.\n     */\n    density() {\n        return this.colliderSet.raw.coDensity(this.handle);\n    }\n    /**\n     * The mass of this collider.\n     */\n    mass() {\n        return this.colliderSet.raw.coMass(this.handle);\n    }\n    /**\n     * The volume of this collider.\n     */\n    volume() {\n        return this.colliderSet.raw.coVolume(this.handle);\n    }\n    /**\n     * The collision groups of this collider.\n     */\n    collisionGroups() {\n        return this.colliderSet.raw.coCollisionGroups(this.handle);\n    }\n    /**\n     * The solver groups of this collider.\n     */\n    solverGroups() {\n        return this.colliderSet.raw.coSolverGroups(this.handle);\n    }\n    /**\n     * Tests if this collider contains a point.\n     *\n     * @param point - The point to test.\n     */\n    containsPoint(point) {\n        let rawPoint = VectorOps.intoRaw(point);\n        let result = this.colliderSet.raw.coContainsPoint(this.handle, rawPoint);\n        rawPoint.free();\n        return result;\n    }\n    /**\n     * Find the projection of a point on this collider.\n     *\n     * @param point - The point to project.\n     * @param solid - If this is set to `true` then the collider shapes are considered to\n     *   be plain (if the point is located inside of a plain shape, its projection is the point\n     *   itself). If it is set to `false` the collider shapes are considered to be hollow\n     *   (if the point is located inside of an hollow shape, it is projected on the shape's\n     *   boundary).\n     */\n    projectPoint(point, solid) {\n        let rawPoint = VectorOps.intoRaw(point);\n        let result = PointProjection.fromRaw(this.colliderSet.raw.coProjectPoint(this.handle, rawPoint, solid));\n        rawPoint.free();\n        return result;\n    }\n    /**\n     * Tests if this collider intersects the given ray.\n     *\n     * @param ray - The ray to cast.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the length of the ray to `ray.dir.norm() * maxToi`.\n     */\n    intersectsRay(ray, maxToi) {\n        let rawOrig = VectorOps.intoRaw(ray.origin);\n        let rawDir = VectorOps.intoRaw(ray.dir);\n        let result = this.colliderSet.raw.coIntersectsRay(this.handle, rawOrig, rawDir, maxToi);\n        rawOrig.free();\n        rawDir.free();\n        return result;\n    }\n    /*\n     * Computes the smallest time between this and the given shape under translational movement are separated by a distance smaller or equal to distance.\n     *\n     * @param collider1Vel - The constant velocity of the current shape to cast (i.e. the cast direction).\n     * @param shape2 - The shape to cast against.\n     * @param shape2Pos - The position of the second shape.\n     * @param shape2Rot - The rotation of the second shape.\n     * @param shape2Vel - The constant velocity of the second shape.\n     * @param targetDistance − If the shape moves closer to this distance from a collider, a hit\n     *                         will be returned.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the distance traveled by the shape to `collider1Vel.norm() * maxToi`.\n     * @param stopAtPenetration - If set to `false`, the linear shape-cast won’t immediately stop if\n     *   the shape is penetrating another shape at its starting point **and** its trajectory is such\n     *   that it’s on a path to exit that penetration state.\n     */\n    castShape(collider1Vel, shape2, shape2Pos, shape2Rot, shape2Vel, targetDistance, maxToi, stopAtPenetration) {\n        let rawCollider1Vel = VectorOps.intoRaw(collider1Vel);\n        let rawShape2Pos = VectorOps.intoRaw(shape2Pos);\n        let rawShape2Rot = RotationOps.intoRaw(shape2Rot);\n        let rawShape2Vel = VectorOps.intoRaw(shape2Vel);\n        let rawShape2 = shape2.intoRaw();\n        let result = ShapeCastHit.fromRaw(this.colliderSet, this.colliderSet.raw.coCastShape(this.handle, rawCollider1Vel, rawShape2, rawShape2Pos, rawShape2Rot, rawShape2Vel, targetDistance, maxToi, stopAtPenetration));\n        rawCollider1Vel.free();\n        rawShape2Pos.free();\n        rawShape2Rot.free();\n        rawShape2Vel.free();\n        rawShape2.free();\n        return result;\n    }\n    /*\n     * Computes the smallest time between this and the given collider under translational movement are separated by a distance smaller or equal to distance.\n     *\n     * @param collider1Vel - The constant velocity of the current collider to cast (i.e. the cast direction).\n     * @param collider2 - The collider to cast against.\n     * @param collider2Vel - The constant velocity of the second collider.\n     * @param targetDistance − If the shape moves closer to this distance from a collider, a hit\n     *                         will be returned.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the distance traveled by the shape to `shapeVel.norm() * maxToi`.\n     * @param stopAtPenetration - If set to `false`, the linear shape-cast won’t immediately stop if\n     *   the shape is penetrating another shape at its starting point **and** its trajectory is such\n     *   that it’s on a path to exit that penetration state.\n     */\n    castCollider(collider1Vel, collider2, collider2Vel, targetDistance, maxToi, stopAtPenetration) {\n        let rawCollider1Vel = VectorOps.intoRaw(collider1Vel);\n        let rawCollider2Vel = VectorOps.intoRaw(collider2Vel);\n        let result = ColliderShapeCastHit.fromRaw(this.colliderSet, this.colliderSet.raw.coCastCollider(this.handle, rawCollider1Vel, collider2.handle, rawCollider2Vel, targetDistance, maxToi, stopAtPenetration));\n        rawCollider1Vel.free();\n        rawCollider2Vel.free();\n        return result;\n    }\n    intersectsShape(shape2, shapePos2, shapeRot2) {\n        let rawPos2 = VectorOps.intoRaw(shapePos2);\n        let rawRot2 = RotationOps.intoRaw(shapeRot2);\n        let rawShape2 = shape2.intoRaw();\n        let result = this.colliderSet.raw.coIntersectsShape(this.handle, rawShape2, rawPos2, rawRot2);\n        rawPos2.free();\n        rawRot2.free();\n        rawShape2.free();\n        return result;\n    }\n    /**\n     * Computes one pair of contact points between the shape owned by this collider and the given shape.\n     *\n     * @param shape2 - The second shape.\n     * @param shape2Pos - The initial position of the second shape.\n     * @param shape2Rot - The rotation of the second shape.\n     * @param prediction - The prediction value, if the shapes are separated by a distance greater than this value, test will fail.\n     * @returns `null` if the shapes are separated by a distance greater than prediction, otherwise contact details. The result is given in world-space.\n     */\n    contactShape(shape2, shape2Pos, shape2Rot, prediction) {\n        let rawPos2 = VectorOps.intoRaw(shape2Pos);\n        let rawRot2 = RotationOps.intoRaw(shape2Rot);\n        let rawShape2 = shape2.intoRaw();\n        let result = ShapeContact.fromRaw(this.colliderSet.raw.coContactShape(this.handle, rawShape2, rawPos2, rawRot2, prediction));\n        rawPos2.free();\n        rawRot2.free();\n        rawShape2.free();\n        return result;\n    }\n    /**\n     * Computes one pair of contact points between the collider and the given collider.\n     *\n     * @param collider2 - The second collider.\n     * @param prediction - The prediction value, if the shapes are separated by a distance greater than this value, test will fail.\n     * @returns `null` if the shapes are separated by a distance greater than prediction, otherwise contact details. The result is given in world-space.\n     */\n    contactCollider(collider2, prediction) {\n        let result = ShapeContact.fromRaw(this.colliderSet.raw.coContactCollider(this.handle, collider2.handle, prediction));\n        return result;\n    }\n    /**\n     * Find the closest intersection between a ray and this collider.\n     *\n     * This also computes the normal at the hit point.\n     * @param ray - The ray to cast.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the length of the ray to `ray.dir.norm() * maxToi`.\n     * @param solid - If `false` then the ray will attempt to hit the boundary of a shape, even if its\n     *   origin already lies inside of a shape. In other terms, `true` implies that all shapes are plain,\n     *   whereas `false` implies that all shapes are hollow for this ray-cast.\n     * @returns The time-of-impact between this collider and the ray, or `-1` if there is no intersection.\n     */\n    castRay(ray, maxToi, solid) {\n        let rawOrig = VectorOps.intoRaw(ray.origin);\n        let rawDir = VectorOps.intoRaw(ray.dir);\n        let result = this.colliderSet.raw.coCastRay(this.handle, rawOrig, rawDir, maxToi, solid);\n        rawOrig.free();\n        rawDir.free();\n        return result;\n    }\n    /**\n     * Find the closest intersection between a ray and this collider.\n     *\n     * This also computes the normal at the hit point.\n     * @param ray - The ray to cast.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the length of the ray to `ray.dir.norm() * maxToi`.\n     * @param solid - If `false` then the ray will attempt to hit the boundary of a shape, even if its\n     *   origin already lies inside of a shape. In other terms, `true` implies that all shapes are plain,\n     *   whereas `false` implies that all shapes are hollow for this ray-cast.\n     */\n    castRayAndGetNormal(ray, maxToi, solid) {\n        let rawOrig = VectorOps.intoRaw(ray.origin);\n        let rawDir = VectorOps.intoRaw(ray.dir);\n        let result = RayIntersection.fromRaw(this.colliderSet.raw.coCastRayAndGetNormal(this.handle, rawOrig, rawDir, maxToi, solid));\n        rawOrig.free();\n        rawDir.free();\n        return result;\n    }\n}\nexport var MassPropsMode;\n(function (MassPropsMode) {\n    MassPropsMode[MassPropsMode[\"Density\"] = 0] = \"Density\";\n    MassPropsMode[MassPropsMode[\"Mass\"] = 1] = \"Mass\";\n    MassPropsMode[MassPropsMode[\"MassProps\"] = 2] = \"MassProps\";\n})(MassPropsMode || (MassPropsMode = {}));\nexport class ColliderDesc {\n    /**\n     * Initializes a collider descriptor from the collision shape.\n     *\n     * @param shape - The shape of the collider being built.\n     */\n    constructor(shape) {\n        this.enabled = true;\n        this.shape = shape;\n        this.massPropsMode = MassPropsMode.Density;\n        this.density = 1.0;\n        this.friction = 0.5;\n        this.restitution = 0.0;\n        this.rotation = RotationOps.identity();\n        this.translation = VectorOps.zeros();\n        this.isSensor = false;\n        this.collisionGroups = 4294967295;\n        this.solverGroups = 4294967295;\n        this.frictionCombineRule = CoefficientCombineRule.Average;\n        this.restitutionCombineRule = CoefficientCombineRule.Average;\n        this.activeCollisionTypes = ActiveCollisionTypes.DEFAULT;\n        this.activeEvents = ActiveEvents.NONE;\n        this.activeHooks = ActiveHooks.NONE;\n        this.mass = 0.0;\n        this.centerOfMass = VectorOps.zeros();\n        this.contactForceEventThreshold = 0.0;\n        this.contactSkin = 0.0;\n        // #if DIM3\n        this.principalAngularInertia = VectorOps.zeros();\n        this.angularInertiaLocalFrame = RotationOps.identity();\n        // #endif\n    }\n    /**\n     * Create a new collider descriptor with a ball shape.\n     *\n     * @param radius - The radius of the ball.\n     */\n    static ball(radius) {\n        const shape = new Ball(radius);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Create a new collider descriptor with a capsule shape.\n     *\n     * @param halfHeight - The half-height of the capsule, along the `y` axis.\n     * @param radius - The radius of the capsule basis.\n     */\n    static capsule(halfHeight, radius) {\n        const shape = new Capsule(halfHeight, radius);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Creates a new segment shape.\n     *\n     * @param a - The first point of the segment.\n     * @param b - The second point of the segment.\n     */\n    static segment(a, b) {\n        const shape = new Segment(a, b);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Creates a new triangle shape.\n     *\n     * @param a - The first point of the triangle.\n     * @param b - The second point of the triangle.\n     * @param c - The third point of the triangle.\n     */\n    static triangle(a, b, c) {\n        const shape = new Triangle(a, b, c);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Creates a new triangle shape with round corners.\n     *\n     * @param a - The first point of the triangle.\n     * @param b - The second point of the triangle.\n     * @param c - The third point of the triangle.\n     * @param borderRadius - The radius of the borders of this triangle. In 3D,\n     *   this is also equal to half the thickness of the triangle.\n     */\n    static roundTriangle(a, b, c, borderRadius) {\n        const shape = new RoundTriangle(a, b, c, borderRadius);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Creates a new collider descriptor with a polyline shape.\n     *\n     * @param vertices - The coordinates of the polyline's vertices.\n     * @param indices - The indices of the polyline's segments. If this is `undefined` or `null`,\n     *    the vertices are assumed to describe a line strip.\n     */\n    static polyline(vertices, indices) {\n        const shape = new Polyline(vertices, indices);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Creates a new collider descriptor with a triangle mesh shape.\n     *\n     * @param vertices - The coordinates of the triangle mesh's vertices.\n     * @param indices - The indices of the triangle mesh's triangles.\n     */\n    static trimesh(vertices, indices, flags) {\n        const shape = new TriMesh(vertices, indices, flags);\n        return new ColliderDesc(shape);\n    }\n    // #if DIM3\n    /**\n     * Creates a new collider descriptor with a cuboid shape.\n     *\n     * @param hx - The half-width of the rectangle along its local `x` axis.\n     * @param hy - The half-width of the rectangle along its local `y` axis.\n     * @param hz - The half-width of the rectangle along its local `z` axis.\n     */\n    static cuboid(hx, hy, hz) {\n        const shape = new Cuboid(hx, hy, hz);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Creates a new collider descriptor with a rectangular shape with round borders.\n     *\n     * @param hx - The half-width of the rectangle along its local `x` axis.\n     * @param hy - The half-width of the rectangle along its local `y` axis.\n     * @param hz - The half-width of the rectangle along its local `z` axis.\n     * @param borderRadius - The radius of the cuboid's borders.\n     */\n    static roundCuboid(hx, hy, hz, borderRadius) {\n        const shape = new RoundCuboid(hx, hy, hz, borderRadius);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Creates a new collider descriptor with a heightfield shape.\n     *\n     * @param nrows − The number of rows in the heights matrix.\n     * @param ncols - The number of columns in the heights matrix.\n     * @param heights - The heights of the heightfield along its local `y` axis,\n     *                  provided as a matrix stored in column-major order.\n     * @param scale - The scale factor applied to the heightfield.\n     */\n    static heightfield(nrows, ncols, heights, scale, flags) {\n        const shape = new Heightfield(nrows, ncols, heights, scale, flags);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Create a new collider descriptor with a cylinder shape.\n     *\n     * @param halfHeight - The half-height of the cylinder, along the `y` axis.\n     * @param radius - The radius of the cylinder basis.\n     */\n    static cylinder(halfHeight, radius) {\n        const shape = new Cylinder(halfHeight, radius);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Create a new collider descriptor with a cylinder shape with rounded corners.\n     *\n     * @param halfHeight - The half-height of the cylinder, along the `y` axis.\n     * @param radius - The radius of the cylinder basis.\n     * @param borderRadius - The radius of the cylinder's rounded edges and vertices.\n     */\n    static roundCylinder(halfHeight, radius, borderRadius) {\n        const shape = new RoundCylinder(halfHeight, radius, borderRadius);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Create a new collider descriptor with a cone shape.\n     *\n     * @param halfHeight - The half-height of the cone, along the `y` axis.\n     * @param radius - The radius of the cone basis.\n     */\n    static cone(halfHeight, radius) {\n        const shape = new Cone(halfHeight, radius);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Create a new collider descriptor with a cone shape with rounded corners.\n     *\n     * @param halfHeight - The half-height of the cone, along the `y` axis.\n     * @param radius - The radius of the cone basis.\n     * @param borderRadius - The radius of the cone's rounded edges and vertices.\n     */\n    static roundCone(halfHeight, radius, borderRadius) {\n        const shape = new RoundCone(halfHeight, radius, borderRadius);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Computes the convex-hull of the given points and use the resulting\n     * convex polyhedron as the shape for this new collider descriptor.\n     *\n     * @param points - The point that will be used to compute the convex-hull.\n     */\n    static convexHull(points) {\n        const shape = new ConvexPolyhedron(points, null);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Creates a new collider descriptor that uses the given set of points assumed\n     * to form a convex polyline (no convex-hull computation will be done).\n     *\n     * @param vertices - The vertices of the convex polyline.\n     */\n    static convexMesh(vertices, indices) {\n        const shape = new ConvexPolyhedron(vertices, indices);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Computes the convex-hull of the given points and use the resulting\n     * convex polyhedron as the shape for this new collider descriptor. A\n     * border is added to that convex polyhedron to give it round corners.\n     *\n     * @param points - The point that will be used to compute the convex-hull.\n     * @param borderRadius - The radius of the round border added to the convex polyhedron.\n     */\n    static roundConvexHull(points, borderRadius) {\n        const shape = new RoundConvexPolyhedron(points, null, borderRadius);\n        return new ColliderDesc(shape);\n    }\n    /**\n     * Creates a new collider descriptor that uses the given set of points assumed\n     * to form a round convex polyline (no convex-hull computation will be done).\n     *\n     * @param vertices - The vertices of the convex polyline.\n     * @param borderRadius - The radius of the round border added to the convex polyline.\n     */\n    static roundConvexMesh(vertices, indices, borderRadius) {\n        const shape = new RoundConvexPolyhedron(vertices, indices, borderRadius);\n        return new ColliderDesc(shape);\n    }\n    // #endif\n    // #if DIM3\n    /**\n     * Sets the position of the collider to be created relative to the rigid-body it is attached to.\n     */\n    setTranslation(x, y, z) {\n        if (typeof x != \"number\" ||\n            typeof y != \"number\" ||\n            typeof z != \"number\")\n            throw TypeError(\"The translation components must be numbers.\");\n        this.translation = { x: x, y: y, z: z };\n        return this;\n    }\n    // #endif\n    /**\n     * Sets the rotation of the collider to be created relative to the rigid-body it is attached to.\n     *\n     * @param rot - The rotation of the collider to be created relative to the rigid-body it is attached to.\n     */\n    setRotation(rot) {\n        // #if DIM3\n        RotationOps.copy(this.rotation, rot);\n        // #endif\n        return this;\n    }\n    /**\n     * Sets whether or not the collider being created is a sensor.\n     *\n     * A sensor collider does not take part of the physics simulation, but generates\n     * proximity events.\n     *\n     * @param sensor - Set to `true` of the collider built is to be a sensor.\n     */\n    setSensor(sensor) {\n        this.isSensor = sensor;\n        return this;\n    }\n    /**\n     * Sets whether the created collider will be enabled or disabled.\n     * @param enabled − If set to `false` the collider will be disabled at creation.\n     */\n    setEnabled(enabled) {\n        this.enabled = enabled;\n        return this;\n    }\n    /**\n     * Sets the contact skin of the collider.\n     *\n     * The contact skin acts as if the collider was enlarged with a skin of width `skin_thickness`\n     * around it, keeping objects further apart when colliding.\n     *\n     * A non-zero contact skin can increase performance, and in some cases, stability. However\n     * it creates a small gap between colliding object (equal to the sum of their skin). If the\n     * skin is sufficiently small, this might not be visually significant or can be hidden by the\n     * rendering assets.\n     */\n    setContactSkin(thickness) {\n        this.contactSkin = thickness;\n        return this;\n    }\n    /**\n     * Sets the density of the collider being built.\n     *\n     * The mass and angular inertia tensor will be computed automatically based on this density and the collider’s shape.\n     *\n     * @param density - The density to set, must be greater or equal to 0. A density of 0 means that this collider\n     *                  will not affect the mass or angular inertia of the rigid-body it is attached to.\n     */\n    setDensity(density) {\n        this.massPropsMode = MassPropsMode.Density;\n        this.density = density;\n        return this;\n    }\n    /**\n     * Sets the mass of the collider being built.\n     *\n     * The angular inertia tensor will be computed automatically based on this mass and the collider’s shape.\n     *\n     * @param mass - The mass to set, must be greater or equal to 0.\n     */\n    setMass(mass) {\n        this.massPropsMode = MassPropsMode.Mass;\n        this.mass = mass;\n        return this;\n    }\n    // #if DIM3\n    /**\n     * Sets the mass properties of the collider being built.\n     *\n     * This replaces the mass-properties automatically computed from the collider's density and shape.\n     * These mass-properties will be added to the mass-properties of the rigid-body this collider will be attached to.\n     *\n     * @param mass − The mass of the collider to create.\n     * @param centerOfMass − The center-of-mass of the collider to create.\n     * @param principalAngularInertia − The initial principal angular inertia of the collider to create.\n     *                                  These are the eigenvalues of the angular inertia matrix.\n     * @param angularInertiaLocalFrame − The initial local angular inertia frame of the collider to create.\n     *                                   These are the eigenvectors of the angular inertia matrix.\n     */\n    setMassProperties(mass, centerOfMass, principalAngularInertia, angularInertiaLocalFrame) {\n        this.massPropsMode = MassPropsMode.MassProps;\n        this.mass = mass;\n        VectorOps.copy(this.centerOfMass, centerOfMass);\n        VectorOps.copy(this.principalAngularInertia, principalAngularInertia);\n        RotationOps.copy(this.angularInertiaLocalFrame, angularInertiaLocalFrame);\n        return this;\n    }\n    // #endif\n    /**\n     * Sets the restitution coefficient of the collider to be created.\n     *\n     * @param restitution - The restitution coefficient in `[0, 1]`. A value of 0 (the default) means no bouncing behavior\n     *                   while 1 means perfect bouncing (though energy may still be lost due to numerical errors of the\n     *                   constraints solver).\n     */\n    setRestitution(restitution) {\n        this.restitution = restitution;\n        return this;\n    }\n    /**\n     * Sets the friction coefficient of the collider to be created.\n     *\n     * @param friction - The friction coefficient. Must be greater or equal to 0. This is generally smaller than 1. The\n     *                   higher the coefficient, the stronger friction forces will be for contacts with the collider\n     *                   being built.\n     */\n    setFriction(friction) {\n        this.friction = friction;\n        return this;\n    }\n    /**\n     * Sets the rule used to combine the friction coefficients of two colliders\n     * colliders involved in a contact.\n     *\n     * @param rule − The combine rule to apply.\n     */\n    setFrictionCombineRule(rule) {\n        this.frictionCombineRule = rule;\n        return this;\n    }\n    /**\n     * Sets the rule used to combine the restitution coefficients of two colliders\n     * colliders involved in a contact.\n     *\n     * @param rule − The combine rule to apply.\n     */\n    setRestitutionCombineRule(rule) {\n        this.restitutionCombineRule = rule;\n        return this;\n    }\n    /**\n     * Sets the collision groups used by this collider.\n     *\n     * Two colliders will interact iff. their collision groups are compatible.\n     * See the documentation of `InteractionGroups` for details on teh used bit pattern.\n     *\n     * @param groups - The collision groups used for the collider being built.\n     */\n    setCollisionGroups(groups) {\n        this.collisionGroups = groups;\n        return this;\n    }\n    /**\n     * Sets the solver groups used by this collider.\n     *\n     * Forces between two colliders in contact will be computed iff their solver\n     * groups are compatible.\n     * See the documentation of `InteractionGroups` for details on the used bit pattern.\n     *\n     * @param groups - The solver groups used for the collider being built.\n     */\n    setSolverGroups(groups) {\n        this.solverGroups = groups;\n        return this;\n    }\n    /**\n     * Set the physics hooks active for this collider.\n     *\n     * Use this to enable custom filtering rules for contact/intersecstion pairs involving this collider.\n     *\n     * @param activeHooks - The hooks active for contact/intersection pairs involving this collider.\n     */\n    setActiveHooks(activeHooks) {\n        this.activeHooks = activeHooks;\n        return this;\n    }\n    /**\n     * Set the events active for this collider.\n     *\n     * Use this to enable contact and/or intersection event reporting for this collider.\n     *\n     * @param activeEvents - The events active for contact/intersection pairs involving this collider.\n     */\n    setActiveEvents(activeEvents) {\n        this.activeEvents = activeEvents;\n        return this;\n    }\n    /**\n     * Set the collision types active for this collider.\n     *\n     * @param activeCollisionTypes - The hooks active for contact/intersection pairs involving this collider.\n     */\n    setActiveCollisionTypes(activeCollisionTypes) {\n        this.activeCollisionTypes = activeCollisionTypes;\n        return this;\n    }\n    /**\n     * Sets the total force magnitude beyond which a contact force event can be emitted.\n     *\n     * @param threshold - The force threshold to set.\n     */\n    setContactForceEventThreshold(threshold) {\n        this.contactForceEventThreshold = threshold;\n        return this;\n    }\n}\n//# sourceMappingURL=collider.js.map","import { BroadPhase, ColliderSet, NarrowPhase, } from \"../geometry\";\nimport { CCDSolver, IntegrationParameters, IslandManager, ImpulseJointSet, MultibodyJointSet, RigidBodySet, } from \"../dynamics\";\nimport { VectorOps } from \"../math\";\nimport { PhysicsPipeline } from \"./physics_pipeline\";\nimport { QueryPipeline } from \"./query_pipeline\";\nimport { SerializationPipeline } from \"./serialization_pipeline\";\nimport { DebugRenderBuffers, DebugRenderPipeline } from \"./debug_render_pipeline\";\nimport { KinematicCharacterController, PidController, } from \"../control\";\n// #if DIM3\nimport { DynamicRayCastVehicleController } from \"../control\";\n// #endif\n/**\n * The physics world.\n *\n * This contains all the data-structures necessary for creating and simulating\n * bodies with contacts, joints, and external forces.\n */\nexport class World {\n    // #endif\n    /**\n     * Release the WASM memory occupied by this physics world.\n     *\n     * All the fields of this physics world will be freed as well,\n     * so there is no need to call their `.free()` methods individually.\n     */\n    free() {\n        this.integrationParameters.free();\n        this.islands.free();\n        this.broadPhase.free();\n        this.narrowPhase.free();\n        this.bodies.free();\n        this.colliders.free();\n        this.impulseJoints.free();\n        this.multibodyJoints.free();\n        this.ccdSolver.free();\n        this.queryPipeline.free();\n        this.physicsPipeline.free();\n        this.serializationPipeline.free();\n        this.debugRenderPipeline.free();\n        this.characterControllers.forEach((controller) => controller.free());\n        this.pidControllers.forEach((controller) => controller.free());\n        // #if DIM3\n        this.vehicleControllers.forEach((controller) => controller.free());\n        // #endif\n        this.integrationParameters = undefined;\n        this.islands = undefined;\n        this.broadPhase = undefined;\n        this.narrowPhase = undefined;\n        this.bodies = undefined;\n        this.colliders = undefined;\n        this.ccdSolver = undefined;\n        this.impulseJoints = undefined;\n        this.multibodyJoints = undefined;\n        this.queryPipeline = undefined;\n        this.physicsPipeline = undefined;\n        this.serializationPipeline = undefined;\n        this.debugRenderPipeline = undefined;\n        this.characterControllers = undefined;\n        this.pidControllers = undefined;\n        // #if DIM3\n        this.vehicleControllers = undefined;\n        // #endif\n    }\n    constructor(gravity, rawIntegrationParameters, rawIslands, rawBroadPhase, rawNarrowPhase, rawBodies, rawColliders, rawImpulseJoints, rawMultibodyJoints, rawCCDSolver, rawQueryPipeline, rawPhysicsPipeline, rawSerializationPipeline, rawDebugRenderPipeline) {\n        this.gravity = gravity;\n        this.integrationParameters = new IntegrationParameters(rawIntegrationParameters);\n        this.islands = new IslandManager(rawIslands);\n        this.broadPhase = new BroadPhase(rawBroadPhase);\n        this.narrowPhase = new NarrowPhase(rawNarrowPhase);\n        this.bodies = new RigidBodySet(rawBodies);\n        this.colliders = new ColliderSet(rawColliders);\n        this.impulseJoints = new ImpulseJointSet(rawImpulseJoints);\n        this.multibodyJoints = new MultibodyJointSet(rawMultibodyJoints);\n        this.ccdSolver = new CCDSolver(rawCCDSolver);\n        this.queryPipeline = new QueryPipeline(rawQueryPipeline);\n        this.physicsPipeline = new PhysicsPipeline(rawPhysicsPipeline);\n        this.serializationPipeline = new SerializationPipeline(rawSerializationPipeline);\n        this.debugRenderPipeline = new DebugRenderPipeline(rawDebugRenderPipeline);\n        this.characterControllers = new Set();\n        this.pidControllers = new Set();\n        // #if DIM3\n        this.vehicleControllers = new Set();\n        // #endif\n        this.impulseJoints.finalizeDeserialization(this.bodies);\n        this.bodies.finalizeDeserialization(this.colliders);\n        this.colliders.finalizeDeserialization(this.bodies);\n    }\n    static fromRaw(raw) {\n        if (!raw)\n            return null;\n        return new World(VectorOps.fromRaw(raw.takeGravity()), raw.takeIntegrationParameters(), raw.takeIslandManager(), raw.takeBroadPhase(), raw.takeNarrowPhase(), raw.takeBodies(), raw.takeColliders(), raw.takeImpulseJoints(), raw.takeMultibodyJoints());\n    }\n    /**\n     * Takes a snapshot of this world.\n     *\n     * Use `World.restoreSnapshot` to create a new physics world with a state identical to\n     * the state when `.takeSnapshot()` is called.\n     */\n    takeSnapshot() {\n        return this.serializationPipeline.serializeAll(this.gravity, this.integrationParameters, this.islands, this.broadPhase, this.narrowPhase, this.bodies, this.colliders, this.impulseJoints, this.multibodyJoints);\n    }\n    /**\n     * Creates a new physics world from a snapshot.\n     *\n     * This new physics world will be an identical copy of the snapshoted physics world.\n     */\n    static restoreSnapshot(data) {\n        let deser = new SerializationPipeline();\n        return deser.deserializeAll(data);\n    }\n    /**\n     * Computes all the lines (and their colors) needed to render the scene.\n     */\n    debugRender() {\n        this.debugRenderPipeline.render(this.bodies, this.colliders, this.impulseJoints, this.multibodyJoints, this.narrowPhase);\n        return new DebugRenderBuffers(this.debugRenderPipeline.vertices, this.debugRenderPipeline.colors);\n    }\n    /**\n     * Advance the simulation by one time step.\n     *\n     * All events generated by the physics engine are ignored.\n     *\n     * @param EventQueue - (optional) structure responsible for collecting\n     *   events generated by the physics engine.\n     */\n    step(eventQueue, hooks) {\n        this.physicsPipeline.step(this.gravity, this.integrationParameters, this.islands, this.broadPhase, this.narrowPhase, this.bodies, this.colliders, this.impulseJoints, this.multibodyJoints, this.ccdSolver, eventQueue, hooks);\n        this.queryPipeline.update(this.colliders);\n    }\n    /**\n     * Update colliders positions after rigid-bodies moved.\n     *\n     * When a rigid-body moves, the positions of the colliders attached to it need to be updated. This update is\n     * generally automatically done at the beginning and the end of each simulation step with World.step.\n     * If the positions need to be updated without running a simulation step this method can be called manually.\n     */\n    propagateModifiedBodyPositionsToColliders() {\n        this.bodies.raw.propagateModifiedBodyPositionsToColliders(this.colliders.raw);\n    }\n    /**\n     * Ensure subsequent scene queries take into account the collider positions set before this method is called.\n     *\n     * This does not step the physics simulation forward.\n     */\n    updateSceneQueries() {\n        this.propagateModifiedBodyPositionsToColliders();\n        this.queryPipeline.update(this.colliders);\n    }\n    /**\n     * The current simulation timestep.\n     */\n    get timestep() {\n        return this.integrationParameters.dt;\n    }\n    /**\n     * Sets the new simulation timestep.\n     *\n     * The simulation timestep governs by how much the physics state of the world will\n     * be integrated. A simulation timestep should:\n     * - be as small as possible. Typical values evolve around 0.016 (assuming the chosen unit is milliseconds,\n     * corresponds to the time between two frames of a game running at 60FPS).\n     * - not vary too much during the course of the simulation. A timestep with large variations may\n     * cause instabilities in the simulation.\n     *\n     * @param dt - The timestep length, in seconds.\n     */\n    set timestep(dt) {\n        this.integrationParameters.dt = dt;\n    }\n    /**\n     * The approximate size of most dynamic objects in the scene.\n     *\n     * See the documentation of the `World.lengthUnit` setter for further details.\n     */\n    get lengthUnit() {\n        return this.integrationParameters.lengthUnit;\n    }\n    /**\n     * The approximate size of most dynamic objects in the scene.\n     *\n     * This value is used internally to estimate some length-based tolerance. In particular, the\n     * values `IntegrationParameters.allowedLinearError`,\n     * `IntegrationParameters.maxPenetrationCorrection`,\n     * `IntegrationParameters.predictionDistance`, `RigidBodyActivation.linearThreshold`\n     * are scaled by this value implicitly.\n     *\n     * This value can be understood as the number of units-per-meter in your physical world compared\n     * to a human-sized world in meter. For example, in a 2d game, if your typical object size is 100\n     * pixels, set the `[`Self::length_unit`]` parameter to 100.0. The physics engine will interpret\n     * it as if 100 pixels is equivalent to 1 meter in its various internal threshold.\n     * (default `1.0`).\n     */\n    set lengthUnit(unitsPerMeter) {\n        this.integrationParameters.lengthUnit = unitsPerMeter;\n    }\n    /**\n     * The number of solver iterations run by the constraints solver for calculating forces (default: `4`).\n     */\n    get numSolverIterations() {\n        return this.integrationParameters.numSolverIterations;\n    }\n    /**\n     * Sets the number of solver iterations run by the constraints solver for calculating forces (default: `4`).\n     *\n     * The greater this value is, the most rigid and realistic the physics simulation will be.\n     * However a greater number of iterations is more computationally intensive.\n     *\n     * @param niter - The new number of solver iterations.\n     */\n    set numSolverIterations(niter) {\n        this.integrationParameters.numSolverIterations = niter;\n    }\n    /**\n     * Number of addition friction resolution iteration run during the last solver sub-step (default: `4`).\n     */\n    get numAdditionalFrictionIterations() {\n        return this.integrationParameters.numAdditionalFrictionIterations;\n    }\n    /**\n     * Sets the number of addition friction resolution iteration run during the last solver sub-step (default: `4`).\n     *\n     * The greater this value is, the most realistic friction will be.\n     * However a greater number of iterations is more computationally intensive.\n     *\n     * @param niter - The new number of additional friction iterations.\n     */\n    set numAdditionalFrictionIterations(niter) {\n        this.integrationParameters.numAdditionalFrictionIterations = niter;\n    }\n    /**\n     * Number of internal Project Gauss Seidel (PGS) iterations run at each solver iteration (default: `1`).\n     */\n    get numInternalPgsIterations() {\n        return this.integrationParameters.numInternalPgsIterations;\n    }\n    /**\n     * Sets the Number of internal Project Gauss Seidel (PGS) iterations run at each solver iteration (default: `1`).\n     *\n     * Increasing this parameter will improve stability of the simulation. It will have a lesser effect than\n     * increasing `numSolverIterations` but is also less computationally expensive.\n     *\n     * @param niter - The new number of internal PGS iterations.\n     */\n    set numInternalPgsIterations(niter) {\n        this.integrationParameters.numInternalPgsIterations = niter;\n    }\n    /// Configures the integration parameters to match the old PGS solver\n    /// from Rapier JS version <= 0.11.\n    ///\n    /// This solver was slightly faster than the new one but resulted\n    /// in less stable joints and worse convergence rates.\n    ///\n    /// This should only be used for comparison purpose or if you are\n    /// experiencing problems with the new solver.\n    ///\n    /// NOTE: this does not affect any `RigidBody.additional_solver_iterations` that will\n    ///       still create solver iterations based on the new \"small-steps\" PGS solver.\n    switchToStandardPgsSolver() {\n        this.integrationParameters.switchToStandardPgsSolver();\n    }\n    /// Configures the integration parameters to match the new \"small-steps\" PGS solver\n    /// from Rapier version >= 0.12.\n    ///\n    /// The \"small-steps\" PGS solver is the default one when creating the physics world. So\n    /// calling this function is generally not needed unless `World.switch_to_standard_pgs_solver`\n    /// was called.\n    ///\n    /// This solver results in more stable joints and significantly better convergence\n    /// rates but is slightly slower in its default settings.\n    switchToSmallStepsPgsSolver() {\n        this.integrationParameters.switchToSmallStepsPgsSolver();\n    }\n    /// Configures the integration parameters to match the new \"small-steps\" PGS solver\n    /// from Rapier version >= 0.12. Warmstarting is disabled.\n    ///\n    /// The \"small-steps\" PGS solver is the default one when creating the physics world. So\n    /// calling this function is generally not needed unless `World.switch_to_standard_pgs_solver`\n    /// was called.\n    ///\n    /// This solver results in more stable joints and significantly better convergence\n    /// rates but is slightly slower in its default settings.\n    switchToSmallStepsPgsSolverWithoutWarmstart() {\n        this.integrationParameters.switchToSmallStepsPgsSolverWithoutWarmstart();\n    }\n    /**\n     * Creates a new rigid-body from the given rigid-body descriptor.\n     *\n     * @param body - The description of the rigid-body to create.\n     */\n    createRigidBody(body) {\n        return this.bodies.createRigidBody(this.colliders, body);\n    }\n    /**\n     * Creates a new character controller.\n     *\n     * @param offset - The artificial gap added between the character’s chape and its environment.\n     */\n    createCharacterController(offset) {\n        let controller = new KinematicCharacterController(offset, this.integrationParameters, this.bodies, this.colliders, this.queryPipeline);\n        this.characterControllers.add(controller);\n        return controller;\n    }\n    /**\n     * Removes a character controller from this world.\n     *\n     * @param controller - The character controller to remove.\n     */\n    removeCharacterController(controller) {\n        this.characterControllers.delete(controller);\n        controller.free();\n    }\n    /**\n     * Creates a new PID (Proportional-Integral-Derivative) controller.\n     *\n     * @param kp - The Proportional gain applied to the instantaneous linear position errors.\n     *             This is usually set to a multiple of the inverse of simulation step time\n     *             (e.g. `60` if the delta-time is `1.0 / 60.0`).\n     * @param ki - The linear gain applied to the Integral part of the PID controller.\n     * @param kd - The Derivative gain applied to the instantaneous linear velocity errors.\n     *             This is usually set to a value in `[0.0, 1.0]` where `0.0` implies no damping\n     *             (no correction of velocity errors) and `1.0` implies complete damping (velocity errors\n     *             are corrected in a single simulation step).\n     * @param axes - The axes affected by this controller.\n     *               Only coordinate axes with a bit flags set to `true` will be taken into\n     *               account when calculating the errors and corrections.\n     */\n    createPidController(kp, ki, kd, axes) {\n        let controller = new PidController(this.integrationParameters, this.bodies, kp, ki, kd, axes);\n        this.pidControllers.add(controller);\n        return controller;\n    }\n    /**\n     * Removes a PID controller from this world.\n     *\n     * @param controller - The PID controller to remove.\n     */\n    removePidController(controller) {\n        this.pidControllers.delete(controller);\n        controller.free();\n    }\n    // #if DIM3\n    /**\n     * Creates a new vehicle controller.\n     *\n     * @param chassis - The rigid-body used as the chassis of the vehicle controller. When the vehicle\n     *                  controller is updated, it will change directly the rigid-body’s velocity. This\n     *                  rigid-body must be a dynamic or kinematic-velocity-based rigid-body.\n     */\n    createVehicleController(chassis) {\n        let controller = new DynamicRayCastVehicleController(chassis, this.bodies, this.colliders, this.queryPipeline);\n        this.vehicleControllers.add(controller);\n        return controller;\n    }\n    /**\n     * Removes a vehicle controller from this world.\n     *\n     * @param controller - The vehicle controller to remove.\n     */\n    removeVehicleController(controller) {\n        this.vehicleControllers.delete(controller);\n        controller.free();\n    }\n    // #endif\n    /**\n     * Creates a new collider.\n     *\n     * @param desc - The description of the collider.\n     * @param parent - The rigid-body this collider is attached to.\n     */\n    createCollider(desc, parent) {\n        let parentHandle = parent ? parent.handle : undefined;\n        return this.colliders.createCollider(this.bodies, desc, parentHandle);\n    }\n    /**\n     * Creates a new impulse joint from the given joint descriptor.\n     *\n     * @param params - The description of the joint to create.\n     * @param parent1 - The first rigid-body attached to this joint.\n     * @param parent2 - The second rigid-body attached to this joint.\n     * @param wakeUp - Should the attached rigid-bodies be awakened?\n     */\n    createImpulseJoint(params, parent1, parent2, wakeUp) {\n        return this.impulseJoints.createJoint(this.bodies, params, parent1.handle, parent2.handle, wakeUp);\n    }\n    /**\n     * Creates a new multibody joint from the given joint descriptor.\n     *\n     * @param params - The description of the joint to create.\n     * @param parent1 - The first rigid-body attached to this joint.\n     * @param parent2 - The second rigid-body attached to this joint.\n     * @param wakeUp - Should the attached rigid-bodies be awakened?\n     */\n    createMultibodyJoint(params, parent1, parent2, wakeUp) {\n        return this.multibodyJoints.createJoint(params, parent1.handle, parent2.handle, wakeUp);\n    }\n    /**\n     * Retrieves a rigid-body from its handle.\n     *\n     * @param handle - The integer handle of the rigid-body to retrieve.\n     */\n    getRigidBody(handle) {\n        return this.bodies.get(handle);\n    }\n    /**\n     * Retrieves a collider from its handle.\n     *\n     * @param handle - The integer handle of the collider to retrieve.\n     */\n    getCollider(handle) {\n        return this.colliders.get(handle);\n    }\n    /**\n     * Retrieves an impulse joint from its handle.\n     *\n     * @param handle - The integer handle of the impulse joint to retrieve.\n     */\n    getImpulseJoint(handle) {\n        return this.impulseJoints.get(handle);\n    }\n    /**\n     * Retrieves an multibody joint from its handle.\n     *\n     * @param handle - The integer handle of the multibody joint to retrieve.\n     */\n    getMultibodyJoint(handle) {\n        return this.multibodyJoints.get(handle);\n    }\n    /**\n     * Removes the given rigid-body from this physics world.\n     *\n     * This will remove this rigid-body as well as all its attached colliders and joints.\n     * Every other bodies touching or attached by joints to this rigid-body will be woken-up.\n     *\n     * @param body - The rigid-body to remove.\n     */\n    removeRigidBody(body) {\n        if (this.bodies) {\n            this.bodies.remove(body.handle, this.islands, this.colliders, this.impulseJoints, this.multibodyJoints);\n        }\n    }\n    /**\n     * Removes the given collider from this physics world.\n     *\n     * @param collider - The collider to remove.\n     * @param wakeUp - If set to `true`, the rigid-body this collider is attached to will be awaken.\n     */\n    removeCollider(collider, wakeUp) {\n        if (this.colliders) {\n            this.colliders.remove(collider.handle, this.islands, this.bodies, wakeUp);\n        }\n    }\n    /**\n     * Removes the given impulse joint from this physics world.\n     *\n     * @param joint - The impulse joint to remove.\n     * @param wakeUp - If set to `true`, the rigid-bodies attached by this joint will be awaken.\n     */\n    removeImpulseJoint(joint, wakeUp) {\n        if (this.impulseJoints) {\n            this.impulseJoints.remove(joint.handle, wakeUp);\n        }\n    }\n    /**\n     * Removes the given multibody joint from this physics world.\n     *\n     * @param joint - The multibody joint to remove.\n     * @param wakeUp - If set to `true`, the rigid-bodies attached by this joint will be awaken.\n     */\n    removeMultibodyJoint(joint, wakeUp) {\n        if (this.impulseJoints) {\n            this.multibodyJoints.remove(joint.handle, wakeUp);\n        }\n    }\n    /**\n     * Applies the given closure to each collider managed by this physics world.\n     *\n     * @param f(collider) - The function to apply to each collider managed by this physics world. Called as `f(collider)`.\n     */\n    forEachCollider(f) {\n        this.colliders.forEach(f);\n    }\n    /**\n     * Applies the given closure to each rigid-body managed by this physics world.\n     *\n     * @param f(body) - The function to apply to each rigid-body managed by this physics world. Called as `f(collider)`.\n     */\n    forEachRigidBody(f) {\n        this.bodies.forEach(f);\n    }\n    /**\n     * Applies the given closure to each active rigid-body managed by this physics world.\n     *\n     * After a short time of inactivity, a rigid-body is automatically deactivated (\"asleep\") by\n     * the physics engine in order to save computational power. A sleeping rigid-body never moves\n     * unless it is moved manually by the user.\n     *\n     * @param f - The function to apply to each active rigid-body managed by this physics world. Called as `f(collider)`.\n     */\n    forEachActiveRigidBody(f) {\n        this.bodies.forEachActiveRigidBody(this.islands, f);\n    }\n    /**\n     * Find the closest intersection between a ray and the physics world.\n     *\n     * @param ray - The ray to cast.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the length of the ray to `ray.dir.norm() * maxToi`.\n     * @param solid - If `false` then the ray will attempt to hit the boundary of a shape, even if its\n     *   origin already lies inside of a shape. In other terms, `true` implies that all shapes are plain,\n     *   whereas `false` implies that all shapes are hollow for this ray-cast.\n     * @param groups - Used to filter the colliders that can or cannot be hit by the ray.\n     * @param filter - The callback to filter out which collider will be hit.\n     */\n    castRay(ray, maxToi, solid, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        return this.queryPipeline.castRay(this.bodies, this.colliders, ray, maxToi, solid, filterFlags, filterGroups, filterExcludeCollider ? filterExcludeCollider.handle : null, filterExcludeRigidBody ? filterExcludeRigidBody.handle : null, this.colliders.castClosure(filterPredicate));\n    }\n    /**\n     * Find the closest intersection between a ray and the physics world.\n     *\n     * This also computes the normal at the hit point.\n     * @param ray - The ray to cast.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the length of the ray to `ray.dir.norm() * maxToi`.\n     * @param solid - If `false` then the ray will attempt to hit the boundary of a shape, even if its\n     *   origin already lies inside of a shape. In other terms, `true` implies that all shapes are plain,\n     *   whereas `false` implies that all shapes are hollow for this ray-cast.\n     * @param groups - Used to filter the colliders that can or cannot be hit by the ray.\n     */\n    castRayAndGetNormal(ray, maxToi, solid, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        return this.queryPipeline.castRayAndGetNormal(this.bodies, this.colliders, ray, maxToi, solid, filterFlags, filterGroups, filterExcludeCollider ? filterExcludeCollider.handle : null, filterExcludeRigidBody ? filterExcludeRigidBody.handle : null, this.colliders.castClosure(filterPredicate));\n    }\n    /**\n     * Cast a ray and collects all the intersections between a ray and the scene.\n     *\n     * @param ray - The ray to cast.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the length of the ray to `ray.dir.norm() * maxToi`.\n     * @param solid - If `false` then the ray will attempt to hit the boundary of a shape, even if its\n     *   origin already lies inside of a shape. In other terms, `true` implies that all shapes are plain,\n     *   whereas `false` implies that all shapes are hollow for this ray-cast.\n     * @param groups - Used to filter the colliders that can or cannot be hit by the ray.\n     * @param callback - The callback called once per hit (in no particular order) between a ray and a collider.\n     *   If this callback returns `false`, then the cast will stop and no further hits will be detected/reported.\n     */\n    intersectionsWithRay(ray, maxToi, solid, callback, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        this.queryPipeline.intersectionsWithRay(this.bodies, this.colliders, ray, maxToi, solid, callback, filterFlags, filterGroups, filterExcludeCollider ? filterExcludeCollider.handle : null, filterExcludeRigidBody ? filterExcludeRigidBody.handle : null, this.colliders.castClosure(filterPredicate));\n    }\n    /**\n     * Gets the handle of up to one collider intersecting the given shape.\n     *\n     * @param shapePos - The position of the shape used for the intersection test.\n     * @param shapeRot - The orientation of the shape used for the intersection test.\n     * @param shape - The shape used for the intersection test.\n     * @param groups - The bit groups and filter associated to the ray, in order to only\n     *   hit the colliders with collision groups compatible with the ray's group.\n     */\n    intersectionWithShape(shapePos, shapeRot, shape, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        let handle = this.queryPipeline.intersectionWithShape(this.bodies, this.colliders, shapePos, shapeRot, shape, filterFlags, filterGroups, filterExcludeCollider ? filterExcludeCollider.handle : null, filterExcludeRigidBody ? filterExcludeRigidBody.handle : null, this.colliders.castClosure(filterPredicate));\n        return handle != null ? this.colliders.get(handle) : null;\n    }\n    /**\n     * Find the projection of a point on the closest collider.\n     *\n     * @param point - The point to project.\n     * @param solid - If this is set to `true` then the collider shapes are considered to\n     *   be plain (if the point is located inside of a plain shape, its projection is the point\n     *   itself). If it is set to `false` the collider shapes are considered to be hollow\n     *   (if the point is located inside of an hollow shape, it is projected on the shape's\n     *   boundary).\n     * @param groups - The bit groups and filter associated to the point to project, in order to only\n     *   project on colliders with collision groups compatible with the ray's group.\n     */\n    projectPoint(point, solid, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        return this.queryPipeline.projectPoint(this.bodies, this.colliders, point, solid, filterFlags, filterGroups, filterExcludeCollider ? filterExcludeCollider.handle : null, filterExcludeRigidBody ? filterExcludeRigidBody.handle : null, this.colliders.castClosure(filterPredicate));\n    }\n    /**\n     * Find the projection of a point on the closest collider.\n     *\n     * @param point - The point to project.\n     * @param groups - The bit groups and filter associated to the point to project, in order to only\n     *   project on colliders with collision groups compatible with the ray's group.\n     */\n    projectPointAndGetFeature(point, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        return this.queryPipeline.projectPointAndGetFeature(this.bodies, this.colliders, point, filterFlags, filterGroups, filterExcludeCollider ? filterExcludeCollider.handle : null, filterExcludeRigidBody ? filterExcludeRigidBody.handle : null, this.colliders.castClosure(filterPredicate));\n    }\n    /**\n     * Find all the colliders containing the given point.\n     *\n     * @param point - The point used for the containment test.\n     * @param groups - The bit groups and filter associated to the point to test, in order to only\n     *   test on colliders with collision groups compatible with the ray's group.\n     * @param callback - A function called with the handles of each collider with a shape\n     *   containing the `point`.\n     */\n    intersectionsWithPoint(point, callback, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        this.queryPipeline.intersectionsWithPoint(this.bodies, this.colliders, point, this.colliders.castClosure(callback), filterFlags, filterGroups, filterExcludeCollider ? filterExcludeCollider.handle : null, filterExcludeRigidBody ? filterExcludeRigidBody.handle : null, this.colliders.castClosure(filterPredicate));\n    }\n    /**\n     * Casts a shape at a constant linear velocity and retrieve the first collider it hits.\n     * This is similar to ray-casting except that we are casting a whole shape instead of\n     * just a point (the ray origin).\n     *\n     * @param shapePos - The initial position of the shape to cast.\n     * @param shapeRot - The initial rotation of the shape to cast.\n     * @param shapeVel - The constant velocity of the shape to cast (i.e. the cast direction).\n     * @param shape - The shape to cast.\n     * @param targetDistance − If the shape moves closer to this distance from a collider, a hit\n     *                         will be returned.\n     * @param maxToi - The maximum time-of-impact that can be reported by this cast. This effectively\n     *   limits the distance traveled by the shape to `shapeVel.norm() * maxToi`.\n     * @param stopAtPenetration - If set to `false`, the linear shape-cast won’t immediately stop if\n     *   the shape is penetrating another shape at its starting point **and** its trajectory is such\n     *   that it’s on a path to exit that penetration state.\n     * @param groups - The bit groups and filter associated to the shape to cast, in order to only\n     *   test on colliders with collision groups compatible with this group.\n     */\n    castShape(shapePos, shapeRot, shapeVel, shape, targetDistance, maxToi, stopAtPenetration, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        return this.queryPipeline.castShape(this.bodies, this.colliders, shapePos, shapeRot, shapeVel, shape, targetDistance, maxToi, stopAtPenetration, filterFlags, filterGroups, filterExcludeCollider ? filterExcludeCollider.handle : null, filterExcludeRigidBody ? filterExcludeRigidBody.handle : null, this.colliders.castClosure(filterPredicate));\n    }\n    /**\n     * Retrieve all the colliders intersecting the given shape.\n     *\n     * @param shapePos - The position of the shape to test.\n     * @param shapeRot - The orientation of the shape to test.\n     * @param shape - The shape to test.\n     * @param groups - The bit groups and filter associated to the shape to test, in order to only\n     *   test on colliders with collision groups compatible with this group.\n     * @param callback - A function called with the handles of each collider intersecting the `shape`.\n     */\n    intersectionsWithShape(shapePos, shapeRot, shape, callback, filterFlags, filterGroups, filterExcludeCollider, filterExcludeRigidBody, filterPredicate) {\n        this.queryPipeline.intersectionsWithShape(this.bodies, this.colliders, shapePos, shapeRot, shape, this.colliders.castClosure(callback), filterFlags, filterGroups, filterExcludeCollider ? filterExcludeCollider.handle : null, filterExcludeRigidBody ? filterExcludeRigidBody.handle : null, this.colliders.castClosure(filterPredicate));\n    }\n    /**\n     * Finds the handles of all the colliders with an AABB intersecting the given AABB.\n     *\n     * @param aabbCenter - The center of the AABB to test.\n     * @param aabbHalfExtents - The half-extents of the AABB to test.\n     * @param callback - The callback that will be called with the handles of all the colliders\n     *                   currently intersecting the given AABB.\n     */\n    collidersWithAabbIntersectingAabb(aabbCenter, aabbHalfExtents, callback) {\n        this.queryPipeline.collidersWithAabbIntersectingAabb(aabbCenter, aabbHalfExtents, this.colliders.castClosure(callback));\n    }\n    /**\n     * Enumerates all the colliders potentially in contact with the given collider.\n     *\n     * @param collider1 - The second collider involved in the contact.\n     * @param f - Closure that will be called on each collider that is in contact with `collider1`.\n     */\n    contactPairsWith(collider1, f) {\n        this.narrowPhase.contactPairsWith(collider1.handle, this.colliders.castClosure(f));\n    }\n    /**\n     * Enumerates all the colliders intersecting the given colliders, assuming one of them\n     * is a sensor.\n     */\n    intersectionPairsWith(collider1, f) {\n        this.narrowPhase.intersectionPairsWith(collider1.handle, this.colliders.castClosure(f));\n    }\n    /**\n     * Iterates through all the contact manifolds between the given pair of colliders.\n     *\n     * @param collider1 - The first collider involved in the contact.\n     * @param collider2 - The second collider involved in the contact.\n     * @param f - Closure that will be called on each contact manifold between the two colliders. If the second argument\n     *            passed to this closure is `true`, then the contact manifold data is flipped, i.e., methods like `localNormal1`\n     *            actually apply to the `collider2` and fields like `localNormal2` apply to the `collider1`.\n     */\n    contactPair(collider1, collider2, f) {\n        this.narrowPhase.contactPair(collider1.handle, collider2.handle, f);\n    }\n    /**\n     * Returns `true` if `collider1` and `collider2` intersect and at least one of them is a sensor.\n     * @param collider1 − The first collider involved in the intersection.\n     * @param collider2 − The second collider involved in the intersection.\n     */\n    intersectionPair(collider1, collider2) {\n        return this.narrowPhase.intersectionPair(collider1.handle, collider2.handle);\n    }\n}\n//# sourceMappingURL=world.js.map","import { RawDebugRenderPipeline } from \"../raw\";\n/**\n * The vertex and color buffers for debug-redering the physics scene.\n */\nexport class DebugRenderBuffers {\n    constructor(vertices, colors) {\n        this.vertices = vertices;\n        this.colors = colors;\n    }\n}\n/**\n * A pipeline for rendering the physics scene.\n *\n * To avoid leaking WASM resources, this MUST be freed manually with `debugRenderPipeline.free()`\n * once you are done using it (and all the rigid-bodies it created).\n */\nexport class DebugRenderPipeline {\n    /**\n     * Release the WASM memory occupied by this serialization pipeline.\n     */\n    free() {\n        if (!!this.raw) {\n            this.raw.free();\n        }\n        this.raw = undefined;\n        this.vertices = undefined;\n        this.colors = undefined;\n    }\n    constructor(raw) {\n        this.raw = raw || new RawDebugRenderPipeline();\n    }\n    render(bodies, colliders, impulse_joints, multibody_joints, narrow_phase) {\n        this.raw.render(bodies.raw, colliders.raw, impulse_joints.raw, multibody_joints.raw, narrow_phase.raw);\n        this.vertices = this.raw.vertices();\n        this.colors = this.raw.colors();\n    }\n}\n//# sourceMappingURL=debug_render_pipeline.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.hmd = (module) => {\n\tmodule = Object.create(module);\n\tif (!module.children) module.children = [];\n\tObject.defineProperty(module, 'exports', {\n\t\tenumerable: true,\n\t\tset: () => {\n\t\t\tthrow new Error('ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: ' + module.id);\n\t\t}\n\t});\n\treturn module;\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.v = (exports, wasmModuleId, wasmModuleHash, importsObj) => {\n\n\tvar req = fetch(__webpack_require__.p + \"\" + wasmModuleHash + \".module.wasm\");\n\tvar fallback = () => (req\n\t\t.then((x) => (x.arrayBuffer()))\n\t\t.then((bytes) => (WebAssembly.instantiate(bytes, importsObj)))\n\t\t.then((res) => (Object.assign(exports, res.instance.exports))));\n\treturn req.then((res) => {\n\t\tif (typeof WebAssembly.instantiateStreaming === \"function\") {\n\n\t\t\treturn WebAssembly.instantiateStreaming(res, importsObj)\n\t\t\t\t.then(\n\t\t\t\t\t(res) => (Object.assign(exports, res.instance.exports)),\n\t\t\t\t\t(e) => {\n\t\t\t\t\t\tif(res.headers.get(\"Content-Type\") !== \"application/wasm\") {\n\t\t\t\t\t\t\tconsole.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\t\t\t\t\t\t\treturn fallback();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t}\n\t\treturn fallback();\n\t});\n};","__webpack_require__.p = \"./\";","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(332);\n"],"names":["webpackQueues","webpackExports","webpackError","resolveQueue","wasm","__wbg_set_wasm","val","heap","Array","fill","undefined","getObject","idx","push","heap_next","length","addHeapObject","obj","handleError","f","args","apply","this","e","__wbindgen_export_0","isLikeNone","x","cachedDataViewMemory0","getDataViewMemory0","buffer","detached","memory","DataView","takeObject","ret","dropObject","cachedTextDecoder","TextDecoder","module","require","ignoreBOM","fatal","decode","cachedUint8ArrayMemory0","getStringFromWasm0","ptr","len","byteLength","Uint8Array","subarray","version","deferred1_0","deferred1_1","retptr","__wbindgen_add_to_stack_pointer","r0","getInt32","r1","__wbindgen_export_1","_assertClass","instance","klass","Error","name","stack_pointer","addBorrowedObject","cachedFloat32ArrayMemory0","getFloat32ArrayMemory0","Float32Array","getArrayF32FromWasm0","cachedUint32ArrayMemory0","getUint32ArrayMemory0","Uint32Array","WASM_VECTOR_LEN","passArrayF32ToWasm0","arg","malloc","set","passArray32ToWasm0","Object","freeze","Vertex","Edge","Face","Unknown","RawJointAxis","LinX","LinY","LinZ","AngX","AngY","AngZ","RawJointType","Revolute","Fixed","Prismatic","Rope","Spring","Spherical","Generic","RawShapeType","AccelerationBased","ForceBased","Dynamic","KinematicPositionBased","KinematicVelocityBased","Ball","Cuboid","Capsule","Segment","Polyline","Triangle","TriMesh","HeightField","Compound","ConvexPolyhedron","Cylinder","Cone","RoundCuboid","RoundTriangle","RoundCylinder","RoundCone","RoundConvexPolyhedron","HalfSpace","RawBroadPhaseFinalization","FinalizationRegistry","register","unregister","__wbg_rawbroadphase_free","RawBroadPhase","__wrap","create","prototype","__wbg_ptr","__destroy_into_raw","free","constructor","rawbroadphase_new","RawCCDSolverFinalization","__wbg_rawccdsolver_free","RawCCDSolver","rawccdsolver_new","RawCharacterCollisionFinalization","__wbg_rawcharactercollision_free","RawCharacterCollision","rawcharactercollision_new","handle","rawcharactercollision_handle","translationDeltaApplied","rawcharactercollision_translationDeltaApplied","RawVector","translationDeltaRemaining","rawcharactercollision_translationDeltaRemaining","toi","rawcharactercollision_toi","worldWitness1","rawcharactercollision_worldWitness1","worldWitness2","rawcharactercollision_worldWitness2","worldNormal1","rawcharactercollision_worldNormal1","worldNormal2","rawcharactercollision_worldNormal2","RawColliderSetFinalization","__wbg_rawcolliderset_free","RawColliderSet","coTranslation","rawcolliderset_coTranslation","coRotation","rawcolliderset_coRotation","RawRotation","coSetTranslation","y","z","rawcolliderset_coSetTranslation","coSetTranslationWrtParent","rawcolliderset_coSetTranslationWrtParent","coSetRotation","w","rawcolliderset_coSetRotation","coSetRotationWrtParent","rawcolliderset_coSetRotationWrtParent","coIsSensor","rawcolliderset_coIsSensor","coShapeType","rawcolliderset_coShapeType","coHalfspaceNormal","rawcolliderset_coHalfspaceNormal","coHalfExtents","rawcolliderset_coHalfExtents","coSetHalfExtents","newHalfExtents","rawcolliderset_coSetHalfExtents","coRadius","rawcolliderset_coRadius","coSetRadius","newRadius","rawcolliderset_coSetRadius","coHalfHeight","rawcolliderset_coHalfHeight","coSetHalfHeight","newHalfheight","rawcolliderset_coSetHalfHeight","coRoundRadius","rawcolliderset_coRoundRadius","coSetRoundRadius","newBorderRadius","rawcolliderset_coSetRoundRadius","coVertices","rawcolliderset_coVertices","v1","slice","coIndices","rawcolliderset_coIndices","coTriMeshFlags","rawcolliderset_coTriMeshFlags","coHeightFieldFlags","rawcolliderset_coHeightFieldFlags","coHeightfieldHeights","rawcolliderset_coHeightfieldHeights","coHeightfieldScale","rawcolliderset_coHeightfieldScale","coHeightfieldNRows","rawcolliderset_coHeightfieldNRows","coHeightfieldNCols","rawcolliderset_coHeightfieldNCols","coParent","rawcolliderset_coParent","r2","getFloat64","coSetEnabled","enabled","rawcolliderset_coSetEnabled","coIsEnabled","rawcolliderset_coIsEnabled","coSetContactSkin","contact_skin","rawcolliderset_coSetContactSkin","coContactSkin","rawcolliderset_coContactSkin","coFriction","rawcolliderset_coFriction","coRestitution","rawcolliderset_coRestitution","coDensity","rawcolliderset_coDensity","coMass","rawcolliderset_coMass","coVolume","rawcolliderset_coVolume","coCollisionGroups","rawcolliderset_coCollisionGroups","coSolverGroups","rawcolliderset_coSolverGroups","coActiveHooks","rawcolliderset_coActiveHooks","coActiveCollisionTypes","rawcolliderset_coActiveCollisionTypes","coActiveEvents","rawcolliderset_coActiveEvents","coContactForceEventThreshold","rawcolliderset_coContactForceEventThreshold","coContainsPoint","point","rawcolliderset_coContainsPoint","coCastShape","colliderVel","shape2","shape2Pos","shape2Rot","shape2Vel","target_distance","maxToi","stop_at_penetration","RawShape","rawcolliderset_coCastShape","RawShapeCastHit","coCastCollider","collider1Vel","collider2handle","collider2Vel","max_toi","rawcolliderset_coCastCollider","RawColliderShapeCastHit","coIntersectsShape","shapePos2","shapeRot2","rawcolliderset_coIntersectsShape","coContactShape","prediction","rawcolliderset_coContactShape","RawShapeContact","coContactCollider","rawcolliderset_coContactCollider","coProjectPoint","solid","rawcolliderset_coProjectPoint","RawPointProjection","coIntersectsRay","rayOrig","rayDir","rawcolliderset_coIntersectsRay","coCastRay","rawcolliderset_coCastRay","coCastRayAndGetNormal","rawcolliderset_coCastRayAndGetNormal","RawRayIntersection","coSetSensor","is_sensor","rawcolliderset_coSetSensor","coSetRestitution","restitution","rawcolliderset_coSetRestitution","coSetFriction","friction","rawcolliderset_coSetFriction","coFrictionCombineRule","rawcolliderset_coFrictionCombineRule","coSetFrictionCombineRule","rule","rawcolliderset_coSetFrictionCombineRule","coRestitutionCombineRule","rawcolliderset_coRestitutionCombineRule","coSetRestitutionCombineRule","rawcolliderset_coSetRestitutionCombineRule","coSetCollisionGroups","groups","rawcolliderset_coSetCollisionGroups","coSetSolverGroups","rawcolliderset_coSetSolverGroups","coSetActiveHooks","hooks","rawcolliderset_coSetActiveHooks","coSetActiveEvents","events","rawcolliderset_coSetActiveEvents","coSetActiveCollisionTypes","types","rawcolliderset_coSetActiveCollisionTypes","coSetShape","shape","rawcolliderset_coSetShape","coSetContactForceEventThreshold","threshold","rawcolliderset_coSetContactForceEventThreshold","coSetDensity","density","rawcolliderset_coSetDensity","coSetMass","mass","rawcolliderset_coSetMass","coSetMassProperties","centerOfMass","principalAngularInertia","angularInertiaFrame","rawcolliderset_coSetMassProperties","rawcolliderset_new","rawcolliderset_len","contains","rawcolliderset_contains","createCollider","translation","rotation","massPropsMode","frictionCombineRule","restitutionCombineRule","isSensor","collisionGroups","solverGroups","activeCollisionTypes","activeHooks","activeEvents","contactForceEventThreshold","contactSkin","hasParent","parent","bodies","RawRigidBodySet","rawcolliderset_createCollider","remove","islands","wakeUp","RawIslandManager","rawcolliderset_remove","isHandleValid","forEachColliderHandle","rawcolliderset_forEachColliderHandle","RawColliderShapeCastHitFinalization","__wbg_rawcollidershapecasthit_free","colliderHandle","time_of_impact","rawcollidershapecasthit_time_of_impact","witness1","rawcollidershapecasthit_witness1","witness2","rawcollidershapecasthit_witness2","normal1","normal2","RawContactForceEventFinalization","__wbg_rawcontactforceevent_free","RawContactForceEvent","collider1","collider2","rawcontactforceevent_collider2","total_force","rawcontactforceevent_total_force","total_force_magnitude","rawcontactforceevent_total_force_magnitude","max_force_direction","rawcontactforceevent_max_force_direction","max_force_magnitude","rawcontactforceevent_max_force_magnitude","RawContactManifoldFinalization","__wbg_rawcontactmanifold_free","RawContactManifold","normal","rawcontactmanifold_normal","local_n1","rawcontactmanifold_local_n1","local_n2","rawcontactmanifold_local_n2","subshape1","rawcontactmanifold_subshape1","subshape2","rawcontactmanifold_subshape2","num_contacts","rawcontactmanifold_num_contacts","contact_local_p1","i","rawcontactmanifold_contact_local_p1","contact_local_p2","rawcontactmanifold_contact_local_p2","contact_dist","rawcontactmanifold_contact_dist","contact_fid1","rawcontactmanifold_contact_fid1","contact_fid2","rawcontactmanifold_contact_fid2","contact_impulse","rawcontactmanifold_contact_impulse","contact_tangent_impulse_x","rawcontactmanifold_contact_tangent_impulse_x","contact_tangent_impulse_y","rawcontactmanifold_contact_tangent_impulse_y","num_solver_contacts","rawcontactmanifold_num_solver_contacts","solver_contact_point","rawcontactmanifold_solver_contact_point","solver_contact_dist","rawcontactmanifold_solver_contact_dist","solver_contact_friction","rawcontactmanifold_solver_contact_friction","solver_contact_restitution","rawcontactmanifold_solver_contact_restitution","solver_contact_tangent_velocity","rawcontactmanifold_solver_contact_tangent_velocity","RawContactPairFinalization","__wbg_rawcontactpair_free","RawContactPair","rawcontactpair_collider1","rawcontactpair_collider2","numContactManifolds","rawcontactpair_numContactManifolds","contactManifold","rawcontactpair_contactManifold","RawDebugRenderPipelineFinalization","__wbg_rawdebugrenderpipeline_free","RawDebugRenderPipeline","rawdebugrenderpipeline_new","vertices","rawdebugrenderpipeline_vertices","colors","rawdebugrenderpipeline_colors","render","colliders","impulse_joints","multibody_joints","narrow_phase","RawImpulseJointSet","RawMultibodyJointSet","RawNarrowPhase","rawdebugrenderpipeline_render","RawDeserializedWorldFinalization","__wbg_rawdeserializedworld_free","RawDeserializedWorld","takeGravity","rawdeserializedworld_takeGravity","takeIntegrationParameters","rawdeserializedworld_takeIntegrationParameters","RawIntegrationParameters","takeIslandManager","rawdeserializedworld_takeIslandManager","takeBroadPhase","rawdeserializedworld_takeBroadPhase","takeNarrowPhase","rawdeserializedworld_takeNarrowPhase","takeBodies","rawdeserializedworld_takeBodies","takeColliders","rawdeserializedworld_takeColliders","takeImpulseJoints","rawdeserializedworld_takeImpulseJoints","takeMultibodyJoints","rawdeserializedworld_takeMultibodyJoints","RawDynamicRayCastVehicleControllerFinalization","__wbg_rawdynamicraycastvehiclecontroller_free","RawDynamicRayCastVehicleController","chassis","rawdynamicraycastvehiclecontroller_new","current_vehicle_speed","rawdynamicraycastvehiclecontroller_current_vehicle_speed","rawdynamicraycastvehiclecontroller_chassis","index_up_axis","rawdynamicraycastvehiclecontroller_index_up_axis","set_index_up_axis","axis","rawdynamicraycastvehiclecontroller_set_index_up_axis","index_forward_axis","rawdynamicraycastvehiclecontroller_index_forward_axis","set_index_forward_axis","rawdynamicraycastvehiclecontroller_set_index_forward_axis","add_wheel","chassis_connection_cs","direction_cs","axle_cs","suspension_rest_length","radius","rawdynamicraycastvehiclecontroller_add_wheel","num_wheels","rawdynamicraycastvehiclecontroller_num_wheels","update_vehicle","dt","queries","filter_flags","filter_groups","filter_predicate","RawQueryPipeline","rawdynamicraycastvehiclecontroller_update_vehicle","wheel_chassis_connection_point_cs","rawdynamicraycastvehiclecontroller_wheel_chassis_connection_point_cs","set_wheel_chassis_connection_point_cs","value","rawdynamicraycastvehiclecontroller_set_wheel_chassis_connection_point_cs","wheel_suspension_rest_length","rawdynamicraycastvehiclecontroller_wheel_suspension_rest_length","set_wheel_suspension_rest_length","rawdynamicraycastvehiclecontroller_set_wheel_suspension_rest_length","wheel_max_suspension_travel","rawdynamicraycastvehiclecontroller_wheel_max_suspension_travel","set_wheel_max_suspension_travel","rawdynamicraycastvehiclecontroller_set_wheel_max_suspension_travel","wheel_radius","rawdynamicraycastvehiclecontroller_wheel_radius","set_wheel_radius","rawdynamicraycastvehiclecontroller_set_wheel_radius","wheel_suspension_stiffness","rawdynamicraycastvehiclecontroller_wheel_suspension_stiffness","set_wheel_suspension_stiffness","rawdynamicraycastvehiclecontroller_set_wheel_suspension_stiffness","wheel_suspension_compression","rawdynamicraycastvehiclecontroller_wheel_suspension_compression","set_wheel_suspension_compression","rawdynamicraycastvehiclecontroller_set_wheel_suspension_compression","wheel_suspension_relaxation","rawdynamicraycastvehiclecontroller_wheel_suspension_relaxation","set_wheel_suspension_relaxation","rawdynamicraycastvehiclecontroller_set_wheel_suspension_relaxation","wheel_max_suspension_force","rawdynamicraycastvehiclecontroller_wheel_max_suspension_force","set_wheel_max_suspension_force","rawdynamicraycastvehiclecontroller_set_wheel_max_suspension_force","wheel_brake","rawdynamicraycastvehiclecontroller_wheel_brake","set_wheel_brake","rawdynamicraycastvehiclecontroller_set_wheel_brake","wheel_steering","rawdynamicraycastvehiclecontroller_wheel_steering","set_wheel_steering","rawdynamicraycastvehiclecontroller_set_wheel_steering","wheel_engine_force","rawdynamicraycastvehiclecontroller_wheel_engine_force","set_wheel_engine_force","rawdynamicraycastvehiclecontroller_set_wheel_engine_force","wheel_direction_cs","rawdynamicraycastvehiclecontroller_wheel_direction_cs","set_wheel_direction_cs","rawdynamicraycastvehiclecontroller_set_wheel_direction_cs","wheel_axle_cs","rawdynamicraycastvehiclecontroller_wheel_axle_cs","set_wheel_axle_cs","rawdynamicraycastvehiclecontroller_set_wheel_axle_cs","wheel_friction_slip","rawdynamicraycastvehiclecontroller_wheel_friction_slip","set_wheel_friction_slip","rawdynamicraycastvehiclecontroller_set_wheel_friction_slip","wheel_side_friction_stiffness","rawdynamicraycastvehiclecontroller_wheel_side_friction_stiffness","set_wheel_side_friction_stiffness","stiffness","rawdynamicraycastvehiclecontroller_set_wheel_side_friction_stiffness","wheel_rotation","rawdynamicraycastvehiclecontroller_wheel_rotation","wheel_forward_impulse","rawdynamicraycastvehiclecontroller_wheel_forward_impulse","wheel_side_impulse","rawdynamicraycastvehiclecontroller_wheel_side_impulse","wheel_suspension_force","rawdynamicraycastvehiclecontroller_wheel_suspension_force","wheel_contact_normal_ws","rawdynamicraycastvehiclecontroller_wheel_contact_normal_ws","wheel_contact_point_ws","rawdynamicraycastvehiclecontroller_wheel_contact_point_ws","wheel_suspension_length","rawdynamicraycastvehiclecontroller_wheel_suspension_length","wheel_hard_point_ws","rawdynamicraycastvehiclecontroller_wheel_hard_point_ws","wheel_is_in_contact","rawdynamicraycastvehiclecontroller_wheel_is_in_contact","wheel_ground_object","rawdynamicraycastvehiclecontroller_wheel_ground_object","RawEventQueueFinalization","__wbg_raweventqueue_free","RawEventQueue","autoDrain","raweventqueue_new","drainCollisionEvents","raweventqueue_drainCollisionEvents","drainContactForceEvents","raweventqueue_drainContactForceEvents","clear","raweventqueue_clear","RawGenericJointFinalization","__wbg_rawgenericjoint_free","RawGenericJoint","generic","anchor1","anchor2","lockedAxes","rawgenericjoint_generic","spring","rest_length","damping","rawgenericjoint_spring","rope","rawgenericjoint_rope","spherical","rawgenericjoint_spherical","prismatic","limitsEnabled","limitsMin","limitsMax","rawgenericjoint_prismatic","fixed","axes1","axes2","rawgenericjoint_fixed","revolute","rawgenericjoint_revolute","RawImpulseJointSetFinalization","__wbg_rawimpulsejointset_free","jointType","rawimpulsejointset_jointType","jointBodyHandle1","rawimpulsejointset_jointBodyHandle1","jointBodyHandle2","rawimpulsejointset_jointBodyHandle2","jointFrameX1","rawimpulsejointset_jointFrameX1","jointFrameX2","rawimpulsejointset_jointFrameX2","jointAnchor1","rawimpulsejointset_jointAnchor1","jointAnchor2","rawimpulsejointset_jointAnchor2","jointSetAnchor1","newPos","rawimpulsejointset_jointSetAnchor1","jointSetAnchor2","rawimpulsejointset_jointSetAnchor2","jointContactsEnabled","rawimpulsejointset_jointContactsEnabled","jointSetContactsEnabled","rawimpulsejointset_jointSetContactsEnabled","jointLimitsEnabled","rawimpulsejointset_jointLimitsEnabled","jointLimitsMin","rawimpulsejointset_jointLimitsMin","jointLimitsMax","rawimpulsejointset_jointLimitsMax","jointSetLimits","min","max","rawimpulsejointset_jointSetLimits","jointConfigureMotorModel","model","rawimpulsejointset_jointConfigureMotorModel","jointConfigureMotorVelocity","targetVel","factor","rawimpulsejointset_jointConfigureMotorVelocity","jointConfigureMotorPosition","targetPos","rawimpulsejointset_jointConfigureMotorPosition","jointConfigureMotor","rawimpulsejointset_jointConfigureMotor","rawimpulsejointset_new","createJoint","params","parent1","parent2","wake_up","rawimpulsejointset_createJoint","rawimpulsejointset_remove","rawimpulsejointset_len","rawimpulsejointset_contains","forEachJointHandle","rawimpulsejointset_forEachJointHandle","forEachJointAttachedToRigidBody","body","rawimpulsejointset_forEachJointAttachedToRigidBody","RawIntegrationParametersFinalization","__wbg_rawintegrationparameters_free","rawintegrationparameters_new","rawintegrationparameters_dt","contact_erp","rawintegrationparameters_contact_erp","normalizedAllowedLinearError","rawintegrationparameters_normalizedAllowedLinearError","normalizedPredictionDistance","numSolverIterations","rawintegrationparameters_numSolverIterations","numAdditionalFrictionIterations","rawintegrationparameters_numAdditionalFrictionIterations","numInternalPgsIterations","rawintegrationparameters_numInternalPgsIterations","minIslandSize","maxCcdSubsteps","rawintegrationparameters_maxCcdSubsteps","lengthUnit","rawintegrationparameters_lengthUnit","rawintegrationparameters_set_dt","contact_natural_frequency","rawintegrationparameters_set_contact_natural_frequency","rawintegrationparameters_set_normalizedAllowedLinearError","rawintegrationparameters_set_normalizedPredictionDistance","rawintegrationparameters_set_numSolverIterations","rawintegrationparameters_set_numAdditionalFrictionIterations","rawintegrationparameters_set_numInternalPgsIterations","rawintegrationparameters_set_minIslandSize","rawintegrationparameters_set_maxCcdSubsteps","rawintegrationparameters_set_lengthUnit","switchToStandardPgsSolver","rawintegrationparameters_switchToStandardPgsSolver","switchToSmallStepsPgsSolver","rawintegrationparameters_switchToSmallStepsPgsSolver","switchToSmallStepsPgsSolverWithoutWarmstart","rawintegrationparameters_switchToSmallStepsPgsSolverWithoutWarmstart","RawIslandManagerFinalization","__wbg_rawislandmanager_free","rawislandmanager_new","forEachActiveRigidBodyHandle","rawislandmanager_forEachActiveRigidBodyHandle","RawKinematicCharacterControllerFinalization","__wbg_rawkinematiccharactercontroller_free","RawKinematicCharacterController","offset","rawkinematiccharactercontroller_new","up","setUp","vector","rawkinematiccharactercontroller_setUp","normalNudgeFactor","rawkinematiccharactercontroller_normalNudgeFactor","setNormalNudgeFactor","rawkinematiccharactercontroller_setNormalNudgeFactor","setOffset","rawkinematiccharactercontroller_setOffset","slideEnabled","rawkinematiccharactercontroller_slideEnabled","setSlideEnabled","rawkinematiccharactercontroller_setSlideEnabled","autostepMaxHeight","rawkinematiccharactercontroller_autostepMaxHeight","autostepMinWidth","rawkinematiccharactercontroller_autostepMinWidth","autostepIncludesDynamicBodies","rawkinematiccharactercontroller_autostepIncludesDynamicBodies","autostepEnabled","rawkinematiccharactercontroller_autostepEnabled","enableAutostep","maxHeight","minWidth","includeDynamicBodies","rawkinematiccharactercontroller_enableAutostep","disableAutostep","rawkinematiccharactercontroller_disableAutostep","maxSlopeClimbAngle","rawkinematiccharactercontroller_maxSlopeClimbAngle","setMaxSlopeClimbAngle","angle","rawkinematiccharactercontroller_setMaxSlopeClimbAngle","minSlopeSlideAngle","rawkinematiccharactercontroller_minSlopeSlideAngle","setMinSlopeSlideAngle","rawkinematiccharactercontroller_setMinSlopeSlideAngle","snapToGroundDistance","rawkinematiccharactercontroller_snapToGroundDistance","enableSnapToGround","distance","rawkinematiccharactercontroller_enableSnapToGround","disableSnapToGround","rawkinematiccharactercontroller_disableSnapToGround","snapToGroundEnabled","rawkinematiccharactercontroller_snapToGroundEnabled","computeColliderMovement","collider_handle","desired_translation_delta","apply_impulses_to_dynamic_bodies","character_mass","rawkinematiccharactercontroller_computeColliderMovement","Math","fround","computedMovement","rawkinematiccharactercontroller_computedMovement","computedGrounded","rawkinematiccharactercontroller_computedGrounded","numComputedCollisions","rawkinematiccharactercontroller_numComputedCollisions","computedCollision","collision","rawkinematiccharactercontroller_computedCollision","RawMultibodyJointSetFinalization","__wbg_rawmultibodyjointset_free","rawmultibodyjointset_jointType","rawmultibodyjointset_jointFrameX1","rawmultibodyjointset_jointFrameX2","rawmultibodyjointset_jointAnchor1","rawmultibodyjointset_jointAnchor2","rawmultibodyjointset_jointContactsEnabled","rawmultibodyjointset_jointSetContactsEnabled","rawmultibodyjointset_jointLimitsEnabled","rawmultibodyjointset_jointLimitsMin","rawmultibodyjointset_jointLimitsMax","rawmultibodyjointset_new","rawmultibodyjointset_createJoint","rawmultibodyjointset_remove","rawmultibodyjointset_contains","rawmultibodyjointset_forEachJointHandle","rawmultibodyjointset_forEachJointAttachedToRigidBody","RawNarrowPhaseFinalization","__wbg_rawnarrowphase_free","rawnarrowphase_new","contact_pairs_with","handle1","rawnarrowphase_contact_pairs_with","contact_pair","handle2","rawnarrowphase_contact_pair","intersection_pairs_with","rawnarrowphase_intersection_pairs_with","intersection_pair","rawnarrowphase_intersection_pair","RawPhysicsPipelineFinalization","__wbg_rawphysicspipeline_free","RawPhysicsPipeline","rawphysicspipeline_new","step","gravity","integrationParameters","broadPhase","narrowPhase","joints","articulations","ccd_solver","rawphysicspipeline_step","stepWithEvents","eventQueue","hookObject","hookFilterContactPair","hookFilterIntersectionPair","rawphysicspipeline_stepWithEvents","RawPidControllerFinalization","__wbg_rawpidcontroller_free","RawPidController","kp","ki","kd","axes_mask","rawpidcontroller_new","set_kp","axes","rawpidcontroller_set_kp","set_ki","rawpidcontroller_set_ki","set_kd","rawpidcontroller_set_kd","set_axes_mask","rawpidcontroller_set_axes_mask","reset_integrals","rawpidcontroller_reset_integrals","apply_linear_correction","rb_handle","target_translation","target_linvel","rawpidcontroller_apply_linear_correction","apply_angular_correction","target_rotation","target_angvel","rawpidcontroller_apply_angular_correction","linear_correction","rawpidcontroller_linear_correction","angular_correction","rawpidcontroller_angular_correction","RawPointColliderProjectionFinalization","__wbg_rawpointcolliderprojection_free","RawPointColliderProjection","rawpointcolliderprojection_colliderHandle","rawpointcolliderprojection_point","isInside","rawpointcolliderprojection_isInside","featureType","rawpointcolliderprojection_featureType","featureId","rawpointcolliderprojection_featureId","RawPointProjectionFinalization","__wbg_rawpointprojection_free","rawpointprojection_point","rawpointprojection_isInside","RawQueryPipelineFinalization","__wbg_rawquerypipeline_free","rawquerypipeline_new","update","rawquerypipeline_update","castRay","filter_exclude_collider","filter_exclude_rigid_body","rawquerypipeline_castRay","RawRayColliderHit","castRayAndGetNormal","rawquerypipeline_castRayAndGetNormal","RawRayColliderIntersection","intersectionsWithRay","callback","rawquerypipeline_intersectionsWithRay","intersectionWithShape","shapePos","shapeRot","rawquerypipeline_intersectionWithShape","projectPoint","rawquerypipeline_projectPoint","projectPointAndGetFeature","rawquerypipeline_projectPointAndGetFeature","intersectionsWithPoint","rawquerypipeline_intersectionsWithPoint","castShape","shapeVel","rawquerypipeline_castShape","intersectionsWithShape","rawquerypipeline_intersectionsWithShape","collidersWithAabbIntersectingAabb","aabbCenter","aabbHalfExtents","rawquerypipeline_collidersWithAabbIntersectingAabb","RawRayColliderHitFinalization","__wbg_rawraycolliderhit_free","timeOfImpact","RawRayColliderIntersectionFinalization","__wbg_rawraycolliderintersection_free","RawRayIntersectionFinalization","__wbg_rawrayintersection_free","RawRigidBodySetFinalization","__wbg_rawrigidbodyset_free","rbTranslation","rawrigidbodyset_rbTranslation","rbRotation","rawrigidbodyset_rbRotation","rbSleep","rawrigidbodyset_rbSleep","rbIsSleeping","rawrigidbodyset_rbIsSleeping","rbIsMoving","rawrigidbodyset_rbIsMoving","rbNextTranslation","rawrigidbodyset_rbNextTranslation","rbNextRotation","rawrigidbodyset_rbNextRotation","rbSetTranslation","rawrigidbodyset_rbSetTranslation","rbSetRotation","rawrigidbodyset_rbSetRotation","rbSetLinvel","linvel","rawrigidbodyset_rbSetLinvel","rbSetAngvel","angvel","rawrigidbodyset_rbSetAngvel","rbSetNextKinematicTranslation","rawrigidbodyset_rbSetNextKinematicTranslation","rbSetNextKinematicRotation","rawrigidbodyset_rbSetNextKinematicRotation","rbRecomputeMassPropertiesFromColliders","rawrigidbodyset_rbRecomputeMassPropertiesFromColliders","rbSetAdditionalMass","rawrigidbodyset_rbSetAdditionalMass","rbSetAdditionalMassProperties","rawrigidbodyset_rbSetAdditionalMassProperties","rbLinvel","rawrigidbodyset_rbLinvel","rbAngvel","rawrigidbodyset_rbAngvel","rbLockTranslations","locked","rawrigidbodyset_rbLockTranslations","rbSetEnabledTranslations","allow_x","allow_y","allow_z","rawrigidbodyset_rbSetEnabledTranslations","rbLockRotations","rawrigidbodyset_rbLockRotations","rbSetEnabledRotations","rawrigidbodyset_rbSetEnabledRotations","rbDominanceGroup","rawrigidbodyset_rbDominanceGroup","rbSetDominanceGroup","group","rawrigidbodyset_rbSetDominanceGroup","rbEnableCcd","rawrigidbodyset_rbEnableCcd","rbSetSoftCcdPrediction","rawrigidbodyset_rbSetSoftCcdPrediction","rbMass","rawrigidbodyset_rbMass","rbInvMass","rawrigidbodyset_rbInvMass","rbEffectiveInvMass","rawrigidbodyset_rbEffectiveInvMass","rbLocalCom","rawrigidbodyset_rbLocalCom","rbWorldCom","rawrigidbodyset_rbWorldCom","rbInvPrincipalInertiaSqrt","rawrigidbodyset_rbInvPrincipalInertiaSqrt","rbPrincipalInertiaLocalFrame","rawrigidbodyset_rbPrincipalInertiaLocalFrame","rbPrincipalInertia","rawrigidbodyset_rbPrincipalInertia","rbEffectiveWorldInvInertiaSqrt","rawrigidbodyset_rbEffectiveWorldInvInertiaSqrt","RawSdpMatrix3","rbEffectiveAngularInertia","rawrigidbodyset_rbEffectiveAngularInertia","rbWakeUp","rawrigidbodyset_rbWakeUp","rbIsCcdEnabled","rawrigidbodyset_rbIsCcdEnabled","rbSoftCcdPrediction","rawrigidbodyset_rbSoftCcdPrediction","rbNumColliders","rawrigidbodyset_rbNumColliders","rbCollider","at","rawrigidbodyset_rbCollider","rbBodyType","rawrigidbodyset_rbBodyType","rbSetBodyType","status","rawrigidbodyset_rbSetBodyType","rbIsFixed","rawrigidbodyset_rbIsFixed","rbIsKinematic","rawrigidbodyset_rbIsKinematic","rbIsDynamic","rawrigidbodyset_rbIsDynamic","rbLinearDamping","rawrigidbodyset_rbLinearDamping","rbAngularDamping","rawrigidbodyset_rbAngularDamping","rbSetLinearDamping","rawrigidbodyset_rbSetLinearDamping","rbSetAngularDamping","rawrigidbodyset_rbSetAngularDamping","rbSetEnabled","rawrigidbodyset_rbSetEnabled","rbIsEnabled","rawrigidbodyset_rbIsEnabled","rbGravityScale","rawrigidbodyset_rbGravityScale","rbSetGravityScale","rawrigidbodyset_rbSetGravityScale","rbResetForces","rawrigidbodyset_rbResetForces","rbResetTorques","rawrigidbodyset_rbResetTorques","rbAddForce","force","rawrigidbodyset_rbAddForce","rbApplyImpulse","impulse","rawrigidbodyset_rbApplyImpulse","rbAddTorque","torque","rawrigidbodyset_rbAddTorque","rbApplyTorqueImpulse","torque_impulse","rawrigidbodyset_rbApplyTorqueImpulse","rbAddForceAtPoint","rawrigidbodyset_rbAddForceAtPoint","rbApplyImpulseAtPoint","rawrigidbodyset_rbApplyImpulseAtPoint","rbAdditionalSolverIterations","rawrigidbodyset_rbAdditionalSolverIterations","rbSetAdditionalSolverIterations","iters","rawrigidbodyset_rbSetAdditionalSolverIterations","rbUserData","rawrigidbodyset_rbUserData","rbSetUserData","data","rawrigidbodyset_rbSetUserData","rbUserForce","rawrigidbodyset_rbUserForce","rbUserTorque","rawrigidbodyset_rbUserTorque","rawrigidbodyset_new","createRigidBody","gravityScale","massOnly","translationEnabledX","translationEnabledY","translationEnabledZ","rotationEnabledX","rotationEnabledY","rotationEnabledZ","linearDamping","angularDamping","rb_type","canSleep","sleeping","softCcdPrediction","ccdEnabled","dominanceGroup","additional_solver_iterations","rawrigidbodyset_createRigidBody","rawrigidbodyset_remove","rawrigidbodyset_contains","forEachRigidBodyHandle","rawrigidbodyset_forEachRigidBodyHandle","propagateModifiedBodyPositionsToColliders","rawrigidbodyset_propagateModifiedBodyPositionsToColliders","RawRotationFinalization","__wbg_rawrotation_free","rawrotation_new","identity","rawrotation_identity","rawrotation_x","rawrotation_w","RawSdpMatrix3Finalization","__wbg_rawsdpmatrix3_free","elements","rawsdpmatrix3_elements","RawSerializationPipelineFinalization","__wbg_rawserializationpipeline_free","RawSerializationPipeline","rawserializationpipeline_new","serializeAll","rawserializationpipeline_serializeAll","deserializeAll","rawserializationpipeline_deserializeAll","RawShapeFinalization","__wbg_rawshape_free","cuboid","hx","hy","hz","rawshape_cuboid","roundCuboid","borderRadius","rawshape_roundCuboid","ball","rawshape_ball","halfspace","rawshape_halfspace","capsule","halfHeight","rawshape_capsule","cylinder","rawshape_cylinder","roundCylinder","rawshape_roundCylinder","cone","rawshape_cone","roundCone","rawshape_roundCone","polyline","indices","ptr0","__wbindgen_export_2","len0","ptr1","len1","rawshape_polyline","trimesh","flags","rawshape_trimesh","heightfield","nrows","ncols","heights","scale","rawshape_heightfield","segment","p1","p2","rawshape_segment","triangle","p3","rawshape_triangle","roundTriangle","rawshape_roundTriangle","convexHull","points","rawshape_convexHull","roundConvexHull","rawshape_roundConvexHull","convexMesh","rawshape_convexMesh","roundConvexMesh","rawshape_roundConvexMesh","shapePos1","shapeRot1","shapeVel1","shapeVel2","rawshape_castShape","intersectsShape","rawshape_intersectsShape","contactShape","rawshape_contactShape","containsPoint","rawshape_containsPoint","rawshape_projectPoint","intersectsRay","rawshape_intersectsRay","rawshape_castRay","rawshape_castRayAndGetNormal","RawShapeCastHitFinalization","__wbg_rawshapecasthit_free","rawshapecasthit_witness1","rawshapecasthit_normal1","rawshapecasthit_normal2","RawShapeContactFinalization","__wbg_rawshapecontact_free","point1","point2","RawVectorFinalization","__wbg_rawvector_free","zero","rawvector_zero","rawvector_new","rawvector_set_x","rawvector_set_z","xyz","rawvector_xyz","yxz","rawvector_yxz","zxy","rawvector_zxy","xzy","rawvector_xzy","yzx","rawvector_yzx","zyx","rawvector_zyx","__wbg_bind_c8359b1cba058168","arg0","arg1","arg2","arg3","bind","__wbg_buffer_609cc3eee51ed158","__wbg_call_7cccdd69e0791ae2","call","arguments","__wbg_call_833bed5770ea2041","__wbg_call_b8adc8b1d0a0d8eb","arg4","__wbg_length_3b4f022188ae8db6","__wbg_length_a446193dc22c12f8","__wbg_new_a12002a7f91c75be","__wbg_newwithbyteoffsetandlength_d97e637ebe145a9a","__wbg_newwithbyteoffsetandlength_e6b7e69acd4c7354","__wbg_newwithlength_5a5efe313cfd59f1","__wbg_rawcontactforceevent_new","__wbg_rawraycolliderintersection_new","__wbg_set_10bad9bee0e9c58b","__wbg_set_65595bdd868b3009","__wbindgen_boolean_get","v","__wbindgen_is_function","__wbindgen_memory","__wbindgen_number_get","setFloat64","setInt32","__wbindgen_number_new","__wbindgen_object_drop_ref","__wbindgen_throw","BroadPhase","raw","IntegrationParameters","DynamicRayCastVehicleController","_chassis","updateVehicle","filterFlags","filterGroups","filterPredicate","castClosure","currentVehicleSpeed","indexUpAxis","indexForwardAxis","setIndexForwardAxis","addWheel","chassisConnectionCs","directionCs","axleCs","suspensionRestLength","rawChassisConnectionCs","intoRaw","rawDirectionCs","rawAxleCs","numWheels","wheelChassisConnectionPointCs","fromRaw","setWheelChassisConnectionPointCs","rawValue","wheelSuspensionRestLength","setWheelSuspensionRestLength","wheelMaxSuspensionTravel","setWheelMaxSuspensionTravel","wheelRadius","setWheelRadius","wheelSuspensionStiffness","setWheelSuspensionStiffness","wheelSuspensionCompression","setWheelSuspensionCompression","wheelSuspensionRelaxation","setWheelSuspensionRelaxation","wheelMaxSuspensionForce","setWheelMaxSuspensionForce","wheelBrake","setWheelBrake","wheelSteering","setWheelSteering","wheelEngineForce","setWheelEngineForce","wheelDirectionCs","setWheelDirectionCs","wheelAxleCs","setWheelAxleCs","wheelFrictionSlip","setWheelFrictionSlip","wheelSideFrictionStiffness","setWheelSideFrictionStiffness","wheelRotation","wheelForwardImpulse","wheelSideImpulse","wheelSuspensionForce","wheelContactNormal","wheelContactPoint","wheelSuspensionLength","wheelHardPoint","wheelIsInContact","wheelGroundObject","get","ShapeContact","dist","result","NarrowPhase","tempManifold","TempContactManifold","contactPairsWith","intersectionPairsWith","contactPair","rawPair","flipped","intersectionPair","localNormal1","localNormal2","numContacts","localContactPoint1","localContactPoint2","contactDist","contactFid1","contactFid2","contactImpulse","contactTangentImpulseX","contactTangentImpulseY","numSolverContacts","solverContactPoint","solverContactDist","solverContactFriction","solverContactRestitution","solverContactTangentVelocity","QueryFilterFlags","QueryPipeline","ray","filterExcludeCollider","filterExcludeRigidBody","rawOrig","origin","rawDir","dir","rawInter","rawPos","rawRot","rawShape","rawPoint","targetDistance","stopAtPenetration","rawVel","rawCenter","rawHalfExtents","RigidBodyType","RigidBody","rawSet","colliderSet","finalizeDeserialization","isValid","lockTranslations","lockRotations","setEnabledTranslations","enableX","enableY","enableZ","restrictTranslations","setEnabledRotations","restrictRotations","setDominanceGroup","additionalSolverIterations","setAdditionalSolverIterations","enableCcd","setSoftCcdPrediction","res","nextTranslation","nextRotation","setTranslation","tra","setLinvel","vel","setGravityScale","setRotation","rot","setAngvel","setNextKinematicTranslation","t","setNextKinematicRotation","effectiveInvMass","invMass","localCom","worldCom","invPrincipalInertiaSqrt","principalInertia","principalInertiaLocalFrame","effectiveWorldInvInertiaSqrt","effectiveAngularInertia","sleep","isCcdEnabled","numColliders","collider","setEnabled","isEnabled","bodyType","setBodyType","type","isSleeping","isMoving","isFixed","isKinematic","isDynamic","setLinearDamping","recomputeMassPropertiesFromColliders","setAdditionalMass","setAdditionalMassProperties","angularInertiaLocalFrame","rawCom","rawPrincipalInertia","rawInertiaFrame","setAngularDamping","resetForces","resetTorques","addForce","rawForce","applyImpulse","rawImpulse","addTorque","rawTorque","applyTorqueImpulse","torqueImpulse","rawTorqueImpulse","addForceAtPoint","applyImpulseAtPoint","userForce","userTorque","RigidBodyDesc","zeros","translationsEnabledX","translationsEnabledY","translationsEnabledZ","rotationsEnabledX","rotationsEnabledY","rotationsEnabledZ","dynamic","kinematicPositionBased","kinematicVelocityBased","newDynamic","newKinematicPositionBased","newKinematicVelocityBased","newStatic","TypeError","copy","enabledTranslations","enabledRotations","setCanSleep","can","setSleeping","setCcdEnabled","setUserData","userData","ImpulseJointSet","map","newTyped","forEach","joint","desc","rawParams","unmap","forEachJointHandleAttachedToRigidBody","delete","getAll","ShapeCastHit","ColliderShapeCastHit","super","RigidBodySet","rb","rawTra","rawLv","rawAv","impulseJoints","multibodyJoints","forEachActiveRigidBody","ColliderSet","parentHandle","isNaN","RAPIER","init","_defineProperty","_GameCore","Game","_classCallCheck","_inherits","GameCore","MultibodyJointSet","CoefficientCombineRule","PidAxesMask","PidController","setKp","setKi","setKd","setAxes","resetIntegrals","applyLinearCorrection","targetPosition","targetLinvel","applyAngularCorrection","targetRotation","targetAngVel","linearCorrection","correction","angularCorrection","ActiveHooks","SolverFlags","ActiveEvents","TempContactForceEvent","totalForce","totalForceMagnitude","maxForceDirection","maxForceMagnitude","EventQueue","event","Ray","pointAt","RayIntersection","RayColliderIntersection","RayColliderHit","JointType","MotorModel","JointAxesMask","ImpulseJoint","bodySet","RevoluteImpulseJoint","PrismaticImpulseJoint","FixedImpulseJoint","SpringImpulseJoint","RopeImpulseJoint","SphericalImpulseJoint","GenericImpulseJoint","body1","body2","frameX1","frameX2","setAnchor1","setAnchor2","setContactsEnabled","contactsEnabled","UnitImpulseJoint","rawAxis","setLimits","configureMotorModel","configureMotorVelocity","configureMotorPosition","configureMotor","JointData","frame1","frame2","axesMask","rawAx","rawA1","rawA2","rawFra1","rawFra2","limits","rawAxesMask","SerializationPipeline","rawGra","IslandManager","CCDSolver","PhysicsPipeline","ccdSolver","rawG","filterContactPair","filterIntersectionPair","HUD","element","healthBar","querySelector","ammoCounter","weaponInfo","statusMessages","health","ammo","weapon","messages","messageTimer","initialize","key","updateHealthBar","updateAmmoCounter","updateWeaponInfo","style","width","concat","backgroundColor","textContent","message","_this","duration","text","timestamp","Date","now","updateStatusMessages","setInterval","checkMessagesTimeout","_this2","innerHTML","msg","messageElement","document","createElement","className","appendChild","hasRemovedMessages","filter","isExpired","clearInterval","classList","add","InventoryUI","gridElement","equippedElement","inventory","items","maxSlots","equipped","armor","helmet","createInventorySlots","createEquippedSlots","setupDragAndDrop","slot","dataset","slotIndex","id","label","slotInfo","slotContainer","slotType","querySelectorAll","addEventListener","console","log","updateInventoryDisplay","updateEquippedDisplay","slots","item","index","itemElement","itemId","weaponSlot","weaponElement","armorSlot","armorElement","helmetSlot","helmetElement","head","addInventoryStyles","_regeneratorRuntime","r","n","hasOwnProperty","o","defineProperty","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","Context","makeInvokeMethod","tryCatch","h","l","s","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","values","g","defineIteratorMethods","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","displayName","isGeneratorFunction","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","stop","rval","complete","finish","delegateYield","asyncGeneratorStep","_defineProperties","_toPropertyKey","toPrimitive","String","_toPrimitive","GameUI","game","loadingScreen","getElementById","mainMenu","gameCanvas","hudElement","inventoryScreen","loadingStatus","components","hud","_callee","_context","_initComponents","_next","_throw","errorScreen","errorMessage","reloadButton","window","location","reload","state","currentScene","world","player","showInventory","hideInventory","show","input","disableGameControls","hide","enableGameControls","Player","options","isLocalPlayer","position","direction","maxHealth","speed","weaponType","fireRate","recoil","isRunning","isAiming","isShooting","canShoot","lastShootTime","currentState","viewAngle","normalViewAngle","aimingViewAngle","runningViewAngle","viewDistance","normalSpeed","runningSpeed","aimingSpeed","acceleration","velocity","renderer","mesh","setupControls","createModel","addPlayer","setMouseDownCallback","button","startAiming","setMouseUpCallback","stopAiming","setRightClickCallback","tryShoot","setMouseMoveCallback","delta","handleMouseMove","currentTime","setTimeout","applyRecoil","createShot","network","sendPlayerShoot","recoilX","random","recoilY","abs","mousePos","getMousePosition","newMousePos","canvasRect","canvas","getBoundingClientRect","canvasCenter","left","top","height","mouseVec","sqrt","atan2","sin","cos","deltaTime","handleMovement","updateCamera","handleRunning","updateAnimationState","updateModel","wasRunning","isKeyPressed","newState","moveDir","getMovementDirection","normalizedDir","newX","newZ","canMoveX","checkCollision","canMoveZ","sendPlayerMove","newPosition","scene","rayStart","_objectSpread","rayEnd","createTemporaryBeam","updateObjectTransform","_asyncToGenerator","VisionSystem","fov","rayCount","maxDistance","memoryEnabled","blurEdges","normalFov","aimingFov","runningFov","visibilityMask","memoryMask","visibilityShape","currentVisionMesh","cellSize","gridSize","gridResolution","ceil","memoryGrid","isInitialized","isRapierReady","isRapierChecked","initializationPromise","lastErrorTime","updateInterval","lastUpdateTime","errorCooldown","visibilityGroup","THREE","Group","error","_init","_callee2","_context2","_ref","initVisibilityLayers","checkRapierAvailability","t0","_x","_checkRapierAvailability","_callee3","_context3","checkRapier","getRapierInstance","createFogOfWarLayer","createMemoryLayer","createVisionConeLayer","fogGeometry","PlaneGeometry","fogMaterial","MeshBasicMaterial","color","transparent","opacity","side","DoubleSide","depthTest","depthWrite","fogOfWarMesh","Mesh","PI","renderOrder","gridGeometry","memoryMaterial","ShaderMaterial","uniforms","colorInfluence","vertexShader","fragmentShader","memoryMesh","visibilityAttribute","attributes","count","setAttribute","BufferAttribute","initialShape","Shape","moveTo","lineTo","maskMaterial","worldSize","maskGeometry","playerPos","playerDirection","getViewDirection","currentFov","fovRadians","directionAngle","updateVisionMask","updateMemoryMap","_this3","warn","halfFov","angles","Vector2","endPoint","hit","hasHit","impactDistance","markVisitedArea","clone","updateVisibilityShape","outerShape","holes","geometry","dispose","ShapeGeometry","halfGridSize","gridX","floor","gridZ","dx","dz","nx","nz","material","j","GameWorld","entities","visionSystem","_initialize","createTestWalls","initVisionSystem","entity","fixedUpdate","_initVisionSystem","physics","getWorld","isReady","wallMaterial","MeshStandardMaterial","roughness","metalness","createWall","depth","BoxGeometry","createObstacle","size","object","indexOf","splice","GameState","isLoading","isPaused","fogOfWarEnabled","visibilitySystemEnabled","pauseGame","resumeGame","lastFrameTime","performance","requestAnimationFrame","ui","GameEvents","handleGlobalError","handlePromiseError","startGameButton","startGame","settingsButton","closeInventoryButton","addKeyCallback","isInScene","toggleInventory","togglePause","vkBridge","send","filename","lineno","showErrorScreen","preventDefault","_event$reason","reason","Renderer","camera","lights","models","textures","temporaryObjects","Scene","background","Color","aspect","innerWidth","innerHeight","PerspectiveCamera","lookAt","WebGLRenderer","antialias","setSize","setPixelRatio","devicePixelRatio","shadowMap","setupLights","createGround","updateProjectionMatrix","directionalLight","DirectionalLight","castShadow","shadow","mapSize","near","far","right","bottom","ambientLight","AmbientLight","groundGeometry","groundMaterial","ground","receiveShadow","start","end","LineBasicMaterial","BufferGeometry","Vector3","setFromPoints","line","Line","tempObject","endTime","removeTemporaryObject","tempObj","playerData","CylinderGeometry","playerMesh","weaponGeometry","weaponMaterial","playerPosition","cleanTemporaryObjects","quality","PCFShadowMap","PCFSoftShadowMap","itemData","SphereGeometry","itemMesh","npcData","npcMesh","InputHandler","mouse","isDown","rightIsDown","lastMousePosition","keyCallbacks","clickCallback","rightClickCallback","mouseMoveCallback","mouseDownCallback","mouseUpCallback","gameControlsEnabled","mouseSensitivity","handleKeyDown","handleKeyUp","handleMouseDown","handleMouseUp","handleContextMenu","userSelect","code","clientX","clientY","deltaX","deltaY","sensitivity","dirX","dirZ","removeEventListener","NetworkManager","socket","connected","serverUrl","mockMode","eventHandlers","connect","disconnect","playerMove","playerShoot","playerDamage","itemPickup","npcSpawn","npcMove","gameState","mockData","players","npcs","playerId","generateMockData","handler","startMockNpcMovement","properties","npc","moveX","moveZ","itemType","_createClass","initRapier","_initRapier","rapier","RAPIER_LOADER","loadRapier","_initialized","t1","waitForRapierWithTimeout","t2","World","StubWorld","ColliderDesc","StubRay","_waitForRapierWithTimeout","maxWaitTime","reject","attempts","startTime","PhysicsManager","Map","initPromise","_this$RAPIER$World","getRapier","timestep","updateBodies","_step","_iterator","_createForOfIteratorHelper","_step$value","_slicedToArray","getTranslation","updatePhysics","err","rigidBodyDesc","colliderDesc","rigidBody","has","removeRigidBody","debugLog","gameTime","physicsUpdateRate","physicsAccumulator","updateLoadingStatus","initBaseComponents","loadResources","showMainMenu","_initBaseComponents","initComponents","setupEventListeners","_loadResources","_startGame","_callee4","_context4","hideMainMenu","showGameScreen","setupScene","isConnected","clampedDeltaTime","cssText","VectorOps","new","out","Quaternion","RotationOps","SdpMatrix3","m11","m12","m21","m13","m31","m22","m23","m32","m33","SdpMatrix3Ops","sdpMatrix3","MultibodyJoint","RevoluteMultibodyJoint","PrismaticMultibodyJoint","FixedMultibodyJoint","SphericalMultibodyJoint","UnitMultibodyJoint","FeatureType","Coarena","fconv","Float64Array","uconv","elt","PointProjection","PointColliderProjection","CharacterCollision","KinematicCharacterController","rawCharacterCollision","_applyImpulsesToDynamicBodies","_characterMass","rawVect","applyImpulsesToDynamicBodies","setApplyImpulsesToDynamicBodies","characterMass","setCharacterMass","desiredTranslationDelta","rawTranslationDelta","ShapeType","HeightFieldFlags","TriMeshFlags","rawType","extents","vs","tri_flags","hf_flags","Heightfield","rawPos1","rawRot1","rawVel1","rawPos2","rawRot2","rawVel2","rawShape1","rawShape2","rawRayOrig","rawRayDir","halfExtents","b","ra","rc","rawScale","ActiveCollisionTypes","MassPropsMode","Collider","_parent","_shape","ensureShapeIsCached","setSensor","setShape","setRestitution","setFriction","setFrictionCombineRule","setRestitutionCombineRule","setCollisionGroups","setSolverGroups","setContactSkin","thickness","setActiveHooks","setActiveEvents","setContactForceEventThreshold","setActiveCollisionTypes","setDensity","setMass","setMassProperties","setTranslationWrtParent","setRotationWrtParent","shapeType","setHalfExtents","setRadius","roundRadius","setRoundRadius","setHalfHeight","heightfieldHeights","heightfieldScale","heightfieldNRows","heightfieldNCols","volume","rawCollider1Vel","rawShape2Pos","rawShape2Rot","rawShape2Vel","castCollider","rawCollider2Vel","contactCollider","Density","Average","DEFAULT","NONE","sensor","Mass","MassProps","queryPipeline","physicsPipeline","serializationPipeline","debugRenderPipeline","characterControllers","controller","pidControllers","vehicleControllers","rawIntegrationParameters","rawIslands","rawBroadPhase","rawNarrowPhase","rawBodies","rawColliders","rawImpulseJoints","rawMultibodyJoints","rawCCDSolver","rawQueryPipeline","rawPhysicsPipeline","rawSerializationPipeline","rawDebugRenderPipeline","Set","takeSnapshot","restoreSnapshot","debugRender","updateSceneQueries","unitsPerMeter","niter","createCharacterController","removeCharacterController","createPidController","removePidController","createVehicleController","removeVehicleController","createImpulseJoint","createMultibodyJoint","getRigidBody","getCollider","getImpulseJoint","getMultibodyJoint","removeCollider","removeImpulseJoint","removeMultibodyJoint","forEachCollider","forEachRigidBody","DebugRenderBuffers","DebugRenderPipeline","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","loaded","__webpack_modules__","queue","fn","hasAwait","currentDeps","outerResolve","depQueues","promise","rej","deps","dep","wrapDeps","getResult","fnQueue","q","definition","hmd","children","prop","wasmModuleId","wasmModuleHash","importsObj","req","fetch","fallback","arrayBuffer","bytes","WebAssembly","instantiate","assign","instantiateStreaming","headers"],"sourceRoot":""}