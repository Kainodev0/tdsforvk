{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://tds-escape/./client/src/entities/player.js","webpack://tds-escape/./client/src/physics/physics-manager.js","webpack://tds-escape/./client/src/physics/vision-system.js","webpack://tds-escape/./client/src/ui/hud.js","webpack://tds-escape/./client/src/ui/inventory.js","webpack://tds-escape/./client/src/core/input.js","webpack://tds-escape/./client/src/physics/rapier-integration.js","webpack://tds-escape/./client/src/core/renderer.js","webpack://tds-escape/./client/src/core/network.js","webpack://tds-escape/webpack/bootstrap","webpack://tds-escape/./client/src/core/game.js"],"sourcesContent":["// client/src/entities/player.js\n\n/**\n * Класс игрока, управляющий поведением и состоянием персонажа\n */\nexport class Player {\n    /**\n     * @param {Object} options - настройки игрока\n     * @param {Object} options.position - начальная позиция\n     * @param {Object} options.renderer - ссылка на рендерер\n     * @param {Object} options.input - ссылка на обработчик ввода\n     * @param {Object} options.game - ссылка на игровой объект\n     */\n    constructor(options) {\n        // Базовые параметры\n        this.id = options.id || 'local_player';\n        this.isLocalPlayer = options.isLocalPlayer !== undefined ? options.isLocalPlayer : true;\n        \n        // Позиция и вращение\n        this.position = options.position || { x: 0, y: 0, z: 0 };\n        this.rotation = options.rotation || { x: 0, y: 0, z: 0 };\n        this.direction = { x: 0, z: -1 }; // Направление взгляда (по умолчанию вперед)\n        \n        // Характеристики\n        this.health = options.health || 100;\n        this.maxHealth = options.maxHealth || 100;\n        this.speed = options.speed || 5; // базовая скорость движения\n        this.weapon = options.weapon || 'pistol';\n        this.ammo = options.ammo || 30;\n        this.weaponType = 'single'; // 'single' или 'auto'\n        this.fireRate = 500; // задержка между выстрелами в мс (для одиночного оружия)\n        this.recoil = { x: 0.05, y: 0.05 }; // сила отдачи\n        \n        // Инвентарь\n        this.inventory = options.inventory || {\n            items: [],\n            maxSlots: 25 // 5x5 сетка\n        };\n        \n        // Состояния\n        this.isMoving = false;\n        this.isRunning = false;\n        this.isAiming = false;\n        this.isShooting = false;\n        this.canShoot = true; // флаг возможности стрельбы\n        this.lastShootTime = 0;\n        this.currentState = 'idle'; // idle, walk, run, aim, shoot\n        \n        // Параметры обзора\n        this.viewAngle = 90; // начальный угол обзора в градусах\n        this.normalViewAngle = 90;\n        this.aimingViewAngle = 45;\n        this.runningViewAngle = 70; // угол обзора при беге\n        this.viewDistance = 50; // дальность видимости\n        \n        // Параметры движения\n        this.normalSpeed = 5;\n        this.runningSpeed = 7.5; // скорость бега (+50%)\n        this.aimingSpeed = 1.5; // скорость при прицеливании (-70%)\n        this.acceleration = 10; // ускорение для плавности движения\n        this.velocity = { x: 0, z: 0 }; // текущая скорость\n        \n        // Ссылки на другие модули\n        this.renderer = options.renderer;\n        this.input = options.input;\n        this.game = options.game;\n        this.mesh = null; // будет инициализирован при создании модели\n        \n        // Если это локальный игрок, настраиваем управление\n        if (this.isLocalPlayer) {\n            this.setupControls();\n        }\n        \n        // Создаем модель игрока\n        this.createModel();\n    }\n    \n    /**\n     * Создание модели игрока\n     */\n    createModel() {\n        // Если рендерер не доступен, выходим\n        if (!this.renderer) return;\n        \n        // Создаем меш через рендерер\n        this.mesh = this.renderer.addPlayer({\n            position: this.position,\n            rotation: this.rotation,\n            isLocalPlayer: this.isLocalPlayer\n        });\n    }\n    \n    /**\n     * Настройка управления игроком\n     */\n    setupControls() {\n        if (!this.input) return;\n        \n        // Добавляем обработчик ЛКМ для прицеливания\n        this.input.setMouseDownCallback((button, position) => {\n            if (button === 0) { // Левая кнопка\n                this.startAiming();\n            }\n        });\n        \n        // Обработчик отпускания ЛКМ\n        this.input.setMouseUpCallback((button) => {\n            if (button === 0) { // Левая кнопка\n                this.stopAiming();\n            }\n        });\n        \n        // Обработчик ПКМ для стрельбы\n        this.input.setRightClickCallback(() => {\n            this.tryShoot();\n        });\n        \n        // Обработчик движения мыши для вращения\n        this.input.setMouseMoveCallback((position, delta) => {\n            this.handleMouseMove(position);\n        });\n    }\n    \n    /**\n     * Начало прицеливания\n     */\n    startAiming() {\n        this.isAiming = true;\n        this.speed = this.aimingSpeed;\n        this.viewAngle = this.aimingViewAngle;\n        console.log('Начало прицеливания');\n    }\n    \n    /**\n     * Конец прицеливания\n     */\n    stopAiming() {\n        this.isAiming = false;\n        this.speed = this.normalSpeed;\n        this.viewAngle = this.normalViewAngle;\n        console.log('Конец прицеливания');\n    }\n    \n    /**\n     * Попытка выстрела\n     */\n    tryShoot() {\n        // Можно стрелять только если игрок прицеливается\n        if (!this.isAiming || !this.canShoot || this.ammo <= 0) {\n            return;\n        }\n        \n        const currentTime = Date.now();\n        \n        // Проверяем временную задержку между выстрелами\n        if (currentTime - this.lastShootTime < this.fireRate) {\n            return;\n        }\n        \n        // Устанавливаем время последнего выстрела\n        this.lastShootTime = currentTime;\n        \n        // Уменьшаем количество патронов\n        this.ammo--;\n        \n        // Устанавливаем флаг стрельбы (для анимации)\n        this.isShooting = true;\n        setTimeout(() => {\n            this.isShooting = false;\n        }, 100);\n        \n        // Применяем отдачу\n        this.applyRecoil();\n        \n        // Создаем выстрел\n        this.createShot();\n        \n        // Для одиночного оружия добавляем задержку перед следующим выстрелом\n        if (this.weaponType === 'single') {\n            this.canShoot = false;\n            setTimeout(() => {\n                this.canShoot = true;\n            }, this.fireRate);\n        }\n        \n        // Отправляем информацию о выстреле на сервер\n        if (this.game && this.game.network) {\n            this.game.network.sendPlayerShoot(\n                this.position,\n                this.direction,\n                this.weapon\n            );\n        }\n    }\n    \n    /**\n     * Применение отдачи при стрельбе\n     */\n    applyRecoil() {\n        // Случайное смещение прицела в пределах recoil\n        const recoilX = (Math.random() - 0.5) * this.recoil.x * 2;\n        const recoilY = -Math.abs(Math.random() * this.recoil.y); // Всегда вверх\n        \n        // Получаем текущую позицию мыши\n        const mousePos = this.input.getMousePosition();\n        \n        // Симулируем движение мыши с отдачей\n        const newMousePos = {\n            x: mousePos.x + recoilX * 100, // Умножаем для заметного эффекта\n            y: mousePos.y + recoilY * 100\n        };\n        \n        // Обновляем направление игрока\n        this.handleMouseMove(newMousePos);\n    }\n    \n    /**\n     * Обработка движения мыши\n     * @param {Object} position - позиция мыши {x, y}\n     */\n    handleMouseMove(position) {\n        // Получаем размеры канваса\n        const canvasRect = this.renderer.canvas.getBoundingClientRect();\n        const canvasCenter = {\n            x: canvasRect.left + canvasRect.width / 2,\n            y: canvasRect.top + canvasRect.height / 2\n        };\n        \n        // Вычисляем вектор от центра к мыши\n        const mouseVec = {\n            x: position.x - canvasCenter.x,\n            y: position.y - canvasCenter.y\n        };\n        \n        // Нормализуем вектор\n        const length = Math.sqrt(mouseVec.x * mouseVec.x + mouseVec.y * mouseVec.y);\n        if (length > 0) {\n            mouseVec.x /= length;\n            mouseVec.y /= length;\n        }\n        \n        // Вычисляем угол поворота (в радианах)\n        const angle = Math.atan2(mouseVec.x, -mouseVec.y);\n        \n        // Устанавливаем направление игрока\n        this.rotation.y = angle;\n        this.direction = {\n            x: Math.sin(angle),\n            z: -Math.cos(angle)\n        };\n    }\n    \n    /**\n     * Обновление состояния игрока\n     * @param {number} deltaTime - прошедшее время с предыдущего кадра\n     */\n    update(deltaTime) {\n        if (!deltaTime) return;\n        \n        // Только локальный игрок может двигаться сам\n        if (this.isLocalPlayer) {\n            this.handleMovement(deltaTime);\n            \n            // Обновляем камеру для слежения за игроком\n            if (this.renderer) {\n                this.renderer.updateCamera(this.position);\n            }\n            \n            // Обновляем параметры при нажатии Shift (бег)\n            this.handleRunning();\n            \n            // Обновляем состояние анимации\n            this.updateAnimationState();\n        }\n        \n        // Обновляем модель (позицию и анимацию)\n        this.updateModel();\n    }\n    \n    /**\n     * Обработка бега (нажатие Shift)\n     */\n    handleRunning() {\n        if (!this.input) return;\n        \n        const wasRunning = this.isRunning;\n        \n        // Проверяем нажат ли Shift и не в режиме прицеливания\n        if (this.input.isKeyPressed('ShiftLeft') && !this.isAiming) {\n            if (!this.isRunning) {\n                this.isRunning = true;\n                this.speed = this.runningSpeed;\n                this.viewAngle = this.runningViewAngle;\n            }\n        } else if (this.isRunning) {\n            this.isRunning = false;\n            this.speed = this.isAiming ? this.aimingSpeed : this.normalSpeed;\n            this.viewAngle = this.isAiming ? this.aimingViewAngle : this.normalViewAngle;\n        }\n        \n        // Если состояние бега изменилось, сообщаем об этом\n        if (wasRunning !== this.isRunning) {\n            console.log(this.isRunning ? 'Начало бега' : 'Конец бега');\n        }\n    }\n    \n    /**\n     * Обновление состояния анимации\n     */\n    updateAnimationState() {\n        let newState = 'idle';\n        \n        if (this.isMoving) {\n            newState = this.isRunning ? 'run' : 'walk';\n        }\n        \n        if (this.isAiming) {\n            newState = 'aim';\n        }\n        \n        if (this.isShooting) {\n            newState = 'shoot';\n        }\n        \n        if (this.currentState !== newState) {\n            this.currentState = newState;\n            console.log(`Состояние анимации: ${this.currentState}`);\n            \n            // Здесь будет логика смены анимации\n        }\n    }\n    \n    /**\n     * Обработка движения игрока\n     * @param {number} deltaTime - прошедшее время с предыдущего кадра\n     */\n    handleMovement(deltaTime) {\n        if (!this.input) return;\n        \n        // Получаем направление движения\n        const moveDir = this.input.getMovementDirection();\n        \n        // Если вектор движения нулевой, снижаем скорость\n        if (moveDir.x === 0 && moveDir.z === 0) {\n            // Применяем трение для плавной остановки\n            this.velocity.x *= 0.9;\n            this.velocity.z *= 0.9;\n            \n            // Если скорость совсем маленькая, останавливаемся\n            if (Math.abs(this.velocity.x) < 0.01 && Math.abs(this.velocity.z) < 0.01) {\n                this.velocity.x = 0;\n                this.velocity.z = 0;\n                this.isMoving = false;\n            }\n        } else {\n            // Устанавливаем флаг движения\n            this.isMoving = true;\n            \n            // Вычисляем целевую скорость с учетом нормализации\n            const length = Math.sqrt(moveDir.x * moveDir.x + moveDir.z * moveDir.z);\n            const normalizedDir = {\n                x: moveDir.x / length,\n                z: moveDir.z / length\n            };\n            \n            const targetVel = {\n                x: normalizedDir.x * this.speed,\n                z: normalizedDir.z * this.speed\n            };\n            \n            // Плавно изменяем скорость\n            this.velocity.x += (targetVel.x - this.velocity.x) * this.acceleration * deltaTime;\n            this.velocity.z += (targetVel.z - this.velocity.z) * this.acceleration * deltaTime;\n        }\n        \n        // Вычисляем новую позицию\n        const newX = this.position.x + this.velocity.x * deltaTime;\n        const newZ = this.position.z + this.velocity.z * deltaTime;\n        \n        // Проверка столкновений (упрощенная)\n        const canMoveX = this.checkCollision({ x: newX, y: this.position.y, z: this.position.z });\n        const canMoveZ = this.checkCollision({ x: this.position.x, y: this.position.y, z: newZ });\n        \n        // Обновляем позицию\n        if (canMoveX) {\n            this.position.x = newX;\n        } else {\n            this.velocity.x = 0; // Остановка при столкновении\n        }\n        \n        if (canMoveZ) {\n            this.position.z = newZ;\n        } else {\n            this.velocity.z = 0; // Остановка при столкновении\n        }\n        \n        // Отправляем изменения на сервер, если доступно\n        if (this.game && this.game.network) {\n            this.game.network.sendPlayerMove(this.position, this.rotation);\n        }\n    }\n    \n    /**\n     * Упрощенная проверка столкновений\n     * @param {Object} newPosition - новая позиция для проверки\n     * @returns {boolean} - можно ли двигаться на новую позицию\n     */\n    checkCollision(newPosition) {\n        // Проверяем выход за границы карты\n        const mapSize = 500; // Половина размера карты (1000x1000)\n        \n        if (Math.abs(newPosition.x) > mapSize || Math.abs(newPosition.z) > mapSize) {\n            return false;\n        }\n        \n        // Здесь должна быть проверка столкновений с объектами\n        // В прототипе используем только границы карты\n        \n        return true;\n    }\n    \n    /**\n     * Создание выстрела (визуально и логически)\n     */\n    createShot() {\n        // В прототипе создаем простой луч\n        if (this.renderer && this.renderer.scene) {\n            const rayStart = { ...this.position };\n            rayStart.y += 1; // Уровень \"глаз\"\n            \n            const rayEnd = {\n                x: rayStart.x + this.direction.x * 100,\n                y: rayStart.y,\n                z: rayStart.z + this.direction.z * 100\n            };\n            \n            // Создаем временный луч для визуализации выстрела\n            this.renderer.createTemporaryBeam(rayStart, rayEnd, 0xFF0000, 100);\n            \n            console.log('Выстрел!', this.direction);\n        }\n    }\n    \n    /**\n     * Обновление модели игрока\n     */\n    updateModel() {\n        if (this.mesh && this.renderer) {\n            // Обновляем позицию меша\n            this.renderer.updateObjectTransform(this.mesh, this.position, this.rotation);\n            \n            // В будущем здесь будет управление анимациями\n        }\n    }\n    \n    /**\n     * Получение угла обзора\n     * @returns {number} - текущий угол обзора в градусах\n     */\n    getViewAngle() {\n        return this.viewAngle;\n    }\n    \n    /**\n     * Получение дальности обзора\n     * @returns {number} - текущая дальность обзора\n     */\n    getViewDistance() {\n        return this.viewDistance;\n    }\n    \n    /**\n     * Получение направления взгляда\n     * @returns {Object} - вектор направления {x, z}\n     */\n    getViewDirection() {\n        return { ...this.direction };\n    }\n}","/**\n * Менеджер физики, отвечающий за инициализацию и управление физикой игры\n * Использует Rapier.js для физических расчетов\n */\nimport { initRapier, isRapierAvailable, getRapier } from './rapier-integration.js';\n\nexport class PhysicsManager {\n    constructor() {\n        this.world = null; // Физический мир Rapier\n        this.bodies = new Map(); // Карта физических тел\n        this.colliders = new Map(); // Карта коллайдеров\n        this.isInitialized = false; // Флаг инициализации\n        this.RAPIER = null; // Ссылка на объект RAPIER\n        this.initPromise = null; // Промис инициализации\n    }\n\n    /**\n     * Инициализация физики\n     * @returns {Promise} - промис, который разрешается, когда физика инициализирована\n     */\n    async init() {\n        // Если инициализация уже началась, возвращаем существующий промис\n        if (this.initPromise) {\n            return this.initPromise;\n        }\n\n        // Создаем промис инициализации\n        this.initPromise = new Promise(async (resolve) => {\n            try {\n                console.log('PhysicsManager: начало инициализации...');\n                \n                // Инициализируем Rapier.js\n                this.RAPIER = await initRapier();\n                \n                // Проверяем, доступен ли RAPIER\n                if (!this.RAPIER && !isRapierAvailable()) {\n                    console.error('PhysicsManager: RAPIER не определен. Убедитесь, что библиотека загружена.');\n                    resolve(false);\n                    return;\n                }\n                \n                // Если RAPIER всё ещё не доступен, используем глобальный объект\n                if (!this.RAPIER) {\n                    this.RAPIER = getRapier();\n                    if (!this.RAPIER) {\n                        console.error('PhysicsManager: не удалось получить объект RAPIER.');\n                        resolve(false);\n                        return;\n                    }\n                }\n\n                // Инициализируем физический мир\n                console.log('PhysicsManager: создание физического мира...');\n                \n                // Создаем мир с гравитацией (0, -9.81, 0)\n                const gravity = { x: 0.0, y: -9.81, z: 0.0 };\n                \n                // Проверяем, правильный ли формат конструктора\n                if (typeof this.RAPIER.World === 'function') {\n                    this.world = new this.RAPIER.World(gravity);\n                } else if (typeof this.RAPIER.World?.new === 'function') {\n                    // Альтернативный синтаксис для некоторых версий\n                    this.world = this.RAPIER.World.new(gravity);\n                } else {\n                    console.error('PhysicsManager: не удалось создать физический мир. Неподдерживаемый API.');\n                    resolve(false);\n                    return;\n                }\n                \n                // Устанавливаем флаг инициализации\n                this.isInitialized = true;\n                \n                console.log('PhysicsManager: физический движок успешно инициализирован.');\n                resolve(true);\n            } catch (error) {\n                console.error('PhysicsManager: ошибка при инициализации физики:', error);\n                this.isInitialized = false;\n                resolve(false);\n            }\n        });\n\n        return this.initPromise;\n    }\n\n    /**\n     * Проверка, инициализирован ли физический движок\n     * @returns {boolean} - результат проверки\n     */\n    isReady() {\n        return this.isInitialized && this.world !== null;\n    }\n\n    /**\n     * Получение физического мира\n     * @returns {Object} - физический мир Rapier\n     */\n    getWorld() {\n        return this.world;\n    }\n\n    /**\n     * Обновление физики\n     * @param {number} deltaTime - время с последнего обновления в секундах\n     */\n    update(deltaTime) {\n        if (!this.isReady()) return;\n        \n        try {\n            // Шаг физической симуляции\n            if (typeof this.world.step === 'function') {\n                this.world.step();\n            } else if (typeof this.world.timestep === 'function') {\n                // Альтернативный метод для некоторых версий API\n                this.world.timestep(deltaTime || 1/60);\n            }\n            \n            // Обновление позиций объектов на основе физики\n            this.updateBodies();\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при обновлении физики:', error);\n        }\n    }\n\n    /**\n     * Обновление позиций объектов на основе физики\n     */\n    updateBodies() {\n        try {\n            // Для каждого физического тела обновляем позицию соответствующего 3D объекта\n            for (let [object, body] of this.bodies) {\n                if (object && object.position && body) {\n                    let position;\n                    \n                    // Получаем позицию в зависимости от API\n                    if (typeof body.translation === 'function') {\n                        position = body.translation();\n                    } else if (typeof body.getTranslation === 'function') {\n                        position = body.getTranslation();\n                    } else if (body.translation) {\n                        position = body.translation;\n                    } else {\n                        continue; // Пропускаем, если не можем получить позицию\n                    }\n                    \n                    // Обновляем позицию 3D объекта\n                    object.position.set(position.x, position.y, position.z);\n                    \n                    // Если у объекта есть метод обновления позиции, вызываем его\n                    if (typeof object.updatePhysics === 'function') {\n                        object.updatePhysics(body);\n                    }\n                }\n            }\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при обновлении позиций объектов:', error);\n        }\n    }\n\n    /**\n     * Создание статического коллайдера для препятствия\n     * @param {Object} options - параметры коллайдера\n     * @param {Object} options.position - позиция коллайдера {x, y, z}\n     * @param {Object} options.size - размеры коллайдера {x, y, z}\n     * @param {Object} options.object - связанный 3D объект (опционально)\n     * @returns {Object} - созданный коллайдер\n     */\n    createObstacle(options) {\n        if (!this.isReady()) return null;\n        \n        try {\n            const position = options.position || { x: 0, y: 0, z: 0 };\n            const size = options.size || { x: 1, y: 1, z: 1 };\n            \n            // Создаем жесткое тело\n            let rigidBodyDesc;\n            if (typeof this.RAPIER.RigidBodyDesc.fixed === 'function') {\n                rigidBodyDesc = this.RAPIER.RigidBodyDesc.fixed()\n                    .setTranslation(position.x, position.y, position.z);\n            } else {\n                // Альтернативный синтаксис\n                rigidBodyDesc = new this.RAPIER.RigidBodyDesc(this.RAPIER.RigidBodyType.Fixed);\n                rigidBodyDesc.translation = { x: position.x, y: position.y, z: position.z };\n            }\n            \n            const rigidBody = this.world.createRigidBody(rigidBodyDesc);\n            \n            // Создаем коллайдер в форме прямоугольника\n            let colliderDesc;\n            if (typeof this.RAPIER.ColliderDesc.cuboid === 'function') {\n                colliderDesc = this.RAPIER.ColliderDesc.cuboid(\n                    size.x / 2, size.y / 2, size.z / 2\n                );\n            } else {\n                // Альтернативный синтаксис\n                colliderDesc = new this.RAPIER.ColliderDesc(\n                    new this.RAPIER.Cuboid(size.x / 2, size.y / 2, size.z / 2)\n                );\n            }\n            \n            const collider = this.world.createCollider(colliderDesc, rigidBody);\n            \n            // Если передан 3D объект, сохраняем его связь с физическим телом\n            if (options.object) {\n                this.bodies.set(options.object, rigidBody);\n                this.colliders.set(options.object, collider);\n            }\n            \n            return collider;\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при создании препятствия:', error);\n            return null;\n        }\n    }\n\n    /**\n     * Создание динамического тела для игрока или NPC\n     * @param {Object} options - параметры тела\n     * @param {Object} options.position - начальная позиция {x, y, z}\n     * @param {number} options.radius - радиус коллайдера\n     * @param {number} options.height - высота коллайдера\n     * @param {Object} options.object - связанный 3D объект\n     * @returns {Object} - созданное физическое тело\n     */\n    createCharacter(options) {\n        if (!this.isReady()) return null;\n        \n        try {\n            const position = options.position || { x: 0, y: 0, z: 0 };\n            const radius = options.radius || 0.5;\n            const height = options.height || 1.8;\n            \n            // Создаем жесткое тело\n            let rigidBodyDesc;\n            if (typeof this.RAPIER.RigidBodyDesc.dynamic === 'function') {\n                rigidBodyDesc = this.RAPIER.RigidBodyDesc.dynamic()\n                    .setTranslation(position.x, position.y, position.z)\n                    .setCanSleep(false) // Тело всегда активно\n                    .setLinearDamping(0.2); // Добавляем затухание для более плавного движения\n            } else {\n                // Альтернативный синтаксис\n                rigidBodyDesc = new this.RAPIER.RigidBodyDesc(this.RAPIER.RigidBodyType.Dynamic);\n                rigidBodyDesc.translation = { x: position.x, y: position.y, z: position.z };\n                rigidBodyDesc.canSleep = false;\n                rigidBodyDesc.linearDamping = 0.2;\n            }\n            \n            const rigidBody = this.world.createRigidBody(rigidBodyDesc);\n            \n            // Создаем коллайдер в форме капсулы\n            let colliderDesc;\n            if (typeof this.RAPIER.ColliderDesc.capsule === 'function') {\n                colliderDesc = this.RAPIER.ColliderDesc.capsule(\n                    height / 2 - radius, // половина высоты без учета полусфер\n                    radius // радиус\n                );\n            } else {\n                // Альтернативный синтаксис\n                colliderDesc = new this.RAPIER.ColliderDesc(\n                    new this.RAPIER.Capsule(height / 2 - radius, radius)\n                );\n            }\n            \n            const collider = this.world.createCollider(colliderDesc, rigidBody);\n            \n            // Если передан 3D объект, сохраняем его связь с физическим телом\n            if (options.object) {\n                this.bodies.set(options.object, rigidBody);\n                this.colliders.set(options.object, collider);\n            }\n            \n            return rigidBody;\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при создании персонажа:', error);\n            return null;\n        }\n    }\n    \n    /**\n     * Выполнение рейкаста для проверки пересечения с объектами\n     * @param {Object} origin - начальная точка луча {x, y, z}\n     * @param {Object} direction - направление луча {x, y, z}\n     * @param {number} maxDistance - максимальная дистанция\n     * @returns {Object|null} - результат рейкаста или null, если нет пересечений\n     */\n    castRay(origin, direction, maxDistance = 100) {\n        if (!this.isReady()) return null;\n        \n        try {\n            // Создаем луч\n            let ray;\n            if (typeof this.RAPIER.Ray === 'function') {\n                ray = new this.RAPIER.Ray(origin, direction);\n            } else {\n                // Альтернативный синтаксис для объектных параметров\n                ray = { origin, direction };\n            }\n            \n            // Выполняем рейкаст\n            if (typeof this.world.castRay === 'function') {\n                return this.world.castRay(ray, maxDistance, true);\n            } else if (typeof this.world.castRayAndGetNormal === 'function') {\n                return this.world.castRayAndGetNormal(origin, direction, maxDistance, true);\n            } else {\n                console.warn('PhysicsManager: метод рейкаста не доступен');\n                return null;\n            }\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при выполнении рейкаста:', error);\n            return null;\n        }\n    }\n    \n    /**\n     * Создание неподвижного препятствия в виде плоскости (например, пол)\n     * @param {Object} options - параметры плоскости\n     * @param {Object} options.normal - нормаль к плоскости {x, y, z}\n     * @param {number} options.offset - смещение от начала координат\n     * @returns {Object} - созданный коллайдер\n     */\n    createGround(options = {}) {\n        if (!this.isReady()) return null;\n        \n        try {\n            const normal = options.normal || { x: 0, y: 1, z: 0 }; // По умолчанию вверх\n            const offset = options.offset || 0;\n            \n            // Создаем жесткое тело\n            let rigidBodyDesc;\n            if (typeof this.RAPIER.RigidBodyDesc.fixed === 'function') {\n                rigidBodyDesc = this.RAPIER.RigidBodyDesc.fixed();\n            } else {\n                // Альтернативный синтаксис\n                rigidBodyDesc = new this.RAPIER.RigidBodyDesc(this.RAPIER.RigidBodyType.Fixed);\n            }\n            \n            const rigidBody = this.world.createRigidBody(rigidBodyDesc);\n            \n            // Создаем коллайдер в форме плоскости\n            let colliderDesc;\n            if (typeof this.RAPIER.ColliderDesc.halfspace === 'function') {\n                colliderDesc = this.RAPIER.ColliderDesc.halfspace(normal, offset);\n            } else {\n                // Альтернативный синтаксис для Plane или HalfSpace\n                colliderDesc = new this.RAPIER.ColliderDesc(\n                    new this.RAPIER.HalfSpace(normal, offset)\n                );\n            }\n            \n            return this.world.createCollider(colliderDesc, rigidBody);\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при создании плоскости:', error);\n            return null;\n        }\n    }\n    \n    /**\n     * Удаление физического тела\n     * @param {Object} object - 3D объект, связанный с физическим телом\n     */\n    removeBody(object) {\n        try {\n            if (this.bodies.has(object)) {\n                const body = this.bodies.get(object);\n                this.world.removeRigidBody(body);\n                this.bodies.delete(object);\n            }\n            \n            if (this.colliders.has(object)) {\n                this.colliders.delete(object);\n            }\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при удалении тела:', error);\n        }\n    }\n    \n    /**\n     * Освобождение ресурсов\n     */\n    dispose() {\n        try {\n            // Очищаем все коллекции\n            this.bodies.clear();\n            this.colliders.clear();\n            \n            // Уничтожаем физический мир\n            if (this.world) {\n                // У некоторых версий Rapier.js есть метод free() для освобождения ресурсов\n                if (typeof this.world.free === 'function') {\n                    this.world.free();\n                }\n                this.world = null;\n            }\n            \n            this.isInitialized = false;\n            this.initPromise = null;\n            console.log('PhysicsManager: ресурсы освобождены');\n        } catch (error) {\n            console.error('PhysicsManager: ошибка при освобождении ресурсов:', error);\n        }\n    }\n}","/**\n * Система визуализации конуса зрения и тумана войны в стиле Darkwood\n * Использует Rapier.js для расчета рейкастов и Three.js для отображения\n */\nexport class VisionSystem {\n    /**\n     * @param {Object} options - настройки системы визуализации\n     * @param {Object} options.scene - Three.js сцена\n     * @param {Object} options.world - Rapier.js мир физики\n     * @param {Object} options.player - игрок, для которого отображается конус зрения\n     * @param {number} options.fov - угол обзора в градусах (по умолчанию 90)\n     * @param {number} options.rayCount - количество лучей (по умолчанию 60)\n     * @param {number} options.maxDistance - максимальная дистанция обзора (по умолчанию 50)\n     * @param {boolean} options.memoryEnabled - сохранение посещенных областей (по умолчанию true)\n     * @param {boolean} options.blurEdges - размытие краев конуса зрения (по умолчанию true)\n     */\n    constructor(options) {\n        // Проверяем наличие обязательных параметров\n        if (!options.scene || !options.player) {\n            console.error('VisionSystem: не указаны обязательные параметры (scene, player)');\n            return;\n        }\n\n        this.scene = options.scene;\n        this.world = options.world;\n        this.player = options.player;\n        \n        // Настройки по умолчанию\n        this.fov = options.fov || 90; // угол обзора в градусах\n        this.rayCount = options.rayCount || 60; // количество лучей\n        this.maxDistance = options.maxDistance || 50; // максимальная дистанция обзора\n        this.memoryEnabled = options.memoryEnabled !== undefined ? options.memoryEnabled : true; // сохранение посещенных областей\n        this.blurEdges = options.blurEdges !== undefined ? options.blurEdges : true; // размытие краев конуса зрения\n        \n        // Внутренние переменные\n        this.visibilityMask = null; // маска для затемнения невидимых областей\n        this.visibilityGroup = null; // группа для всех элементов системы видимости\n        this.memoryMask = null; // маска для посещенных областей\n        this.visibilityShape = null; // форма для вырезания конуса видимости\n        this.memoryGrid = []; // сетка для отслеживания посещенных областей\n        this.cellSize = options.cellSize || 5; // размер ячейки для карты посещенных областей\n        this.gridResolution = Math.ceil(1000 / this.cellSize); // разрешение сетки для карты (1000 - размер игрового мира)\n        \n        // Флаг инициализации\n        this.isInitialized = false;\n\n        // Инициализация\n        this.init();\n    }\n    \n    /**\n     * Инициализация системы видимости\n     */\n    init() {\n        try {\n            this.initVisibilityMask();\n            \n            if (this.memoryEnabled) {\n                this.initMemoryMap();\n            }\n            \n            this.isInitialized = true;\n            console.log('VisionSystem: успешно инициализирована');\n        } catch (error) {\n            console.error('VisionSystem: ошибка при инициализации:', error);\n        }\n    }\n\n    /**\n     * Инициализация маски видимости\n     */\n    initVisibilityMask() {\n        // Создаем группу для системы видимости\n        this.visibilityGroup = new THREE.Group();\n        this.scene.add(this.visibilityGroup);\n        \n        // Создаем большой черный прямоугольник, покрывающий весь мир\n        const worldSize = 1000; // размер игрового мира\n        const maskGeometry = new THREE.PlaneGeometry(worldSize * 1.5, worldSize * 1.5);\n        const maskMaterial = new THREE.MeshBasicMaterial({\n            color: 0x000000,\n            transparent: true,\n            opacity: 0.9, // Немного увеличим непрозрачность для лучшего затемнения\n            side: THREE.DoubleSide,\n            depthTest: false, // отключаем тест глубины, чтобы маска всегда была видна\n            depthWrite: false // отключаем запись глубины\n        });\n        \n        this.visibilityMask = new THREE.Mesh(maskGeometry, maskMaterial);\n        this.visibilityMask.rotation.x = -Math.PI / 2; // поворачиваем горизонтально\n        this.visibilityMask.position.y = 0.2; // немного выше земли\n        this.visibilityMask.renderOrder = 999; // рендерим маску последней\n        this.visibilityGroup.add(this.visibilityMask);\n        \n        // Создаем форму для вырезания конуса видимости\n        this.visibilityShape = new THREE.Shape();\n        // Изначально пустая форма, будет обновляться в методе update\n    }\n    \n    /**\n     * Инициализация карты посещенных областей\n     */\n    initMemoryMap() {\n        // Создаем сетку для карты посещенных областей\n        this.memoryGrid = new Array(this.gridResolution);\n        for (let i = 0; i < this.gridResolution; i++) {\n            this.memoryGrid[i] = new Array(this.gridResolution).fill(0);\n        }\n        \n        // Создаем маску для посещенных областей (серая полупрозрачная)\n        const memoryMaskGeometry = new THREE.PlaneGeometry(1000 * 1.5, 1000 * 1.5, this.gridResolution, this.gridResolution);\n        const memoryMaskMaterial = new THREE.MeshBasicMaterial({\n            color: 0xAAAAAA,\n            transparent: true,\n            opacity: 0.5,\n            side: THREE.DoubleSide,\n            depthTest: false,\n            depthWrite: false,\n            vertexColors: true // включаем поддержку цветов вершин\n        });\n        \n        this.memoryMask = new THREE.Mesh(memoryMaskGeometry, memoryMaskMaterial);\n        this.memoryMask.rotation.x = -Math.PI / 2;\n        this.memoryMask.position.y = 0.1; // немного ниже маски видимости\n        this.memoryMask.renderOrder = 998; // рендерим перед маской видимости\n        this.visibilityGroup.add(this.memoryMask);\n        \n        // Инициализируем цвета вершин (полностью непрозрачные)\n        const colors = [];\n        const positions = memoryMaskGeometry.attributes.position.array;\n        \n        for (let i = 0; i < positions.length; i += 3) {\n            colors.push(0, 0, 0); // RGB, полностью черный = непрозрачный\n        }\n        \n        memoryMaskGeometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\n    }\n    \n    /**\n     * Обновление конуса видимости\n     */\n    update() {\n        if (!this.isInitialized || !this.player || !this.world) return;\n        \n        try {\n            // Получаем актуальные данные от игрока\n            const playerPos = this.player.position;\n            const direction = this.player.getViewDirection();\n            // Пытаемся получить текущий угол обзора, если метод существует\n            const viewAngle = typeof this.player.getViewAngle === 'function' \n                ? this.player.getViewAngle() \n                : this.fov;\n            \n            // Получаем мировую позицию игрока\n            const origin = {\n                x: playerPos.x,\n                y: playerPos.y + 1.0, // на уровне \"глаз\" игрока\n                z: playerPos.z\n            };\n            \n            // Вычисляем направление взгляда игрока в радианах\n            const directionAngle = Math.atan2(direction.x, direction.z);\n            const halfFov = (viewAngle / 2) * (Math.PI / 180); // половина угла обзора в радианах\n            \n            // Формируем список углов для выпуска лучей\n            const angles = [];\n            for (let i = 0; i < this.rayCount; i++) {\n                const angle = directionAngle - halfFov + (i / (this.rayCount - 1)) * 2 * halfFov;\n                angles.push(angle);\n            }\n            \n            // Вычисляем точки контура видимой области\n            const points = [];\n            \n            // Первая точка - позиция игрока\n            points.push(new THREE.Vector2(0, 0));\n            \n            // Выпускаем лучи и находим точки пересечения\n            angles.forEach(angle => {\n                // Для каждого угла получаем единичный вектор направления\n                const dir = {\n                    x: Math.sin(angle),\n                    y: 0,  // луч идет горизонтально\n                    z: Math.cos(angle)\n                };\n                \n                // Выполняем рейкаст\n                let endPoint;\n                \n                // Проверяем доступные методы в world\n                if (typeof this.world.castRayAndGetNormal === 'function') {\n                    // Новый способ рейкаста, рекомендуемый Rapier.js\n                    const raycastResult = this.world.castRayAndGetNormal(\n                        origin, \n                        dir, \n                        this.maxDistance, \n                        true\n                    );\n                    \n                    const hit = raycastResult.hasHit ? raycastResult : null;\n                    \n                    if (hit !== null && hit.hasHit) {\n                        // Луч столкнулся с препятствием\n                        const hitDistance = hit.toi; // дистанция до точки столкновения\n                        \n                        // Немного уменьшаем дистанцию, чтобы избежать артефактов\n                        const safeDistance = hitDistance * 0.99;\n                        \n                        // Вычисляем координаты точки пересечения\n                        endPoint = {\n                            x: origin.x + dir.x * safeDistance,\n                            z: origin.z + dir.z * safeDistance\n                        };\n                    } else {\n                        // Луч не встретил препятствий, берем максимальную дистанцию\n                        endPoint = {\n                            x: origin.x + dir.x * this.maxDistance,\n                            z: origin.z + dir.z * this.maxDistance\n                        };\n                    }\n                } else if (typeof this.world.castRay === 'function') {\n                    // Старый способ рейкаста\n                    const ray = new RAPIER.Ray(origin, dir);\n                    const hit = this.world.castRay(ray, this.maxDistance, true);\n                    \n                    if (hit !== null) {\n                        // Луч столкнулся с препятствием\n                        const hitDistance = hit.toi * this.maxDistance * 0.99;\n                        \n                        // Вычисляем координаты точки пересечения\n                        endPoint = {\n                            x: origin.x + dir.x * hitDistance,\n                            z: origin.z + dir.z * hitDistance\n                        };\n                    } else {\n                        // Луч не встретил препятствий, берем максимальную дистанцию\n                        endPoint = {\n                            x: origin.x + dir.x * this.maxDistance,\n                            z: origin.z + dir.z * this.maxDistance\n                        };\n                    }\n                } else {\n                    // Если методы рейкаста недоступны, просто берем максимальную дистанцию\n                    console.warn('VisionSystem: методы рейкаста недоступны, используем максимальную дистанцию');\n                    endPoint = {\n                        x: origin.x + dir.x * this.maxDistance,\n                        z: origin.z + dir.z * this.maxDistance\n                    };\n                }\n                \n                // Добавляем точку в список (относительно позиции игрока)\n                points.push(new THREE.Vector2(\n                    endPoint.x - origin.x,\n                    endPoint.z - origin.z\n                ));\n                \n                // Обновляем карту посещенных областей\n                if (this.memoryEnabled) {\n                    this.markVisitedArea(endPoint.x, endPoint.z);\n                }\n            });\n            \n            // Добавляем последнюю точку, чтобы замкнуть форму\n            points.push(points[1].clone());\n            \n            // Создаем форму конуса видимости\n            this.updateVisibilityShape(points);\n            \n            // Обновляем карту посещенных областей\n            if (this.memoryEnabled) {\n                this.updateMemoryMap();\n            }\n        } catch (error) {\n            console.error('VisionSystem: ошибка при обновлении:', error);\n        }\n    }\n    \n    /**\n     * Обновление формы видимости\n     * @param {Array} points - точки контура видимой области\n     */\n    updateVisibilityShape(points) {\n        // Проверяем валидность точек\n        if (!points || points.length < 3) {\n            console.warn('VisionSystem: недостаточно точек для создания формы видимости');\n            return;\n        }\n        \n        try {\n            // Создаем новую форму\n            const shape = new THREE.Shape();\n            \n            // Перемещаемся в первую точку\n            shape.moveTo(points[0].x, points[0].y);\n            \n            // Добавляем остальные точки\n            for (let i = 1; i < points.length; i++) {\n                shape.lineTo(points[i].x, points[i].y);\n            }\n            \n            // Создаем внешний контур (большой прямоугольник)\n            const worldSize = this.maxDistance * 2;\n            const outerShape = new THREE.Shape();\n            outerShape.moveTo(-worldSize, -worldSize);\n            outerShape.lineTo(worldSize, -worldSize);\n            outerShape.lineTo(worldSize, worldSize);\n            outerShape.lineTo(-worldSize, worldSize);\n            outerShape.lineTo(-worldSize, -worldSize);\n            \n            // Вырезаем конус видимости из внешнего контура\n            outerShape.holes.push(shape);\n            \n            // Обновляем геометрию маски\n            if (this.visibilityMask) {\n                // Удаляем старую геометрию\n                if (this.visibilityMask.geometry) {\n                    this.visibilityMask.geometry.dispose();\n                }\n                \n                // Создаем новую геометрию\n                this.visibilityMask.geometry = new THREE.ShapeGeometry(outerShape);\n                \n                // Перемещаем маску в позицию игрока\n                const playerPos = this.player.position;\n                this.visibilityMask.position.set(playerPos.x, 0.2, playerPos.z);\n            }\n        } catch (error) {\n            console.error('VisionSystem: ошибка при обновлении формы видимости:', error);\n        }\n    }\n    \n    /**\n     * Отметка посещенной области на карте\n     * @param {Number} x - координата X\n     * @param {Number} z - координата Z\n     */\n    markVisitedArea(x, z) {\n        // Преобразуем мировые координаты в координаты сетки\n        const gridX = Math.floor((x + 500) / this.cellSize);\n        const gridZ = Math.floor((z + 500) / this.cellSize);\n        \n        // Проверяем, что координаты находятся в пределах сетки\n        if (gridX >= 0 && gridX < this.gridResolution && gridZ >= 0 && gridZ < this.gridResolution) {\n            // Отмечаем ячейку как посещенную\n            this.memoryGrid[gridX][gridZ] = 1;\n            \n            // Отмечаем соседние ячейки для плавного перехода\n            for (let dx = -1; dx <= 1; dx++) {\n                for (let dz = -1; dz <= 1; dz++) {\n                    const nx = gridX + dx;\n                    const nz = gridZ + dz;\n                    \n                    if (nx >= 0 && nx < this.gridResolution && nz >= 0 && nz < this.gridResolution) {\n                        // Устанавливаем значение не меньше 0.7 для соседних ячеек\n                        this.memoryGrid[nx][nz] = Math.max(this.memoryGrid[nx][nz], 0.7);\n                    }\n                }\n            }\n        }\n    }\n    \n    /**\n     * Обновление карты посещенных областей\n     */\n    updateMemoryMap() {\n        if (!this.memoryEnabled || !this.memoryMask) return;\n        \n        try {\n            // Получаем текущую геометрию\n            const geometry = this.memoryMask.geometry;\n            \n            // Получаем атрибут цвета\n            let colors = geometry.attributes.color;\n            \n            // Если атрибут не существует, создаем его\n            if (!colors) {\n                const positions = geometry.attributes.position.array;\n                const colorsArray = new Float32Array(positions.length);\n                colors = new THREE.BufferAttribute(colorsArray, 3);\n                geometry.setAttribute('color', colors);\n            }\n            \n            // Обновляем цвета вершин на основе карты посещенных областей\n            const positions = geometry.attributes.position.array;\n            \n            for (let i = 0, j = 0; i < positions.length; i += 3, j++) {\n                // Получаем координаты вершины\n                const x = positions[i];\n                const z = positions[i + 2];\n                \n                // Преобразуем мировые координаты в координаты сетки\n                const gridX = Math.floor((x + 500) / this.cellSize);\n                const gridZ = Math.floor((z + 500) / this.cellSize);\n                \n                // Проверяем, что координаты находятся в пределах сетки\n                if (gridX >= 0 && gridX < this.gridResolution && gridZ >= 0 && gridZ < this.gridResolution) {\n                    // Получаем значение ячейки (0 - не посещена, 1 - посещена)\n                    const visited = this.memoryGrid[gridX][gridZ];\n                    \n                    // Устанавливаем цвет вершины\n                    colors.array[i] = visited;     // R (0-1)\n                    colors.array[i + 1] = visited; // G (0-1)\n                    colors.array[i + 2] = visited; // B (0-1)\n                }\n            }\n            \n            // Отмечаем атрибут цвета как требующий обновления\n            colors.needsUpdate = true;\n        } catch (error) {\n            console.error('VisionSystem: ошибка при обновлении карты посещенных областей:', error);\n        }\n    }\n    \n    /**\n     * Очистка ресурсов системы\n     */\n    dispose() {\n        try {\n            // Удаляем маску видимости\n            if (this.visibilityMask) {\n                if (this.visibilityMask.geometry) {\n                    this.visibilityMask.geometry.dispose();\n                }\n                if (this.visibilityMask.material) {\n                    this.visibilityMask.material.dispose();\n                }\n                this.visibilityGroup.remove(this.visibilityMask);\n            }\n            \n            // Удаляем маску посещенных областей\n            if (this.memoryMask) {\n                if (this.memoryMask.geometry) {\n                    this.memoryMask.geometry.dispose();\n                }\n                if (this.memoryMask.material) {\n                    this.memoryMask.material.dispose();\n                }\n                this.visibilityGroup.remove(this.memoryMask);\n            }\n            \n            // Удаляем группу видимости\n            if (this.visibilityGroup) {\n                this.scene.remove(this.visibilityGroup);\n            }\n            \n            // Сбрасываем переменные\n            this.visibilityMask = null;\n            this.memoryMask = null;\n            this.visibilityGroup = null;\n            this.memoryGrid = [];\n            this.isInitialized = false;\n            \n            console.log('VisionSystem: ресурсы успешно освобождены');\n        } catch (error) {\n            console.error('VisionSystem: ошибка при освобождении ресурсов:', error);\n        }\n    }\n}","/**\n * Класс для управления HUD (интерфейсом в игре)\n */\nexport class HUD {\n    /**\n     * @param {HTMLElement} element - DOM элемент для отображения HUD\n     */\n    constructor(element) {\n        this.element = element;\n        \n        // Элементы HUD\n        this.healthBar = element.querySelector('#health-bar .health-value');\n        this.ammoCounter = element.querySelector('#ammo-counter');\n        this.weaponInfo = element.querySelector('#weapon-info');\n        this.statusMessages = element.querySelector('#status-messages');\n        \n        // Состояние HUD\n        this.health = 100;\n        this.ammo = 0;\n        this.weapon = 'Нет';\n        this.messages = [];\n        \n        // Таймер для удаления сообщений\n        this.messageTimer = null;\n        \n        // Инициализация\n        this.initialize();\n    }\n    \n    /**\n     * Инициализация HUD\n     */\n    initialize() {\n        // Обновляем элементы с начальными значениями\n        this.updateHealthBar();\n        this.updateAmmoCounter();\n        this.updateWeaponInfo();\n    }\n    \n    /**\n     * Обновление HUD\n     * @param {Object} data - данные для обновления\n     */\n    update(data) {\n        // Обновляем только переданные данные\n        if (data.health !== undefined && data.health !== this.health) {\n            this.health = data.health;\n            this.updateHealthBar();\n        }\n        \n        if (data.ammo !== undefined && data.ammo !== this.ammo) {\n            this.ammo = data.ammo;\n            this.updateAmmoCounter();\n        }\n        \n        if (data.weapon !== undefined && data.weapon !== this.weapon) {\n            this.weapon = data.weapon;\n            this.updateWeaponInfo();\n        }\n    }\n    \n    /**\n     * Обновление полоски здоровья\n     */\n    updateHealthBar() {\n        // Обновляем ширину полоски здоровья\n        if (this.healthBar) {\n            this.healthBar.style.width = `${this.health}%`;\n            \n            // Меняем цвет в зависимости от количества здоровья\n            if (this.health > 70) {\n                this.healthBar.style.backgroundColor = '#4CAF50'; // Зеленый\n            } else if (this.health > 30) {\n                this.healthBar.style.backgroundColor = '#FFC107'; // Желтый\n            } else {\n                this.healthBar.style.backgroundColor = '#F44336'; // Красный\n            }\n        }\n    }\n    \n    /**\n     * Обновление счетчика патронов\n     */\n    updateAmmoCounter() {\n        if (this.ammoCounter) {\n            this.ammoCounter.textContent = `${this.ammo}`;\n        }\n    }\n    \n    /**\n     * Обновление информации об оружии\n     */\n    updateWeaponInfo() {\n        if (this.weaponInfo) {\n            this.weaponInfo.textContent = this.weapon;\n        }\n    }\n    \n    /**\n     * Добавление сообщения в статус\n     * @param {string} message - текст сообщения\n     * @param {number} duration - длительность показа в миллисекундах\n     */\n    addStatusMessage(message, duration = 3000) {\n        // Добавляем сообщение в список\n        this.messages.push({\n            text: message,\n            timestamp: Date.now(),\n            duration\n        });\n        \n        // Обновляем отображение сообщений\n        this.updateStatusMessages();\n        \n        // Устанавливаем таймер для удаления сообщения\n        if (this.messageTimer === null) {\n            this.messageTimer = setInterval(() => {\n                this.checkMessagesTimeout();\n            }, 1000);\n        }\n    }\n    \n    /**\n     * Обновление отображения статусных сообщений\n     */\n    updateStatusMessages() {\n        if (!this.statusMessages) return;\n        \n        // Очищаем элемент\n        this.statusMessages.innerHTML = '';\n        \n        // Добавляем сообщения\n        this.messages.forEach(msg => {\n            const messageElement = document.createElement('div');\n            messageElement.className = 'status-message';\n            messageElement.textContent = msg.text;\n            \n            this.statusMessages.appendChild(messageElement);\n        });\n    }\n    \n    /**\n     * Проверка таймаута сообщений\n     */\n    checkMessagesTimeout() {\n        const now = Date.now();\n        let hasRemovedMessages = false;\n        \n        // Удаляем устаревшие сообщения\n        this.messages = this.messages.filter(msg => {\n            const isExpired = now - msg.timestamp > msg.duration;\n            if (isExpired) {\n                hasRemovedMessages = true;\n            }\n            return !isExpired;\n        });\n        \n        // Обновляем отображение, если были удалены сообщения\n        if (hasRemovedMessages) {\n            this.updateStatusMessages();\n        }\n        \n        // Останавливаем таймер, если нет сообщений\n        if (this.messages.length === 0) {\n            clearInterval(this.messageTimer);\n            this.messageTimer = null;\n        }\n    }\n    \n    /**\n     * Показать HUD\n     */\n    show() {\n        this.element.classList.remove('hidden');\n    }\n    \n    /**\n     * Скрыть HUD\n     */\n    hide() {\n        this.element.classList.add('hidden');\n    }\n}","/**\n * Класс для управления интерфейсом инвентаря\n */\nexport class InventoryUI {\n    /**\n     * @param {HTMLElement} element - DOM элемент для отображения инвентаря\n     */\n    constructor(element) {\n        this.element = element;\n        \n        // Элементы инвентаря\n        this.gridElement = element.querySelector('.inventory-grid');\n        this.equippedElement = element.querySelector('.equipped-items');\n        \n        // Данные инвентаря\n        this.inventory = {\n            items: [],\n            maxSlots: 25 // 5x5 сетка\n        };\n        \n        // Экипированные предметы\n        this.equipped = {\n            weapon: null,\n            armor: null,\n            helmet: null\n        };\n        \n        // Инициализация\n        this.initialize();\n    }\n    \n    /**\n     * Инициализация интерфейса инвентаря\n     */\n    initialize() {\n        // Создаем слоты инвентаря\n        this.createInventorySlots();\n        \n        // Создаем слоты экипировки\n        this.createEquippedSlots();\n        \n        // Настраиваем обработчики событий перетаскивания\n        this.setupDragAndDrop();\n    }\n    \n    /**\n     * Создание слотов инвентаря\n     */\n    createInventorySlots() {\n        if (!this.gridElement) return;\n        \n        // Очищаем контейнер\n        this.gridElement.innerHTML = '';\n        \n        // Создаем сетку слотов 5x5\n        for (let i = 0; i < this.inventory.maxSlots; i++) {\n            const slot = document.createElement('div');\n            slot.className = 'inventory-slot';\n            slot.dataset.slotIndex = i;\n            \n            this.gridElement.appendChild(slot);\n        }\n    }\n    \n    /**\n     * Создание слотов экипировки\n     */\n    createEquippedSlots() {\n        if (!this.equippedElement) return;\n        \n        // Очищаем контейнер\n        this.equippedElement.innerHTML = '';\n        \n        // Создаем слоты для экипировки\n        const slots = [\n            { id: 'weapon', label: 'Оружие' },\n            { id: 'armor', label: 'Броня' },\n            { id: 'helmet', label: 'Шлем' }\n        ];\n        \n        slots.forEach(slotInfo => {\n            const slotContainer = document.createElement('div');\n            slotContainer.className = 'equipped-slot-container';\n            \n            const label = document.createElement('div');\n            label.className = 'equipped-slot-label';\n            label.textContent = slotInfo.label;\n            \n            const slot = document.createElement('div');\n            slot.className = 'equipped-slot';\n            slot.dataset.slotType = slotInfo.id;\n            \n            slotContainer.appendChild(label);\n            slotContainer.appendChild(slot);\n            \n            this.equippedElement.appendChild(slotContainer);\n        });\n    }\n    \n    /**\n     * Настройка системы перетаскивания\n     */\n    setupDragAndDrop() {\n        // Здесь будет реализация drag-and-drop\n        // Для прототипа оставим простую реализацию с кликами\n        \n        // Находим все слоты инвентаря\n        const inventorySlots = this.element.querySelectorAll('.inventory-slot');\n        \n        // Добавляем обработчики клика\n        inventorySlots.forEach(slot => {\n            slot.addEventListener('click', () => {\n                // В будущем здесь будет логика выбора предмета\n                console.log('Клик по слоту инвентаря:', slot.dataset.slotIndex);\n            });\n        });\n        \n        // Находим все слоты экипировки\n        const equippedSlots = this.element.querySelectorAll('.equipped-slot');\n        \n        // Добавляем обработчики клика\n        equippedSlots.forEach(slot => {\n            slot.addEventListener('click', () => {\n                // В будущем здесь будет логика выбора экипированного предмета\n                console.log('Клик по слоту экипировки:', slot.dataset.slotType);\n            });\n        });\n    }\n    \n    /**\n     * Обновление отображения инвентаря\n     * @param {Object} inventory - данные инвентаря\n     */\n    update(inventory) {\n        if (!inventory) return;\n        \n        // Обновляем данные\n        this.inventory = inventory;\n        \n        // Обновляем отображение\n        this.updateInventoryDisplay();\n    }\n    \n    /**\n     * Обновление отображения экипировки\n     * @param {Object} equipped - данные экипировки\n     */\n    updateEquipped(equipped) {\n        if (!equipped) return;\n        \n        // Обновляем данные\n        this.equipped = equipped;\n        \n        // Обновляем отображение\n        this.updateEquippedDisplay();\n    }\n    \n    /**\n     * Обновление отображения слотов инвентаря\n     */\n    updateInventoryDisplay() {\n        // Находим все слоты инвентаря\n        const slots = this.element.querySelectorAll('.inventory-slot');\n        \n        // Очищаем все слоты\n        slots.forEach(slot => {\n            slot.innerHTML = '';\n            slot.classList.remove('filled');\n        });\n        \n        // Заполняем слоты предметами\n        this.inventory.items.forEach((item, index) => {\n            if (index >= slots.length) return;\n            \n            const slot = slots[index];\n            \n            // Создаем элемент предмета\n            const itemElement = document.createElement('div');\n            itemElement.className = 'inventory-item';\n            itemElement.dataset.itemId = item.id;\n            \n            // Разный стиль для разных типов предметов\n            switch (item.type) {\n                case 'weapon':\n                    itemElement.classList.add('item-weapon');\n                    itemElement.textContent = 'W';\n                    break;\n                case 'medkit':\n                    itemElement.classList.add('item-medkit');\n                    itemElement.textContent = 'M';\n                    break;\n                case 'ammo':\n                    itemElement.classList.add('item-ammo');\n                    itemElement.textContent = 'A';\n                    break;\n                default:\n                    itemElement.textContent = '?';\n            }\n            \n            // Добавляем предмет в слот\n            slot.appendChild(itemElement);\n            slot.classList.add('filled');\n        });\n    }\n    \n    /**\n     * Обновление отображения экипированных предметов\n     */\n    updateEquippedDisplay() {\n        // Обновляем отображение экипированного оружия\n        const weaponSlot = this.element.querySelector('.equipped-slot[data-slot-type=\"weapon\"]');\n        if (weaponSlot) {\n            weaponSlot.innerHTML = '';\n            \n            if (this.equipped.weapon) {\n                const weaponElement = document.createElement('div');\n                weaponElement.className = 'equipped-item item-weapon';\n                weaponElement.textContent = 'W';\n                \n                weaponSlot.appendChild(weaponElement);\n            }\n        }\n        \n        // Обновляем отображение экипированной брони\n        const armorSlot = this.element.querySelector('.equipped-slot[data-slot-type=\"armor\"]');\n        if (armorSlot) {\n            armorSlot.innerHTML = '';\n            \n            if (this.equipped.armor) {\n                const armorElement = document.createElement('div');\n                armorElement.className = 'equipped-item item-armor';\n                armorElement.textContent = 'A';\n                \n                armorSlot.appendChild(armorElement);\n            }\n        }\n        \n        // Обновляем отображение экипированного шлема\n        const helmetSlot = this.element.querySelector('.equipped-slot[data-slot-type=\"helmet\"]');\n        if (helmetSlot) {\n            helmetSlot.innerHTML = '';\n            \n            if (this.equipped.helmet) {\n                const helmetElement = document.createElement('div');\n                helmetElement.className = 'equipped-item item-helmet';\n                helmetElement.textContent = 'H';\n                \n                helmetSlot.appendChild(helmetElement);\n            }\n        }\n    }\n    \n    /**\n     * Добавление стилей для предметов в инвентаре\n     */\n    addInventoryStyles() {\n        // Создаем стили для предметов\n        const style = document.createElement('style');\n        style.textContent = `\n            .inventory-item {\n                width: 90%;\n                height: 90%;\n                margin: 5%;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                color: white;\n                font-weight: bold;\n                user-select: none;\n                cursor: pointer;\n            }\n            \n            .item-weapon {\n                background-color: #FF5722;\n            }\n            \n            .item-medkit {\n                background-color: #4CAF50;\n            }\n            \n            .item-ammo {\n                background-color: #FFC107;\n            }\n            \n            .item-armor {\n                background-color: #2196F3;\n            }\n            \n            .item-helmet {\n                background-color: #673AB7;\n            }\n            \n            .equipped-slot-container {\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n            }\n            \n            .equipped-slot-label {\n                margin-bottom: 5px;\n                font-size: 14px;\n            }\n            \n            .equipped-item {\n                width: 90%;\n                height: 90%;\n                margin: 5%;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                color: white;\n                font-weight: bold;\n            }\n        `;\n        \n        document.head.appendChild(style);\n    }\n    \n    /**\n     * Показать инвентарь\n     */\n    show() {\n        // Добавляем стили для предметов при первом открытии\n        if (!document.querySelector('style[data-inventory-styles]')) {\n            this.addInventoryStyles();\n        }\n        \n        this.element.classList.remove('hidden');\n    }\n    \n    /**\n     * Скрыть инвентарь\n     */\n    hide() {\n        this.element.classList.add('hidden');\n    }\n}","// client/src/core/input.js\n\n/**\n * Класс обработки пользовательского ввода\n */\nexport class InputHandler {\n    constructor() {\n        // Состояние клавиш\n        this.keys = {};\n        \n        // Состояние мыши\n        this.mouse = {\n            position: { x: 0, y: 0 },\n            isDown: false,\n            rightIsDown: false\n        };\n        \n        // Последнее положение мыши для расчета дельты\n        this.lastMousePosition = { x: 0, y: 0 };\n        \n        // Колбэки для клавиш\n        this.keyCallbacks = {};\n        \n        // Колбэки для мыши\n        this.clickCallback = null;\n        this.rightClickCallback = null;\n        this.mouseMoveCallback = null;\n        this.mouseDownCallback = null;\n        this.mouseUpCallback = null;\n        \n        // Флаг активных игровых управлений\n        this.gameControlsEnabled = true;\n        \n        // Настройки ввода\n        this.mouseSensitivity = 1.0;\n        \n        // Привязка методов к контексту\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.handleKeyUp = this.handleKeyUp.bind(this);\n        this.handleMouseMove = this.handleMouseMove.bind(this);\n        this.handleMouseDown = this.handleMouseDown.bind(this);\n        this.handleMouseUp = this.handleMouseUp.bind(this);\n        this.handleContextMenu = this.handleContextMenu.bind(this);\n        \n        // Инициализация обработчиков событий\n        this.init();\n    }\n    \n    /**\n     * Инициализация обработчиков событий\n     */\n    init() {\n        // Добавление обработчиков событий клавиатуры\n        window.addEventListener('keydown', this.handleKeyDown);\n        window.addEventListener('keyup', this.handleKeyUp);\n        \n        // Добавление обработчиков событий мыши\n        window.addEventListener('mousemove', this.handleMouseMove);\n        window.addEventListener('mousedown', this.handleMouseDown);\n        window.addEventListener('mouseup', this.handleMouseUp);\n        window.addEventListener('contextmenu', this.handleContextMenu);\n        \n        // Подавление стандартных действий браузера\n        document.body.style.userSelect = 'none';\n    }\n    \n    /**\n     * Обработчик нажатия клавиши\n     * @param {KeyboardEvent} event - событие нажатия клавиши\n     */\n    handleKeyDown(event) {\n        // Запоминаем состояние клавиши\n        this.keys[event.code] = true;\n        \n        // Вызываем колбэк, если он установлен\n        if (this.keyCallbacks[event.code] && this.gameControlsEnabled) {\n            this.keyCallbacks[event.code]();\n        }\n    }\n    \n    /**\n     * Обработчик отпускания клавиши\n     * @param {KeyboardEvent} event - событие отпускания клавиши\n     */\n    handleKeyUp(event) {\n        // Запоминаем состояние клавиши\n        this.keys[event.code] = false;\n    }\n    \n    /**\n     * Обработчик движения мыши\n     * @param {MouseEvent} event - событие движения мыши\n     */\n    handleMouseMove(event) {\n        // Обновляем позицию мыши\n        this.mouse.position.x = event.clientX;\n        this.mouse.position.y = event.clientY;\n        \n        // Вычисляем delta движения с учетом чувствительности\n        const deltaX = (this.mouse.position.x - this.lastMousePosition.x) * this.mouseSensitivity;\n        const deltaY = (this.mouse.position.y - this.lastMousePosition.y) * this.mouseSensitivity;\n        \n        // Обновляем последнюю позицию\n        this.lastMousePosition.x = this.mouse.position.x;\n        this.lastMousePosition.y = this.mouse.position.y;\n        \n        // Вызываем колбэк движения, если он установлен\n        if (this.mouseMoveCallback && this.gameControlsEnabled) {\n            this.mouseMoveCallback(this.mouse.position, { x: deltaX, y: deltaY });\n        }\n    }\n    \n    /**\n     * Обработчик нажатия кнопки мыши\n     * @param {MouseEvent} event - событие нажатия кнопки мыши\n     */\n    handleMouseDown(event) {\n        if (event.button === 0) {\n            // Левая кнопка мыши\n            this.mouse.isDown = true;\n            \n            // Вызываем общий колбэк нажатия\n            if (this.mouseDownCallback && this.gameControlsEnabled) {\n                this.mouseDownCallback(0, this.mouse.position);\n            }\n            \n            // Вызываем колбэк левого клика\n            if (this.clickCallback && this.gameControlsEnabled) {\n                this.clickCallback(this.mouse.position);\n            }\n        } else if (event.button === 2) {\n            // Правая кнопка мыши\n            this.mouse.rightIsDown = true;\n            \n            // Вызываем общий колбэк нажатия\n            if (this.mouseDownCallback && this.gameControlsEnabled) {\n                this.mouseDownCallback(2, this.mouse.position);\n            }\n            \n            // Вызываем колбэк правого клика\n            if (this.rightClickCallback && this.gameControlsEnabled) {\n                this.rightClickCallback(this.mouse.position);\n            }\n        }\n    }\n    \n    /**\n     * Обработчик отпускания кнопки мыши\n     * @param {MouseEvent} event - событие отпускания кнопки мыши\n     */\n    handleMouseUp(event) {\n        if (event.button === 0) {\n            this.mouse.isDown = false;\n            \n            // Вызываем колбэк отпускания\n            if (this.mouseUpCallback && this.gameControlsEnabled) {\n                this.mouseUpCallback(0);\n            }\n        } else if (event.button === 2) {\n            this.mouse.rightIsDown = false;\n            \n            // Вызываем колбэк отпускания\n            if (this.mouseUpCallback && this.gameControlsEnabled) {\n                this.mouseUpCallback(2);\n            }\n        }\n    }\n    \n    /**\n     * Обработчик контекстного меню (правый клик)\n     * @param {MouseEvent} event - событие контекстного меню\n     */\n    handleContextMenu(event) {\n        // Предотвращаем появление стандартного контекстного меню\n        event.preventDefault();\n    }\n    \n    /**\n     * Проверка, нажата ли указанная клавиша\n     * @param {string} code - код клавиши\n     * @returns {boolean} - состояние клавиши\n     */\n    isKeyPressed(code) {\n        return this.gameControlsEnabled && this.keys[code] === true;\n    }\n    \n    /**\n     * Проверка, нажата ли левая кнопка мыши\n     * @returns {boolean} - состояние левой кнопки мыши\n     */\n    isMouseDown() {\n        return this.gameControlsEnabled && this.mouse.isDown;\n    }\n    \n    /**\n     * Проверка, нажата ли правая кнопка мыши\n     * @returns {boolean} - состояние правой кнопки мыши\n     */\n    isRightMouseDown() {\n        return this.gameControlsEnabled && this.mouse.rightIsDown;\n    }\n    \n    /**\n     * Получение текущей позиции мыши\n     * @returns {Object} - координаты мыши {x, y}\n     */\n    getMousePosition() {\n        return { ...this.mouse.position };\n    }\n    \n    /**\n     * Установка чувствительности мыши\n     * @param {number} sensitivity - чувствительность мыши\n     */\n    setMouseSensitivity(sensitivity) {\n        this.mouseSensitivity = sensitivity;\n    }\n    \n    /**\n     * Добавление колбэка для клавиши\n     * @param {string} code - код клавиши\n     * @param {Function} callback - функция обратного вызова\n     */\n    addKeyCallback(code, callback) {\n        this.keyCallbacks[code] = callback;\n    }\n    \n    /**\n     * Удаление колбэка для клавиши\n     * @param {string} code - код клавиши\n     */\n    removeKeyCallback(code) {\n        delete this.keyCallbacks[code];\n    }\n    \n    /**\n     * Установка колбэка для клика мыши\n     * @param {Function} callback - функция обратного вызова\n     */\n    setClickCallback(callback) {\n        this.clickCallback = callback;\n    }\n    \n    /**\n     * Установка колбэка для правого клика мыши\n     * @param {Function} callback - функция обратного вызова\n     */\n    setRightClickCallback(callback) {\n        this.rightClickCallback = callback;\n    }\n    \n    /**\n     * Установка колбэка для движения мыши\n     * @param {Function} callback - функция обратного вызова\n     */\n    setMouseMoveCallback(callback) {\n        this.mouseMoveCallback = callback;\n    }\n    \n    /**\n     * Установка колбэка для нажатия кнопки мыши\n     * @param {Function} callback - функция обратного вызова (button, position)\n     */\n    setMouseDownCallback(callback) {\n        this.mouseDownCallback = callback;\n    }\n    \n    /**\n     * Установка колбэка для отпускания кнопки мыши\n     * @param {Function} callback - функция обратного вызова (button)\n     */\n    setMouseUpCallback(callback) {\n        this.mouseUpCallback = callback;\n    }\n    \n    /**\n     * Отключение управления игрой (для меню, инвентаря и т.д.)\n     */\n    disableGameControls() {\n        this.gameControlsEnabled = false;\n    }\n    \n    /**\n     * Включение управления игрой\n     */\n    enableGameControls() {\n        this.gameControlsEnabled = true;\n    }\n    \n    /**\n     * Получение направления движения на основе нажатых клавиш\n     * @returns {Object} - вектор движения {x, z}\n     */\n    getMovementDirection() {\n        if (!this.gameControlsEnabled) {\n            return { x: 0, z: 0 };\n        }\n        \n        let dirX = 0;\n        let dirZ = 0;\n        \n        // Вперед/назад (WASD)\n        if (this.isKeyPressed('KeyW') || this.isKeyPressed('ArrowUp')) {\n            dirZ = -1;\n        } else if (this.isKeyPressed('KeyS') || this.isKeyPressed('ArrowDown')) {\n            dirZ = 1;\n        }\n        \n        // Влево/вправо (WASD)\n        if (this.isKeyPressed('KeyA') || this.isKeyPressed('ArrowLeft')) {\n            dirX = -1;\n        } else if (this.isKeyPressed('KeyD') || this.isKeyPressed('ArrowRight')) {\n            dirX = 1;\n        }\n        \n        return { x: dirX, z: dirZ };\n    }\n    \n    /**\n     * Очистка всех колбэков\n     */\n    clearCallbacks() {\n        this.keyCallbacks = {};\n        this.clickCallback = null;\n        this.rightClickCallback = null;\n        this.mouseMoveCallback = null;\n        this.mouseDownCallback = null;\n        this.mouseUpCallback = null;\n    }\n    \n    /**\n     * Уничтожение обработчика ввода и удаление обработчиков событий\n     */\n    destroy() {\n        window.removeEventListener('keydown', this.handleKeyDown);\n        window.removeEventListener('keyup', this.handleKeyUp);\n        window.removeEventListener('mousemove', this.handleMouseMove);\n        window.removeEventListener('mousedown', this.handleMouseDown);\n        window.removeEventListener('mouseup', this.handleMouseUp);\n        window.removeEventListener('contextmenu', this.handleContextMenu);\n        \n        document.body.style.userSelect = '';\n    }\n}","/**\n * Модуль для инициализации и интеграции Rapier.js\n */\n\n/**\n * Инициализация Rapier.js\n * @returns {Promise} - промис, который разрешается, когда Rapier.js инициализирован\n */\nexport async function initRapier() {\n    console.log('Начинаем инициализацию Rapier.js...');\n    \n    // Проверяем, загружен ли уже Rapier.js\n    if (typeof RAPIER !== 'undefined') {\n        console.log('Rapier.js уже загружен из глобального объекта');\n        return RAPIER;\n    }\n    \n    try {\n        // Пытаемся загрузить из глобального пространства имен (CDN)\n        // Проверяем, доступен ли RAPIER в window\n        if (typeof window !== 'undefined' && window.RAPIER) {\n            console.log('Используем Rapier.js из window.RAPIER');\n            return window.RAPIER;\n        }\n        \n        // Если метод init существует, вызываем его\n        if (typeof RAPIER !== 'undefined' && typeof RAPIER.init === 'function') {\n            console.log('Инициализируем Rapier.js через RAPIER.init()');\n            await RAPIER.init();\n            return RAPIER;\n        }\n        \n        throw new Error('Rapier.js не найден в глобальном пространстве имен');\n    } catch (initError) {\n        console.warn('Не удалось инициализировать Rapier.js из глобального пространства:', initError);\n        \n        // Пробуем разные способы инициализации\n        try {\n            // Метод 1: Ожидаем глобальный объект RAPIER в течение определенного времени\n            console.log('Пытаемся дождаться загрузки Rapier.js...');\n            \n            const waitForRapier = new Promise((resolve, reject) => {\n                let attempts = 0;\n                const maxAttempts = 10;\n                const checkInterval = 300; // ms\n                \n                const checkRapier = () => {\n                    attempts++;\n                    if (typeof window.RAPIER !== 'undefined') {\n                        console.log(`RAPIER найден после ${attempts} попыток`);\n                        resolve(window.RAPIER);\n                        return;\n                    }\n                    \n                    if (attempts >= maxAttempts) {\n                        reject(new Error(`RAPIER не загрузился после ${maxAttempts} попыток`));\n                        return;\n                    }\n                    \n                    setTimeout(checkRapier, checkInterval);\n                };\n                \n                checkRapier();\n            });\n            \n            return await waitForRapier;\n        } catch (error) {\n            console.error('Все попытки инициализации Rapier.js завершились неудачей:', error);\n            \n            // Возвращаем заглушку для предотвращения критических ошибок\n            return createRapierStub();\n        }\n    }\n}\n\n/**\n * Создание заглушки для Rapier.js\n * @returns {Object} - заглушка с базовыми методами\n */\nfunction createRapierStub() {\n    console.warn('Создание заглушки Rapier.js. Физика НЕ будет работать корректно!');\n    \n    return {\n        World: class StubWorld {\n            constructor() {\n                console.warn('Используется заглушка World вместо настоящего Rapier.js');\n                this.bodies = [];\n                this.colliders = [];\n            }\n            \n            step() {}\n            \n            createRigidBody() {\n                return {\n                    translation: () => ({ x: 0, y: 0, z: 0 }),\n                    setTranslation: () => {}\n                };\n            }\n            \n            createCollider() {\n                return {};\n            }\n            \n            castRay() {\n                return null;\n            }\n            \n            castRayAndGetNormal() {\n                return { hasHit: false, toi: 0 };\n            }\n        },\n        RigidBodyDesc: {\n            fixed: () => ({\n                setTranslation: () => ({})\n            }),\n            dynamic: () => ({\n                setTranslation: () => ({}),\n                setCanSleep: () => ({}),\n                setLinearDamping: () => ({})\n            })\n        },\n        ColliderDesc: {\n            cuboid: () => ({}),\n            capsule: () => ({})\n        },\n        Ray: class StubRay {\n            constructor(origin, dir) {\n                this.origin = origin;\n                this.dir = dir;\n            }\n        }\n    };\n}\n\n/**\n * Проверка доступности Rapier.js\n * @returns {boolean} - результат проверки\n */\nexport function isRapierAvailable() {\n    return typeof RAPIER !== 'undefined' || \n           (typeof window !== 'undefined' && window.RAPIER);\n}\n\n/**\n * Получение экземпляра Rapier.js\n * @returns {Object|null} - объект Rapier.js или null, если он не загружен\n */\nexport function getRapier() {\n    if (typeof RAPIER !== 'undefined') {\n        return RAPIER;\n    }\n    \n    if (typeof window !== 'undefined' && window.RAPIER) {\n        return window.RAPIER;\n    }\n    \n    return null;\n}","// client/src/core/renderer.js\n\n/**\n * Класс отвечающий за рендеринг игры с использованием Three.js\n */\nexport class Renderer {\n    /**\n     * @param {HTMLCanvasElement} canvas - DOM элемент canvas для рендеринга\n     */\n    constructor(canvas) {\n        this.canvas = canvas;\n        this.scene = null;\n        this.camera = null;\n        this.renderer = null;\n        this.lights = [];\n        this.models = {}; // Хранилище для загруженных моделей\n        this.textures = {}; // Хранилище для загруженных текстур\n        \n        // Элементы для системы видимости\n        this.visionSystem = null;\n        this.temporaryObjects = []; // Временные объекты (лучи, эффекты)\n    }\n\n    /**\n     * Настройка сцены, камеры и рендерера\n     */\n    setupScene() {\n        // Создание сцены\n        this.scene = new THREE.Scene();\n        this.scene.background = new THREE.Color(0x87CEEB); // Цвет неба\n        \n        // Создание камеры (перспективная, вид сверху)\n        const aspect = window.innerWidth / window.innerHeight;\n        this.camera = new THREE.PerspectiveCamera(75, aspect, 0.1, 1000);\n        this.camera.position.set(0, 30, 30); // Позиция над землей\n        this.camera.lookAt(0, 0, 0); // Направлена на игрока\n        \n        // Создание рендерера\n        this.renderer = new THREE.WebGLRenderer({\n            canvas: this.canvas,\n            antialias: true\n        });\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n        this.renderer.shadowMap.enabled = true;\n        \n        // Добавление освещения\n        this.setupLights();\n        \n        // Создание земли\n        this.createGround();\n        \n        // Инициализируем пустой объект для системы видимости\n        // Она будет инициализирована позже в Game.initVisionSystem()\n        this.visionSystem = null;\n        \n        // Обработчик изменения размера окна\n        window.addEventListener('resize', () => {\n            this.camera.aspect = window.innerWidth / window.innerHeight;\n            this.camera.updateProjectionMatrix();\n            this.renderer.setSize(window.innerWidth, window.innerHeight);\n        });\n    }\n    \n    /**\n     * Настройка освещения сцены\n     */\n    setupLights() {\n        // Основной направленный свет (имитация солнца)\n        const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n        directionalLight.position.set(10, 30, 10);\n        directionalLight.castShadow = true;\n        \n        // Настройка теней\n        directionalLight.shadow.mapSize.width = 2048;\n        directionalLight.shadow.mapSize.height = 2048;\n        directionalLight.shadow.camera.near = 0.5;\n        directionalLight.shadow.camera.far = 100;\n        directionalLight.shadow.camera.left = -50;\n        directionalLight.shadow.camera.right = 50;\n        directionalLight.shadow.camera.top = 50;\n        directionalLight.shadow.camera.bottom = -50;\n        \n        this.scene.add(directionalLight);\n        this.lights.push(directionalLight);\n        \n        // Рассеянный свет (чтобы тени не были слишком темными)\n        const ambientLight = new THREE.AmbientLight(0x505050, 0.7);\n        this.scene.add(ambientLight);\n        this.lights.push(ambientLight);\n    }\n    \n    /**\n     * Создание земли (простая поверхность для прототипа)\n     */\n    createGround() {\n        const groundGeometry = new THREE.PlaneGeometry(1000, 1000, 100, 100);\n        const groundMaterial = new THREE.MeshStandardMaterial({\n            color: 0x3e6539, // Зеленый цвет земли\n            roughness: 1,\n            metalness: 0\n        });\n        \n        const ground = new THREE.Mesh(groundGeometry, groundMaterial);\n        ground.rotation.x = -Math.PI / 2; // Разворот плоскости горизонтально\n        ground.position.y = -0.5;\n        ground.receiveShadow = true;\n        \n        this.scene.add(ground);\n    }\n    \n    /**\n     * Создание временного луча для визуализации выстрела\n     * @param {Object} start - начальная точка луча\n     * @param {Object} end - конечная точка луча\n     * @param {number} color - цвет луча\n     * @param {number} duration - длительность отображения в миллисекундах\n     */\n    createTemporaryBeam(start, end, color = 0xFF0000, duration = 100) {\n        // Создаем материал для луча\n        const material = new THREE.LineBasicMaterial({\n            color: color,\n            transparent: true,\n            opacity: 0.8\n        });\n        \n        // Создаем геометрию\n        const geometry = new THREE.BufferGeometry();\n        const points = [\n            new THREE.Vector3(start.x, start.y, start.z),\n            new THREE.Vector3(end.x, end.y, end.z)\n        ];\n        geometry.setFromPoints(points);\n        \n        // Создаем линию\n        const line = new THREE.Line(geometry, material);\n        this.scene.add(line);\n        \n        // Добавляем в список временных объектов\n        const tempObject = {\n            object: line,\n            endTime: Date.now() + duration\n        };\n        this.temporaryObjects.push(tempObject);\n        \n        // Устанавливаем таймер для удаления\n        setTimeout(() => {\n            this.removeTemporaryObject(tempObject);\n        }, duration);\n    }\n    \n    /**\n     * Удаление временного объекта\n     * @param {Object} tempObject - временный объект для удаления\n     */\n    removeTemporaryObject(tempObject) {\n        if (!tempObject || !tempObject.object) return;\n        \n        // Удаляем со сцены\n        this.scene.remove(tempObject.object);\n        \n        // Удаляем из списка\n        const index = this.temporaryObjects.indexOf(tempObject);\n        if (index !== -1) {\n            this.temporaryObjects.splice(index, 1);\n        }\n        \n        // Освобождаем ресурсы\n        if (tempObject.object.geometry) {\n            tempObject.object.geometry.dispose();\n        }\n        if (tempObject.object.material) {\n            tempObject.object.material.dispose();\n        }\n    }\n    \n    /**\n     * Очистка устаревших временных объектов\n     */\n    cleanTemporaryObjects() {\n        const now = Date.now();\n        \n        // Удаляем устаревшие объекты\n        this.temporaryObjects = this.temporaryObjects.filter(tempObj => {\n            if (tempObj.endTime <= now) {\n                this.scene.remove(tempObj.object);\n                \n                // Освобождаем ресурсы\n                if (tempObj.object.geometry) {\n                    tempObj.object.geometry.dispose();\n                }\n                if (tempObj.object.material) {\n                    tempObj.object.material.dispose();\n                }\n                \n                return false;\n            }\n            return true;\n        });\n    }\n    \n    /**\n     * Добавление игрока на сцену\n     * @param {Object} playerData - данные игрока\n     * @returns {THREE.Object3D} - объект игрока\n     */\n    addPlayer(playerData) {\n        // Создаем временную модель игрока (цилиндр)\n        const geometry = new THREE.CylinderGeometry(0.5, 0.5, 1.8, 8);\n        const material = new THREE.MeshStandardMaterial({\n            color: 0x1E90FF, // Синий цвет для игрока\n            roughness: 0.7\n        });\n        \n        const playerMesh = new THREE.Mesh(geometry, material);\n        playerMesh.position.copy(playerData.position);\n        playerMesh.castShadow = true;\n        playerMesh.receiveShadow = true;\n        \n        // Добавляем оружие (временное, упрощенное)\n        const weaponGeometry = new THREE.BoxGeometry(0.1, 0.1, 1);\n        const weaponMaterial = new THREE.MeshStandardMaterial({\n            color: 0x333333,\n            roughness: 0.5\n        });\n        \n        const weapon = new THREE.Mesh(weaponGeometry, weaponMaterial);\n        weapon.position.set(0.5, 0, 0.5); // Позиция относительно игрока\n        playerMesh.add(weapon);\n        \n        this.scene.add(playerMesh);\n        \n        return playerMesh;\n    }\n    \n    /**\n     * Обновление камеры для следования за игроком\n     * @param {Object} playerPosition - текущая позиция игрока\n     */\n    updateCamera(playerPosition) {\n        if (!this.camera) return;\n        \n        // Устанавливаем позицию камеры над игроком\n        this.camera.position.x = playerPosition.x;\n        this.camera.position.z = playerPosition.z + 30; // Немного сзади\n        \n        // Направляем камеру на игрока\n        this.camera.lookAt(playerPosition.x, playerPosition.y, playerPosition.z);\n    }\n    \n    /**\n     * Обновление трансформации объекта\n     * @param {THREE.Object3D} object - объект для обновления\n     * @param {Object} position - новая позиция\n     * @param {Object} rotation - новое вращение\n     */\n    updateObjectTransform(object, position, rotation) {\n        if (!object) return;\n        \n        // Обновляем позицию\n        if (position) {\n            object.position.x = position.x;\n            object.position.y = position.y;\n            object.position.z = position.z;\n        }\n        \n        // Обновляем вращение\n        if (rotation) {\n            object.rotation.y = rotation.y;\n        }\n    }\n    \n    /**\n     * Рендеринг сцены с учетом игрока\n     * @param {Object} player - объект игрока для системы видимости\n     */\n    render(player) {\n        if (!this.renderer || !this.scene || !this.camera) return;\n        \n        // Обновляем систему видимости, если она инициализирована и есть игрок\n        if (this.visionSystem && player) {\n            this.visionSystem.update();\n        }\n        \n        // Очищаем устаревшие временные объекты\n        this.cleanTemporaryObjects();\n        \n        // Рендерим сцену\n        this.renderer.render(this.scene, this.camera);\n    }\n    \n    /**\n     * Установка качества графики\n     * @param {string} quality - уровень качества ('low', 'medium', 'high')\n     */\n    setQuality(quality) {\n        if (!this.renderer) return;\n        \n        switch (quality) {\n            case 'low':\n                this.renderer.setPixelRatio(1);\n                this.renderer.shadowMap.enabled = false;\n                break;\n            case 'medium':\n                this.renderer.setPixelRatio(window.devicePixelRatio);\n                this.renderer.shadowMap.enabled = true;\n                this.renderer.shadowMap.type = THREE.PCFShadowMap;\n                break;\n            case 'high':\n                this.renderer.setPixelRatio(window.devicePixelRatio);\n                this.renderer.shadowMap.enabled = true;\n                this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n                break;\n        }\n    }\n    \n    /**\n     * Добавление предмета на сцену\n     * @param {Object} itemData - данные предмета\n     * @returns {THREE.Object3D} - объект предмета\n     */\n    addItem(itemData) {\n        // Создаем упрощенную модель предмета (в зависимости от типа)\n        let geometry, material;\n        \n        switch (itemData.type) {\n            case 'weapon':\n                geometry = new THREE.BoxGeometry(0.8, 0.3, 0.2);\n                material = new THREE.MeshStandardMaterial({ color: 0xFF5722 });\n                break;\n            case 'medkit':\n                geometry = new THREE.BoxGeometry(0.5, 0.3, 0.5);\n                material = new THREE.MeshStandardMaterial({ color: 0x4CAF50 });\n                break;\n            case 'ammo':\n                geometry = new THREE.BoxGeometry(0.3, 0.3, 0.3);\n                material = new THREE.MeshStandardMaterial({ color: 0xFFC107 });\n                break;\n            default:\n                geometry = new THREE.SphereGeometry(0.3, 8, 8);\n                material = new THREE.MeshStandardMaterial({ color: 0xCCCCCC });\n        }\n        \n        // Создаем меш\n        const itemMesh = new THREE.Mesh(geometry, material);\n        itemMesh.position.copy(itemData.position);\n        itemMesh.position.y = 0.2; // Чуть выше земли\n        itemMesh.castShadow = true;\n        itemMesh.receiveShadow = true;\n        \n        // Добавляем на сцену\n        this.scene.add(itemMesh);\n        \n        return itemMesh;\n    }\n    \n    /**\n     * Добавление NPC на сцену\n     * @param {Object} npcData - данные NPC\n     * @returns {THREE.Object3D} - объект NPC\n     */\n    addNPC(npcData) {\n        // Создаем модель NPC (цилиндр)\n        const geometry = new THREE.CylinderGeometry(0.5, 0.5, 1.8, 8);\n        const material = new THREE.MeshStandardMaterial({\n            color: npcData.type === 'enemy' ? 0xFF0000 : 0x00FF00,\n            roughness: 0.7\n        });\n        \n        const npcMesh = new THREE.Mesh(geometry, material);\n        npcMesh.position.copy(npcData.position);\n        npcMesh.castShadow = true;\n        npcMesh.receiveShadow = true;\n        \n        this.scene.add(npcMesh);\n        \n        return npcMesh;\n    }\n}","/**\n * Класс для управления сетевым соединением игры\n * Для прототипа будет имитировать серверное соединение\n */\nexport class NetworkManager {\n    constructor() {\n        this.socket = null;\n        this.connected = false;\n        this.serverUrl = 'wss://your-server-url.com'; // Изменить на реальный URL при деплое\n        this.mockMode = true; // Для прототипа используем мок-режим\n        \n        // Колбэки для событий\n        this.eventHandlers = {\n            connect: [],\n            disconnect: [],\n            error: [],\n            message: [],\n            playerMove: [],\n            playerShoot: [],\n            playerDamage: [],\n            itemPickup: [],\n            npcSpawn: [],\n            npcMove: [],\n            gameState: []\n        };\n        \n        // Данные для мок-режима\n        this.mockData = {\n            players: {},\n            npcs: {},\n            items: {}\n        };\n        \n        // ID игрока (для локальной игры будет фиксированным)\n        this.playerId = 'local_player';\n    }\n    \n    /**\n     * Подключение к серверу\n     * @returns {Promise} - промис подключения\n     */\n    connect() {\n        return new Promise((resolve) => {\n            // В режиме прототипа имитируем подключение\n            console.log('Запущен режим прототипа (без сервера)');\n            this.connected = true;\n            \n            // Генерируем тестовые данные\n            this.generateMockData();\n            \n            // Имитируем время загрузки\n            setTimeout(() => {\n                // Вызываем обработчики подключения\n                this.eventHandlers.connect.forEach(handler => handler());\n                \n                // Имитация движения NPC\n                this.startMockNpcMovement();\n                \n                resolve();\n            }, 500);\n        });\n    }\n    \n    /**\n     * Генерация тестовых данных для мок-режима\n     */\n    generateMockData() {\n        // Генерируем предметы на карте\n        for (let i = 0; i < 15; i++) {\n            const id = `item_${i}`;\n            const x = (Math.random() - 0.5) * 80;\n            const z = (Math.random() - 0.5) * 80;\n            \n            // Случайный тип предмета\n            const types = ['weapon', 'medkit', 'ammo'];\n            const type = types[Math.floor(Math.random() * types.length)];\n            \n            this.mockData.items[id] = {\n                id,\n                type,\n                position: { x, y: 0, z },\n                properties: {}\n            };\n        }\n        \n        // Генерируем NPC\n        for (let i = 0; i < 5; i++) {\n            const id = `npc_${i}`;\n            const x = (Math.random() - 0.5) * 80;\n            const z = (Math.random() - 0.5) * 80;\n            \n            this.mockData.npcs[id] = {\n                id,\n                type: 'enemy',\n                position: { x, y: 0, z },\n                health: 100,\n                state: 'patrol'\n            };\n        }\n    }\n    \n    /**\n     * Запуск имитации движения NPC\n     */\n    startMockNpcMovement() {\n        setInterval(() => {\n            // Для каждого NPC\n            Object.keys(this.mockData.npcs).forEach(id => {\n                const npc = this.mockData.npcs[id];\n                \n                // Случайное перемещение\n                const moveX = (Math.random() - 0.5) * 2;\n                const moveZ = (Math.random() - 0.5) * 2;\n                \n                npc.position.x += moveX;\n                npc.position.z += moveZ;\n                \n                // Проверка границ карты\n                npc.position.x = Math.max(-45, Math.min(45, npc.position.x));\n                npc.position.z = Math.max(-45, Math.min(45, npc.position.z));\n                \n                // Вызываем обработчики перемещения NPC\n                this.eventHandlers.npcMove.forEach(handler => handler({\n                    id,\n                    position: npc.position\n                }));\n            });\n        }, 1000); // Обновляем каждую секунду\n    }\n    \n    /**\n     * Регистрация обработчика события\n     * @param {string} event - название события\n     * @param {Function} handler - функция-обработчик\n     */\n    on(event, handler) {\n        if (this.eventHandlers[event]) {\n            this.eventHandlers[event].push(handler);\n        }\n    }\n    \n    /**\n     * Отправка информации о перемещении игрока\n     * @param {Object} position - новая позиция\n     * @param {Object} rotation - новое вращение\n     */\n    sendPlayerMove(position, rotation) {\n        if (!this.connected) return;\n        \n        // В мок-режиме просто сохраняем данные\n        if (this.mockMode) {\n            this.mockData.players[this.playerId] = {\n                ...this.mockData.players[this.playerId],\n                position,\n                rotation\n            };\n        }\n    }\n    \n    /**\n     * Отправка информации о выстреле игрока\n     * @param {Object} position - позиция выстрела\n     * @param {Object} direction - направление выстрела\n     * @param {string} weapon - используемое оружие\n     */\n    sendPlayerShoot(position, direction, weapon) {\n        if (!this.connected) return;\n        \n        console.log('Выстрел игрока:', { position, direction, weapon });\n        \n        // В реальной игре здесь была бы отправка данных на сервер\n    }\n    \n    /**\n     * Отправка информации о подборе предмета\n     * @param {string} itemId - ID поднятого предмета\n     * @param {string} itemType - тип предмета\n     */\n    sendItemPickup(itemId, itemType) {\n        if (!this.connected) return;\n        \n        console.log('Подбор предмета:', { itemId, itemType });\n        \n        // В мок-режиме удаляем предмет из данных\n        if (this.mockMode) {\n            delete this.mockData.items[itemId];\n        }\n    }\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// client/src/core/game.js\n\n// Импорт основных модулей\nimport { Renderer } from './renderer.js';\nimport { InputHandler } from './input.js';\nimport { NetworkManager } from './network.js';\nimport { Player } from '../entities/player.js';\nimport { HUD } from '../ui/hud.js';\nimport { InventoryUI } from '../ui/inventory.js';\nimport { PhysicsManager } from '../physics/physics-manager.js';\nimport { VisionSystem } from '../physics/vision-system.js';\n\n// Функция для логирования\nfunction log(message) {\n    if (typeof window !== 'undefined' && window.debugLog) {\n        window.debugLog('Game', message);\n    } else {\n        console.log(`[Game] ${message}`);\n    }\n}\n\n/**\n * Основной класс игры, управляющий всеми компонентами\n */\nclass Game {\n    constructor() {\n        log('Инициализация игры...');\n        \n        this.isRunning = false;\n        this.isLoading = true;\n        this.currentScene = 'loading'; // loading, menu, game\n        \n        // Элементы DOM\n        this.loadingScreen = document.getElementById('loading-screen');\n        this.mainMenu = document.getElementById('main-menu');\n        this.gameCanvas = document.getElementById('game-canvas');\n        this.hudElement = document.getElementById('hud');\n        this.inventoryScreen = document.getElementById('inventory-screen');\n        this.loadingStatus = document.getElementById('loading-status');\n        \n        // Обновляем статус загрузки\n        this.updateLoadingStatus('Инициализация игры...');\n        \n        // Отлов глобальных ошибок\n        window.addEventListener('error', this.handleGlobalError.bind(this));\n        window.addEventListener('unhandledrejection', this.handlePromiseError.bind(this));\n        \n        // Состояние игры\n        this.player = null;\n        this.entities = [];\n        \n        // Игровой таймер и физика\n        this.gameTime = 0;\n        this.physicsUpdateRate = 1/60; // 60 обновлений физики в секунду\n        this.physicsAccumulator = 0;\n        \n        // Параметры видимости\n        this.fogOfWarEnabled = true;\n        this.visibilitySystemEnabled = true;\n        \n        // Привязка контекста this к методам\n        this.update = this.update.bind(this);\n        this.fixedUpdate = this.fixedUpdate.bind(this);\n        this.startGame = this.startGame.bind(this);\n        \n        // Инициализация основных модулей с обработкой ошибок\n        this.initModules()\n            .then(() => {\n                log('Основные модули инициализированы');\n                return this.loadResources();\n            })\n            .then(() => {\n                log('Ресурсы загружены');\n                this.showMainMenu();\n            })\n            .catch(error => {\n                log(`Ошибка инициализации: ${error.message}`);\n                this.showErrorScreen(`Произошла ошибка при инициализации: ${error.message}`);\n            });\n    }\n    \n    /**\n     * Инициализация основных модулей с проверкой на ошибки\n     */\n    async initModules() {\n        try {\n            this.updateLoadingStatus('Инициализация рендерера...');\n            // Инициализация рендерера\n            this.renderer = new Renderer(this.gameCanvas);\n            \n            this.updateLoadingStatus('Инициализация обработчика ввода...');\n            // Инициализация обработчика ввода\n            this.input = new InputHandler();\n            \n            this.updateLoadingStatus('Инициализация сетевого менеджера...');\n            // Инициализация сетевого менеджера\n            this.network = new NetworkManager();\n            \n            this.updateLoadingStatus('Инициализация физического движка...');\n            // Инициализация физического движка\n            this.physics = new PhysicsManager();\n            \n            this.updateLoadingStatus('Инициализация UI компонентов...');\n            // Инициализация UI компонентов\n            this.ui = {\n                hud: new HUD(this.hudElement),\n                inventory: new InventoryUI(this.inventoryScreen)\n            };\n            \n            // Настройка обработчиков событий\n            this.setupEventListeners();\n            \n            // Запуск игрового цикла\n            this.lastFrameTime = 0;\n            \n            return true;\n        } catch (error) {\n            log(`Ошибка инициализации модулей: ${error.message}`);\n            throw error;\n        }\n    }\n    \n    /**\n     * Обновление статуса загрузки\n     * @param {string} status - текст статуса\n     */\n    updateLoadingStatus(status) {\n        if (this.loadingStatus) {\n            this.loadingStatus.textContent = status;\n        }\n        log(status);\n    }\n    \n    /**\n     * Обработка глобальных ошибок\n     * @param {ErrorEvent} event - событие ошибки\n     */\n    handleGlobalError(event) {\n        log(`Глобальная ошибка: ${event.message} в ${event.filename}:${event.lineno}`);\n        \n        // Показываем сообщение об ошибке, если игра ещё не запущена\n        if (this.currentScene === 'loading') {\n            this.showErrorScreen(`Ошибка: ${event.message}`);\n        }\n        \n        // Предотвращаем дополнительную обработку ошибки\n        event.preventDefault();\n    }\n    \n    /**\n     * Обработка необработанных ошибок промисов\n     * @param {PromiseRejectionEvent} event - событие отклонения промиса\n     */\n    handlePromiseError(event) {\n        const errorMessage = event.reason?.message || 'Неизвестная ошибка Promise';\n        log(`Необработанная ошибка Promise: ${errorMessage}`);\n        \n        // Показываем сообщение об ошибке, если игра ещё не запущена\n        if (this.currentScene === 'loading') {\n            this.showErrorScreen(`Ошибка асинхронной операции: ${errorMessage}`);\n        }\n        \n        // Предотвращаем дополнительную обработку ошибки\n        event.preventDefault();\n    }\n    \n    /**\n     * Показать экран ошибки\n     * @param {string} message - сообщение об ошибке\n     */\n    showErrorScreen(message) {\n        // Создаем экран ошибки, если он ещё не существует\n        let errorScreen = document.getElementById('error-screen');\n        if (!errorScreen) {\n            errorScreen = document.createElement('div');\n            errorScreen.id = 'error-screen';\n            errorScreen.className = 'error-overlay';\n            errorScreen.innerHTML = `\n                <div class=\"error-container\">\n                    <h2>Произошла ошибка</h2>\n                    <p id=\"error-message\">${message}</p>\n                    <button id=\"reload-button\">Перезагрузить</button>\n                </div>\n            `;\n            document.body.appendChild(errorScreen);\n            \n            // Добавляем обработчик для кнопки перезагрузки\n            const reloadButton = document.getElementById('reload-button');\n            if (reloadButton) {\n                reloadButton.addEventListener('click', () => {\n                    window.location.reload();\n                });\n            }\n            \n            // Добавляем стили для экрана ошибки\n            const style = document.createElement('style');\n            style.textContent = `\n                .error-overlay {\n                    position: fixed;\n                    top: 0;\n                    left: 0;\n                    width: 100%;\n                    height: 100%;\n                    background-color: rgba(0, 0, 0, 0.85);\n                    z-index: 9999;\n                    display: flex;\n                    justify-content: center;\n                    align-items: center;\n                }\n                .error-container {\n                    background-color: #333;\n                    padding: 20px;\n                    border: 2px solid #f44336;\n                    max-width: 80%;\n                    text-align: center;\n                }\n                .error-container h2 {\n                    color: #f44336;\n                    margin-bottom: 15px;\n                }\n                .error-container p {\n                    color: #fff;\n                    margin-bottom: 20px;\n                    font-family: monospace;\n                    white-space: pre-wrap;\n                    text-align: left;\n                }\n                #reload-button {\n                    background-color: #4CAF50;\n                    color: white;\n                    border: none;\n                    padding: 10px 20px;\n                    cursor: pointer;\n                    font-size: 16px;\n                }\n                #reload-button:hover {\n                    background-color: #45a049;\n                }\n            `;\n            document.head.appendChild(style);\n        } else {\n            // Обновляем сообщение об ошибке\n            const errorMessage = document.getElementById('error-message');\n            if (errorMessage) {\n                errorMessage.textContent = message;\n            }\n        }\n        \n        // Скрываем экран загрузки\n        if (this.loadingScreen) {\n            this.loadingScreen.classList.add('hidden');\n        }\n    }\n    \n    /**\n     * Загрузка игровых ресурсов\n     */\n    async loadResources() {\n        this.updateLoadingStatus('Инициализация физического движка...');\n        \n        try {\n            // Инициализируем физику\n            const physicsInitialized = await this.physics.init();\n            if (!physicsInitialized) {\n                throw new Error('Не удалось инициализировать физику');\n            }\n            \n            this.updateLoadingStatus('Физический движок инициализирован');\n            \n            // Здесь будет загрузка дополнительных ресурсов\n            this.updateLoadingStatus('Загрузка игровых ресурсов...');\n            \n            // Имитация загрузки (в реальной игре здесь будет загрузка assets)\n            await new Promise((resolve) => {\n                setTimeout(() => {\n                    this.isLoading = false;\n                    resolve();\n                }, 1000);\n            });\n            \n            this.updateLoadingStatus('Все ресурсы загружены успешно');\n            return true;\n        } catch (error) {\n            log(`Ошибка загрузки ресурсов: ${error.message}`);\n            throw error;\n        }\n    }\n    \n    /**\n     * Настройка обработчиков событий\n     */\n    setupEventListeners() {\n        try {\n            // Обработчики для главного меню\n            const startGameButton = document.getElementById('start-game');\n            if (startGameButton) {\n                startGameButton.addEventListener('click', this.startGame);\n            }\n            \n            const settingsButton = document.getElementById('settings');\n            if (settingsButton) {\n                settingsButton.addEventListener('click', () => {\n                    log('Настройки');\n                    // В будущем здесь будет открытие меню настроек\n                });\n            }\n            \n            // Обработчик для закрытия инвентаря\n            const closeInventoryButton = document.getElementById('close-inventory');\n            if (closeInventoryButton) {\n                closeInventoryButton.addEventListener('click', () => {\n                    this.hideInventory();\n                });\n            }\n            \n            // Обработчики клавиш\n            if (this.input) {\n                this.input.addKeyCallback('KeyI', () => {\n                    if (this.currentScene === 'game') {\n                        this.toggleInventory();\n                    }\n                });\n                \n                // Обработчик ESC для паузы\n                this.input.addKeyCallback('Escape', () => {\n                    if (this.currentScene === 'game') {\n                        this.togglePause();\n                    }\n                });\n            }\n            \n            // Интеграция с VK (если доступно)\n            if (window.vkBridge) {\n                try {\n                    window.vkBridge.send('VKWebAppInit');\n                    log('VK Bridge инициализирован');\n                } catch (e) {\n                    log(`Ошибка инициализации VK Bridge: ${e.message}`);\n                }\n            }\n            \n            // Обработчик изменения размера окна\n            window.addEventListener('resize', () => {\n                if (this.renderer) {\n                    // Перерисовываем сцену при изменении размера окна\n                    this.renderer.render(this.player);\n                }\n            });\n            \n            log('Обработчики событий настроены');\n        } catch (error) {\n            log(`Ошибка настройки обработчиков событий: ${error.message}`);\n            throw error;\n        }\n    }\n    \n    /**\n     * Показать главное меню\n     */\n    showMainMenu() {\n        if (this.loadingScreen) {\n            this.loadingScreen.classList.add('hidden');\n        }\n        if (this.mainMenu) {\n            this.mainMenu.classList.remove('hidden');\n        }\n        this.currentScene = 'menu';\n        log('Главное меню отображено');\n    }\n    \n    /**\n     * Начать игру\n     */\n    startGame() {\n        try {\n            log('Запуск игры...');\n            \n            if (this.mainMenu) {\n                this.mainMenu.classList.add('hidden');\n            }\n            if (this.gameCanvas) {\n                this.gameCanvas.classList.remove('hidden');\n            }\n            if (this.hudElement) {\n                this.hudElement.classList.remove('hidden');\n            }\n            \n            this.isRunning = true;\n            this.currentScene = 'game';\n            \n            // Инициализация сцены\n            if (this.renderer) {\n                this.renderer.setupScene();\n                log('Сцена настроена');\n            }\n            \n            // Создание тестовых стен для демонстрации системы видимости\n            this.createTestWalls();\n            \n            // Создание игрока\n            this.player = new Player({\n                position: { x: 0, y: 0, z: 0 },\n                renderer: this.renderer,\n                input: this.input,\n                game: this\n            });\n            \n            log('Игрок создан');\n            \n            // Инициализация системы видимости\n            this.initVisionSystem();\n            \n            // Подключение к серверу (в прототипе локально)\n            this.network.connect().then(() => {\n                log('Подключено к серверу (прототип)');\n            }).catch(error => {\n                log(`Ошибка подключения: ${error.message}`);\n            });\n            \n            // Запуск игрового цикла\n            this.lastFrameTime = performance.now();\n            requestAnimationFrame(this.update);\n            \n            log('Игра запущена');\n        } catch (error) {\n            log(`Ошибка при запуске игры: ${error.message}`);\n            this.showErrorScreen(`Ошибка при запуске игры: ${error.message}`);\n        }\n    }\n    \n    /**\n     * Метод для инициализации системы видимости\n     */\n    initVisionSystem() {\n        try {\n            if (!this.renderer || !this.renderer.scene || !this.player) {\n                throw new Error('Не все компоненты доступны для инициализации системы видимости');\n            }\n            \n            log('Инициализация системы видимости...');\n            \n            // Создаем систему видимости\n            const visionSystem = new VisionSystem({\n                scene: this.renderer.scene,\n                world: this.physics.getWorld(),\n                player: this.player,\n                fov: 90, // Начальный угол обзора\n                rayCount: 60, // Количество лучей\n                maxDistance: 50, // Максимальная дистанция видимости\n                memoryEnabled: true, // Запоминать посещенные области\n                blurEdges: true // Размытие краев видимости\n            });\n            \n            // Сохраняем систему видимости в рендерере\n            this.renderer.visionSystem = visionSystem;\n            \n            log('Система видимости инициализирована');\n        } catch (error) {\n            log(`Ошибка инициализации системы видимости: ${error.message}`);\n            throw error;\n        }\n    }\n    \n    /**\n     * Метод для создания тестовых стен\n     */\n    createTestWalls() {\n        try {\n            if (!this.physics || !this.physics.isReady() || !this.renderer || !this.renderer.scene) {\n                log('Физика или рендерер не готовы для создания стен');\n                return;\n            }\n            \n            log('Создание тестовых стен...');\n            \n            // Создаем материал для стен\n            const wallMaterial = new THREE.MeshStandardMaterial({\n                color: 0x808080,\n                roughness: 0.7,\n                metalness: 0.2\n            });\n            \n            // Функция для создания стены\n            const createWall = (x, z, width, depth, height = 3) => {\n                // Создаем геометрию\n                const geometry = new THREE.BoxGeometry(width, height, depth);\n                const mesh = new THREE.Mesh(geometry, wallMaterial);\n                \n                // Устанавливаем позицию\n                mesh.position.set(x, height / 2, z);\n                \n                // Добавляем на сцену\n                this.renderer.scene.add(mesh);\n                \n                // Создаем физический коллайдер\n                this.physics.createObstacle({\n                    position: { x, y: height / 2, z },\n                    size: { x: width, y: height, z: depth },\n                    object: mesh\n                });\n                \n                return mesh;\n            };\n            \n            // Создаем стены лабиринта\n            // Горизонтальные стены (границы)\n            createWall(0, -20, 40, 1);\n            createWall(-20, 0, 1, 40);\n            createWall(20, 0, 1, 40);\n            createWall(0, 20, 40, 1);\n            \n            // Внутренние стены\n            createWall(-10, -10, 1, 20);\n            createWall(10, 10, 20, 1);\n            createWall(10, -5, 1, 10);\n            createWall(-5, 5, 10, 1);\n            \n            // Препятствия\n            createWall(-15, -15, 3, 3);\n            createWall(15, -15, 3, 3);\n            createWall(15, 15, 3, 3);\n            createWall(-15, 15, 3, 3);\n            \n            log('Тестовые стены созданы');\n        } catch (error) {\n            log(`Ошибка создания тестовых стен: ${error.message}`);\n        }\n    }\n    \n    /**\n     * Переключение состояния паузы\n     */\n    togglePause() {\n        if (this.isRunning) {\n            this.pauseGame();\n        } else {\n            this.resumeGame();\n        }\n    }\n    \n    /**\n     * Остановить игру (пауза)\n     */\n    pauseGame() {\n        this.isRunning = false;\n        \n        if (this.input) {\n            this.input.disableGameControls();\n        }\n        \n        // Здесь можно добавить отображение меню паузы\n        log('Игра на паузе');\n    }\n    \n    /**\n     * Возобновить игру\n     */\n    resumeGame() {\n        this.isRunning = true;\n        \n        if (this.input) {\n            this.input.enableGameControls();\n        }\n        \n        // Скрываем меню паузы\n        log('Игра возобновлена');\n        \n        // Перезапускаем игровой цикл\n        this.lastFrameTime = performance.now();\n        requestAnimationFrame(this.update);\n    }\n    \n    /**\n     * Обновление с фиксированным шагом для физики\n     * @param {number} deltaTime - фиксированный шаг времени \n     */\n    fixedUpdate(deltaTime) {\n        try {\n            // Обновляем физику на стороне сервера (в прототипе не используется)\n            if (this.network && this.network.isConnected) {\n                // Отправка состояния на сервер\n            }\n            \n            // Обновляем состояние сущностей (NPC и др.)\n            this.entities.forEach(entity => {\n                if (entity.fixedUpdate) {\n                    entity.fixedUpdate(deltaTime);\n                }\n            });\n        } catch (error) {\n            log(`Ошибка в fixedUpdate: ${error.message}`);\n        }\n    }\n    \n    /**\n     * Обновление состояния игры\n     * @param {number} timestamp - текущий таймстамп\n     */\n    update(timestamp) {\n        if (!this.isRunning) return;\n        \n        try {\n            // Расчет дельты времени для стабильной анимации\n            const currentTime = performance.now();\n            const deltaTime = (currentTime - this.lastFrameTime) / 1000;\n            this.lastFrameTime = currentTime;\n            \n            // Ограничиваем deltaTime для предотвращения больших скачков\n            const clampedDeltaTime = Math.min(deltaTime, 0.1);\n            \n            // Увеличиваем игровое время\n            this.gameTime += clampedDeltaTime;\n            \n            // Обновление физики с фиксированным шагом\n            this.physicsAccumulator += clampedDeltaTime;\n            while (this.physicsAccumulator >= this.physicsUpdateRate) {\n                // Обновляем физический мир\n                if (this.physics && this.physics.isReady()) {\n                    this.physics.update(this.physicsUpdateRate);\n                }\n                \n                this.fixedUpdate(this.physicsUpdateRate);\n                this.physicsAccumulator -= this.physicsUpdateRate;\n            }\n            \n            // Обновление игрока\n            if (this.player) {\n                this.player.update(clampedDeltaTime);\n            }\n            \n            // Обновление других сущностей\n            this.entities.forEach(entity => {\n                if (entity.update) {\n                    entity.update(clampedDeltaTime);\n                }\n            });\n            \n            // Рендеринг сцены с передачей игрока для системы видимости\n            if (this.renderer) {\n                this.renderer.render(this.player);\n            }\n            \n            // Обновление UI\n            this.updateUI();\n            \n            // Продолжение игрового цикла\n            requestAnimationFrame(this.update);\n        } catch (error) {\n            log(`Ошибка в игровом цикле: ${error.message}`);\n            \n            // Пытаемся продолжить игровой цикл, несмотря на ошибку\n            requestAnimationFrame(this.update);\n        }\n    }\n    \n    /**\n     * Обновление пользовательского интерфейса\n     */\n    updateUI() {\n        // Обновляем HUD\n        if (this.player && this.ui.hud) {\n            this.ui.hud.update({\n                health: this.player.health,\n                ammo: this.player.ammo,\n                weapon: this.player.weapon\n            });\n        }\n    }\n    \n    /**\n     * Переключение инвентаря\n     */\n    toggleInventory() {\n        if (this.inventoryScreen.classList.contains('hidden')) {\n            this.showInventory();\n        } else {\n            this.hideInventory();\n        }\n    }\n    \n    /**\n     * Показать инвентарь\n     */\n    showInventory() {\n        this.inventoryScreen.classList.remove('hidden');\n        \n        if (this.ui.inventory) {\n            this.ui.inventory.show();\n        }\n        \n        if (this.input) {\n            this.input.disableGameControls();\n        }\n    }\n    \n    /**\n     * Скрыть инвентарь\n     */\n    hideInventory() {\n        this.inventoryScreen.classList.add('hidden');\n        \n        if (this.ui.inventory) {\n            this.ui.inventory.hide();\n        }\n        \n        if (this.input) {\n            this.input.enableGameControls();\n        }\n    }\n    \n    /**\n     * Добавление сущности в игру\n     * @param {Object} entity - сущность для добавления\n     */\n    addEntity(entity) {\n        this.entities.push(entity);\n    }\n    \n    /**\n     * Удаление сущности из игры\n     * @param {Object} entity - сущность для удаления\n     */\n    removeEntity(entity) {\n        const index = this.entities.indexOf(entity);\n        if (index !== -1) {\n            this.entities.splice(index, 1);\n        }\n    }\n    \n    /**\n     * Завершение игры\n     */\n    endGame() {\n        this.isRunning = false;\n        this.currentScene = 'menu';\n        \n        // Очистка ресурсов\n        this.entities = [];\n        \n        // Удаляем систему видимости\n        if (this.renderer && this.renderer.visionSystem) {\n            this.renderer.visionSystem.dispose();\n            this.renderer.visionSystem = null;\n        }\n        \n        // Очищаем физику\n        if (this.physics) {\n            this.physics.dispose();\n        }\n        \n        if (this.player) {\n            this.player = null;\n        }\n        \n        // Отображение главного меню\n        if (this.gameCanvas) {\n            this.gameCanvas.classList.add('hidden');\n        }\n        if (this.hudElement) {\n            this.hudElement.classList.add('hidden');\n        }\n        if (this.mainMenu) {\n            this.mainMenu.classList.remove('hidden');\n        }\n        \n        log('Игра завершена');\n    }\n}\n\n// Экспорт для доступа из других модулей\nexport { Game };\n\n// Инициализация игры при загрузке страницы\ndocument.addEventListener('DOMContentLoaded', () => {\n    try {\n        log('DOMContentLoaded: инициализация игры');\n        // Создаем игровой объект\n        window.game = new Game();\n    } catch (error) {\n        console.error('Критическая ошибка при инициализации игры:', error);\n        \n        // Показываем сообщение об ошибке\n        const errorMessage = document.createElement('div');\n        errorMessage.style.cssText = `\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            padding: 20px;\n            background-color: #f44336;\n            color: white;\n            text-align: center;\n            font-size: 18px;\n            z-index: 9999;\n        `;\n        errorMessage.textContent = `Критическая ошибка: ${error.message}`;\n        document.body.appendChild(errorMessage);\n    }\n});"],"names":["exports","Player","options","_classCallCheck","this","id","isLocalPlayer","undefined","position","x","y","z","rotation","direction","health","maxHealth","speed","weapon","ammo","weaponType","fireRate","recoil","inventory","items","maxSlots","isMoving","isRunning","isAiming","isShooting","canShoot","lastShootTime","currentState","viewAngle","normalViewAngle","aimingViewAngle","runningViewAngle","viewDistance","normalSpeed","runningSpeed","aimingSpeed","acceleration","velocity","renderer","input","game","mesh","setupControls","createModel","key","value","addPlayer","_this","setMouseDownCallback","button","startAiming","setMouseUpCallback","stopAiming","setRightClickCallback","tryShoot","setMouseMoveCallback","delta","handleMouseMove","console","log","_this2","currentTime","Date","now","setTimeout","applyRecoil","createShot","network","sendPlayerShoot","recoilX","Math","random","recoilY","abs","mousePos","getMousePosition","newMousePos","canvasRect","canvas","getBoundingClientRect","canvasCenter","left","width","top","height","mouseVec","length","sqrt","angle","atan2","sin","cos","deltaTime","handleMovement","updateCamera","handleRunning","updateAnimationState","updateModel","wasRunning","isKeyPressed","newState","concat","moveDir","getMovementDirection","normalizedDir","targetVel","newX","newZ","canMoveX","checkCollision","canMoveZ","sendPlayerMove","newPosition","scene","rayStart","_objectSpread","rayEnd","createTemporaryBeam","updateObjectTransform","_rapierIntegration","require","_typeof","o","Symbol","iterator","constructor","prototype","_slicedToArray","r","e","Array","isArray","_arrayWithHoles","l","t","n","i","u","a","f","call","next","Object","done","push","_iterableToArrayLimit","_unsupportedIterableToArray","TypeError","_nonIterableRest","_arrayLikeToArray","toString","slice","name","from","test","_regeneratorRuntime","hasOwnProperty","defineProperty","c","asyncIterator","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","s","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","resultName","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_defineProperties","_toPropertyKey","toPrimitive","String","_toPrimitive","PhysicsManager","world","bodies","Map","colliders","isInitialized","RAPIER","initPromise","_init","_callee2","_context2","_ref","_callee","_this$RAPIER$World","gravity","_context","initRapier","isRapierAvailable","error","getRapier","World","t0","_x","isReady","step","timestep","updateBodies","_step","_iterator","_n","F","_createForOfIteratorHelper","_step$value","object","body","translation","getTranslation","set","updatePhysics","err","rigidBodyDesc","size","RigidBodyDesc","fixed","setTranslation","RigidBodyType","Fixed","colliderDesc","rigidBody","createRigidBody","ColliderDesc","cuboid","Cuboid","collider","createCollider","radius","dynamic","setCanSleep","setLinearDamping","Dynamic","canSleep","linearDamping","capsule","Capsule","origin","maxDistance","ray","Ray","castRay","castRayAndGetNormal","warn","normal","offset","halfspace","HalfSpace","has","get","removeRigidBody","clear","free","VisionSystem","player","fov","rayCount","memoryEnabled","blurEdges","visibilityMask","visibilityGroup","memoryMask","visibilityShape","memoryGrid","cellSize","gridResolution","ceil","init","initVisibilityMask","initMemoryMap","THREE","Group","add","maskGeometry","PlaneGeometry","worldSize","maskMaterial","MeshBasicMaterial","color","transparent","opacity","side","DoubleSide","depthTest","depthWrite","Mesh","PI","renderOrder","Shape","fill","memoryMaskGeometry","memoryMaskMaterial","vertexColors","colors","positions","attributes","array","setAttribute","Float32BufferAttribute","playerPos","getViewDirection","getViewAngle","directionAngle","halfFov","angles","points","Vector2","endPoint","dir","raycastResult","hit","hasHit","safeDistance","toi","hitDistance","markVisitedArea","clone","updateVisibilityShape","updateMemoryMap","shape","moveTo","lineTo","outerShape","holes","geometry","dispose","ShapeGeometry","gridX","floor","gridZ","dx","dz","nx","nz","max","colorsArray","Float32Array","BufferAttribute","j","visited","needsUpdate","material","remove","HUD","element","healthBar","querySelector","ammoCounter","weaponInfo","statusMessages","messages","messageTimer","initialize","updateHealthBar","updateAmmoCounter","updateWeaponInfo","data","style","backgroundColor","textContent","message","duration","text","timestamp","updateStatusMessages","setInterval","checkMessagesTimeout","innerHTML","msg","messageElement","document","createElement","className","appendChild","hasRemovedMessages","filter","isExpired","clearInterval","classList","InventoryUI","gridElement","equippedElement","equipped","armor","helmet","createInventorySlots","createEquippedSlots","setupDragAndDrop","slot","dataset","slotIndex","label","slotInfo","slotContainer","slotType","querySelectorAll","addEventListener","updateInventoryDisplay","updateEquippedDisplay","slots","item","index","itemElement","itemId","weaponSlot","weaponElement","armorSlot","armorElement","helmetSlot","helmetElement","head","addInventoryStyles","InputHandler","mouse","isDown","rightIsDown","lastMousePosition","keyCallbacks","clickCallback","rightClickCallback","mouseMoveCallback","mouseDownCallback","mouseUpCallback","gameControlsEnabled","mouseSensitivity","handleKeyDown","bind","handleKeyUp","handleMouseDown","handleMouseUp","handleContextMenu","window","userSelect","event","code","clientX","clientY","deltaX","deltaY","preventDefault","sensitivity","callback","dirX","dirZ","removeEventListener","_createClass","_initRapier","waitForRapier","reject","attempts","checkRapier","t1","StubWorld","StubRay","Renderer","camera","lights","models","textures","visionSystem","temporaryObjects","Scene","background","Color","aspect","innerWidth","innerHeight","PerspectiveCamera","lookAt","WebGLRenderer","antialias","setSize","setPixelRatio","devicePixelRatio","shadowMap","enabled","setupLights","createGround","updateProjectionMatrix","directionalLight","DirectionalLight","castShadow","shadow","mapSize","near","far","right","bottom","ambientLight","AmbientLight","groundGeometry","groundMaterial","MeshStandardMaterial","roughness","metalness","ground","receiveShadow","start","end","LineBasicMaterial","BufferGeometry","Vector3","setFromPoints","line","Line","tempObject","endTime","removeTemporaryObject","indexOf","splice","_this3","tempObj","playerData","CylinderGeometry","playerMesh","copy","weaponGeometry","BoxGeometry","weaponMaterial","playerPosition","update","cleanTemporaryObjects","render","quality","PCFShadowMap","PCFSoftShadowMap","itemData","SphereGeometry","itemMesh","npcData","npcMesh","NetworkManager","socket","connected","serverUrl","mockMode","eventHandlers","connect","disconnect","playerMove","playerShoot","playerDamage","itemPickup","npcSpawn","npcMove","gameState","mockData","players","npcs","playerId","generateMockData","handler","startMockNpcMovement","types","properties","state","npc","moveX","moveZ","min","itemType","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","module","__webpack_modules__","_renderer","_input","_network","_player","_hud","_inventory","_physicsManager","_visionSystem","debugLog","Game","isLoading","currentScene","loadingScreen","getElementById","mainMenu","gameCanvas","hudElement","inventoryScreen","loadingStatus","updateLoadingStatus","handleGlobalError","handlePromiseError","entities","gameTime","physicsUpdateRate","physicsAccumulator","fogOfWarEnabled","visibilitySystemEnabled","fixedUpdate","startGame","initModules","loadResources","showMainMenu","showErrorScreen","_initModules","physics","ui","hud","setupEventListeners","lastFrameTime","status","filename","lineno","_event$reason","errorMessage","reason","errorScreen","reloadButton","location","reload","_loadResources","startGameButton","settingsButton","closeInventoryButton","hideInventory","addKeyCallback","toggleInventory","togglePause","vkBridge","send","setupScene","createTestWalls","initVisionSystem","performance","requestAnimationFrame","getWorld","_this4","wallMaterial","createWall","depth","createObstacle","pauseGame","resumeGame","disableGameControls","enableGameControls","isConnected","entity","clampedDeltaTime","updateUI","contains","showInventory","show","hide","cssText"],"sourceRoot":""}